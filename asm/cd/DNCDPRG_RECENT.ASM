; ���������������������������������������������������������������������������

cmd_arg_s struc	; (sizeof=0x7)
name db	3 dup(?)	; string(C)
ofs dw ?
storerest dw ?		; offset (0001F4B0)
cmd_arg_s ends

; ���������������������������������������������������������������������������

; enum cmd_args_b (bitfield)
ARG_386	 = 1
ARG_MON	 = 2
ARG_FRA	 = 4
ARG_GER	 = 8

; ���������������������������������������������������������������������������

; enum RES_SIZE
RES_MAP_SIZE  =	0C5F9h

; ���������������������������������������������������������������������������

; enum RESOURCE_NAMES

;
; �������������������������������������������������������������������������ͻ
; �	This file is generated by The Interactive Disassembler (IDA)	    �
; �	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    �
; �			 Licensed to: Freeware version			    �
; �������������������������������������������������������������������������ͼ
;
; Input	MD5   :	52A219E5CD7721BC645B54353844010B

; File Name   :	D:\Thomas\Dropbox\dev\dunecd\DNCDPRG.EXE
; Format      :	MS-DOS executable (EXE)
; Base Address:	1000h Range: 10000h-2316Ch Loaded length: 1316Ch
; Entry	Point :	1000:0


unicode		macro page,string,zero
irpc c,<string>
db '&c', page
endm
ifnb <zero>
dw zero
endif
endm

.686p
.mmx
.model large


; Segment type:	Pure code
seg000 segment byte public 'CODE' use16
assume cs:seg000
assume es:nothing, ss:seg001, ds:seg001, fs:nothing, gs:nothing



public start
start proc near
mov	ax, offset _unk_2D1CD_top_of_mem

loc_10003:		; Call Procedure
call	_sub_1E4AD_parse_command_line

call	_sub_1E594_initialize ;	Call Procedure


loc_10009:		; Call Procedure
call	sub_100B0

sti			; Set Interrupt	Flag
call	_sub_10580_play_intro ;	Call Procedure


loc_10010:		; Call Procedure
call	_sub_10309_play_CREDITS_HNM


loc_10013:		; Call Procedure
call	_sub_1021C_play_intro2

call	_sub_1AEB7_midi_func_3_0 ; Call	Procedure


loc_10019:
mov	byte_22CC0, 0
mov	word_1F4B2, 2
call	sub_10083	; Call Procedure


loc_10027:
mov	cl, 0FFh

loc_10029:		; Call Procedure
call	_sub_1B389_open_sav_cl


loc_1002C:		; Call Procedure
call	sub_11860


loc_1002F:
mov	byte_2C330, 0FFh
call	sub_1B2BE	; Call Procedure

call	sub_1D815	; Call Procedure


_1003A_exit_with_error:	; Clear	Direction Flag
cld

loc_1003B:		; Logical Exclusive OR
xor	ax, ax
int	33h		; - MS MOUSE - RESET DRIVER AND	READ STATUS
			; Return: AX = status
			; BX = number of buttons

loc_1003F:
mov	ax, seg	seg001
mov	ds, ax
call	_sub_1E8D5_uninitialize_memory_driver ;	Call Procedure


loc_10047:		; Compare Two Operands
cmp	word ptr midi_vtable_func_3+2, 0
jz	short loc_10056	; Jump if Zero (ZF=1)

call	midi_vtable_func_3 ; Indirect Call Far Procedure
call	_dword_22E3D_pcm_audio_vtable_func_2 ; Indirect	Call Far Procedure


loc_10056:
mov	ax, 3
int	10h		; - VIDEO - SET	VIDEO MODE
			; AL = mode
mov	si, _word_2316C_error_msg

loc_1005F:		; Logical Inclusive OR
or	si, si
jz	short loc_1006E	; Jump if Zero (ZF=1)


loc_10063:		; Load String
lodsb

loc_10064:		; Logical Inclusive OR
or	al, al

loc_10066:		; Jump if Zero (ZF=1)
jz	short loc_1006E


loc_10068:
mov	ah, 0Eh
int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
			; AL = character, BH = display page (alpha modes)
			; BL = foreground color	(graphics modes)
jmp	short loc_10063	; Jump

; ���������������������������������������������������������������������������

loc_1006E:
mov	ax, 0E0Dh
int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
			; AL = character, BH = display page (alpha modes)
			; BL = foreground color	(graphics modes)
mov	ax, 0E0Ah
int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
			; AL = character, BH = display page (alpha modes)
			; BL = foreground color	(graphics modes)
mov	dl, 0FFh

loc_1007A:
mov	ax, 0C06h
int	21h		; DOS -	CLEAR KEYBOARD BUFFER
			; AL must be 01h, 06h, 07h, 08h, or 0Ah.

loc_1007F:
mov	ah, 4Ch

loc_10081:		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
int	21h		; AL = exit code

start endp




sub_10083 proc near
call	_sub_1CFA0_check_amr_or_eng_language ; Call Procedure

sub_10083 endp




sub_10086 proc near
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

mov	si, offset unk_20F94
mov	bp, offset unk_2C69F
call	sub_1C097	; Call Procedure

jmp	sub_11797	; Jump

sub_10086 endp




_sub_10098_adjust_sub_resource_pointers	proc near
mov	cx, es:[di]
shr	cx, 1		; Shift	Logical	Right
mov	bx, di


loc_1009F:
mov	ax, es:[di]

loc_100A2:		; Add
add	ax, bx
stosw			; Store	String
loop	loc_1009F	; Loop while CX	!= 0

retn			; Return Near from Procedure

_sub_10098_adjust_sub_resource_pointers	endp

; ���������������������������������������������������������������������������
db    0
db    0
unk_100AA db	0
db    0
db    0
db    0
db    0
db    0



sub_100B0 proc near
call	_sub_100D1_intialize_resources ; Call Procedure

call	_sub_10169_map2_resource_func ;	Call Procedure

call	sub_1DA53	; Call Procedure

call	sub_1B17A	; Call Procedure

call	sub_1B17A	; Call Procedure


loc_100BF:		; Logical Exclusive OR
xor	ax, ax

loc_100C1:
mov	es, ax
assume es:nothing

loc_100C3:		; Master clock count
mov	ax, es:46Ch

loc_100C7:
mov	word ptr _unk_2CCD4_bios_timer_count_1,	ax
mov	_unk_2CCD6_bios_timer_count_2, ax

loc_100CD:
mov	_unk_2CCD8_bios_timer_count_3, ax
retn			; Return Near from Procedure

sub_100B0 endp




_sub_100D1_intialize_resources proc near
push	ds
pop	es
assume es:seg001

loc_100D3:
mov	di, offset RESOURCE_TABLAT
mov	si, 0BAh ; '�'  ; TABLAT.BIN
call	_sub_1F0B9_open_resource_by_index_si ; reads and decompresses to es:di

mov	cx, 18Ch
mov	si, di


loc_100E1:		; Load String
lodsw
xchg	ah, al		; Exchange Register/Memory with	Register
stosw			; Store	String
loop	loc_100E1	; Loop while CX	!= 0


loc_100E7:
mov	di, offset unk_23D30
mov	cx, 63h	; 'c'
mov	si, offset word_23DFA


loc_100F0:		; Logical Exclusive OR
xor	ax, ax
mov	dx, 1

loc_100F5:
mov	bx, [si]
shl	bx, 1		; Shift	Logical	Left
div	bx		; Unsigned Divide
cmp	[si], dx	; Compare Two Operands
adc	ax, 0		; Add with Carry
stosw			; Store	String
add	si, 8		; Add
loop	loc_100F0	; Loop while CX	!= 0

mov	si, 0BFh ; '�'  ; MAP.HSQ
call	_sub_1F0B9_open_resource_by_index_si ; reads and decompresses to es:di

mov	ax, di
add	ax, 62FCh	; Add
mov	word ptr _unk_2D1AE_res_map, ax
mov	word ptr _unk_2D1AE_res_map+2, es
push	ds
pop	es
mov	di, offset _word_29F26_res_dialogue_ofs
mov	si, 0BDh ; '�'  ; DIALOGUE.HSQ
call	_sub_1F0A0_open_resource_force_hsq ; Call Procedure

call	_sub_10098_adjust_sub_resource_pointers	; Call Procedure

mov	si, 0BCh ; '�'  ; CONDIT.HSQ
call	_sub_1F0B9_open_resource_by_index_si ; reads and decompresses to es:di

mov	_word_29F22_res_condit_ofs, di
mov	_word_29F24_res_condit_seg, es
call	_sub_10098_adjust_sub_resource_pointers	; Call Procedure

les	ax, dword ptr _word_22E67_allocator_next_free_ofs ; Load Full Pointer to ES:xx
assume es:nothing
mov	word ptr dword_23C5C, ax
mov	word ptr dword_23C5C+2,	es
mov	cx, 7500

loc_10145:		; Call Procedure
call	_sub_1F0FF_bump_allocate_bump_cx_bytes

les	ax, dword ptr _word_22E67_allocator_next_free_ofs ; Load Full Pointer to ES:xx

loc_1014C:
mov	word ptr dword_23C60, ax
mov	word ptr dword_23C60+2,	es
mov	cx, 44500
call	_sub_1F0FF_bump_allocate_bump_cx_bytes ; Call Procedure

call	sub_1CFB9	; Call Procedure


loc_1015C:		; Jump
jmp	_sub_1C137_load_icons_sprites

_sub_100D1_intialize_resources endp

; ���������������������������������������������������������������������������
word_1015F dw 0
dw 0
dw 0
dw 0
word_10167 dw 0



_sub_10169_map2_resource_func proc near
mov	ax, 3Ah	; ':'
call	_sub_1C13E_open_sprite_sheet ; MAP2.HSQ

push	ds
pop	es
assume es:seg001
mov	di, offset RESOURCE_GLOBDATA
push	di
mov	ax, 7
mov	cx, 100h
rep stosw		; Store	String
pop	di

loc_1017E:		; Load Full Pointer to ES:xx
les	si, _dword_2D060_sprite_sheet_resource_ptr
assume es:nothing
mov	cx, RES_MAP_SIZE


loc_10185:		; Load String
lods	byte ptr es:[si]
mov	bx, ax
shl	bx, 1		; Shift	Logical	Left
inc	word ptr [bx+di] ; Increment by	1
loop	loc_10185	; Loop while CX	!= 0

mov	si, 100h


loc_10192:
mov	dx, [si+2]
mov	bx, [si+4]
call	sub_1B5C5	; Call Procedure

mov	[si+2],	dx
mov	[si+6],	di
or	byte ptr es:[di], 40h ;	Logical	Inclusive OR
mov	es, word ptr _dword_2D060_sprite_sheet_resource_ptr+2
mov	al, es:[di]
mov	[si+10h], al
xor	bx, bx		; Logical Exclusive OR
mov	bl, al
shl	bx, 1		; Shift	Logical	Left
mov	ax, RESOURCE_GLOBDATA[bx]
mov	cl, 4
shr	ax, cl		; Shift	Logical	Right
mov	[si+11h], al
add	si, 1Ch		; Add
cmp	byte ptr [si], 0FFh ; Compare Two Operands
jnz	short loc_10192	; Jump if Not Zero (ZF=0)

mov	di, 100h


loc_101CB:
mov	bp, 1E0h
mov	dx, [di+2]
mov	bx, [di+4]
call	sub_16603	; Call Procedure

add	di, 1Ch		; Add
cmp	byte ptr [di], 0FFh ; Compare Two Operands
jnz	short loc_101CB	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

_sub_10169_map2_resource_func endp




sub_101E0 proc near
mov	[si+4],	di
mov	[si+6],	dx
mov	[si+8],	bx
mov	al, [di]
mov	ah, [si+12h]
and	ax, 700Fh	; Logical AND
cmp	al, 3		; Compare Two Operands
jbe	short loc_10206	; Jump if Below	or Equal (CF=1 | ZF=1)

xor	ah, 80h		; Logical Exclusive OR
cmp	al, 5		; Compare Two Operands
jbe	short loc_10206	; Jump if Below	or Equal (CF=1 | ZF=1)

xor	ah, 80h		; Logical Exclusive OR

loc_101FF:		; Compare Two Operands
cmp	al, 9
jbe	short loc_10206	; Jump if Below	or Equal (CF=1 | ZF=1)

xor	ah, 80h		; Logical Exclusive OR


loc_10206:		; Logical Inclusive OR
or	al, ah

loc_10208:
mov	[si+12h], al
retn			; Return Near from Procedure

sub_101E0 endp

; ���������������������������������������������������������������������������
dw offset sub_102DE
dw offset sub_102E3
dw offset sub_1094A
dw offset sub_102F8
dw offset sub_102FB
dw offset sub_102E3
dw offset sub_102F8
dw offset sub_102FE



_sub_1021C_play_intro2 proc near
mov	byte_21D4E, offset unk_1F53C
mov	byte_21D97, 1
jz	short loc_10292	; Jump if Zero (ZF=1)

call	sub_1AD50	; Call Procedure

mov	ax, offset unk_1F898
mov	si, 1


loc_10231:
push	si
mov	bp, offset word_1F771
call	sub_1C102	; start	scene

call	sub_1ADE0	; Call Procedure

pop	ax
push	ax
call	sub_1AB4F	; Call Procedure

pop	si
call	sub_1DE54	; Call Procedure

jz	short loc_10292	; Jump if Zero (ZF=1)

push	si
mov	ax, 320h
mov	ax, 0FA0h
call	sub_1DDB0	; run scene

pushf			; Push Flags Register onto the Stack
call	sub_10911	; Call Procedure

call	_sub_1AC14_pcm_stop_voc_q ; Call Procedure

call	sub_1ADED	; Call Procedure

popf			; Pop Stack into Flags Register
pop	si
jz	short loc_10292	; Jump if Zero (ZF=1)

inc	si		; Increment by 1
cmp	si, 8		; Compare Two Operands
jbe	short loc_10231	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	bp, offset sub_10301
mov	al, 10h
call	_sub_1C108_transition ;	Call Procedure

mov	ax, offset unk_1F578
call	sub_1DDB0	; fade to night

mov	bl, 0Ch
call	sub_138F1	; Call Procedure

mov	byte_23B8F, 1
mov	ax, offset unk_1F960
call	sub_1DDB0	; fade night to	day

call	sub_13950	; Call Procedure

mov	byte_23B8F, 0
mov	bp, offset _sub_1C0AD_gfx_clear_frame_buffer
mov	al, 10h
call	_sub_1C108_transition ;	Call Procedure


loc_10292:
mov	es, _word_2D088_vga_base_a000
call	_ptr_22D65_gfx_vtable_func_08 ;	Indirect Call Far Procedure
call	_sub_1AC14_pcm_stop_voc_q ; Call Procedure

mov	byte_2172D, 0
mov	byte_1F575, 0
call	sub_10911	; Call Procedure

mov	byte_21D97, 0

loc_102AF:
mov	byte_2D096, 6
inc	byte ptr unk_1F5C5 ; Increment by 1
mov	dx, 200Ah
mov	bx, 180h
jmp	sub_108F0	; Jump

_sub_1021C_play_intro2 endp




sub_102C1 proc near
push	si
call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

add	si, si		; Add
mov	bp, cs:[si+20Ah]
call	bp		; Indirect Call	Near Procedure
pop	ax
add	ax, 117h	; Add
call	sub_1D068	; Call Procedure

call	sub_19901	; Call Procedure

call	sub_188AF	; Call Procedure

jmp	sub_19901	; Jump

sub_102C1 endp




sub_102DE proc near
xor	cx, cx		; Logical Exclusive OR

sub_102DE endp



; Attributes: thunk

sub_102E0 proc near
jmp	sub_10A44	; Jump

sub_102E0 endp




sub_102E3 proc near
mov	cx, 20h	; ' '
call	sub_102E0	; Call Procedure

call	sub_1B8A7	; Call Procedure

call	sub_1B85A	; Call Procedure

mov	ax, 2Ch	; ','
call	_sub_1C13E_open_sprite_sheet ; STARS.HSQ

jmp	sub_1B8EA	; Jump

sub_102E3 endp



; Attributes: thunk

sub_102F8 proc near
jmp	sub_107EE	; Jump

sub_102F8 endp



; Attributes: thunk

sub_102FB proc near
jmp	sub_109AD	; Jump

sub_102FB endp



; Attributes: thunk

sub_102FE proc near
jmp	sub_1076A	; Jump

sub_102FE endp




sub_10301 proc near
call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

mov	al, 1Bh
jmp	sub_1C2F2	; Jump

sub_10301 endp




_sub_10309_play_CREDITS_HNM proc near
jz	short loc_10331	; Jump if Zero (ZF=1)

call	sub_1DE4E	; Call Procedure

call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

mov	ax, 24
call	_ptr_22D65_gfx_vtable_func_set_global_y_offset ; Indirect Call Far Procedure
mov	bp, offset _sub_109EF_play_CREDITS_HNM
call	sub_1C102	; Call Procedure

call	sub_1AD50	; Call Procedure


loc_10324:		; Call Procedure
call	sub_10A16

call	_sub_1CC85_check_if_hnm_complete ; Call	Procedure

jnz	short loc_10331	; Jump if Not Zero (ZF=0)

call	_sub_1DD63_stc_on_user_input ; Call Procedure

jnb	short loc_10324	; Jump if Not Below (CF=0)


loc_10331:		; Push Flags Register onto the Stack
pushf
call	_sub_10579_clear_global_y_offset ; Call	Procedure

popf			; Pop Stack into Flags Register
retn			; Return Near from Procedure

_sub_10309_play_CREDITS_HNM endp

; ���������������������������������������������������������������������������
_word_10337_intro_script dw 0000h
dw offset _sub_1061C_load_VIRGIN_HNM
dw 0
dw 3Ah
dw offset _sub_10625_play_VIRGIN_HNM
dw 1
dw 0
dw offset _sub_1C0AD_gfx_clear_frame_buffer
dw 0
dw 3Ah
dw offset nullsub_1
dw 1
dw 0
dw offset _sub_1064D_load_CRYO_HNM
dw 0
dw 30h
dw offset _sub_10661_play_CRYO_OR_CRYO2_HNM
dw 1
dw 0
dw offset _sub_10658_load_CRYO2_HNM
dw 6Fh
dw 30h
dw offset _sub_10661_play_CRYO_OR_CRYO2_HNM
dw 1
dw 0
dw offset nullsub_1
dw 0A8h
dw 0FFFFh
dw offset nullsub_1
dw 1
dw 0
dw offset _sub_10678_load_PRESENT_HNM
dw 0
dw 3Ah
dw offset _sub_10684_play_PRESENT_HNM
dw 1
dw 0
dw offset _sub_1CEFC_load_IRULn_HSQ
dw 0
dw 3Ah
dw offset _sub_1CF1B_play_IRULx_HSQ
dw 1
dw 0
dw offset _sub_1C0AD_gfx_clear_frame_buffer
dw 0
dw 3Ah
dw offset nullsub_1
dw 1
dw 0
dw offset _sub_1069E_load_INTRO_HNM
dw 0
dw 36h
dw offset nullsub_1
dw 190h
dw 0
dw offset nullsub_1
dw 90h
dw 30h
dw offset _sub_106AA_play_hnm_86_frames
dw 190h
dw 0
dw offset nullsub_1
dw 10Ch
dw 0FFFFh
dw offset _sub_106BD_play_hnm_skippable
dw 1
dw 0
dw offset sub_107FD
dw 0
dw 3Ah
dw offset loc_1085D
dw 4B0h
dw 148h
dw offset sub_106CE
dw 14Eh
dw 10h
dw offset sub_10704
dw 1900h
dw 24Bh
dw offset sub_10972
dw 24Eh
dw 10h
dw offset nullsub_1
dw 85h
dw 0
dw offset sub_1098A
dw 258h
dw 10h
dw offset nullsub_1
dw 85h
dw 0
dw offset sub_10995
dw 262h
dw 10h
dw offset loc_10798
dw 258h
dw 2CAh
dw offset sub_10771
dw 2CFh
dw 10h
dw offset loc_10798
dw 258h
dw 32Eh
dw offset sub_107EE
dw 330h
dw 10h
dw offset nullsub_1
dw 0C8h
dw 33Ch
dw offset sub_109A5
dw 344h
dw 10h
dw offset nullsub_1
dw 85h
dw 0
dw offset sub_106D3
dw 34Eh
dw 10h
dw offset sub_10704
dw 2648h
dw 4BEh
dw offset sub_1077C
dw 4C0h
dw 10h
dw offset nullsub_1
dw 85h
dw 0
dw offset sub_10788
dw 4D0h
dw 0FFFFh
dw offset sub_1078D
dw 258h
dw 50Ch
dw offset sub_107A3
dw 510h
dw 10h
dw offset loc_10798
dw 258h
dw 54Ch
dw offset sub_107C6
dw 550h
dw 10h
dw offset loc_10798
dw 258h
dw 588h
dw offset sub_10868
dw 58Fh
dw 10h
dw offset sub_1087B
dw 320h
dw 5ACh
dw offset sub_10886
dw 5AEh
dw 30h
dw offset loc_10798
dw 258h
dw 5EEh
dw offset sub_109AD
dw 5F0h
dw 30h
dw offset loc_10798
dw 258h
dw 614h
dw offset nullsub_1
dw 0
dw 0FFFFh
dw offset sub_108B6
dw 32h
dw 61Eh
dw offset sub_10ACD
dw 61Eh
dw 10h
dw offset nullsub_1
dw 7D0h
dw 64Ch
dw offset sub_106D8
dw 0
dw 10h
dw offset sub_106FC
dw 0C80h
dw 6C6h
dw offset sub_10740
dw 6C8h
dw 3Ah
dw offset nullsub_1
dw 190h
dw 0
dw offset sub_1075A
dw 6EEh
dw 10h
dw offset nullsub_1
dw 190h
dw 0
dw offset sub_10752
dw 6FEh
dw 10h
dw offset nullsub_1
dw 190h
dw 0
dw offset sub_1073C
dw 70Eh
dw 10h
dw offset nullsub_1
dw 190h
dw 0
dw offset sub_10756
dw 72Eh
dw 10h
dw offset nullsub_1
dw 190h
dw 0
dw offset sub_1075E
dw 73Eh
dw 10h
dw offset nullsub_1
dw 190h
dw 0
dw offset sub_10737
dw 74Eh
dw 10h
dw offset nullsub_1
dw 190h
dw 0
dw offset sub_10747
dw 76Eh
dw 10h
dw offset nullsub_1
dw 190h
dw 0
dw offset sub_107E0
dw 77Eh
dw 10h
dw offset nullsub_1
dw 4B0h
dw 7ACh
dw offset sub_106EA
dw 7AFh
dw 10h
dw offset sub_10704
dw 3E8h
dw 7CEh
dw offset sub_1074B
dw 7CEh
dw 10h
dw offset nullsub_1
dw 190h
dw 0
dw offset sub_10711
dw 7DCh
dw 3Ah
dw offset sub_1071D
dw 1
dw 0
dw offset sub_1076A
dw 81Ch
dw 3Ah
dw offset nullsub_1
dw 190h
dw 0
dw offset sub_10762
dw 83Eh
dw 10h
dw offset nullsub_1
dw 190h
dw 0
dw offset sub_10766
dw 84Eh
dw 10h
dw offset nullsub_1
dw 0C8h
dw 0
dw offset _sub_1C0AD_gfx_clear_frame_buffer
dw 85Eh
dw 3Ah
dw offset nullsub_1
dw 1
dw 0
dw offset sub_1076A
dw 85Eh
dw 36h
dw offset nullsub_1
dw 190h
dw 0
dw offset _sub_1C0AD_gfx_clear_frame_buffer
dw 8E0h
dw 38h
dw offset nullsub_1
dw 1
dw 0FFFFh



_sub_10579_clear_global_y_offset proc near
xor	ax, ax		; Logical Exclusive OR
call	_ptr_22D65_gfx_vtable_func_set_global_y_offset ; Indirect Call Far Procedure
retn			; Return Near from Procedure

_sub_10579_clear_global_y_offset endp




_sub_10580_play_intro proc near
call	sub_1DE54	; Call Procedure

jz	short loc_105FD	; Jump if Zero (ZF=1)

call	_ptr_22D65_gfx_vtable_func_41_copy_pal2_to_pal1	; Indirect Call	Far Procedure
call	_sub_1AEB7_midi_func_3_0 ; Call	Procedure

mov	si, offset _word_10337_intro_script
call	_sub_10945_intro_script_set_offset ; Call Procedure


loc_10592:
mov	ax, 24
call	_ptr_22D65_gfx_vtable_func_set_global_y_offset ; Indirect Call Far Procedure
call	_sub_1093F_intro_script_load_word ; Call Procedure

mov	bx, ax
inc	ax		; Increment by 1
jnz	short loc_105A3	; Jump if Not Zero (ZF=0)

jmp	short _sub_10580_play_intro ; Jump

; ���������������������������������������������������������������������������

loc_105A3:		; Call Procedure
call	_sub_1DE0C_check_user_input_qq

jb	short loc_105FD	; Jump if Below	(CF=1)

call	sub_10911	; Call Procedure

call	_ptr_22D65_gfx_vtable_func_41_copy_pal2_to_pal1	; Indirect Call	Far Procedure
call	_sub_1093F_intro_script_load_word ; Call Procedure

mov	bp, ax
call	sub_1C097	; Call Procedure

and	byte ptr unk_23C81, 7Fh	; Logical AND
call	sub_139E6	; Call Procedure

call	_sub_1093F_intro_script_load_word ; Call Procedure

mov	bx, ax
call	_sub_1DE0C_check_user_input_qq ; Call Procedure

jb	short loc_105FD	; Jump if Below	(CF=1)

call	_sub_1093F_intro_script_load_word ; Call Procedure

or	ax, ax		; Logical Inclusive OR
js	short loc_105DC	; Jump if Sign (SF=1)

mov	bp, offset nullsub_1
call	_sub_1C108_transition ;	fade out

call	sub_1C0F4	; load and fade	in

call	sub_13A7C	; Call Procedure


loc_105DC:		; Call Procedure
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer

or	byte ptr unk_23C81, 80h	; Logical Inclusive OR
call	_sub_1DD63_stc_on_user_input ; Call Procedure

jb	short loc_105FD	; Jump if Below	(CF=1)

call	_sub_1093F_intro_script_load_word ; Call Procedure

clc			; Clear	Carry Flag
call	ax		; play video
jb	short loc_105FD	; Jump if Below	(CF=1)

call	_sub_1093F_intro_script_load_word ; Call Procedure

or	ax, ax		; Logical Inclusive OR
jz	short loc_10592	; Jump if Zero (ZF=1)

call	sub_1DDF0	; Call Procedure

jnb	short loc_10592	; Jump if Not Below (CF=0)


loc_105FD:		; Push Flags Register onto the Stack
pushf
call	sub_19985	; Call Procedure

mov	es, _word_2D088_vga_base_a000
call	_ptr_22D65_gfx_vtable_func_08 ;	Indirect Call Far Procedure
popf			; Pop Stack into Flags Register
pushf			; Push Flags Register onto the Stack
call	_sub_10579_clear_global_y_offset ; Call	Procedure

call	_sub_1CA01_hnm_close_resource ;	Call Procedure

mov	word_1F4B2, 2
call	sub_10911	; Call Procedure

popf			; Pop Stack into Flags Register
retn			; Return Near from Procedure

_sub_10580_play_intro endp




_sub_1061C_load_VIRGIN_HNM proc	near
call	_sub_1AD57_play_music_MORNING_HSQ ; Call Procedure

mov	ax, 21
jmp	_sub_1CA1B_hnm_load ; VIRGIN.HNM

_sub_1061C_load_VIRGIN_HNM endp




_sub_10625_play_VIRGIN_HNM proc	near
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure


loc_10628:		; Call Procedure
call	_sub_1DD63_stc_on_user_input

jb	short locret_1064C ; Jump if Below (CF=1)

call	_sub_1C9F4_do_frame_and_check_if_frame_advanced	; Call Procedure

jz	short loc_10628	; Jump if Zero (ZF=1)

call	_sub_1C4CD_gfx_copy_framebuf_to_screen ; Call Procedure

cmp	word_2D07E, 8	; Compare Two Operands
jb	short loc_10646	; Jump if Below	(CF=1)

cmp	byte ptr unk_2D07B, 0 ;	Compare	Two Operands
jz	short loc_10646	; Jump if Zero (ZF=1)

call	_sub_1AEB7_midi_func_3_0 ; Call	Procedure


loc_10646:		; Call Procedure
call	_sub_1CC85_check_if_hnm_complete

jz	short loc_10628	; Jump if Zero (ZF=1)

clc			; Clear	Carry Flag


locret_1064C:		; Return Near from Procedure
retn

_sub_10625_play_VIRGIN_HNM endp




_sub_1064D_load_CRYO_HNM proc near
mov	al, 0Ah
call	_loc_1AD95_play_music ;	Call Procedure

mov	ax, 22
jmp	_sub_1CA1B_hnm_load ; CRYO.HNM

_sub_1064D_load_CRYO_HNM endp




_sub_10658_load_CRYO2_HNM proc near
call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

mov	ax, 23
jmp	_sub_1CA1B_hnm_load ; CRYO2.HNM

_sub_10658_load_CRYO2_HNM endp




_sub_10661_play_CRYO_OR_CRYO2_HNM proc near
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure


_loc_10664_frame_loop:	; Call Procedure
call	_sub_1DD63_stc_on_user_input

jb	short locret_1064C ; Jump if Below (CF=1)

call	_sub_1C9F4_do_frame_and_check_if_frame_advanced	; Call Procedure

jz	short _loc_10664_frame_loop ; Jump if Zero (ZF=1)

call	_sub_1C4CD_gfx_copy_framebuf_to_screen ; Call Procedure

call	_sub_1CC85_check_if_hnm_complete ; Call	Procedure

jz	short _loc_10664_frame_loop ; Jump if Zero (ZF=1)

clc			; Clear	Carry Flag
retn			; Return Near from Procedure

_sub_10661_play_CRYO_OR_CRYO2_HNM endp




_sub_10678_load_PRESENT_HNM proc near
call	_sub_10579_clear_global_y_offset ; Call	Procedure

call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

mov	ax, 24
jmp	_sub_1CA1B_hnm_load ; PRESENT.HNM

_sub_10678_load_PRESENT_HNM endp




_sub_10684_play_PRESENT_HNM proc near
jmp	short _sub_106BD_play_hnm_skippable ; Jump

_sub_10684_play_PRESENT_HNM endp

; ���������������������������������������������������������������������������
nop			; No Operation



sub_10687 proc near
call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

mov	si, 14F0h
jmp	short loc_10695	; Jump

; ���������������������������������������������������������������������������
call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

mov	si, 14F8h


loc_10695:
mov	ax, 1Ch
call	_sub_1C13E_open_sprite_sheet ; libre

jmp	sub_1C21B	; Jump

sub_10687 endp




_sub_1069E_load_INTRO_HNM proc near
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

call	_sub_10579_clear_global_y_offset ; Call	Procedure

mov	ax, 15
jmp	_sub_1CA1B_hnm_load ; INTRO.HNM

_sub_1069E_load_INTRO_HNM endp




_sub_106AA_play_hnm_86_frames proc near
call	_sub_10579_clear_global_y_offset ; Call	Procedure

call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure


loc_106B0:		; Call Procedure
call	_sub_1C9E8_hnm_do_frame_skippable

jb	short locret_106BC ; Jump if Below (CF=1)

cmp	_word_2D098_hnm_frame_counter, 86 ; Compare Two	Operands
jnz	short loc_106B0	; Jump if Not Zero (ZF=0)


locret_106BC:		; Return Near from Procedure
retn

_sub_106AA_play_hnm_86_frames endp




_sub_106BD_play_hnm_skippable proc near
call	_sub_10579_clear_global_y_offset ; Call	Procedure

call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure


loc_106C3:		; Call Procedure
call	_sub_1C9E8_hnm_do_frame_skippable

jb	short locret_106BC ; Jump if Below (CF=1)

call	_sub_1CC85_check_if_hnm_complete ; Call	Procedure

jz	short loc_106C3	; Jump if Zero (ZF=1)

retn			; Return Near from Procedure

_sub_106BD_play_hnm_skippable endp




sub_106CE proc near
mov	ax, 10h
jmp	short loc_106F3	; Jump

sub_106CE endp




sub_106D3 proc near
mov	ax, 11h
jmp	short loc_106F3	; Jump

sub_106D3 endp




sub_106D8 proc near
call	_sub_1AC14_pcm_stop_voc_q ; Call Procedure

mov	al, 1
mov	byte_23B8F, al
mov	bl, 12h
call	loc_138A2	; Call Procedure

mov	ax, 12h
jmp	short loc_106F3	; Jump

sub_106D8 endp




sub_106EA proc near
mov	word_1F4B4, 2
mov	ax, 19


loc_106F3:		; Add
add	_word_2D08A_framebuffer_active,	480
jmp	_sub_1CA1B_hnm_load ; PLANT.HNM

sub_106EA endp




sub_106FC proc near
mov	byte_23B87, 3Fh	; '?'
call	loc_13901	; Call Procedure

sub_106FC endp




sub_10704 proc near
xor	bp, bp		; Logical Exclusive OR
mov	si, 70Ch
call	sub_1DA25	; Call Procedure


loc_1070C:		; Call Procedure
call	_sub_1CA60_hnm_do_frame

clc			; Clear	Carry Flag
retn			; Return Near from Procedure

sub_10704 endp




sub_10711 proc near
add	_word_2D08A_framebuffer_active,	480 ; Add
mov	ax, 14
jmp	_sub_1CA1B_hnm_load ; VER.HNM

sub_10711 endp




sub_1071D proc near
mov	al, 8
call	_sub_1AB15_audio_start_voc ; Play SN8.VOC

jmp	short loc_1072C	; Jump

; ���������������������������������������������������������������������������

loc_10724:		; Call Procedure
call	sub_14B16

call	sub_14937	; Call Procedure

jnz	short locret_10736 ; Jump if Not Zero (ZF=0)


loc_1072C:		; Call Procedure
call	_sub_1C9F4_do_frame_and_check_if_frame_advanced

jnz	short loc_10724	; Jump if Not Zero (ZF=0)

call	_sub_1DD63_stc_on_user_input ; Call Procedure

ja	short loc_10724	; Jump if Above	(CF=0 &	ZF=0)


locret_10736:		; Return Near from Procedure
retn

sub_1071D endp




sub_10737 proc near
mov	al, 56h	; 'V'


loc_10739:		; Jump
jmp	sub_1C2F2

sub_10737 endp




sub_1073C proc near
mov	al, 57h	; 'W'
jmp	short loc_10739	; Jump

sub_1073C endp




sub_10740 proc near
call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

mov	al, 58h	; 'X'
jmp	short loc_10739	; Jump

sub_10740 endp




sub_10747 proc near
mov	al, 59h	; 'Y'
jmp	short loc_10739	; Jump

sub_10747 endp




sub_1074B proc near
call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

mov	al, 5Ah	; 'Z'
jmp	short loc_10739	; Jump

sub_1074B endp




sub_10752 proc near
mov	al, 5Bh	; '['
jmp	short loc_10739	; Jump

sub_10752 endp




sub_10756 proc near
mov	al, 5Ch	; '\'
jmp	short loc_10739	; Jump

sub_10756 endp




sub_1075A proc near
mov	al, 5Dh	; ']'
jmp	short loc_10739	; Jump

sub_1075A endp




sub_1075E proc near
mov	al, 5Eh	; '^'
jmp	short loc_10739	; Jump

sub_1075E endp




sub_10762 proc near
mov	al, 5Fh	; '_'
jmp	short loc_10739	; Jump

sub_10762 endp




sub_10766 proc near
mov	al, 60h	; '`'
jmp	short loc_10739	; Jump

sub_10766 endp




sub_1076A proc near
call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

mov	al, 61h	; 'a'
jmp	short loc_10739	; Jump

sub_1076A endp




sub_10771 proc near

; FUNCTION CHUNK AT 099D SIZE 00000008 BYTES

mov	dx, 2004h
call	sub_10978	; Call Procedure

mov	al, 1
jmp	loc_1099D	; Jump

sub_10771 endp




sub_1077C proc near
call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

mov	bx, 1080h
mov	dx, 803h
jmp	loc_10981	; Jump

sub_1077C endp




sub_10788 proc near
mov	al, 7
jmp	loc_1099D	; Jump

sub_10788 endp




sub_1078D proc near
call	sub_1C0F4	; Call Procedure

mov	byte_2D096, 6
call	sub_1C868	; Call Procedure


loc_10798:
mov	word_23C30, 190h
call	sub_19EFD	; Call Procedure

clc			; Clear	Carry Flag
retn			; Return Near from Procedure

sub_1078D endp




sub_107A3 proc near
mov	ax, 2Eh	; '.'
call	_sub_1C13E_open_sprite_sheet ; SUNRS.HSQ

mov	si, 1500h
call	sub_1C21B	; Call Procedure

mov	ax, 1
mov	dx, 54h	; 'T'
mov	bx, 0Bh
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

call	sub_1C412	; Call Procedure

mov	al, 6
mov	bp, 12h
jmp	loc_1099D	; Jump

sub_107A3 endp




sub_107C6 proc near
mov	bx, 1080h
mov	dx, 802h
mov	word_1F4C2, 100h
call	loc_10981	; Call Procedure

mov	word_1F4C2, 0
mov	al, 5
jmp	loc_1099D	; Jump

sub_107C6 endp




sub_107E0 proc near
mov	al, 4
call	sub_1ABDB	; Call Procedure

mov	dx, 804h
mov	bx, 1080h
jmp	loc_10981	; Jump

sub_107E0 endp




sub_107EE proc near
mov	ax, 30h	; '0'
call	_sub_1C13E_open_sprite_sheet ; BACK.HSQ

mov	si, 1526h
call	sub_1C21B	; Call Procedure

jmp	loc_10960	; Jump

sub_107EE endp




sub_107FD proc near
call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure


loc_10800:
mov	bl, 8

sub_107FD endp




sub_10802 proc near
call	sub_10820	; Call Procedure

mov	cx, 240
mov	bx, 384
call	_ptr_22D65_gfx_vtable_func_02 ;	Indirect Call Far Procedure
mov	byte_23B87, 0
mov	ax, 2Eh	; '.'
call	_sub_1C13E_open_sprite_sheet ; SUNRS.HSQ

mov	si, 1500h
jmp	sub_1C21B	; Jump

sub_10802 endp




sub_10820 proc near
mov	ax, 2Eh	; '.'   ; SUNRS.HSQ
jmp	loc_13978	; Jump

sub_10820 endp




sub_10826 proc near
cmp	byte_23B87, 0	; Compare Two Operands
jnz	short loc_10854	; Jump if Not Zero (ZF=0)

mov	al, byte_23B86
inc	ax		; Increment by 1
cmp	al, 0Bh		; Compare Two Operands
jz	short loc_10857	; Jump if Zero (ZF=1)

cmp	al, 0Eh		; Compare Two Operands
jz	short locret_10867 ; Jump if Zero (ZF=1)

mov	ah, 0Ah
cmp	al, 0Dh		; Compare Two Operands
jz	short loc_10841	; Jump if Zero (ZF=1)

mov	ah, 1Eh


loc_10841:
mov	byte_23B87, ah
mov	bl, al
call	sub_10820	; Call Procedure

mov	cx, 0F0h ; '�'
mov	bx, 180h
call	_ptr_22D65_gfx_vtable_func_38 ;	Indirect Call Far Procedure


loc_10854:		; Jump
jmp	loc_1391D

; ���������������������������������������������������������������������������

loc_10857:		; CHAN.HSQ
mov	ax, 9
jmp	_sub_1C13E_open_sprite_sheet ; CHAN.HSQ

; ���������������������������������������������������������������������������

loc_1085D:
mov	si, 826h
mov	bp, 9
call	sub_1DA25	; Call Procedure

clc			; Clear	Carry Flag


locret_10867:		; Return Near from Procedure
retn

sub_10826 endp




sub_10868 proc near
mov	bl, 0Bh
call	sub_10802	; Call Procedure

mov	ax, 7
mov	dx, 13h
mov	bx, 4Ah	; 'J'
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

clc			; Clear	Carry Flag
retn			; Return Near from Procedure

sub_10868 endp




sub_1087B proc near
mov	si, 826h
mov	bp, 10h
call	sub_1DA25	; Call Procedure

clc			; Clear	Carry Flag
retn			; Return Near from Procedure

sub_1087B endp




sub_10886 proc near
mov	ax, 30h	; '0'
call	_sub_1C13E_open_sprite_sheet ; BACK.HSQ

mov	si, offset unk_20920
mov	al, 0DEh ; '�'
mov	es, _word_2D08A_framebuffer_active
call	_ptr_22D65_gfx_vtable_func_10 ;	Indirect Call Far Procedure
mov	si, 154Eh
call	sub_1C21B	; Call Procedure

call	sub_15BA8	; Call Procedure

mov	si, 155Ch
call	sub_1C32F	; Call Procedure

call	sub_1C412	; Call Procedure

mov	al, 0Ah
mov	dx, 3Ah	; ':'
call	sub_109C7	; Call Procedure

jmp	sub_1978E	; Jump

sub_10886 endp




sub_108B6 proc near
mov	ax, 30h	; '0'
call	_sub_1C13E_open_sprite_sheet ; BACK.HSQ

call	sub_1C412	; Call Procedure

call	sub_15BA8	; Call Procedure

mov	dx, 0FFA0h


loc_108C5:
push	dx
call	sub_1C43E	; Call Procedure

pop	dx
mov	bx, 0Dh
mov	ax, 5
call	sub_1C305	; Call Procedure

mov	ax, 6
call	sub_1C305	; Call Procedure

push	dx
call	sub_1C4DD	; Call Procedure

pop	dx
add	dx, 20h	; ' '   ; Add
jle	short loc_108C5	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

clc			; Clear	Carry Flag
retn			; Return Near from Procedure

sub_108B6 endp




sub_108E5 proc near
mov	ax, 200h
xor	bx, bx		; Logical Exclusive OR
call	midi_vtable_func_5 ; Indirect Call Far Procedure
clc			; Clear	Carry Flag
retn			; Return Near from Procedure

sub_108E5 endp




sub_108F0 proc near
xor	al, al		; Logical Exclusive OR
mov	byte_23C54, al
mov	byte_23B8F, al
mov	word_1F4B4, dx
mov	word ptr unk_1F4B6, bx
mov	byte ptr unk_1F4B8, dh
mov	al, 1Ch
mul	bh		; Unsigned Multiplication of AL	or AX
add	ax, 0E4h ; '�'  ; Add
mov	word_205FE, ax
jmp	_sub_12D74_open_SAL_resource ; -> es:di

sub_108F0 endp




sub_10911 proc near
call	sub_139E6	; Call Procedure

call	sub_1B930	; Call Procedure

call	sub_10B21	; Call Procedure

call	sub_19985	; Call Procedure

call	sub_198E6	; Call Procedure

mov	byte_21793, 1
mov	byte_23B87, 0
mov	si, 70Ch
call	sub_1DA5F	; Call Procedure

mov	si, 3916h
call	sub_1DA5F	; Call Procedure

call	sub_10A3E	; Call Procedure

mov	si, 826h
jmp	sub_1DA5F	; Jump

sub_10911 endp




_sub_1093F_intro_script_load_word proc near
mov	si, _word_23D04_intro_script_offset
lods	word ptr cs:[si] ; Load	String

_sub_1093F_intro_script_load_word endp




_sub_10945_intro_script_set_offset proc	near
mov	_word_23D04_intro_script_offset, si
retn			; Return Near from Procedure

_sub_10945_intro_script_set_offset endp




sub_1094A proc near
call	sub_138B4	; Call Procedure

mov	ax, 2Dh	; '-'
call	_sub_1C13E_open_sprite_sheet ; INTDS.HSQ

xor	ax, ax		; Logical Exclusive OR
xor	dx, dx		; Logical Exclusive OR
mov	bx, 3Ch	; '<'
jmp	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

sub_1094A endp




sub_1095D proc near
call	sub_1094A	; Call Procedure

sub_1095D endp

; START	OF FUNCTION CHUNK FOR sub_10F08

loc_10960:		; Call Procedure
call	sub_1C412

xor	dx, dx		; Logical Exclusive OR


loc_10965:
mov	al, 2Dh	; '-'
call	sub_109C7	; Call Procedure

mov	byte ptr unk_23C3C, 1
jmp	sub_1978E	; Jump

; END OF FUNCTION CHUNK	FOR sub_10F08



sub_10972 proc near
call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

mov	dx, 2002h

sub_10972 endp




sub_10978 proc near
mov	word_1F4C2, 0


loc_1097E:
mov	bx, 180h


loc_10981:		; Call Procedure
call	sub_108F0

call	sub_137B2	; Call Procedure

jmp	sub_1C412	; Jump

sub_10978 endp




sub_1098A proc near
mov	word_1F4C2, 2
mov	dx, 2004h
jmp	short loc_1097E	; Jump

sub_1098A endp




sub_10995 proc near
mov	dx, 200Ah
call	sub_10978	; Call Procedure

xor	al, al		; Logical Exclusive OR

sub_10995 endp

; START	OF FUNCTION CHUNK FOR sub_10771

loc_1099D:		; Logical Exclusive OR
xor	dx, dx
call	sub_109C7	; Call Procedure

jmp	sub_1978E	; Jump

; END OF FUNCTION CHUNK	FOR sub_10771



sub_109A5 proc near
call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

mov	al, 62h	; 'b'
jmp	sub_1C2F2	; Jump

sub_109A5 endp




sub_109AD proc near
mov	ax, 30h	; '0'
call	_sub_1C13E_open_sprite_sheet ; BACK.HSQ

mov	si, 153Ah
call	sub_1C21B	; Call Procedure

call	sub_1C412	; Call Procedure

mov	al, 9
mov	dx, 52h	; 'R'
call	sub_109C7	; Call Procedure

jmp	sub_1978E	; Jump

sub_109AD endp




sub_109C7 proc near
push	dx
xor	ah, ah		; Logical Exclusive OR
mov	word_23C74, ax
call	sub_191A0	; Call Procedure

mov	byte ptr unk_23C3C, 1Eh
mov	di, offset unk_210A0
pop	ax
cmp	[di], ax	; Compare Two Operands
jnb	short locret_109EE ; Jump if Not Below (CF=0)

add	[di], ax	; Add
add	[di+4],	ax	; Add
cmp	word ptr [di+4], 320 ; Compare Two Operands
jle	short locret_109EE ; Jump if Less or Equal (ZF=1 | SF!=OF)

mov	word ptr [di+4], 320


locret_109EE:		; Return Near from Procedure
retn

sub_109C7 endp




_sub_109EF_play_CREDITS_HNM proc near
mov	ax, 20
jmp	_sub_1CA1B_hnm_load ; CREDITS.HNM

_sub_109EF_play_CREDITS_HNM endp




sub_109F5 proc near
call	_sub_109EF_play_CREDITS_HNM ; Call Procedure

call	sub_1C0F4	; Call Procedure

cmp	byte_2172D, 0	; Compare Two Operands
jnz	short loc_10A09	; Jump if Not Zero (ZF=0)

test	byte_22CC0, 1	; Logical Compare
jnz	short loc_10A0C	; Jump if Not Zero (ZF=0)


loc_10A09:		; Call Procedure
call	sub_1AD50


loc_10A0C:
mov	si, 0A16h
xor	bp, bp		; Logical Exclusive OR
call	sub_1DA25	; Call Procedure

clc			; Clear	Carry Flag
retn			; Return Near from Procedure

sub_109F5 endp




sub_10A16 proc near
push	_word_2D08A_framebuffer_active
call	sub_10A23	; Call Procedure

pop	_word_2D08A_framebuffer_active


loc_10A21:		; Clear	Carry Flag
clc
retn			; Return Near from Procedure

sub_10A16 endp




sub_10A23 proc near
cmp	byte_2172D, 0	; Compare Two Operands
jz	short loc_10A30	; Jump if Zero (ZF=1)

call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

jmp	_sub_1CA60_hnm_do_frame	; Jump

; ���������������������������������������������������������������������������

loc_10A30:		; Call Procedure
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer

call	_sub_1C9F4_do_frame_and_check_if_frame_advanced	; Call Procedure

jz	short loc_10A21	; Jump if Zero (ZF=1)

call	sub_1C4DD	; Call Procedure

jmp	_sub_1DBEC_draw_mouse ;	Jump

sub_10A23 endp




sub_10A3E proc near
mov	si, 0A16h
jmp	sub_1DA5F	; Jump

sub_10A3E endp




sub_10A44 proc near
mov	ax, 2Ch	; ','
call	_sub_1C13E_open_sprite_sheet ; STARS.HSQ

call	sub_15BA8	; Call Procedure

call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

push	cx
call	sub_1C432	; Call Procedure

pop	ax
push	ax
mul	al		; Unsigned Multiplication of AL	or AX
shr	ax, 1		; Shift	Logical	Right
mov	dx, ax
neg	dx		; Two's Complement Negation
push	dx
xor	bx, bx		; Logical Exclusive OR
xor	ax, ax		; Logical Exclusive OR
call	sub_1C305	; Call Procedure

mov	ax, 1
add	dx, 130h	; Add
call	sub_1C305	; Call Procedure

mov	ax, 2
add	dx, 130h	; Add
call	sub_1C30D	; Call Procedure

pop	dx
push	dx
shl	dx, 1		; Shift	Logical	Left
push	dx
shl	dx, 1		; Shift	Logical	Left
add	dx, 45h	; 'E'   ; Add
mov	ax, 24h	; '$'
mov	bx, 4Eh	; 'N'
call	sub_1C343	; Call Procedure

pop	dx
pop	cx
pop	ax
push	ax
push	cx
add	dx, 3E2h	; Add
cmp	ax, 14h		; Compare Two Operands
ja	short loc_10AA5	; Jump if Above	(CF=0 &	ZF=0)

mov	dx, ax
shl	dx, 1		; Shift	Logical	Left
shl	dx, 1		; Shift	Logical	Left
add	dx, 0F2h ; '�'  ; Add


loc_10AA5:		; Shift	Logical	Right
shr	ax, 1
shr	ax, 1		; Shift	Logical	Right
add	ax, 25h	; '%'   ; Add
mov	bx, 67h	; 'g'
call	sub_1C343	; Call Procedure

pop	dx
pop	ax
neg	dx		; Two's Complement Negation
shr	dx, 1		; Shift	Logical	Right
shr	dx, 1		; Shift	Logical	Right
shr	dx, 1		; Shift	Logical	Right
shr	dx, 1		; Shift	Logical	Right
add	dx, 80h	; '�'   ; Add
add	al, 3		; Add
mov	bx, 4Fh	; 'O'
call	sub_1C343	; Call Procedure

jmp	sub_1C4DD	; Jump

sub_10A44 endp




sub_10ACD proc near
mov	word ptr unk_21C36, 0C827h
mov	byte ptr cs:off_1C13B+1, 2Bh ; '+'
call	near ptr off_1C13B ; Call Procedure

call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

mov	si, 1582h
mov	es, _word_2D08A_framebuffer_active
mov	ax, 2
call	sub_1C370	; Call Procedure

mov	si, 158Ah
mov	ax, 3
call	sub_1C370	; Call Procedure

mov	si, 11DDh
call	sub_1C21B	; Call Procedure

call	sub_15BA0	; Call Procedure

mov	di, 4856h
xor	ax, ax		; Logical Exclusive OR
push	ds
pop	es
assume es:seg001
mov	cx, 8
rep stosb		; Store	String
mov	si, 0B45h
call	sub_1DA5F	; Call Procedure

mov	si, 0B45h
mov	bp, 3
call	sub_1DA25	; Call Procedure

call	sub_1C412	; Call Procedure

mov	al, 3
jmp	_sub_1AB15_audio_start_voc ; Play SN3.VOC

sub_10ACD endp




sub_10B21 proc near
call	_sub_1AC30_call_pcm_audio_vtable_func_5	; Call Procedure

mov	byte ptr cs:off_1C13B+1, 25h ; '%'
mov	si, 0B45h
call	sub_1DA5F	; Call Procedure

cmp	byte_2172D, 0	; Compare Two Operands
jnz	short loc_10B3E	; Jump if Not Zero (ZF=0)

cmp	byte_1F5AB, 0	; Compare Two Operands
js	short locret_10B44 ; Jump if Sign (SF=1)


loc_10B3E:
mov	word ptr unk_2316E, 0


locret_10B44:		; Return Near from Procedure
retn

sub_10B21 endp




sub_10B45 proc near
mov	si, offset unk_23D06
dec	byte ptr [si+7]	; Decrement by 1
cmp	byte_1F59A, 0	; Compare Two Operands
jg	short loc_10B5F	; Jump if Greater (ZF=0	& SF=OF)

mov	bl, [si+7]
cmp	bl, 10h		; Compare Two Operands
ja	short loc_10B5F	; Jump if Above	(CF=0 &	ZF=0)

push	si
call	sub_10D0D	; Call Procedure

pop	si


loc_10B5F:
mov	ax, word_23C4E
or	al, byte_23B9B	; Logical Inclusive OR
or	ax, ax		; Logical Inclusive OR
jz	short loc_10B6B	; Jump if Zero (ZF=1)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_10B6B:		; Decrement by 1
dec	word ptr [si+4]
jns	short loc_10BB7	; Jump if Not Sign (SF=0)

dec	byte ptr [si+6]	; Decrement by 1
jns	short loc_10B86	; Jump if Not Sign (SF=0)

call	sub_1E3CC	; Call Procedure

and	al, 7Fh		; Logical AND
mov	[si+6],	al
mov	al, ah
xor	ah, ah		; Logical Exclusive OR
mov	[si+4],	ax
jmp	short loc_10BB7	; Jump

; ���������������������������������������������������������������������������

loc_10B86:		; Call Procedure
call	sub_1E3CC

mov	bx, ax
mov	dx, ax
and	bx, 7Fh		; Logical AND
cmp	bl, 60h	; '`'   ; Compare Two Operands
jnb	short loc_10BB7	; Jump if Not Below (CF=0)

cmp	bl, 30h	; '0'   ; Compare Two Operands
jb	short loc_10BB7	; Jump if Below	(CF=1)

xchg	dl, dh		; Exchange Register/Memory with	Register
rol	dh, 1		; Rotate Left
and	dx, 1FFh	; Logical AND
cmp	dx, 320		; Compare Two Operands
jnb	short loc_10BB7	; Jump if Not Below (CF=0)

mov	ax, bx
and	ax, 7		; Logical AND
add	ax, 1Ch		; Add
push	si
xor	si, si		; Logical Exclusive OR
call	sub_1C60B	; Call Procedure

pop	si


loc_10BB7:		; Decrement by 1
dec	byte ptr [si]
jns	short loc_10BBE	; Jump if Not Sign (SF=0)

call	sub_10C3B	; Call Procedure


loc_10BBE:
mov	di, offset unk_23170
mov	cx, [di-2]
jcxz	short locret_10C3A ; Jump if CX	is 0


loc_10BC6:
mov	ax, [di+8]
mov	dx, [di+0Ah]
push	cx
cmp	al, 14h		; Compare Two Operands
jb	short loc_10BF9	; Jump if Below	(CF=1)

cmp	al, 1Ch		; Compare Two Operands
jb	short loc_10BDC	; Jump if Below	(CF=1)

inc	ax		; Increment by 1
cmp	al, 2Dh	; '-'   ; Compare Two Operands
jbe	short loc_10C09	; Jump if Below	or Equal (CF=1 | ZF=1)

jmp	short loc_10C2F	; Jump

; ���������������������������������������������������������������������������

loc_10BDC:
mov	bx, [di+0Dh]
call	sub_10CEA	; Call Procedure

call	sub_10CEA	; Call Procedure

mov	[di+0Dh], bx
mov	ax, word_1F4B0
mov	cl, 3
rol	ax, cl		; Rotate Left
mov	word_1F4B0, ax
and	ax, 7		; Logical AND
add	al, 14h		; Add
jmp	short loc_10C09	; Jump

; ���������������������������������������������������������������������������

loc_10BF9:		; Shift	Logical	Right
shr	ax, 1
shr	ax, 1		; Shift	Logical	Right
rol	word_1F4B0, 1	; Rotate Left
rcl	ax, 1		; Rotate Through Carry Left
rol	word_1F4B0, 1	; Rotate Left
rcl	ax, 1		; Rotate Through Carry Left


loc_10C09:
mov	[di+8],	ax
mov	bl, dh
mov	ax, bx
cbw			; AL ->	AX (with sign)
mov	bx, ax
mov	ax, dx
cbw			; AL ->	AX (with sign)
mov	dx, ax
push	di
call	sub_1C661	; Call Procedure

pop	di
cmp	word ptr [di], 320 ; Compare Two Operands
jnb	short loc_10C2F	; Jump if Not Below (CF=0)

xor	ax, ax		; Logical Exclusive OR
cmp	[di+4],	ax	; Compare Two Operands
js	short loc_10C2F	; Jump if Sign (SF=1)

cmp	[di+6],	ax	; Compare Two Operands
jns	short loc_10C34	; Jump if Not Sign (SF=0)


loc_10C2F:
push	di
call	sub_1C58A	; Call Procedure

pop	di


loc_10C34:
pop	cx
add	di, 11h		; Add
loop	loc_10BC6	; Loop while CX	!= 0


locret_10C3A:		; Return Near from Procedure
retn

sub_10B45 endp




sub_10C3B proc near
dec	byte ptr [si+1]	; Decrement by 1
jns	short loc_10C79	; Jump if Not Sign (SF=0)

test	word_1F4B0, 3	; Logical Compare
jnz	short loc_10C58	; Jump if Not Zero (ZF=0)

mov	byte ptr [si+7], 0Bh
test	word_1F4B0, 0Ch	; Logical Compare
jnz	short loc_10C58	; Jump if Not Zero (ZF=0)

mov	byte ptr [si+7], 11h


loc_10C58:		; Call Procedure
call	sub_1E3CC

cmp	byte ptr unk_23BEA, 0 ;	Compare	Two Operands
jz	short loc_10C64	; Jump if Zero (ZF=1)

and	al, 0EFh	; Logical AND


loc_10C64:
mov	cx, ax
mov	bx, 7
call	sub_1E3B7	; Call Procedure

mov	[si+1],	al
cmp	al, 4		; Compare Two Operands
jb	short loc_10C76	; Jump if Below	(CF=1)

or	ch, 40h		; Logical Inclusive OR


loc_10C76:
mov	[si+2],	cx


loc_10C79:
mov	byte ptr [si], 8
mov	al, [si+2]
mov	di, ax
mov	bl, [si+3]
and	ax, 10h		; Logical AND
jnz	short loc_10C98	; Jump if Not Zero (ZF=0)

and	bx, 6		; Logical AND
mov	si, [bx+15A2h]
add	bx, bx		; Add
add	ax, bx		; Add
add	al, 4		; Add
jmp	short loc_10CD6	; Jump

; ���������������������������������������������������������������������������

loc_10C98:
mov	al, [si+3]
mov	ah, al
and	ax, 0C03Fh	; Logical AND
test	ah, 40h		; Logical Compare
jz	short loc_10CCA	; Jump if Zero (ZF=1)

rol	word_1F4B0, 1	; Rotate Left
jnb	short loc_10CCA	; Jump if Not Below (CF=0)

mov	cl, 0Ah
or	ah, ah		; Logical Inclusive OR
jns	short loc_10CB3	; Jump if Not Sign (SF=0)

neg	cl		; Two's Complement Negation


loc_10CB3:		; Add
add	al, cl
jns	short loc_10CBC	; Jump if Not Sign (SF=0)

xor	ah, 80h		; Logical Exclusive OR
xor	al, al		; Logical Exclusive OR


loc_10CBC:		; Compare Two Operands
cmp	al, 40h	; '@'
jb	short loc_10CC5	; Jump if Below	(CF=1)

mov	al, 3Fh	; '?'
xor	ah, 80h		; Logical Exclusive OR


loc_10CC5:		; Logical Inclusive OR
or	ah, al
mov	[si+3],	ah


loc_10CCA:		; Add
add	al, 0E0h ; '�'
call	sub_15198	; Call Procedure

mov	dh, bl
mov	si, dx
mov	ax, 14h


loc_10CD6:		; Logical AND
and	di, 0Ch
mov	bx, [di+1594h]
mov	dx, [di+1592h]
call	sub_1C60B	; Call Procedure

mov	word ptr [di+0Dh], 0
retn			; Return Near from Procedure

sub_10C3B endp




sub_10CEA proc near

; FUNCTION CHUNK AT 0D05 SIZE 00000008 BYTES

xor	ax, ax		; Logical Exclusive OR
mov	al, dl
or	al, al		; Logical Inclusive OR
js	short loc_10D05	; Jump if Sign (SF=1)

sub_10CEA endp




sub_10CF2 proc near
add	al, bl		; Add
mov	cl, 5
ror	ax, cl		; Rotate Right
mov	cl, 3
shr	ah, cl		; Shift	Logical	Right
mov	bl, ah
mov	dl, al
xchg	bl, bh		; Exchange Register/Memory with	Register
xchg	dl, dh		; Exchange Register/Memory with	Register
retn			; Return Near from Procedure

sub_10CF2 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_10CEA

loc_10D05:		; Two's Complement Negation
neg	al
call	sub_10CF2	; Call Procedure

neg	dh		; Two's Complement Negation
retn			; Return Near from Procedure

; END OF FUNCTION CHUNK	FOR sub_10CEA



sub_10D0D proc near
mov	al, bl
mov	bx, 180h
mov	cx, 54h	; 'T'
mov	dl, 37h	; '7'
jz	short loc_10D23	; Jump if Zero (ZF=1)

dec	dx		; Decrement by 1
cmp	al, 0Ah		; Compare Two Operands
jz	short loc_10D23	; Jump if Zero (ZF=1)

call	_ptr_22D65_gfx_vtable_func_39 ;	Indirect Call Far Procedure
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_10D23:		; Call Procedure
call	near ptr off_1C13B

mov	al, dl
xor	ah, ah		; Logical Exclusive OR

sub_10D0D endp




sub_10D2A proc near
call	sub_1C1F4	; Call Procedure

lea	dx, [si+6]	; Load Effective Address
call	_ptr_22D65_gfx_vtable_func_02 ;	Indirect Call Far Procedure
call	sub_1C0F4	; Call Procedure

mov	ax, 35h	; '5'
call	sub_1C1F4	; Call Procedure

lea	dx, [si+6]	; Load Effective Address
call	_ptr_22D65_gfx_vtable_func_38 ;	Indirect Call Far Procedure
retn			; Return Near from Procedure

sub_10D2A endp




sub_10D45 proc near
call	sub_1395C	; Call Procedure

call	sub_13971	; Call Procedure

call	sub_139B9	; Call Procedure

inc	byte_2172D	; Increment by 1
mov	cx, 3


loc_10D55:
push	cx
mov	bl, 28h	; '('
call	sub_13971	; Call Procedure

call	sub_1398C	; Call Procedure

call	sub_1C0F4	; Call Procedure

mov	byte_23B87, 20h	; ' '


loc_10D66:
mov	bp, 391Dh
mov	ax, 3
call	sub_1E353	; Call Procedure

cmp	byte_23B87, 10h	; Compare Two Operands
jnb	short loc_10D66	; Jump if Not Below (CF=0)

pop	cx
loop	loc_10D55	; Loop while CX	!= 0


loc_10D79:
mov	bp, 391Dh
mov	ax, 3
call	sub_1E353	; Call Procedure

cmp	byte_23B87, 0	; Compare Two Operands
jnz	short loc_10D79	; Jump if Not Zero (ZF=0)

dec	byte_2172D	; Decrement by 1
retn			; Return Near from Procedure

sub_10D45 endp




sub_10D8E proc near
cmp	byte_23C59, 0	; Compare Two Operands
jnz	short locret_10D9D ; Jump if Not Zero (ZF=0)

xor	ax, ax		; Logical Exclusive OR
cmp	byte_23B89, al	; Compare Two Operands
jns	short loc_10D9E	; Jump if Not Sign (SF=0)


locret_10D9D:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_10D9E:
mov	byte ptr unk_23BEB, al
mov	byte ptr unk_23B9C, al
cmp	byte_1F5AB, al	; Compare Two Operands
jns	short loc_10DB0	; Jump if Not Sign (SF=0)

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

jmp	loc_1186B	; Jump

; ���������������������������������������������������������������������������

loc_10DB0:		; Call Procedure
call	sub_1D2BD

call	sub_10D45	; Call Procedure

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	sub_198E6	; Call Procedure

mov	word_1F4B2, 16C5h
call	sub_10E66	; Call Procedure

mov	byte ptr unk_2067A, 1
call	sub_19F40	; Call Procedure

mov	word_23C74, 0FFFFh
mov	al, 80h	; '�'
xchg	al, byte_23B89	; Exchange Register/Memory with	Register
xor	ah, ah		; Logical Exclusive OR
push	ax
add	ax, 0BAh ; '�'  ; Add
call	sub_19901	; Call Procedure

call	sub_188AF	; Call Procedure

call	sub_19901	; Call Procedure

mov	si, offset unk_21704
call	sub_17B1B	; Call Procedure

call	sub_1DA53	; Call Procedure

pop	ax
mov	bx, offset word_2170D
xlat			; Table	Lookup Translation
or	al, al		; Logical Inclusive OR
js	short loc_10E22	; Jump if Sign (SF=1)

call	sub_191A0	; Call Procedure

les	si, _dword_2D060_sprite_sheet_resource_ptr ; Load Full Pointer to ES:xx
assume es:nothing
lods	word ptr es:[si] ; Load	String
shr	ax, 1		; Shift	Logical	Right
sub	ax, 3		; Integer Subtraction
mov	dx, word ptr unk_21704
mov	bx, word ptr unk_21706
inc	dx		; Increment by 1
inc	bx		; Increment by 1
push	ax
call	sub_1C2FD	; Call Procedure

pop	ax
inc	ax		; Increment by 1
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

call	_ptr_22D65_gfx_vtable_func_32 ;	Indirect Call Far Procedure
call	sub_19EFD	; Call Procedure


loc_10E22:		; Call Procedure
call	_sub_1C4CD_gfx_copy_framebuf_to_screen

mov	byte ptr unk_23BD7, 0
call	sub_1D741	; Call Procedure

mov	byte_23C57, 1
mov	bp, offset unk_21552
mov	bx, 0F66h
call	sub_1D323	; Call Procedure

jmp	_sub_1DBEC_draw_mouse ;	Jump

sub_10D8E endp




sub_10E3E proc near
mov	bx, 0F66h
mov	bp, 20B6h
jmp	sub_1D323	; Jump

sub_10E3E endp




sub_10E47 proc near

; FUNCTION CHUNK AT B3B0 SIZE 00000077 BYTES

mov	cl, 0FFh


loc_10E49:
push	cx
cmp	byte_23B89, 0	; Compare Two Operands
jz	short loc_10E62	; Jump if Zero (ZF=1)

mov	ax, 0Dh
call	loc_10E6C	; Call Procedure

mov	byte_23B89, 0
mov	word_23C74, 0


loc_10E62:
pop	cx
jmp	loc_1B3B0	; Jump

sub_10E47 endp




sub_10E66 proc near
call	sub_1AD5E	; Call Procedure

mov	ax, 0Ch


loc_10E6C:
push	ax
call	sub_1A7A5	; Call Procedure

pop	ax
mov	bp, 181Eh
jmp	sub_1C8FB	; Jump

sub_10E66 endp




sub_10E77 proc near
call	sub_1AD50	; Call Procedure

call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

mov	ax, 11
call	_sub_1CA1B_hnm_load ; DEAD3.HNM

call	sub_1C4DD	; Call Procedure

call	sub_1C0F4	; Call Procedure

mov	cx, 5


loc_10E8C:
push	cx


loc_10E8D:		; Call Procedure
call	_sub_1C9F4_do_frame_and_check_if_frame_advanced

jz	short loc_10E8D	; Jump if Zero (ZF=1)

mov	al, 3Ch	; '<'
mov	bp, offset sub_11797
call	_sub_1C108_transition ;	Call Procedure

pop	cx
loop	loc_10E8C	; Loop while CX	!= 0

call	_sub_1CA01_hnm_close_resource ;	Call Procedure

call	sub_1C412	; Call Procedure

jmp	sub_1181E	; Jump

sub_10E77 endp




sub_10EA6 proc near
call	sub_1B2B9	; Call Procedure

call	sub_198E6	; Call Procedure

call	sub_1181E	; Call Procedure

mov	al, 4
xor	dx, dx		; Logical Exclusive OR
mov	bp, offset sub_10ED0
jmp	_sub_1C108_transition ;	Jump

sub_10EA6 endp




sub_10EB9 proc near
xor	ax, ax		; Logical Exclusive OR
mov	byte ptr word_23C72+1, al
call	sub_1B2BE	; Call Procedure

mov	byte_23C56, 0FFh
mov	al, 4
xor	dx, dx		; Logical Exclusive OR
call	sub_1189A	; Call Procedure

jmp	sub_12DB1	; Jump

sub_10EB9 endp




sub_10ED0 proc near
mov	al, 3Bh	; ';'
call	sub_1C2F2	; Call Procedure

mov	ax, 1
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

call	sub_10F08	; Call Procedure

mov	ax, 3Bh	; ';'
call	_sub_1C13E_open_sprite_sheet ; MIRROR.HSQ

mov	ax, 2
xor	dx, dx		; Logical Exclusive OR
xor	bx, bx		; Logical Exclusive OR
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

call	sub_11797	; Call Procedure

mov	si, 1D1Eh
call	sub_1D72B	; Call Procedure

call	sub_198F5	; Call Procedure

mov	byte ptr word_210B6, 80h ; '�'
mov	bp, 20C2h
mov	bx, 0EB9h
jmp	sub_1D338	; Jump

sub_10ED0 endp




sub_10F08 proc near

; FUNCTION CHUNK AT 0960 SIZE 00000012 BYTES

test	word_1F4C0, 80h	; Logical Compare
jnz	short loc_10F13	; Jump if Not Zero (ZF=0)

jmp	loc_10960	; Jump

; ���������������������������������������������������������������������������

loc_10F13:		; Call Procedure
call	sub_1C412

mov	word_23C74, 7
call	sub_19197	; Call Procedure

mov	byte ptr unk_23C3C, 0
add	word ptr unk_210A2, 0Fh	; Add
call	sub_1978E	; Call Procedure

call	sub_1998E	; Call Procedure

mov	word_21756, 0FFFFh

loc_10F35:		; Increment by 1
inc	byte ptr word_23C72+1
mov	word ptr unk_23C76, 1
call	sub_1C412	; Call Procedure

mov	dx, 2Dh	; '-'
jmp	loc_10965	; Jump

sub_10F08 endp




sub_10F48 proc near

; FUNCTION CHUNK AT 0F84 SIZE 00000011 BYTES

mov	ax, word_1F4B2
mov	bx, ax
and	al, 0Fh		; Logical AND
cmp	al, 0Ch		; Compare Two Operands
jnb	short nullsub_1	; Jump if Not Below (CF=0)

push	bx
cmp	al, 2		; Compare Two Operands
jnb	short loc_10F5F	; Jump if Not Below (CF=0)

mov	ax, bx
add	al, 2		; Add
call	sub_10FB2	; Call Procedure


loc_10F5F:
pop	ax
and	al, 0F0h	; Logical AND
or	al, 0Ch		; Logical Inclusive OR
jmp	short loc_10F84	; Jump

sub_10F48 endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS KEYPAD "+" TO EXPAND]



sub_10F67 proc near
mov	ax, word_1F4B2
mov	bx, ax
and	al, 0Fh		; Logical AND
cmp	al, 0Bh		; Compare Two Operands
jb	short nullsub_1	; Jump if Below	(CF=1)

push	bx
cmp	al, 0Dh		; Compare Two Operands
jnb	short loc_10F7E	; Jump if Not Below (CF=0)

mov	ax, bx
add	al, 2		; Add
call	sub_10FB2	; Call Procedure


loc_10F7E:
pop	ax
and	al, 0F0h	; Logical AND
add	ax, 10h		; Add

sub_10F67 endp

; START	OF FUNCTION CHUNK FOR sub_10F48

loc_10F84:		; Compare Two Operands
cmp	byte_1F4DA, 14h
jnz	short sub_10F95	; Jump if Not Zero (ZF=0)

call	sub_10F95	; Call Procedure

sub	word_2D10A, 3E8h ; Integer Subtraction
retn			; Return Near from Procedure

; END OF FUNCTION CHUNK	FOR sub_10F48



sub_10F95 proc near
push	ax
call	sub_1390A	; Call Procedure

call	sub_14D00	; Call Procedure

call	sub_1B2BE	; Call Procedure

pop	cx
sub	cx, word_1F4B2	; Integer Subtraction
call	sub_10FD9	; Call Procedure

sub_10F95 endp

; START	OF FUNCTION CHUNK FOR sub_11707

loc_10FA7:		; Call Procedure
call	_sub_1DBB2_call_restore_cursor

mov	al, 2Ah	; '*'
call	sub_1189A	; Call Procedure

jmp	sub_1D763	; Jump

; END OF FUNCTION CHUNK	FOR sub_11707



sub_10FB2 proc near
call	loc_1395F	; Call Procedure

call	sub_13971	; Call Procedure

cmp	byte_23B87, 0	; Compare Two Operands
jz	short loc_10FC2	; Jump if Zero (ZF=1)

jmp	sub_139B9	; Jump

; ���������������������������������������������������������������������������

loc_10FC2:		; Jump
jmp	sub_1398C

sub_10FB2 endp




sub_10FC5 proc near
mov	cx, 10h


loc_10FC8:
push	cx
mov	cx, 1
call	sub_10FD9	; Call Procedure

pop	cx
cmp	byte_1F4DB, 0	; Compare Two Operands
loopne	loc_10FC8	; Loop while rCX != 0 and ZF=0

jmp	short loc_10FA7	; Jump

sub_10FC5 endp




sub_10FD9 proc near
mov	byte ptr unk_23B8A, 1
call	sub_1B2BE	; Call Procedure

or	cx, cx		; Logical Inclusive OR
jle	short loc_11005	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

push	cx
mov	ax, word_2091E
mov	word_23B8B, ax
cmp	byte_23B8D, 0	; Compare Two Operands
jz	short loc_10FF6	; Jump if Zero (ZF=1)

call	sub_11B23	; Call Procedure


loc_10FF6:		; Increment by 1
inc	word_1F4B2
mov	byte_23B8D, 1
call	sub_11B23	; Call Procedure

pop	cx
loop	sub_10FD9	; Loop while CX	!= 0


loc_11005:
mov	byte ptr unk_23B8A, 0
retn			; Return Near from Procedure

sub_10FD9 endp




sub_1100B proc near
mov	byte ptr unk_204BB, 1
retn			; Return Near from Procedure

sub_1100B endp




sub_11011 proc near
dec	byte ptr unk_206DA ; Decrement by 1
mov	si, 1021h
call	sub_1105B	; Call Procedure

sub_11011 endp




sub_1101B proc near
mov	byte ptr unk_20498, 9
retn			; Return Near from Procedure

sub_1101B endp

; ���������������������������������������������������������������������������
db 18h,	2, 0DCh, 2, 2 dup(0)



sub_11027 proc near
and	byte ptr unk_206DE, 7Fh	; Logical AND
jmp	sub_12FFB	; Jump

sub_11027 endp




sub_1102F proc near
and	byte ptr unk_206FA, 7Fh	; Logical AND
and	byte ptr unk_206F7, 7Fh	; Logical AND
mov	word ptr unk_206CD, 0FFFFh
mov	ax, 1321h
jmp	sub_11771	; Jump

sub_1102F endp




sub_11045 proc near

; FUNCTION CHUNK AT 26DA SIZE 00000055 BYTES

mov	byte ptr unk_20488, 5
call	sub_1101B	; Call Procedure

mov	ax, 10Bh
jmp	loc_126DA	; Jump

sub_11045 endp




sub_11053 proc near
mov	byte ptr unk_20488, 0Ah
mov	si, 1069h

sub_11053 endp




sub_1105B proc near
lods	word ptr cs:[si] ; Load	String
or	ax, ax		; Logical Inclusive OR
jz	short locret_11068 ; Jump if Zero (ZF=1)

mov	di, ax
call	sub_1425B	; Call Procedure

jmp	short sub_1105B	; Jump

; ���������������������������������������������������������������������������

locret_11068:		; Return Near from Procedure
retn

sub_1105B endp

; ���������������������������������������������������������������������������
db 4Ch
db 3
db 68h
db    3
db 84h
db    3
db 0
db 0



sub_11071 proc near
mov	byte ptr unk_1F5AF, 0
mov	byte_1F4DA, 15h
mov	byte ptr unk_2048B, 1
mov	word ptr unk_204C8, 200Bh
mov	word ptr unk_204CA, 180h
mov	byte ptr unk_20498, 0Ah
mov	byte_1F585, 0FFh
call	sub_12090	; Call Procedure

or	byte_1F4BA, 1	; Logical Inclusive OR
mov	ax, 1
jmp	sub_129EE	; Jump

sub_11071 endp




sub_110A4 proc near
and	byte ptr unk_206F5, 7Fh	; Logical AND
mov	word ptr unk_206C7, 0FFFFh
jmp	sub_12FFB	; Jump

sub_110A4 endp




sub_110B2 proc near
mov	byte ptr unk_204AB, 1

sub_110B2 endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_2. PRESS KEYPAD "+" TO EXPAND]



sub_110B8 proc near
mov	di, 800h
jmp	sub_1425B	; Jump

sub_110B8 endp




sub_110BE proc near
mov	ax, word_1F4B2
mov	word ptr unk_20604, ax
mov	word ptr unk_204C8, 2006h
mov	word ptr unk_204A8, 2008h
mov	word ptr unk_204AA, 180h
mov	byte ptr unk_20498, 0Ah
mov	word ptr unk_2049A, 180h
mov	word ptr unk_206B1, 109h
mov	al, 14h
call	sub_16F78	; Call Procedure

or	byte_1F4BA, 10h	; Logical Inclusive OR
mov	si, 10F7h
jmp	sub_1105B	; Jump

sub_110BE endp

; ���������������������������������������������������������������������������
dw 5ECh
db 0D0h	; �
db    5
db    8
db    6
db  40h	; @
db    6
db  5Ch	; \
db    6
db    0
db    0



sub_11103 proc near
mov	ax, 4
call	sub_129EE	; Call Procedure

mov	ax, 1409h
jmp	loc_126DA	; Jump

sub_11103 endp




sub_1110F proc near
cmp	byte ptr unk_20498, 8 ;	Compare	Two Operands
jz	short loc_11121	; Jump if Zero (ZF=1)

mov	byte ptr unk_20498, 0Ah
mov	word ptr unk_2049A, 180h


loc_11121:
mov	ax, 280Ah
jmp	loc_126DA	; Jump

sub_1110F endp




sub_11127 proc near
mov	byte ptr unk_2048B, 0FFh
retn			; Return Near from Procedure

sub_11127 endp




sub_1112D proc near
or	byte ptr unk_20517, 2 ;	Logical	Inclusive OR
retn			; Return Near from Procedure

sub_1112D endp




sub_11133 proc near
mov	di, 3D8h
jmp	sub_1425B	; Jump

sub_11133 endp




sub_11139 proc near
mov	al, 0Ah
call	sub_16F78	; Call Procedure

mov	ax, 1313h
call	sub_11771	; Call Procedure

mov	al, byte ptr unk_20507
or	al, 10h		; Logical Inclusive OR
and	al, 0FDh	; Logical AND
mov	byte ptr unk_20507, al

loc_1114E:
mov	al, byte ptr unk_1F4D8

loc_11151:		; Add
add	al, 2
mov	byte ptr unk_20628, al

loc_11156:
mov	si, 115Ch
jmp	sub_1105B	; Jump

sub_11139 endp

; ���������������������������������������������������������������������������
db 0F4h, 3, 10h, 4, 0BCh, 3, 8Ch, 8, 2 dup(0)



sub_11166 proc near
inc	byte ptr unk_205F1 ; Increment by 1
mov	byte ptr unk_20498, 2
mov	word ptr unk_2049A, 180h

loc_11175:
mov	ax, 105h

loc_11178:		; Jump
jmp	sub_129EE

sub_11166 endp




sub_1117B proc near
or	byte_1F4BA, 40h	; Logical Inclusive OR
mov	al, 28h	; '('
call	sub_16F78	; Call Procedure

jmp	sub_1101B	; Jump

sub_1117B endp




sub_11188 proc near
and	byte ptr unk_20709, 7Fh	; Logical AND

loc_1118D:
mov	word ptr unk_206C1, 0FFFFh
jmp	sub_12FFB	; Jump

sub_11188 endp




sub_11196 proc near
or	byte_1F4BA, 20h	; Logical Inclusive OR
mov	ax, 12FBh
call	sub_11771	; Call Procedure

mov	si, 11A7h
jmp	sub_1105B	; Jump

sub_11196 endp

; ���������������������������������������������������������������������������
db 0E4h, 7, 90h, 7, 0ACh, 7, 54h, 8, 1Ch
db 8, 2	dup(0)



sub_111B3 proc near
mov	byte ptr unk_204E8, 5

loc_111B8:		; Add
add	byte ptr unk_20680, 0Ch

loc_111BD:		; Call Procedure
call	sub_11AC5

add	ax, 3		; Add
mov	word ptr unk_20606, ax

loc_111C6:		; Increment by 1
inc	byte ptr unk_205F1
retn			; Return Near from Procedure

sub_111B3 endp




sub_111CB proc near
mov	byte ptr unk_1F5AF, 0
mov	byte_1F4DA, 60h	; '`'
mov	di, 11Ch
call	sub_140AE	; Call Procedure

mov	dl, 2
mov	word ptr unk_204F8, dx
mov	word ptr unk_204FA, bx
retn			; Return Near from Procedure

sub_111CB endp

; ���������������������������������������������������������������������������
byte_111E6 db 0E9h
off_111E7 dw offset sub_10D2A
dw offset sub_11011
off_111EB dw offset sub_11027
dw offset sub_1102F
dw offset sub_11045
dw offset sub_11053
dw offset nullsub_2
dw offset sub_110A4
off_111F7 dw offset sub_110B2
dw offset nullsub_2
dw offset sub_110B8
dw offset sub_110BE
dw offset sub_11103
dw offset sub_1110F
dw offset sub_11127
dw offset nullsub_2
dw offset sub_1112D
dw offset sub_11133
dw offset sub_11139
dw offset sub_11166
dw offset sub_1117B
dw offset sub_11188
dw offset sub_11196
dw offset sub_111B3
dw offset sub_111CB
dw offset byte_111E6
dw offset nullsub_2
dw offset nullsub_2



sub_1121F proc near
cmp	al, byte_1F4DA	; Compare Two Operands
jbe	short locret_11242 ; Jump if Below or Equal (CF=1 | ZF=1)

mov	byte_1F4DA, al
mov	byte ptr unk_1F5AF, 0
call	sub_1B17A	; Call Procedure

mov	bl, byte_1F4DA
cmp	bl, 6Ch	; 'l'   ; Compare Two Operands
ja	short locret_11242 ; Jump if Above (CF=0 & ZF=0)

xor	bh, bh		; Logical Exclusive OR
shr	bx, 1		; Shift	Logical	Right
call	cs:off_111E7[bx] ; Indirect Call Near Procedure


locret_11242:		; Return Near from Procedure
retn

sub_1121F endp




sub_11243 proc near
mov	bp, 1269h
xor	dx, dx		; Logical Exclusive OR
xor	bx, bx		; Logical Exclusive OR
call	sub_11258	; Call Procedure

cmp	bx, 3E8h	; Compare Two Operands
jb	short locret_11257 ; Jump if Below (CF=1)

inc	byte_1F572	; Increment by 1


locret_11257:		; Return Near from Procedure
retn

sub_11243 endp




sub_11258 proc near
mov	di, 138h
mov	cx, 3


loc_1125E:
push	cx

loc_1125F:		; Call Procedure
call	sub_1661D

pop	cx
add	di, 1Ch		; Add
loop	loc_1125E	; Loop while CX	!= 0

retn			; Return Near from Procedure

sub_11258 endp

; ���������������������������������������������������������������������������
cmp	byte ptr [si+3], 4 ; Compare Two Operands
jnz	short locret_1127B ; Jump if Not Zero (ZF=0)

test	byte ptr [si+19h], 4 ; Logical Compare
jz	short locret_1127B ; Jump if Zero (ZF=1)

add	bl, [si+1Ah]	; Add
adc	bh, 0		; Add with Carry


locret_1127B:		; Return Near from Procedure
retn




sub_1127C proc near
cmp	al, 4		; Compare Two Operands
jnz	short loc_1128D	; Jump if Not Zero (ZF=0)

cmp	byte_1F4DA, 15h	; Compare Two Operands
jb	short loc_1128D	; Jump if Below	(CF=1)

cmp	byte_1F4DA, 20h	; ' ' ; Compare Two Operands
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1128D:		; Clear	Carry Flag
clc
retn			; Return Near from Procedure

sub_1127C endp

; ���������������������������������������������������������������������������
align 2
db 2, 10h, 3, 1, 7, 2, 4, 5, 7 dup(0Fh)
db 0Ah,	0Bh, 9,	8, 2, 2	dup(4),	8, 2, 0Bh
db 2, 3, 3 dup(2), 0Bh,	2 dup(2), 4, 8,	2
db 5, 2, 9, 2, 7, 2, 0Ah, 4, 8,	2, 5, 2
db 0Bh,	3 dup(2), 1, 12h, 2, 10h, 3, 1,	0FFh
db 2, 4, 5, 7 dup(0Fh),	0Ah, 0Bh, 9, 8,	14h
db 16h,	0, 2, 5, 1, 2, 4, 5, 7,	3 dup(2)
db 1, 3	dup(2),	7, 2, 5, 4, 8, 2, 4, 3 dup(2)
db 1, 2	dup(2),	0FFh, 0Eh, 10h,	0FFh, 0
db 2, 3, 5, 7, 6, 8, 2,	7, 2, 6, 2, 7, 2
db 5, 2, 6, 4, 8, 2, 7,	2, 6, 0FFh, 2, 7
db 0Ah,	0Ch, 4,	2, 7, 0Ch, 0Ah,	2, 5, 2
db 7, 0FFh, 0, 8, 9, 7 dup(0FFh), 0, 1,	8
db 2, 0, 2, 1, 0, 8, 5,	0, 1, 3, 0FFh, 4
db 8, 2, 0, 2, 0, 2, 1,	0, 8, 5, 0FFh, 1
db 3, 0FFh, 4, 6, 0, 8,	2, 0, 0FFh, 2, 1
db 2, 0, 2, 1, 4, 8, 2,	2 dup(0), 5, 4,	0
db 1, 3, 2 dup(8), 2, 0, 2, 3, 2, 0, 2,	8
db 4, 8, 2, 0, 2, 0, 0FFh, 2, 1, 0, 0Ah
db 3, 1, 5, 0, 8, 2, 5,	2, 5, 2, 0, 2, 5
db 4, 8, 2, 5, 2, 1, 0,	0Ah, 2,	1, 5, 6
db 0, 8, 2, 0, 0FFh



sub_11392 proc near
mov	word_216D0, 1FBAh
retn			; Return Near from Procedure

sub_11392 endp




sub_11399 proc near
mov	word_216D0, 1FAEh
retn			; Return Near from Procedure

sub_11399 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_11707

loc_113A0:		; Call Procedure
call	sub_11399

or	byte_23B9B, 40h	; Logical Inclusive OR
jmp	short loc_113B6	; Jump

; ���������������������������������������������������������������������������

loc_113AA:		; Call Procedure
call	sub_158FA

call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

mov	si, 18E9h
call	sub_1C551	; Call Procedure


loc_113B6:
mov	ax, 0Fh
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

call	sub_19761	; Call Procedure

call	sub_19EFD	; Call Procedure


loc_113C2:		; Call Procedure
call	sub_19901

jmp	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Jump

; END OF FUNCTION CHUNK	FOR sub_11707



sub_113C8 proc near
lods	byte ptr cs:[si] ; Load	String
mov	byte ptr word_1F4B4, al
mov	word_23C28, si
lods	byte ptr cs:[si] ; Load	String
xor	ah, ah		; Logical Exclusive OR
add	si, ax		; Add
mov	word_23C2A, si


loc_113DB:		; Call Procedure
call	sub_11392

call	sub_12DB1	; Call Procedure

jmp	sub_11707	; Jump

sub_113C8 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_11707

loc_113E4:		; Call Procedure
call	sub_11399

push	si
call	sub_18C8A	; Call Procedure

pop	si
lods	byte ptr cs:[si] ; Load	String
inc	word_23C2A	; Increment by 1
xor	ah, ah		; Logical Exclusive OR
cmp	ax, word_23C74	; Compare Two Operands
jz	short loc_11408	; Jump if Zero (ZF=1)

cmp	byte_23C54, ah	; Compare Two Operands
jns	short loc_11408	; Jump if Not Sign (SF=0)

push	ax
mov	bp, 2DB1h
call	sub_1C097	; Call Procedure

pop	ax


loc_11408:		; Jump
jmp	sub_19761

; ���������������������������������������������������������������������������

loc_1140B:		; Call Procedure
call	sub_11392

lods	byte ptr cs:[si] ; Load	String
inc	word_23C2A	; Increment by 1
xor	ah, ah		; Logical Exclusive OR
mov	word_23C74, ax
call	sub_1978E	; Call Procedure

call	sub_19B8B	; Call Procedure

jmp	sub_11707	; Jump

; ���������������������������������������������������������������������������

loc_11422:		; Call Procedure
call	sub_11392

call	sub_11AE0	; Call Procedure

cmp	al, 0Dh		; Compare Two Operands
jnb	short loc_11434	; Jump if Not Below (CF=0)

mov	cx, 1
call	sub_10FD9	; Call Procedure

jmp	short loc_11422	; Jump

; ���������������������������������������������������������������������������

loc_11434:		; Call Procedure
call	sub_1390A

call	sub_137B2	; Call Procedure

call	sub_1C412	; Call Procedure

mov	si, (offset asc_21730+10h)
jmp	short loc_11465	; Jump

; ���������������������������������������������������������������������������

loc_11442:		; Call Procedure
call	sub_11392

call	sub_137B2	; Call Procedure

mov	es, _word_2D08E_framebuffer2_seg

loc_1144C:
push	ds
mov	ds, _word_2D08A_framebuffer_active
assume ds:nothing
xor	dx, dx		; Logical Exclusive OR
mov	bx, 32h	; '2'
mov	bp, 3
call	ss:_ptr_22D65_gfx_vtable_func_37 ; Indirect Call Far Procedure
pop	ds
call	sub_1C43E	; Call Procedure

mov	si, offset unk_21748


loc_11465:
mov	ax, 27h	; '''
call	_sub_1C13E_open_sprite_sheet ; CHANKISS.HSQ

call	sub_1C21B	; Call Procedure


loc_1146E:		; Call Procedure
call	sub_1C0F4

jmp	sub_1C4DD	; Jump

; ���������������������������������������������������������������������������

locret_11474:		; Return Near from Procedure
retn

; END OF FUNCTION CHUNK	FOR sub_11707
; ���������������������������������������������������������������������������
off_11475 dw offset sub_113C8
dw offset loc_113E4
dw offset loc_113DB
dw offset loc_1140B
dw offset locret_11474
dw offset loc_11422
dw offset loc_11442
dw offset loc_113A0
dw offset loc_113AA
dw offset loc_1148D
dw offset loc_114C9
dw offset loc_1167C
; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_11707

loc_1148D:		; Call Procedure
call	sub_11392

mov	al, 10h
mov	bp, offset sub_11498
jmp	_sub_1C108_transition ;	Jump

; END OF FUNCTION CHUNK	FOR sub_11707



sub_11498 proc near
call	sub_113C8	; Call Procedure

mov	ds:byte_1F598, 0

loc_114A0:
mov	ds:word_20602, 0FFFFh
call	sub_1D763	; Call Procedure

jmp	loc_10F13	; Jump

sub_11498 endp




sub_114AC proc near
mov	ax, 1Eh
call	_sub_1C13E_open_sprite_sheet ; FINAL.HSQ

xor	ax, ax		; Logical Exclusive OR


loc_114B4:
push	ax
xor	bx, bx		; Logical Exclusive OR
xor	dx, dx		; Logical Exclusive OR
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

pop	ax
inc	ax		; Increment by 1
cmp	ax, 3		; Compare Two Operands
jb	short loc_114B4	; Jump if Below	(CF=1)

call	sub_19B8B	; Call Procedure

jmp	loc_10F13	; Jump

sub_114AC endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_11707

loc_114C9:
mov	si, 176Bh
call	sub_1DA5F	; Call Procedure

mov	cx, 150h
mov	bx, 180h
mov	bp, 1
mov	al, 28h	; '('
call	sub_1157E	; Call Procedure

call	sub_11566	; Call Procedure

mov	bp, 14ACh
call	sub_1C097	; Call Procedure

call	ds:_ptr_22D65_gfx_vtable_func_41_copy_pal2_to_pal1 ; Indirect Call Far Procedure
mov	cx, 0E4h ; '�'
mov	bx, 129h
xor	bp, bp		; Logical Exclusive OR
mov	al, 30h	; '0'
call	sub_1157E	; Call Procedure

call	dword ptr ds:3935h ; Indirect Call Far Procedure
call	sub_1C4DD	; Call Procedure

call	sub_11566	; Call Procedure

call	sub_19B8B	; Call Procedure

mov	si, 1470h
mov	al, 8Fh	; '�'
mov	es, ds:_word_2D08A_framebuffer_active
call	ds:_ptr_22D65_gfx_vtable_func_10 ; Indirect Call Far Procedure
mov	ax, 1Eh
call	_sub_1C13E_open_sprite_sheet ; FINAL.HSQ

mov	ax, 3
mov	dx, 34h	; '4'
xor	bx, bx		; Logical Exclusive OR
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

mov	al, 22h	; '"'
mov	bp, offset nullsub_1
call	_sub_1C108_transition ;	Call Procedure

mov	ax, 12Ch
call	sub_1E387	; Call Procedure

mov	cx, 2Dh	; '-'
mov	bx, 1E0h
xor	bp, bp		; Logical Exclusive OR
mov	al, 20h	; ' '
call	sub_1157E	; Call Procedure

mov	ax, 4
mov	dx, 5Ah	; 'Z'
mov	bx, 40h	; '@'
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

call	dword ptr ds:3935h ; Indirect Call Far Procedure
call	sub_1C4DD	; Call Procedure

call	sub_11566	; Call Procedure

jmp	loc_1178E	; Jump

; END OF FUNCTION CHUNK	FOR sub_11707



sub_11556 proc near
mov	al, ds:byte_23B87
mov	bx, ds:word_2CCC8
mov	cx, ds:word_2CCCA
call	ds:_ptr_22D65_gfx_vtable_func_39 ; Indirect Call Far Procedure
retn			; Return Near from Procedure

sub_11556 endp




sub_11566 proc near
inc	ds:byte_2172D	; Increment by 1


loc_1156A:
mov	bp, offset sub_11556
mov	ax, 10h
call	sub_1E353	; Call Procedure

dec	ds:byte_23B87	; Decrement by 1
jnz	short loc_1156A	; Jump if Not Zero (ZF=0)

dec	ds:byte_2172D	; Decrement by 1
retn			; Return Near from Procedure

sub_11566 endp




sub_1157E proc near
mov	ds:byte_23B87, al
mov	ds:word_2CCCA, cx
mov	ds:word_2CCC8, bx
sub	sp, cx		; Integer Subtraction
push	ss
pop	es
assume es:seg001
mov	di, sp
xor	ax, ax		; Logical Exclusive OR
push	cx
rep stosb		; Store	String
pop	cx
mov	dx, sp
or	bp, bp		; Logical Inclusive OR
jnz	short loc_115A1	; Jump if Not Zero (ZF=0)

call	dword ptr ds:38BDh ; Indirect Call Far Procedure
jmp	short loc_115A5	; Jump

; ���������������������������������������������������������������������������

loc_115A1:		; Indirect Call	Far Procedure
call	dword ptr ds:394Dh


loc_115A5:		; Add
add	sp, cx
retn			; Return Near from Procedure

sub_1157E endp




sub_115A8 proc near
call	sub_1D08F	; Call Procedure

mov	ax, ds:11EBh
mov	dx, 0Ah
mov	bx, 9Dh	; '�'
jmp	sub_1D194	; Jump

sub_115A8 endp




sub_115B7 proc near
mov	ax, 1Eh
call	_sub_1C13E_open_sprite_sheet ; FINAL.HSQ

mov	ax, 5
mov	dx, 40h	; '@'
mov	bx, 34h	; '4'
jmp	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

sub_115B7 endp




sub_115C9 proc near
mov	dx, 200Ah
call	loc_1097E	; Call Procedure

xor	ax, ax		; Logical Exclusive OR
jmp	loc_1099D	; Jump

sub_115C9 endp




sub_115D4 proc near
mov	dx, 2003h
call	loc_1097E	; Call Procedure

mov	al, 1
jmp	loc_1099D	; Jump

sub_115D4 endp




sub_115DF proc near
mov	dx, 2006h
call	loc_1097E	; Call Procedure

mov	al, 4
jmp	loc_1099D	; Jump

sub_115DF endp




sub_115EA proc near
mov	dx, 2004h
call	loc_1097E	; Call Procedure

mov	al, 3
jmp	loc_1099D	; Jump

sub_115EA endp




sub_115F5 proc near
mov	dx, 3002h
mov	bx, 280h
call	loc_10981	; Call Procedure

mov	al, 0Bh
jmp	loc_1099D	; Jump

sub_115F5 endp




sub_11603 proc near
mov	dx, 3002h
mov	bx, 280h
call	loc_10981	; Call Procedure

mov	al, 0Ah
mov	dx, 3Ah	; ':'
call	sub_109C7	; Call Procedure

jmp	sub_1978E	; Jump

sub_11603 endp




sub_11617 proc near
mov	bx, 1180h
mov	dx, 703h
call	loc_10981	; Call Procedure

mov	al, 8
jmp	loc_1099D	; Jump

sub_11617 endp




sub_11625 proc near
mov	dx, 2008h
call	loc_1097E	; Call Procedure

mov	al, 2
jmp	loc_1099D	; Jump

sub_11625 endp




sub_11630 proc near
mov	bx, 1080h
mov	dx, 802h
call	loc_10981	; Call Procedure

mov	al, 5
jmp	loc_1099D	; Jump

sub_11630 endp




sub_1163E proc near
mov	bx, 3F80h
mov	dx, 1005h
call	loc_10981	; Call Procedure

mov	al, 6
jmp	loc_1099D	; Jump

sub_1163E endp




sub_1164C proc near
mov	bx, 1080h
mov	dx, 803h
call	loc_10981	; Call Procedure

mov	al, 7
jmp	loc_1099D	; Jump

sub_1164C endp

; ���������������������������������������������������������������������������
off_1165A dw offset sub_115B7
dw offset sub_1095D
dw offset sub_115C9
dw offset sub_115D4
dw offset sub_115DF
dw offset sub_115EA
dw offset sub_115F5
dw offset sub_11617
dw offset sub_11625
dw offset sub_11630
dw offset sub_109AD
dw offset sub_11603
dw offset sub_1164C
dw offset sub_1163E
dw offset sub_109F5
dw offset sub_114AC
dw 0FFFFh
; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_11707

loc_1167C:		; Logical Exclusive OR
xor	ax, ax
mov	ds:byte_23C24, al
mov	ds:word_1F4C2, ax
mov	word ptr ds:loc_10010, ax
dec	ax		; Decrement by 1
mov	ds:word_21756, ax
call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

inc	ds:byte_2172D	; Increment by 1
mov	ds:byte_2C330, 0
call	_sub_1C49A_gfx_copy_framebuffer_to_screen ; Call Procedure

mov	ax, 12h
call	ds:_ptr_22D65_gfx_vtable_func_set_global_y_offset ; Indirect Call Far Procedure
call	sub_1AD50	; Call Procedure

mov	ds:word_2069B, 120h
mov	si, offset off_1165A
call	_sub_10945_intro_script_set_offset ; Call Procedure


loc_116B0:
mov	ds:_byte_2D097_hnm_finished_flag, 0FFh
call	_sub_1093F_intro_script_load_word ; Call Procedure

mov	bx, ax
inc	bx		; Increment by 1
jz	short loc_116F1	; Jump if Zero (ZF=1)

push	ax
call	sub_10911	; Call Procedure

call	ds:_ptr_22D65_gfx_vtable_func_41_copy_pal2_to_pal1 ; Indirect Call Far Procedure
call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

pop	bp
call	sub_1C097	; Call Procedure

inc	ds:word_2069B	; Increment by 1
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

call	sub_115A8	; Call Procedure

mov	al, 3Ah	; ':'
mov	bp, offset nullsub_1
call	_sub_1C108_transition ;	Call Procedure

call	sub_1C0F4	; Call Procedure


loc_116E1:
mov	ax, 258h
call	sub_1DDB0	; Call Procedure

call	_sub_1CC85_check_if_hnm_complete ; Call	Procedure

jz	short loc_116E1	; Jump if Zero (ZF=1)

call	sub_19985	; Call Procedure

jmp	short loc_116B0	; Jump

; ���������������������������������������������������������������������������

loc_116F1:
mov	ax, 0FFFFh
call	sub_1DDB0	; Call Procedure

jnb	short loc_116F1	; Jump if Not Below (CF=0)

jmp	_1003A_exit_with_error ; Jump

; END OF FUNCTION CHUNK	FOR sub_11707
; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_14F0C

loc_116FC:
mov	byte ptr ds:2Ah, 0C8h ;	'�'
mov	ax, 128Fh
call	sub_11771	; Call Procedure

; END OF FUNCTION CHUNK	FOR sub_14F0C



sub_11707 proc near

; FUNCTION CHUNK AT 0FA7 SIZE 0000000B BYTES
; FUNCTION CHUNK AT 13A0 SIZE 00000028 BYTES
; FUNCTION CHUNK AT 13E4 SIZE 00000091 BYTES
; FUNCTION CHUNK AT 148D SIZE 0000000B BYTES
; FUNCTION CHUNK AT 14C9 SIZE 0000008D BYTES
; FUNCTION CHUNK AT 167C SIZE 00000080 BYTES
; FUNCTION CHUNK AT 9ED5 SIZE 0000001C BYTES

cmp	ds:word_216D0, 1FAEh ; Compare Two Operands
jnz	short loc_1171A	; Jump if Not Zero (ZF=0)

mov	di, 1B56h
call	sub_1D6FE	; Call Procedure

jnb	short loc_1171A	; Jump if Not Below (CF=0)

jmp	loc_19ED5	; Jump

; ���������������������������������������������������������������������������

loc_1171A:
mov	ds:_byte_2C34D_key_enter_status, 0
mov	si, ds:word_23C2A
lods	byte ptr cs:[si] ; Load	String
cmp	al, 0FFh	; Compare Two Operands
jz	short loc_11736	; Jump if Zero (ZF=1)

mov	ds:word_23C2A, si
xor	ah, ah		; Logical Exclusive OR
mov	bx, ax
jmp	cs:off_11475[bx] ; Indirect Near Jump

; ���������������������������������������������������������������������������

loc_11736:
mov	si, offset unk_20C1B
call	sub_1DA5F	; Call Procedure

mov	ax, ds:word_23C26
mov	byte ptr ds:word_1F4B4,	al

loc_11742:
mov	ds:byte_23B90, ah
xor	al, al		; Logical Exclusive OR
mov	ds:byte_23C24, al
cmp	ds:byte_1F4DA, 48h ; 'H' ; Compare Two Operands
jz	short loc_11755	; Jump if Zero (ZF=1)

call	sub_1ADBE	; Call Procedure


loc_11755:		; Call Procedure
call	sub_1B2BE

cmp	ds:byte_1F5AB, 0 ; Compare Two Operands
js	short loc_11762	; Jump if Sign (SF=1)

jmp	loc_10FA7	; Jump

; ���������������������������������������������������������������������������

loc_11762:		; Call Procedure
call	sub_1AD5E

call	sub_168EB	; Call Procedure

jmp	sub_1780A	; Jump

sub_11707 endp

; ���������������������������������������������������������������������������

loc_1176B:		; Logical Exclusive OR
xor	byte ptr ds:4775h, 0FFh
retn			; Return Near from Procedure




sub_11771 proc near
mov	ds:477Ah, ax
mov	word ptr ds:4778h, 0
inc	byte ptr ds:4774h ; Increment by 1
call	sub_1B2B9	; Call Procedure

call	sub_1AD5E	; Call Procedure

mov	al, ds:4
mov	ah, ds:46E0h
mov	ds:4776h, ax


loc_1178E:
mov	bp, 64h	; 'd'
mov	si, 176Bh
jmp	sub_1DA25	; Jump

sub_11771 endp




sub_11797 proc near
push	ds:_word_21C34_resource_id
call	_sub_1C137_load_icons_sprites ;	Call Procedure

mov	dx, 7Eh	; '~'
mov	bx, 94h	; '�'
mov	ax, 0Fh
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

mov	ax, 10h
add	al, ds:0E8h	; Add
mov	dx, 96h	; '�'
mov	bx, 89h	; '�'
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

pop	ax
jmp	_sub_1C13E_open_sprite_sheet ; Jump

sub_11797 endp




sub_117BE proc near
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

mov	si, 1E6Eh
push	si
cmp	byte ptr ds:0CE66h, 0 ;	Compare	Two Operands
jnz	short loc_117D1	; Jump if Not Zero (ZF=0)

call	sub_1C446	; Call Procedure

jmp	short loc_117DF	; Jump

; ���������������������������������������������������������������������������

loc_117D1:
mov	bp, 1E76h
mov	si, 0CD9Eh
mov	es, word ptr ds:0DBD6h
assume es:nothing
call	dword ptr ds:391Dh ; Indirect Call Far Procedure


loc_117DF:		; Call Procedure
call	sub_11797

pop	si
jmp	_sub_1C4F0_rect_at_si_to_regs ;	Jump

sub_117BE endp




sub_117E6 proc near
cmp	byte ptr ds:11C9h, 0 ; Compare Two Operands
jnz	short locret_1181D ; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:0E8h, 0Ah ;	Compare	Two Operands
jz	short locret_1181D ; Jump if Zero (ZF=1)

inc	byte ptr ds:0E8h ; Increment by	1
call	sub_117BE	; Call Procedure

mov	ax, 8
call	sub_1E387	; Call Procedure

jmp	short sub_117E6	; Jump

sub_117E6 endp




sub_11803 proc near
cmp	ds:byte_21D97, 0 ; Compare Two Operands
jnz	short locret_1181D ; Jump if Not Zero (ZF=0)

cmp	ds:byte_1F598, 0 ; Compare Two Operands
jz	short locret_1181D ; Jump if Zero (ZF=1)

mov	ds:byte_2C316, 1
call	sub_1181E	; Call Procedure

dec	ds:byte_2C316	; Decrement by 1


locret_1181D:		; Return Near from Procedure
retn

sub_11803 endp




sub_1181E proc near
cmp	ds:byte_1F598, 0 ; Compare Two Operands
jz	short locret_1181D ; Jump if Zero (ZF=1)

dec	ds:byte_1F598	; Decrement by 1
call	sub_117BE	; Call Procedure

mov	ax, 8
call	sub_1E387	; Call Procedure

jmp	short sub_1181E	; Jump

sub_1181E endp




sub_11834 proc near
mov	si, 0CD9Eh
mov	bp, 1E76h
mov	es, word ptr ds:0DBD6h
call	dword ptr ds:3919h ; Indirect Call Far Procedure
retn			; Return Near from Procedure

sub_11834 endp




sub_11843 proc near
cmp	ds:byte_1F598, 0 ; Compare Two Operands
jz	short locret_1181D ; Jump if Zero (ZF=1)

mov	ds:byte_1F598, 9
call	sub_117BE	; Call Procedure

mov	ax, 8
call	sub_1E387	; Call Procedure

mov	ds:byte_1F598, 8
jmp	sub_117BE	; Jump

sub_11843 endp




sub_11860 proc near
cmp	ds:byte_20679, 0 ; Compare Two Operands
jz	short loc_11868	; Jump if Zero (ZF=1)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_11868:		; Call Procedure
call	sub_11843


loc_1186B:		; Call Procedure
call	sub_1DAA3

neg	byte ptr ds:0FBh ; Two's Complement Negation
jns	short loc_11877	; Jump if Not Sign (SF=0)

jmp	sub_15A1A	; Jump

; ���������������������������������������������������������������������������

loc_11877:		; Call Procedure
call	sub_1D2BD

call	sub_15ADF	; Call Procedure

mov	al, ds:28E8h
mov	ds:28E7h, al
call	sub_1B930	; Call Procedure

mov	word ptr ds:1C14h, 80h ; '�'
mov	word ptr ds:1C22h, 80h ; '�'
mov	bp, 0D75Ah
call	sub_1C097	; Call Procedure

mov	al, 34h	; '4'

sub_11860 endp




sub_1189A proc near
mov	bp, offset sub_12DB1
cmp	ds:byte_23B89, 0 ; Compare Two Operands
jz	short loc_118A6	; Jump if Zero (ZF=1)

jmp	bp		; Indirect Near	Jump

; ���������������������������������������������������������������������������

loc_118A6:		; Logical Exclusive OR
xor	dx, dx
call	_sub_1C108_transition ;	Call Procedure

call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

call	sub_1AE04	; Call Procedure

mov	ax, ds:_word_2C32A_time_passed
mov	ds:word_2D10A, ax
jmp	sub_117E6	; Jump

sub_1189A endp




sub_118BA proc near
mov	word ptr ds:1C06h, 0
mov	word ptr ds:1C14h, 0
mov	word ptr ds:1C22h, 0
call	sub_139E6	; Call Procedure

call	_sub_1AC30_call_pcm_audio_vtable_func_5	; Call Procedure

call	sub_14D00	; Call Procedure

call	sub_1D2BD	; Call Procedure

call	sub_14ACA	; Call Procedure

call	sub_198E6	; Call Procedure

mov	byte ptr ds:46DFh, 0
cmp	byte ptr ds:2Bh, 0 ; Compare Two Operands
jz	short locret_118ED ; Jump if Zero (ZF=1)

call	sub_10B21	; Call Procedure


locret_118ED:		; Return Near from Procedure
retn

sub_118BA endp




sub_118EE proc near
call	sub_1D41B	; Call Procedure

cmp	bp, 2012h	; Compare Two Operands
jnz	short loc_118FA	; Jump if Not Zero (ZF=0)

jmp	sub_1D2E2	; Jump

; ���������������������������������������������������������������������������

loc_118FA:
mov	ax, ds:4
cmp	ah, 20h	; ' '   ; Compare Two Operands
jnz	short locret_11947 ; Jump if Not Zero (ZF=0)

cmp	al, 1		; Compare Two Operands
jz	short locret_11947 ; Jump if Zero (ZF=1)

mov	ax, 1ABAh
call	sub_1D95E	; Call Procedure

call	sub_1D2BD	; Call Procedure

call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

mov	si, 143Ch
mov	al, 0F1h ; '�'
mov	es, ds:_word_2D08A_framebuffer_active
call	ds:_ptr_22D65_gfx_vtable_func_10 ; Indirect Call Far Procedure
mov	si, 1444h
mov	al, 0F7h ; '�'
call	loc_15B6E	; Call Procedure

mov	ax, 21h	; '!'
call	_sub_1C13E_open_sprite_sheet ; PALPLAN.HSQ

mov	si, 120Bh
call	sub_1C21B	; Call Procedure

call	sub_11948	; Call Procedure

mov	si, 143Ch
mov	al, 10h
call	sub_1C0D5	; Call Procedure

mov	bp, 2012h
mov	bx, 19FCh
jmp	sub_1D323	; Jump

; ���������������������������������������������������������������������������

locret_11947:		; Return Near from Procedure
retn

sub_118EE endp




sub_11948 proc near
sub	sp, 24h		; Integer Subtraction
mov	di, sp
push	ss
pop	es
assume es:seg001
mov	cx, 24h	; '$'
xor	ax, ax		; Logical Exclusive OR
rep stosb		; Store	String
mov	si, 0FD8h
mov	di, sp
mov	cx, 10h
mov	dh, ds:7


loc_11962:		; Compare Two Operands
cmp	dh, [si+3]
jnz	short loc_11980	; Jump if Not Zero (ZF=0)

mov	al, [si+0Eh]
call	sub_1127C	; Call Procedure

jb	short loc_11980	; Jump if Below	(CF=1)

mov	bx, [si]
dec	bl		; Decrement by 1
xor	bh, bh		; Logical Exclusive OR
test	byte ptr [si+0Fh], 40h ; Logical Compare
jz	short loc_1197E	; Jump if Zero (ZF=1)


loc_1197B:		; Add
add	bx, 0Ch


loc_1197E:		; Increment by 1
inc	byte ptr [bx+di]


loc_11980:		; Add
add	si, 10h
loop	loc_11962	; Loop while CX	!= 0

mov	bx, ds:4
xor	bh, bh		; Logical Exclusive OR
cmp	bl, 0Ch		; Compare Two Operands
ja	short loc_11995	; Jump if Above	(CF=0 &	ZF=0)

add	bl, 17h		; Add
inc	byte ptr [bx+di] ; Increment by	1


loc_11995:
mov	cx, 0Bh
inc	di		; Increment by 1
mov	si, 1426h


loc_1199C:
mov	dx, ds:120Dh
mov	bx, ds:120Fh
lodsb			; Load String
xor	ah, ah		; Logical Exclusive OR
add	dx, ax		; Add
lodsb			; Load String
add	bx, ax		; Add
push	cx
push	si
push	di
add	bx, 2		; Add
add	dx, 3		; Add
mov	cl, [di]
call	sub_119DF	; Call Procedure

add	bx, 7		; Add
mov	cl, [di+0Ch]
call	sub_119DF	; Call Procedure

sub	bx, 4		; Integer Subtraction
add	dx, 9		; Add
cmp	byte ptr [di+18h], 0 ; Compare Two Operands
jz	short loc_119D5	; Jump if Zero (ZF=1)

mov	ax, 1
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9


loc_119D5:
pop	di
pop	si
pop	cx
inc	di		; Increment by 1
loop	loc_1199C	; Loop while CX	!= 0

add	sp, 24h		; Add
retn			; Return Near from Procedure

sub_11948 endp




sub_119DF proc near
xor	ch, ch		; Logical Exclusive OR
jcxz	short locret_119FB ; Jump if CX	is 0

push	dx
push	di
cmp	cl, 5		; Compare Two Operands
jbe	short loc_119EC	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	cl, 5


loc_119EC:
push	cx
mov	ax, 2
call	sub_1C2FD	; Call Procedure

pop	cx
add	dx, 4		; Add
loop	loc_119EC	; Loop while CX	!= 0

pop	di
pop	dx


locret_119FB:		; Return Near from Procedure
retn

sub_119DF endp




sub_119FC proc near
call	sub_1DAA3	; Call Procedure

mov	si, 143Ch
push	si
call	sub_1C446	; Call Procedure

pop	si
mov	al, 12h
call	sub_1C0D5	; Call Procedure

jmp	sub_1D95B	; Jump

sub_119FC endp




sub_11A0F proc near
cmp	ds:word_20FAE, 0 ; Compare Two Operands
jnz	short locret_11A33 ; Jump if Not Zero (ZF=0)

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

push	ds:_word_21C34_resource_id
call	_sub_1C137_load_icons_sprites ;	Call Procedure

mov	si, 1AF4h
call	sub_1D200	; Call Procedure

call	sub_11A34	; Call Procedure

mov	si, 1F06h
call	_sub_1C4AA_gfx_copy_rect_to_screen ; Call Procedure

pop	ax
call	_sub_1C13E_open_sprite_sheet ; Call Procedure


locret_11A33:		; Return Near from Procedure
retn

sub_11A0F endp




sub_11A34 proc near
cmp	word ptr ds:1AFEh, 0 ; Compare Two Operands
jnz	short locret_11A33 ; Jump if Not Zero (ZF=0)

push	ds:_word_2D08A_framebuffer_active
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

mov	ax, ds:2
and	ax, 0Fh		; Logical AND
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
add	ax, 1E7Eh	; Add
mov	si, ax
mov	ax, 4Ah	; 'J'
call	sub_11A9B	; Call Procedure

mov	ax, 4Bh	; 'K'
call	sub_11A9B	; Call Procedure

call	sub_1D075	; Call Procedure

mov	ds:word_2D094, 0F1FAh
call	sub_11AD1	; Call Procedure

mov	bx, 16Dh
add	ax, bx		; Add


loc_11A70:		; Integer Subtraction
sub	ax, bx
cmp	ax, bx		; Compare Two Operands
jnb	short loc_11A70	; Jump if Not Below (CF=0)

inc	ax		; Increment by 1
mov	dx, 0Bh
mov	bx, 0BEh ; '�'
cmp	ax, 64h	; 'd'   ; Compare Two Operands
jnb	short loc_11A8D	; Jump if Not Below (CF=0)

sub	dl, 2		; Integer Subtraction
cmp	ax, 0Ah		; Compare Two Operands
jnb	short loc_11A8D	; Jump if Not Below (CF=0)

sub	dl, 2		; Integer Subtraction


loc_11A8D:		; Call Procedure
call	sub_1E290

mov	al, 20h	; ' '
call	ds:off_219C8	; Indirect Call	Near Procedure

pop	ds:_word_2D08A_framebuffer_active
retn			; Return Near from Procedure

sub_11A34 endp




sub_11A9B proc near
push	ax
lodsw			; Load String
mov	dx, ax
lodsw			; Load String
mov	bx, ax
pop	ax
or	dx, dx		; Logical Inclusive OR
jz	short locret_11AC4 ; Jump if Zero (ZF=1)

push	si
call	sub_1C1F4	; Call Procedure

push	ds
push	es
mov	es, word ptr ds:0DBD8h
assume es:nothing
pop	ds
lodsw			; Load String
mov	di, ax
lodsw			; Load String
mov	cx, ax
xor	ch, ch		; Logical Exclusive OR
mov	bp, 1EFEh
call	ss:_ptr_22D65_gfx_vtable_func_06 ; Indirect Call Far Procedure
pop	ds
pop	si


locret_11AC4:		; Return Near from Procedure
retn

sub_11A9B endp




sub_11AC5 proc near
mov	ax, ds:2
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
retn			; Return Near from Procedure

sub_11AC5 endp




sub_11AD1 proc near
mov	ax, ds:2
add	ax, 3		; Add
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
retn			; Return Near from Procedure

sub_11AD1 endp




sub_11AE0 proc near
mov	ax, ds:2

loc_11AE3:		; Logical AND
and	ax, 0Fh

locret_11AE6:		; Return Near from Procedure
retn

sub_11AE0 endp

; ���������������������������������������������������������������������������
call	sub_1D41B	; Call Procedure

cmp	bp, 1F7Eh	; Compare Two Operands
jnz	short nullsub_5	; Jump if Not Zero (ZF=0)

mov	ax, ds:_word_2C32A_time_passed

loc_11AF3:		; Compare Two Operands
cmp	ax, ds:word_23C20
jz	short nullsub_5	; Jump if Zero (ZF=1)

mov	word ptr ds:loc_1476F+1, ax

loc_11AFC:		; Integer Subtraction
sub	ax, ds:word_23C1E
cmp	ax, ds:word_23C22 ; Compare Two	Operands
jb	short nullsub_5	; Jump if Below	(CF=1)

call	sub_1C85B	; Call Procedure

call	sub_1C868	; Call Procedure

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_5. PRESS KEYPAD "+" TO EXPAND]



sub_11B0D proc near
call	sub_1ABCC	; Call Procedure

jnz	short nullsub_5	; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:2788h, 0 ; Compare Two Operands
jnz	short nullsub_5	; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:2Ah, 0C8h ;	'�' ; Compare Two Operands
jnb	short nullsub_5	; Jump if Not Below (CF=0)

call	sub_12B2A	; Call Procedure

sub_11B0D endp




sub_11B23 proc near

; FUNCTION CHUNK AT 1BB8 SIZE 00000034 BYTES

cmp	byte ptr ds:46DDh, 0 ; Compare Two Operands
jz	short nullsub_5	; Jump if Zero (ZF=1)

mov	byte ptr ds:46DDh, 0
mov	al, ds:0F4h
dec	al		; Decrement by 1
cmp	al, 10h		; Compare Two Operands
jge	short loc_11B3D	; Jump if Greater or Equal (SF=OF)

xor	al, al		; Logical Exclusive OR
mov	ds:0F5h, al


loc_11B3D:
mov	ds:0F4h, al
call	sub_11A0F	; Call Procedure

call	sub_138E1	; Call Procedure


loc_11B46:
mov	ax, ds:2
mov	cx, ax
xchg	ax, ds:1174h	; Exchange Register/Memory with	Register
and	al, 0F0h	; Logical AND
and	cl, 0F0h	; Logical AND
sub	al, cl		; Integer Subtraction

loc_11B56:
mov	ds:46DEh, al
jz	short loc_11B5E	; Jump if Zero (ZF=1)

call	sub_11C46	; Call Procedure


loc_11B5E:		; Compare Two Operands
cmp	byte ptr ds:0C2h, 7
jnb	short sub_11BB2	; Jump if Not Below (CF=0)

call	sub_11D9F	; Call Procedure

push	word ptr ds:11F7h
push	word ptr ds:11CEh
call	sub_16C6F	; Call Procedure

call	_sub_163F0_map_func_qq ; Call Procedure

call	sub_11AE0	; Call Procedure

shl	ax, 1		; Shift	Logical	Left
mov	si, ax
call	cs:off_11DB3[si] ; Indirect Call Near Procedure

call	sub_11C18	; Call Procedure

pop	di
call	sub_1331E	; Call Procedure

pop	word ptr ds:11F7h


loc_11B8D:		; Call Procedure
call	sub_11BEC

cmp	byte ptr ds:46D9h, 0 ; Compare Two Operands
jnz	short sub_11BB2	; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:46ECh, 0 ; Compare Two Operands
jz	short loc_11BA1	; Jump if Zero (ZF=1)

call	sub_15D6D	; Call Procedure


loc_11BA1:
mov	di, ds:114Eh
or	di, di		; Logical Inclusive OR
jz	short sub_11BB2	; Jump if Zero (ZF=1)

cmp	byte ptr ds:473Bh, 0 ; Compare Two Operands
js	short loc_11BD2	; Jump if Sign (SF=1)

ja	short loc_11BB8	; Jump if Above	(CF=0 &	ZF=0)

sub_11B23 endp




sub_11BB2 proc near
mov	byte ptr ds:473Bh, 0
retn			; Return Near from Procedure

sub_11BB2 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_11B23

loc_11BB8:		; Compare Two Operands
cmp	byte ptr ds:0FBh, 0
js	short sub_11BB2	; Jump if Sign (SF=1)

cmp	byte ptr ds:46DAh, 0 ; Compare Two Operands
jnz	short sub_11BB2	; Jump if Not Zero (ZF=0)

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	sub_11BB2	; Call Procedure

call	sub_10B21	; Call Procedure

jmp	sub_12DB1	; Jump

; ���������������������������������������������������������������������������

loc_11BD2:		; Call Procedure
call	sub_11BB2

cmp	byte ptr ds:0FBh, 0 ; Compare Two Operands
js	short loc_11BE9	; Jump if Sign (SF=1)

cmp	byte ptr ds:46DAh, 0 ; Compare Two Operands
jnz	short sub_11BB2	; Jump if Not Zero (ZF=0)

call	sub_1D2BD	; Call Procedure

jmp	loc_10FA7	; Jump

; ���������������������������������������������������������������������������

loc_11BE9:		; Jump
jmp	sub_15D6D

; END OF FUNCTION CHUNK	FOR sub_11B23



sub_11BEC proc near
cmp	byte ptr ds:2Bh, 0 ; Compare Two Operands
jz	short locret_11C17 ; Jump if Zero (ZF=1)

mov	di, ds:114Eh

loc_11BF7:		; Call Procedure
call	sub_1503C

cmp	byte ptr ds:46D9h, 0 ; Compare Two Operands
jz	short loc_11C06	; Jump if Zero (ZF=1)

mov	byte ptr ds:46D9h, 6


loc_11C06:		; Compare Two Operands
cmp	byte ptr ds:2Bh, 0
jnz	short locret_11C17 ; Jump if Not Zero (ZF=0)

push	di
call	sub_10B21	; Call Procedure

pop	di
or	byte ptr ds:473Bh, 1 ; Logical Inclusive OR


locret_11C17:		; Return Near from Procedure
retn

sub_11BEC endp




sub_11C18 proc near
cmp	byte ptr ds:46EBh, 0 ; Compare Two Operands
jns	short loc_11C39	; Jump if Not Sign (SF=0)

call	near ptr off_1C13B ; Call Procedure

mov	si, ds:46FAh
or	si, si		; Logical Inclusive OR
jz	short loc_11C2D	; Jump if Zero (ZF=1)

call	sub_178E9	; Call Procedure


loc_11C2D:
mov	di, ds:46F8h
or	di, di		; Logical Inclusive OR
jz	short locret_11C38 ; Jump if Zero (ZF=1)

call	sub_1600E	; Call Procedure


locret_11C38:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_11C39:		; Jump if Not Zero (ZF=0)
jnz	short locret_11C45

cmp	byte ptr ds:0FBh, 0 ; Compare Two Operands
jns	short locret_11C45 ; Jump if Not Sign (SF=0)

call	sub_1BDBB	; Call Procedure


locret_11C45:		; Return Near from Procedure
retn

sub_11C18 endp




sub_11C46 proc near
mov	al, ds:2Ah
mov	ah, al
xchg	al, ds:0FEh	; Exchange Register/Memory with	Register
cmp	al, ah		; Compare Two Operands
jz	short loc_11C58	; Jump if Zero (ZF=1)

mov	byte ptr ds:0FFh, 0


loc_11C58:		; Increment by 1
inc	byte ptr ds:0FFh
call	sub_11D66	; Call Procedure

call	sub_11E43	; Call Procedure

mov	al, ds:0D5h
inc	al		; Increment by 1
cmp	al, 2		; Compare Two Operands
jb	short loc_11C6E	; Jump if Below	(CF=1)

mov	ds:0D5h, al


loc_11C6E:		; Logical Exclusive OR
xor	ax, ax
xchg	ax, ds:1172h	; Exchange Register/Memory with	Register

loc_11C74:
mov	bx, ds:0A0h
add	ax, bx		; Add
xchg	bx, ds:1170h	; Exchange Register/Memory with	Register
sub	ax, bx		; Integer Subtraction
jnb	short loc_11C84	; Jump if Not Below (CF=0)

xor	ax, ax		; Logical Exclusive OR


loc_11C84:
mov	ds:0A6h, ax
xchg	ax, ds:0AEh	; Exchange Register/Memory with	Register
xor	bx, bx		; Logical Exclusive OR
sub	ax, ds:0A6h	; Integer Subtraction
jnb	short loc_11C96	; Jump if Not Below (CF=0)

neg	ax		; Two's Complement Negation
xchg	ax, bx		; Exchange Register/Memory with	Register


loc_11C96:
mov	ds:0B2h, ax
mov	ds:0B0h, bx
call	sub_11CDA	; Call Procedure

call	sub_1C02E	; Call Procedure

call	sub_1BF26	; Call Procedure

call	sub_1E3CC	; Call Procedure

mov	bx, ax
mov	si, 10D8h


loc_11CAE:		; Logical Compare
test	byte ptr [si+2], 8
jz	short loc_11CD1	; Jump if Zero (ZF=1)

mov	bp, 4


loc_11CB7:		; Compare Two Operands
cmp	byte ptr [bp+si+4], 0
jnz	short loc_11CCE	; Jump if Not Zero (ZF=0)

cmp	byte ptr [bp+si+9], 0 ;	Compare	Two Operands
jns	short loc_11CCE	; Jump if Not Sign (SF=0)

rol	bx, 1		; Rotate Left
rol	bx, 1		; Rotate Left
mov	al, bl
and	al, 3		; Logical AND
mov	[bp+si+4], al


loc_11CCE:		; Decrement by 1
dec	bp
jns	short loc_11CB7	; Jump if Not Sign (SF=0)


loc_11CD1:		; Add
add	si, 11h
cmp	byte ptr [si], 14h ; Compare Two Operands
jb	short loc_11CAE	; Jump if Below	(CF=1)

retn			; Return Near from Procedure

sub_11C46 endp




sub_11CDA proc near
mov	di, 100h
xor	cx, cx		; Logical Exclusive OR
xor	dx, dx		; Logical Exclusive OR


loc_11CE1:		; Call Procedure
call	sub_15D36

jb	short loc_11CF4	; Jump if Below	(CF=1)

inc	dx		; Increment by 1
mov	al, [di+12h]
shr	al, 1		; Shift	Logical	Right
shr	al, 1		; Shift	Logical	Right
shr	al, 1		; Shift	Logical	Right
xor	ah, ah		; Logical Exclusive OR
add	cx, ax		; Add


loc_11CF4:		; Add
add	di, 1Ch
cmp	byte ptr [di], 0FFh ; Compare Two Operands
jnz	short loc_11CE1	; Jump if Not Zero (ZF=0)

mov	bx, cx
shr	bx, 1		; Shift	Logical	Right
shr	bx, 1		; Shift	Logical	Right
shr	bx, 1		; Shift	Logical	Right
shr	bx, 1		; Shift	Logical	Right
call	sub_1E3DF	; Call Procedure

add	cx, ax		; Add
mov	ds:0A8h, cx
retn			; Return Near from Procedure

sub_11CDA endp




sub_11D10 proc near
rol	word ptr ds:0, 1 ; Rotate Left
jnb	short locret_11D34 ; Jump if Not Below (CF=0)

mov	si, 8AAh


loc_11D19:		; Logical Compare
test	byte ptr [si+10h], 80h

loc_11D1D:		; Jump if Zero (ZF=1)
jz	short loc_11D2B

mov	al, [si+1Ah]
dec	al		; Decrement by 1
cmp	al, 0C7h ; '�'  ; Compare Two Operands
jnb	short loc_11D2B	; Jump if Not Below (CF=0)

inc	byte ptr [si+1Ah] ; Increment by 1


loc_11D2B:		; Add
add	si, 1Bh
cmp	si, 0FA0h	; Compare Two Operands
jb	short loc_11D19	; Jump if Below	(CF=1)


locret_11D34:		; Return Near from Procedure
retn

sub_11D10 endp

; ���������������������������������������������������������������������������
add	al, [bp+si]	; Add
add	al, [bp+si]	; Add
add	al, [bp+di]	; Add
add	ax, [bp+di]	; Add
add	al, 4		; Add
add	al, 4		; Add
add	al, 4		; Add
add	al, 4		; Add
add	ax, 202h	; Add
add	al, [bp+si]	; Add
add	al, [bp+di]	; Add
add	ax, [si]	; Add
add	al, 4		; Add
add	al, 4		; Add
add	al, 4		; Add
add	al, 0Ch		; Add
add	[bx+di], ax	; Add
add	[bx+di], ax	; Add
add	[bx+di], ax	; Add
add	[bp+di], ax	; Add
add	ax, [bp+di]	; Add
add	ax, [bp+di]	; Add
add	ax, [bp+di]	; Add
add	ax, [bp+si]	; Add




sub_11D66 proc near
mov	si, 0FD8h
mov	cx, 0Ch


loc_11D6C:
mov	ax, [si+2]
cmp	al, 80h	; '�'   ; Compare Two Operands
jnz	short loc_11D99	; Jump if Not Zero (ZF=0)

cmp	ah, 0FFh	; Compare Two Operands
jz	short loc_11D99	; Jump if Zero (ZF=1)

mov	al, 1Ch
mul	ah		; Unsigned Multiplication of AL	or AX
add	ax, 0E4h ; '�'  ; Add
mov	di, ax
mov	ax, [si]
mov	bl, [di+8]
cmp	ah, bl		; Compare Two Operands
jnz	short loc_11D93	; Jump if Not Zero (ZF=0)

xor	bh, bh		; Logical Exclusive OR
cmp	al, cs:[bx+1D35h] ; Compare Two	Operands
jbe	short loc_11D99	; Jump if Below	or Equal (CF=1 | ZF=1)


loc_11D93:
mov	ah, bl
mov	al, 1
mov	[si], ax


loc_11D99:		; Add
add	si, 10h
loop	loc_11D6C	; Loop while CX	!= 0

retn			; Return Near from Procedure

sub_11D66 endp




sub_11D9F proc near
test	word ptr ds:12h, 80h ; Logical Compare
jnz	short locret_11DB2 ; Jump if Not Zero (ZF=0)

mov	si, 1048h
call	sub_11E01	; Call Procedure

jnb	short locret_11DB2 ; Jump if Not Below (CF=0)

call	sub_11EDA	; Call Procedure


locret_11DB2:		; Return Near from Procedure
retn

sub_11D9F endp

; ���������������������������������������������������������������������������
off_11DB3 dw offset nullsub_3
dw offset nullsub_3
dw offset nullsub_3
dw offset sub_11DD4
dw offset sub_11DD7
dw offset nullsub_3
dw offset nullsub_3
dw offset nullsub_3
dw offset sub_11DDA
off_11DC5 dw offset nullsub_3
dw offset nullsub_3
dw offset nullsub_3
dw offset nullsub_3
dw offset nullsub_3
dw offset nullsub_3
dw offset sub_11DFE
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_3. PRESS KEYPAD "+" TO EXPAND]


; Attributes: thunk

sub_11DD4 proc near
jmp	loc_120A4	; Jump

sub_11DD4 endp



; Attributes: thunk

sub_11DD7 proc near
jmp	sub_11F64	; Jump

sub_11DD7 endp




sub_11DDA proc near
test	byte ptr ds:0BFh, 10h ;	Logical	Compare
jz	short locret_11DFD ; Jump if Zero (ZF=1)

test	word ptr ds:10h, 8 ; Logical Compare
jnz	short locret_11DFD ; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:0Bh, 8 ; Compare Two Operands
jz	short locret_11DFD ; Jump if Zero (ZF=1)

cmp	byte ptr ds:0C2h, 0 ; Compare Two Operands
jnz	short locret_11DFD ; Jump if Not Zero (ZF=0)

mov	ax, 30Bh
call	sub_129EE	; Call Procedure


locret_11DFD:		; Return Near from Procedure
retn

sub_11DDA endp



; Attributes: thunk

sub_11DFE proc near
jmp	sub_11D10	; Jump

sub_11DFE endp




sub_11E01 proc near
cmp	byte ptr ds:2Ah, 5Dh ; ']' ; Compare Two Operands
jnz	short loc_11E3E	; Jump if Not Zero (ZF=0)

cmp	byte ptr [si+0Eh], 7 ; Compare Two Operands
jnz	short loc_11E3E	; Jump if Not Zero (ZF=0)

mov	bx, [si+2]
cmp	bl, 80h	; '�'   ; Compare Two Operands
jnz	short loc_11E3E	; Jump if Not Zero (ZF=0)

mov	byte ptr [si], 2

loc_11E19:		; Jump if Not Zero (ZF=0)
jnz	short loc_11E3E

mov	al, 1Ch
mul	bh		; Unsigned Multiplication of AL	or AX
add	ax, 0E4h ; '�'  ; Add
mov	di, ax

sub_11E01 endp




sub_11E24 proc near
mov	al, [di+9]
or	al, al		; Logical Inclusive OR
jz	short loc_11E3E	; Jump if Zero (ZF=1)

push	si


loc_11E2C:		; Call Procedure
call	sub_16906

test	word ptr [si+12h], 400h	; Logical Compare
jnz	short loc_11E40	; Jump if Not Zero (ZF=0)

mov	al, [si+1]
or	al, al		; Logical Inclusive OR
jnz	short loc_11E2C	; Jump if Not Zero (ZF=0)

pop	si


loc_11E3E:		; Clear	Carry Flag
clc
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_11E40:
pop	si
stc			; Set Carry Flag
retn			; Return Near from Procedure

sub_11E24 endp




sub_11E43 proc near
call	sub_11AC5	; Call Procedure

cmp	ax, ds:1156h	; Compare Two Operands
jb	short locret_11EA8 ; Jump if Below (CF=1)

cmp	byte ptr ds:2Ah, 5Ch ; '\' ; Compare Two Operands
jnz	short locret_11EA8 ; Jump if Not Zero (ZF=0)

cmp	word ptr ds:114Eh, 7C8h	; Compare Two Operands
jz	short locret_11EA8 ; Jump if Zero (ZF=1)

mov	di, 100h
xor	cx, cx		; Logical Exclusive OR


loc_11E60:		; Compare Two Operands
cmp	byte ptr [di+8], 28h ; '('
jnb	short loc_11E82	; Jump if Not Below (CF=0)

test	byte ptr [di+0Ah], 80h ; Logical Compare
jnz	short loc_11E82	; Jump if Not Zero (ZF=0)


loc_11E6C:		; Compare Two Operands
cmp	di, 2C0h
jz	short loc_11E82	; Jump if Zero (ZF=1)

xor	dx, dx		; Logical Exclusive OR

loc_11E74:
mov	bp, 1EA1h
call	sub_1661D	; Call Procedure

cmp	dx, cx		; Compare Two Operands
jbe	short loc_11E82	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	cx, dx
mov	bx, di


loc_11E82:		; Add
add	di, 1Ch
cmp	byte ptr [di], 0FFh ; Compare Two Operands
jnz	short loc_11E60	; Jump if Not Zero (ZF=0)

jcxz	short locret_11EA8 ; Jump if CX	is 0

mov	di, bx
mov	ds:11DBh, di
inc	byte ptr ds:0F8h ; Increment by	1
mov	bp, 1EA9h
call	sub_1661D	; Call Procedure

mov	al, 8
jmp	sub_171B2	; Jump

; ���������������������������������������������������������������������������
cmp	byte ptr [si+3], 8 ; Compare Two Operands
adc	dx, 0		; Add with Carry


locret_11EA8:		; Return Near from Procedure
retn

sub_11E43 endp

; ���������������������������������������������������������������������������
or	word ptr [si+12h], 400h	; Logical Inclusive OR
jmp	sub_17085	; Jump

; ���������������������������������������������������������������������������
mov	ax, [si+12h]
and	ax, 0FBFFh	; Logical AND
or	ax, 800h	; Logical Inclusive OR
mov	[si+12h], ax
retn			; Return Near from Procedure




sub_11EBE proc near
test	word ptr [si+12h], 800h	; Logical Compare
jz	short locret_11ED9 ; Jump if Zero (ZF=1)

mov	al, ds:2Ah
sub	al, 60h	; '`'   ; Integer Subtraction
cmp	al, 4		; Compare Two Operands
jnb	short locret_11ED9 ; Jump if Not Below (CF=0)

call	sub_1E270	; Call Procedure

mov	al, 64h	; 'd'
call	sub_1121F	; Call Procedure

call	sub_1E283	; Call Procedure


locret_11ED9:		; Return Near from Procedure
retn

sub_11EBE endp




sub_11EDA proc near
add	byte ptr ds:0F9h, 8 ; Add
jnz	short locret_11F12 ; Jump if Not Zero (ZF=0)

push	cx
push	si
mov	bp, 1EB1h
call	sub_16603	; Call Procedure

mov	ax, 709h
call	sub_129F0	; Call Procedure

dec	byte ptr ds:0F8h ; Decrement by	1
mov	di, 100h


loc_11EF6:		; Call Procedure
call	sub_11E24

jb	short loc_11F05	; Jump if Below	(CF=1)

add	di, 1Ch		; Add
cmp	byte ptr [di], 0FFh ; Compare Two Operands
jnz	short loc_11EF6	; Jump if Not Zero (ZF=0)

xor	di, di		; Logical Exclusive OR


loc_11F05:
mov	ds:11DBh, di
or	di, di		; Logical Inclusive OR
jnz	short loc_11F10	; Jump if Not Zero (ZF=0)

call	sub_111CB	; Call Procedure


loc_11F10:
pop	si
pop	cx


locret_11F12:		; Return Near from Procedure
retn

sub_11EDA endp

; ���������������������������������������������������������������������������
mov	di, 138h
mov	bx, 0FF9Ch


loc_11F19:
mov	ax, [di+4]
cmp	ax, bx		; Compare Two Operands
jle	short loc_11F37	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

call	sub_15D36	; Call Procedure

jb	short loc_11F37	; Jump if Below	(CF=1)

call	sub_15098	; Call Procedure

or	dx, dx		; Logical Inclusive OR
jnz	short loc_11F37	; Jump if Not Zero (ZF=0)

mov	ax, [di+4]
cmp	ax, bx		; Compare Two Operands
jle	short loc_11F37	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

mov	bx, ax
mov	si, di


loc_11F37:		; Add
add	di, 1Ch
cmp	byte ptr [di], 8 ; Compare Two Operands
jb	short loc_11F19	; Jump if Below	(CF=1)

cmp	bx, 0FF9Ch	; Compare Two Operands
jnz	short loc_11F47	; Jump if Not Zero (ZF=0)

mov	si, 100h


loc_11F47:
mov	di, si
call	sub_140AE	; Call Procedure

mov	dl, 3
mov	ds:1048h, dx
mov	ds:104Ah, bx
mov	ah, [di]
mov	al, [di+1]
mov	ds:0F2h, ax
mov	ax, 2B0Ah
jmp	loc_126DA	; Jump




sub_11F64 proc near
cmp	byte ptr ds:2Ah, 3Ch ; '<' ; Compare Two Operands
jnb	short loc_11F79	; Jump if Not Below (CF=0)

mov	ax, ds:2
sub	ax, ds:1154h	; Integer Subtraction
jb	short locret_11F91 ; Jump if Below (CF=1)

cmp	ax, 70h	; 'p'   ; Compare Two Operands
jb	short locret_11F91 ; Jump if Below (CF=1)


loc_11F79:		; Logical Compare
test	word ptr ds:2, 10h
jnz	short locret_11F91 ; Jump if Not Zero (ZF=0)

xor	al, al		; Logical Exclusive OR
xchg	al, ds:11BCh	; Exchange Register/Memory with	Register
or	al, al		; Logical Inclusive OR
jnz	short locret_11F91 ; Jump if Not Zero (ZF=0)

rol	word ptr ds:0, 1 ; Rotate Left
jb	short loc_11F92	; Jump if Below	(CF=1)


locret_11F91:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_11F92:		; Call Procedure
call	sub_12017

jz	short locret_12013 ; Jump if Zero (ZF=1)

inc	byte ptr ds:0C4h ; Increment by	1
mov	cx, 2


loc_11F9E:
mov	al, [bp+9]


loc_11FA1:		; Logical Inclusive OR
or	al, al
jz	short loc_11FCB	; Jump if Zero (ZF=1)

call	sub_16906	; Call Procedure

mov	al, [si+1]

loc_11FAB:		; Logical Compare
test	byte ptr [si+10h], 80h
jz	short loc_11FA1	; Jump if Zero (ZF=1)

push	cx
push	bp
push	si
push	di
mov	byte ptr [si+3], 8Dh ; '�'
call	sub_184A6	; Call Procedure

pop	di
pop	si
and	byte ptr [si+10h], 0EFh	; Logical AND
push	di
call	sub_18357	; Call Procedure

pop	di
pop	bp
pop	cx
loop	loc_11F9E	; Loop while CX	!= 0


loc_11FCB:		; Logical Inclusive OR
or	byte ptr [di+0Ah], 2
call	sub_183FD	; Call Procedure

call	sub_140AE	; Call Procedure

mov	si, 0FD8h
mov	cx, 9


loc_11FDB:		; Compare Two Operands
cmp	bx, [si+2]
jnz	short loc_11FE2	; Jump if Not Zero (ZF=0)

mov	[si], dx


loc_11FE2:		; Add
add	si, 10h
loop	loc_11FDB	; Loop while CX	!= 0

mov	al, 0Ch
mov	si, 8E0h
cmp	di, [si+4]	; Compare Two Operands
jnz	short loc_11FF3	; Jump if Not Zero (ZF=0)


loc_11FF1:		; Increment by 1
inc	al


loc_11FF3:
push	bx
push	dx
call	sub_171B2	; Call Procedure

pop	dx
pop	bx
cmp	bx, ds:6	; Compare Two Operands
jnz	short loc_12014	; Jump if Not Zero (ZF=0)

mov	ds:4, dx
mov	al, dl
mov	ds:0Bh,	al

loc_12009:		; Logical Inclusive OR
or	ds:473Bh, al
mov	ds:2Bh,	al

loc_12010:		; Call Procedure
call	sub_16144


locret_12013:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_12014:		; Jump
jmp	sub_15D50

sub_11F64 endp




sub_12017 proc near
mov	di, 100h

loc_1201A:
mov	word ptr ds:0D816h, 0
mov	bx, 64h	; 'd'


loc_12023:		; Compare Two Operands
cmp	byte ptr [di+8], 20h ; ' '
jnb	short loc_1207D	; Jump if Not Below (CF=0)

test	byte ptr [di+0Ah], 82h ; Logical Compare
jnz	short loc_1207D	; Jump if Not Zero (ZF=0)

cmp	bx, [di+4]	; Compare Two Operands

loc_12032:		; Jump if Less or Equal	(ZF=1 |	SF!=OF)
jle	short loc_1207D


loc_12034:		; Call Procedure
call	sub_11E24

jb	short loc_1207D	; Jump if Below	(CF=1)

push	bx
call	sub_1331E	; Call Procedure

pop	bx
mov	al, ds:60h
sub	al, ds:63h	; Integer Subtraction
jz	short loc_1207D	; Jump if Zero (ZF=1)

mov	bp, ds:0E4h
cmp	word ptr ds:0E2h, 1Eh ;	Compare	Two Operands
jb	short loc_1205D	; Jump if Below	(CF=1)

cmp	word ptr ds:0DCh, 1Eh ;	Compare	Two Operands
jnb	short loc_1207D	; Jump if Not Below (CF=0)

mov	bp, ds:0DEh


loc_1205D:		; Compare Two Operands
cmp	bp, 11Ch
jz	short loc_1207D	; Jump if Zero (ZF=1)

push	di
mov	di, bp
call	sub_15098	; Call Procedure


loc_12069:
mov	bp, di
pop	di
jcxz	short loc_1207D	; Jump if CX is	0

or	dx, dx		; Logical Inclusive OR
jnz	short loc_1207D	; Jump if Not Zero (ZF=0)

mov	bx, [di+4]
mov	ds:0D816h, di
mov	ds:0D818h, bp


loc_1207D:		; Add
add	di, 1Ch
cmp	byte ptr [di], 8 ; Compare Two Operands
jb	short loc_12023	; Jump if Below	(CF=1)

mov	bp, ds:0D818h
mov	di, ds:0D816h
or	di, di		; Logical Inclusive OR
retn			; Return Near from Procedure

sub_12017 endp




sub_12090 proc near

; FUNCTION CHUNK AT 2131 SIZE 0000002E BYTES

call	sub_11AC5	; Call Procedure

mov	ds:118Dh, ax
jmp	short loc_120D2	; Jump

; ���������������������������������������������������������������������������

loc_12098:		; Integer Subtraction
sub	ax, ds:118Dh
jz	short locret_120D1 ; Jump if Zero (ZF=1)

neg	ax		; Two's Complement Negation

loc_120A0:
mov	ds:0CFh, al
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_120A4:		; Logical Compare
test	byte ptr ds:0BFh, 80h
jz	short locret_120D1 ; Jump if Zero (ZF=1)

call	sub_11AC5	; Call Procedure

cmp	byte ptr ds:0C2h, 0 ; Compare Two Operands
jnz	short loc_12098	; Jump if Not Zero (ZF=0)


loc_120B5:		; Logical Compare
test	byte ptr ds:0BFh, 10h
jnz	short loc_12131	; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:11BBh, 0 ; Compare Two Operands
jz	short loc_120C6	; Jump if Zero (ZF=1)

jmp	sub_1215F	; Jump

; ���������������������������������������������������������������������������

loc_120C6:		; Integer Subtraction
sub	ax, ds:118Dh
jz	short loc_120D2	; Jump if Zero (ZF=1)

neg	ax		; Two's Complement Negation
mov	ds:0CFh, al


locret_120D1:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_120D2:
mov	al, ds:0C3h
inc	byte ptr ds:0C3h ; Increment by	1
mov	bx, 96h	; '�'
mul	bx		; Unsigned Multiplication of AL	or AX
or	dx, dx		; Logical Inclusive OR
jnz	short loc_12111	; Jump if Not Zero (ZF=0)

add	ax, 64h	; 'd'   ; Add
jb	short loc_12111	; Jump if Below	(CF=1)

mov	cx, ax
mov	bx, 3Fh	; '?'
call	sub_1E3B7	; Call Procedure

add	ax, 0E0h ; '�'  ; Add
mul	cx		; Unsigned Multiplication of AL	or AX
or	dh, dh		; Logical Inclusive OR
jnz	short loc_12111	; Jump if Not Zero (ZF=0)

mov	dh, dl
mov	dl, ah
mov	al, ds:0BEh

loc_120FF:		; Shift	Logical	Left
shl	al, 1
jb	short loc_12114	; Jump if Below	(CF=1)

not	al		; One's Complement Negation
mov	ah, 1
mul	dx		; Unsigned Multiplication of AL	or AX
xchg	dl, dh		; Exchange Register/Memory with	Register
xchg	dl, ah		; Exchange Register/Memory with	Register
or	ah, ah		; Logical Inclusive OR
jz	short loc_12114	; Jump if Zero (ZF=1)


loc_12111:
mov	dx, 0FFFFh


loc_12114:
mov	ds:0BCh, dx

loc_12118:
mov	byte ptr ds:0CFh, 0
or	byte ptr ds:0BFh, 90h ;	Logical	Inclusive OR

loc_12122:
mov	ax, 20Bh
cmp	byte ptr ds:0BEh, 0 ; Compare Two Operands
js	short loc_1212E	; Jump if Sign (SF=1)

inc	ah		; Increment by 1


loc_1212E:		; Jump
jmp	loc_126DA

sub_12090 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_12090

loc_12131:		; Integer Subtraction
sub	ax, ds:118Dh
jz	short locret_120D1 ; Jump if Zero (ZF=1)

cmp	ax, 4		; Compare Two Operands
jnb	short sub_1215F	; Jump if Not Below (CF=0)

shl	al, 1		; Shift	Logical	Left
shl	al, 1		; Shift	Logical	Left
mov	bl, al
call	sub_124D2	; Call Procedure

mov	al, ah
cmp	al, 3		; Compare Two Operands
jb	short loc_1214D	; Jump if Below	(CF=1)

mov	al, 2


loc_1214D:		; Add
add	al, bl
mov	bx, 2161h
xlat	byte ptr cs:[bx] ; Table Lookup	Translation
or	al, al		; Logical Inclusive OR
jz	short sub_1215F	; Jump if Zero (ZF=1)

mov	ah, al
mov	al, 0Bh
jmp	loc_126DA	; Jump

; END OF FUNCTION CHUNK	FOR sub_12090



sub_1215F proc near
mov	byte ptr ds:46D9h, 7
retn			; Return Near from Procedure

sub_1215F endp

; ���������������������������������������������������������������������������
db 4, 5, 6, 0, 5, 6, 2 dup(0), 6, 2 dup(0)



sub_12170 proc near
call	sub_1E270	; Call Procedure

mov	si, 0FD8h
mov	cx, 9


loc_12179:		; Logical Compare
test	byte ptr [si+0Fh], 40h
jnz	short loc_121F1	; Jump if Not Zero (ZF=0)

mov	dx, [si]
mov	bx, [si+2]
cmp	si, 1008h	; Compare Two Operands
jnz	short loc_12194	; Jump if Not Zero (ZF=0)

cmp	bx, 180h	; Compare Two Operands
jnz	short loc_12194	; Jump if Not Zero (ZF=0)

mov	dl, 4
mov	[si], dx


loc_12194:		; Compare Two Operands
cmp	bl, 80h	; '�'
jnz	short loc_121EE	; Jump if Not Zero (ZF=0)

cmp	dl, 1		; Compare Two Operands
jnz	short loc_121DC	; Jump if Not Zero (ZF=0)

cmp	dh, 21h	; '!'   ; Compare Two Operands
jnb	short loc_121F1	; Jump if Not Below (CF=0)

cmp	bh, ds:9	; Compare Two Operands
jz	short loc_121F1	; Jump if Zero (ZF=1)

mov	al, 1Ch
mul	bh		; Unsigned Multiplication of AL	or AX
add	ax, 0E4h ; '�'  ; Add
mov	di, ax
test	byte ptr [di+0Ah], 2 ; Logical Compare
jnz	short loc_121F1	; Jump if Not Zero (ZF=0)

inc	byte ptr [si]	; Increment by 1
cmp	bh, 1		; Compare Two Operands
jnz	short loc_121F1	; Jump if Not Zero (ZF=0)

mov	bx, 144Dh
mov	al, [si+0Eh]
xlat			; Table	Lookup Translation
mov	[si], al
and	byte ptr [si+0Fh], 0FBh	; Logical AND
cmp	al, 6		; Compare Two Operands
jnz	short loc_121F1	; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:2Ah, 24h ; '$' ; Compare Two Operands
jnb	short loc_121F1	; Jump if Not Below (CF=0)

mov	byte ptr [si], 0Ah

loc_121DA:		; Jump
jmp	short loc_121F1

; ���������������������������������������������������������������������������

loc_121DC:		; Compare Two Operands
cmp	si, 1028h

loc_121E0:		; Jump if Below	(CF=1)
jb	short loc_121F1

cmp	bh, 1		; Compare Two Operands
jnz	short loc_121F1	; Jump if Not Zero (ZF=0)

call	sub_121FA	; Call Procedure

mov	[si], al
jmp	short loc_121F1	; Jump

; ���������������������������������������������������������������������������

loc_121EE:		; Call Procedure
call	sub_1221D


loc_121F1:		; Add
add	si, 10h

loc_121F4:		; Loop while CX	!= 0
loop	loc_12179

call	sub_1E283	; Call Procedure

retn			; Return Near from Procedure

sub_12170 endp




sub_121FA proc near
mov	bx, 0Ah
call	sub_1E3DF	; Call Procedure


loc_12200:		; Add
add	al, 2

loc_12202:		; Compare Two Operands
cmp	byte ptr ds:2Ah, 54h ; 'T'
jnb	short locret_1221C ; Jump if Not Below (CF=0)

cmp	al, 3		; Compare Two Operands

loc_1220B:		; Jump if Zero (ZF=1)
jz	short sub_121FA

cmp	byte ptr ds:2Ah, 24h ; '$' ; Compare Two Operands
jnb	short locret_1221C ; Jump if Not Below (CF=0)


loc_12214:		; Compare Two Operands
cmp	al, 0Bh
jz	short sub_121FA	; Jump if Zero (ZF=1)


loc_12218:		; Compare Two Operands
cmp	al, 6
jz	short sub_121FA	; Jump if Zero (ZF=1)


locret_1221C:		; Return Near from Procedure
retn

sub_121FA endp




sub_1221D proc near
push	cx
push	si

loc_1221F:
mov	dx, [si]

loc_12221:		; Call Procedure
call	sub_15344

call	sub_140AE	; Call Procedure

pop	si
pop	cx
mov	[si], dx
mov	[si+2],	bx
cmp	bh, ds:9	; Compare Two Operands
jnz	short locret_12238 ; Jump if Not Zero (ZF=0)

or	byte ptr [si+0Fh], 4 ; Logical Inclusive OR


locret_12238:		; Return Near from Procedure
retn

sub_1221D endp




sub_12239 proc near
xor	ax, ax		; Logical Exclusive OR

loc_1223B:
mov	ds:9Fh,	al
mov	ds:20h,	ax
mov	ds:1Ah,	al

loc_12244:
mov	ax, ds:0A0h
or	ax, ax		; Logical Inclusive OR
jz	short loc_12250	; Jump if Zero (ZF=1)


loc_1224B:
mov	byte ptr ds:9Fh, 3


loc_12250:		; Call Procedure
call	sub_122B1


loc_12253:
mov	si, 10D8h
call	sub_11AC5	; Call Procedure

xor	dl, dl		; Logical Exclusive OR


loc_1225B:		; Compare Two Operands
cmp	word ptr [si+0Eh], 0
jz	short loc_12274	; Jump if Zero (ZF=1)

test	byte ptr [si+2], 60h ; Logical Compare

loc_12265:		; Jump if Not Zero (ZF=0)
jnz	short loc_12274

mov	ah, al
sub	ah, [si+10h]	; Integer Subtraction
cmp	ah, dl		; Compare Two Operands
jbe	short loc_12274	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	dl, ah
mov	di, si


loc_12274:		; Add
add	si, 11h
cmp	byte ptr [si], 0FFh ; Compare Two Operands
jnz	short loc_1225B	; Jump if Not Zero (ZF=0)


loc_1227C:		; Logical Inclusive OR
or	dl, dl
mov	si, di

loc_12280:		; Jump if Not Zero (ZF=0)
jnz	short loc_122A3

mov	si, ds:113Fh
jmp	short loc_1228E	; Jump

; ���������������������������������������������������������������������������

loc_12288:		; Compare Two Operands
cmp	si, ds:113Fh
jz	short locret_122B0 ; Jump if Zero (ZF=1)


loc_1228E:		; Add
add	si, 11h
cmp	byte ptr [si], 0FFh ; Compare Two Operands
jnz	short loc_12299	; Jump if Not Zero (ZF=0)


loc_12296:
mov	si, 10D8h


loc_12299:		; Compare Two Operands
cmp	word ptr [si+0Eh], 0
jz	short loc_12288	; Jump if Zero (ZF=1)

mov	ds:113Fh, si


loc_122A3:		; Call Procedure
call	sub_1235F


loc_122A6:
mov	al, [si]
xor	ah, ah		; Logical Exclusive OR
add	ax, 0		; Add
mov	ds:11F7h, ax


locret_122B0:		; Return Near from Procedure
retn

sub_12239 endp




sub_122B1 proc near
mov	bp, 0B4h ; '�'
and	byte ptr ds:0BFh, 0F9h ; Logical AND

loc_122B9:
mov	bx, ds:0BCh
mov	cx, bx
shr	cx, 1		; Shift	Logical	Right
add	cx, bx		; Add
mov	dx, bx
add	dx, dx		; Add
mov	si, ax
shr	si, 1		; Shift	Logical	Right
mov	di, ax
shr	di, 1		; Shift	Logical	Right
shr	di, 1		; Shift	Logical	Right
add	di, si		; Add
cmp	ax, bx		; Compare Two Operands
jb	short loc_122F1	; Jump if Below	(CF=1)


loc_122D7:
mov	[bp+0],	bx

loc_122DA:
mov	[bp+2],	ax

loc_122DD:		; Compare Two Operands
cmp	ax, cx

loc_122DF:		; Jump if Below	(CF=1)
jb	short loc_12300

cmp	ax, dx		; Compare Two Operands

loc_122E3:		; Jump if Below	(CF=1)
jb	short loc_1230C

mov	[bp+4],	cx
mov	[bp+6],	dx
or	byte ptr ds:0BFh, 6 ; Logical Inclusive	OR
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_122F1:
mov	[bp+0],	ax

loc_122F4:
mov	[bp+2],	di
mov	[bp+4],	si
sub	di, si		; Integer Subtraction

loc_122FC:
mov	[bp+6],	di
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_12300:
mov	[bp+4],	di
mov	[bp+6],	si
or	byte ptr ds:0BFh, 2 ; Logical Inclusive	OR
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1230C:
mov	[bp+4],	di
mov	[bp+6],	cx
or	byte ptr ds:0BFh, 4 ; Logical Inclusive	OR
retn			; Return Near from Procedure

sub_122B1 endp




sub_12318 proc near
mov	al, [di]
mov	si, 10C7h


loc_1231D:		; Add
add	si, 11h
cmp	al, [si]	; Compare Two Operands
jnz	short loc_1231D	; Jump if Not Zero (ZF=0)

call	sub_1235F	; Call Procedure

call	sub_11AC5	; Call Procedure

sub	al, [si+3]	; Integer Subtraction
test	byte ptr [si+2], 8 ; Logical Compare
jnz	short loc_12339	; Jump if Not Zero (ZF=0)

mov	al, 1
or	byte ptr [si+2], 8 ; Logical Inclusive OR


loc_12339:
mov	ds:1Eh,	al
mov	byte ptr ds:9Dh, 0
mov	ax, ds:0
and	ax, 7		; Logical AND


loc_12347:		; Compare Two Operands
cmp	al, ds:1141h
jb	short loc_12353	; Jump if Below	(CF=1)

sub	al, ds:1141h	; Integer Subtraction
jmp	short loc_12347	; Jump

; ���������������������������������������������������������������������������

loc_12353:		; Add
add	ax, 0E8h ; '�'
mov	ds:11F1h, ax
mov	byte ptr ds:9Fh, 0
retn			; Return Near from Procedure

sub_12318 endp




sub_1235F proc near
mov	ds:10B4h, si
mov	al, [si+2]
mov	ds:1Ch,	al
mov	ax, [si+0Eh]
mov	ds:20h,	ax
mov	byte ptr ds:1Fh, 0
or	ax, ax		; Logical Inclusive OR
jz	short loc_12381	; Jump if Zero (ZF=1)

call	sub_11AC5	; Call Procedure

sub	al, [si+10h]	; Integer Subtraction
mov	ds:1Fh,	al


loc_12381:
mov	al, [si+1]
mov	ds:1Dh,	al
retn			; Return Near from Procedure

sub_1235F endp

; ���������������������������������������������������������������������������
mov	al, 3Ch	; '<'
call	sub_1121F	; Call Procedure

mov	bx, 3
call	sub_1E3B7	; Call Procedure

mov	ds:9Eh,	al
call	sub_11AC5	; Call Procedure

mov	di, ds:10B4h
mov	[di+3],	al
mov	byte ptr ds:1Ah, 0
mov	ax, ds:11F1h
sub	ax, 0E8h ; '�'  ; Integer Subtraction
mov	cx, 2


loc_123AE:		; Increment by 1
inc	ax


loc_123AF:		; Compare Two Operands
cmp	al, ds:1141h
jb	short loc_123BC	; Jump if Below	(CF=1)

sub	al, ds:1141h	; Integer Subtraction
loop	loc_123AF	; Loop while CX	!= 0

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_123BC:
mov	bx, ax
cmp	byte ptr [bx+di+4], 0 ;	Compare	Two Operands
jz	short loc_123AE	; Jump if Zero (ZF=1)

add	ax, 0E8h ; '�'  ; Add
mov	ds:11F1h, ax
mov	al, [bx+di+9]
and	al, 7Fh		; Logical AND
shl	al, 1		; Shift	Logical	Left
mov	ds:9Dh,	al
retn			; Return Near from Procedure




sub_123D5 proc near
mov	al, ds:9Dh
mov	ah, al
shr	ah, 1		; Shift	Logical	Right
shr	ah, 1		; Shift	Logical	Right
shr	ah, 1		; Shift	Logical	Right
sub	al, ah		; Integer Subtraction
mov	ds:9Dh,	al
retn			; Return Near from Procedure

sub_123D5 endp




sub_123E6 proc near
and	byte ptr [di+2], 9Fh ; Logical AND
xor	ax, ax		; Logical Exclusive OR
xchg	al, ds:9Dh	; Exchange Register/Memory with	Register
add	ds:20h,	ax	; Add
add	[di+0Eh], ax	; Add
cmp	ax, [di+0Eh]	; Compare Two Operands
jnz	short loc_12400	; Jump if Not Zero (ZF=0)

inc	byte ptr ds:22h	; Increment by 1


loc_12400:		; Call Procedure
call	sub_11AC5

mov	[di+10h], al

loc_12406:
mov	ax, ds:11F1h
sub	ax, 0E8h ; '�'  ; Integer Subtraction
mov	bx, ax
dec	byte ptr [bx+di+4] ; Decrement by 1
mov	si, ds:114Eh
inc	byte ptr [bx+si+14h] ; Increment by 1
retn			; Return Near from Procedure

sub_123E6 endp

; ���������������������������������������������������������������������������
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������
cmp	word ptr ds:47C4h, 0Dh ; Compare Two Operands
jz	short loc_12426	; Jump if Zero (ZF=1)

mov	al, 1
jmp	short loc_12496	; Jump

; ���������������������������������������������������������������������������
align 2

loc_12426:
mov	di, ds:10B4h

loc_1242A:		; Call Procedure
call	sub_123E6

mov	al, 1
jmp	short loc_12496	; Jump

; ���������������������������������������������������������������������������
align 2
cmp	word ptr ds:47C4h, 0Dh ; Compare Two Operands
jz	short loc_1243E	; Jump if Zero (ZF=1)

mov	al, 2
jmp	short loc_12496	; Jump

; ���������������������������������������������������������������������������
align 2

loc_1243E:
mov	di, ds:10B4h
mov	bx, 7
call	sub_1E3B7	; Call Procedure


loc_12448:		; Jump if Zero (ZF=1)
jz	short loc_1246B

mov	byte ptr ds:9Dh, 0
mov	al, 2
jmp	short loc_12496	; Jump

; ���������������������������������������������������������������������������
cmp	word ptr ds:47C4h, 0Dh ; Compare Two Operands
jz	short loc_1245F	; Jump if Zero (ZF=1)

mov	al, 3
jmp	short loc_12496	; Jump

; ���������������������������������������������������������������������������
db 90h
; ���������������������������������������������������������������������������

loc_1245F:
mov	di, ds:10B4h
mov	bx, 3
call	sub_1E3B7	; Call Procedure

jnz	short loc_12474	; Jump if Not Zero (ZF=0)


loc_1246B:		; Logical Inclusive OR
or	byte ptr ds:9Eh, 10h
mov	al, 3
jmp	short loc_12496	; Jump

; ���������������������������������������������������������������������������

loc_12474:		; Increment by 1
inc	byte ptr ds:9Eh
and	byte ptr ds:9Eh, 3 ; Logical AND
and	al, 1		; Logical AND
add	al, ds:1Ah	; Add
sub	al, [di+1]	; Integer Subtraction
jb	short loc_12491	; Jump if Below	(CF=1)

mov	byte ptr ds:9Dh, 0
mov	al, 3
jmp	short loc_12496	; Jump

; ���������������������������������������������������������������������������

loc_12491:		; Call Procedure
call	sub_123D5

mov	al, 3


loc_12496:
mov	ds:9Fh,	al
inc	byte ptr ds:1Ah	; Increment by 1
call	sub_1D2E2	; Call Procedure

jmp	loc_19472	; Jump

; ���������������������������������������������������������������������������
cmp	byte ptr ds:2Ah, 10h ; Compare Two Operands
jnb	short loc_124B0	; Jump if Not Below (CF=0)

or	byte ptr ds:0FF7h, 10h ; Logical Inclusive OR
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_124B0:		; Call Procedure
call	sub_1A1E8

mov	word ptr ds:0C0h, 0
or	byte ptr ds:0BFh, 1 ; Logical Inclusive	OR
call	sub_124D2	; Call Procedure

add	ah, 7		; Add
mov	al, 0Bh
cmp	ah, 0Ch		; Compare Two Operands
jnz	short loc_124CF	; Jump if Not Zero (ZF=0)

inc	byte ptr ds:11BBh ; Increment by 1


loc_124CF:		; Jump
jmp	loc_126DA




sub_124D2 proc near
mov	al, ds:0BEh
xor	cl, cl		; Logical Exclusive OR
xor	ah, ah		; Logical Exclusive OR
cmp	al, 1		; Compare Two Operands
adc	ah, cl		; Add with Carry
cmp	al, 40h	; '@'   ; Compare Two Operands
adc	ah, cl		; Add with Carry
cmp	al, 80h	; '�'   ; Compare Two Operands
adc	ah, cl		; Add with Carry
cmp	al, 90h	; '�'   ; Compare Two Operands
adc	ah, cl		; Add with Carry
cmp	al, 0FFh	; Compare Two Operands
adc	ah, cl		; Add with Carry
retn			; Return Near from Procedure

sub_124D2 endp

; ���������������������������������������������������������������������������
cmp	byte ptr ds:9Fh, 2 ; Compare Two Operands
jz	short loc_12541	; Jump if Zero (ZF=1)

jnb	short loc_1252D	; Jump if Not Below (CF=0)

cmp	byte ptr ds:476Dh, 0 ; Compare Two Operands
jnz	short loc_12517	; Jump if Not Zero (ZF=0)

mov	al, ds:1Ah
dec	ax		; Decrement by 1
and	ax, 3		; Logical AND

loc_12505:
mov	bx, ax
shl	bx, 1		; Shift	Logical	Left
mov	ax, [bx+0B4h]
mov	ds:0C0h, ax

loc_12510:
mov	word ptr ds:1158h, 0FFFFh

locret_12516:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_12517:
mov	di, ds:10B4h
xor	ax, ax		; Logical Exclusive OR
xchg	ax, [di+0Eh]	; Exchange Register/Memory with	Register
dec	byte ptr ds:22h	; Decrement by 1




sub_12524 proc near
sub	ds:0A0h, ax	; Integer Subtraction
add	ds:1172h, ax	; Add
retn			; Return Near from Procedure

sub_12524 endp

; ���������������������������������������������������������������������������

loc_1252D:		; Compare Two Operands
cmp	byte ptr ds:476Dh, 0
jz	short locret_12540 ; Jump if Zero (ZF=1)

mov	di, ds:10B4h
and	byte ptr [di+2], 9Fh ; Logical AND
or	byte ptr [di+2], 20h ; Logical Inclusive OR


locret_12540:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_12541:		; Compare Two Operands
cmp	byte ptr ds:476Dh, 0
jz	short locret_12554 ; Jump if Zero (ZF=1)

mov	di, ds:10B4h
and	byte ptr [di+2], 9Fh ; Logical AND
or	byte ptr [di+2], 40h ; Logical Inclusive OR


locret_12554:		; Return Near from Procedure
retn




sub_12555 proc near
mov	al, 0Ah
call	_sub_1AB15_audio_start_voc ; Play SNA.VOC

mov	dx, 8Ch	; '�'
mov	bx, 27h	; '''
mov	ax, 1Bh
jmp	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

sub_12555 endp




sub_12566 proc near
mov	si, 1008h
push	ax
call	sub_140E6	; Call Procedure

pop	ax
mov	bx, ax

loc_12570:		; Call Procedure
call	sub_12524

mov	ax, bx
xor	dx, dx		; Logical Exclusive OR
xchg	al, ah		; Exchange Register/Memory with	Register
xchg	al, dl		; Exchange Register/Memory with	Register
div	word ptr ds:0BCh ; Unsigned Divide

loc_1257F:		; Compare Two Operands
cmp	ax, 200h

loc_12582:		; Jump if Below	(CF=1)
jb	short loc_12587


loc_12584:
mov	ax, 1FFh


loc_12587:		; Shift	Logical	Right
shr	ax, 1
jnz	short loc_1258D	; Jump if Not Zero (ZF=0)

mov	al, 1


loc_1258D:
mov	ds:0BEh, al
mov	ah, 40h	; '@'
mov	bx, 7
cmp	al, 0C0h ; '�'  ; Compare Two Operands
jnb	short loc_125B3	; Jump if Not Below (CF=0)

dec	bx		; Decrement by 1
cmp	al, 80h	; '�'   ; Compare Two Operands
ja	short loc_125B3	; Jump if Above	(CF=0 &	ZF=0)

dec	bx		; Decrement by 1
xor	ah, ah		; Logical Exclusive OR
cmp	al, 80h	; '�'   ; Compare Two Operands
jz	short loc_125B3	; Jump if Zero (ZF=1)

dec	bx		; Decrement by 1
mov	ah, 8
test	ds:0BFh, ah	; Logical Compare
jz	short loc_125B3	; Jump if Zero (ZF=1)

mov	byte ptr ds:0BEh, 0


loc_125B3:		; Logical Inclusive OR
or	ah, 80h

loc_125B6:
mov	ds:0BFh, ah
mov	si, offset unk_2063D
add	[si], bx	; Add
mov	bl, ds:0C3h
shr	bl, 1		; Shift	Logical	Right
and	bx, 3		; Logical AND

loc_125C8:		; Call Procedure
call	sub_1E3B7

add	[si], ax	; Add
call	sub_11AC5	; Call Procedure

sub	ax, [si]	; Integer Subtraction
neg	ax		; Two's Complement Negation
mov	ds:byte_1F57F, al
mov	ds:word_20608, 0
call	sub_12806	; Call Procedure

call	sub_12795	; Call Procedure

call	_sub_1C49A_gfx_copy_framebuffer_to_screen ; Call Procedure

mov	ax, 2Ch	; ','
call	_sub_1C13E_open_sprite_sheet ; STARS.HSQ

call	sub_1C0F4	; Call Procedure

mov	bp, offset sub_12555
mov	al, 8
call	_sub_1C108_transition ;	Call Procedure

mov	ax, 64h	; 'd'
call	sub_1DDB0	; Call Procedure

mov	cx, 18h
mov	bp, offset sub_10A44
mov	al, 6
call	_sub_1C108_transition ;	Call Procedure

mov	cx, 18h


loc_1260B:
push	cx

loc_1260C:
mov	bp, offset sub_10A44
mov	ax, 0Ch
dec	cx		; Decrement by 1
call	sub_1E353	; Call Procedure

pop	cx
loop	loc_1260B	; Loop while CX	!= 0

mov	ax, 27h	; '''
call	sub_1AB4F	; Call Procedure

mov	si, 4C60h
mov	bp, 15AAh
mov	es, word ptr ds:0DBD6h
call	dword ptr ds:3919h ; Indirect Call Far Procedure
mov	ax, 0C8h ; '�'
call	sub_1DDB0	; Call Procedure

call	sub_1ABA9	; Call Procedure

mov	al, 1
call	_sub_1AB15_audio_start_voc ; Play SN1.VOC

mov	cx, 1


loc_1263E:
push	cx
mov	si, 15B2h


loc_12642:
push	si
mov	bp, 26ACh
mov	ax, 0Ch
call	sub_1E353	; Call Procedure

pop	si

loc_1264D:		; Compare Two Operands
cmp	si, 161Eh
jnz	short loc_12656	; Jump if Not Zero (ZF=0)

call	_sub_1AC30_call_pcm_audio_vtable_func_5	; Call Procedure


loc_12656:		; Add
add	si, 6
cmp	byte ptr [si], 0FFh ; Compare Two Operands
jnz	short loc_12642	; Jump if Not Zero (ZF=0)

pop	cx
loop	loc_1263E	; Loop while CX	!= 0

call	sub_126AC	; Call Procedure

xor	cx, cx		; Logical Exclusive OR


loc_12666:		; Increment by 1
inc	cx
push	cx
mov	bp, 0A44h
mov	ax, 0Ch
call	sub_1E353	; Call Procedure

pop	cx
cmp	cx, 19h		; Compare Two Operands
jb	short loc_12666	; Jump if Below	(CF=1)

mov	byte ptr ds:47A9h, 1
mov	bp, 2DB1h
call	sub_1C097	; Call Procedure

mov	ax, 2Ch	; ','
call	_sub_1C13E_open_sprite_sheet ; STARS.HSQ

mov	al, 6
mov	bp, offset sub_12555
call	_sub_1C108_transition ;	Call Procedure

mov	bp, 2DB1h

loc_12693:		; Call Procedure
call	sub_1C097

mov	byte ptr ds:47A9h, 0
mov	bp, offset sub_126A6
mov	al, 8
call	_sub_1C108_transition ;	Call Procedure

jmp	sub_12773	; Jump

sub_12566 endp




sub_126A6 proc near
call	sub_1C43E	; Call Procedure

jmp	sub_11797	; Jump

sub_126A6 endp




sub_126AC proc near
push	si
mov	bp, 15AAh
mov	si, 4C60h
mov	es, ds:_word_2D086_framebuffer_front
call	ds:_ptr_22D65_gfx_vtable_func_26 ; Indirect Call Far Procedure
pop	si
lodsw			; Load String
or	ax, ax		; Logical Inclusive OR
js	short loc_126CB	; Jump if Sign (SF=1)

mov	bx, ax
lodsw			; Load String
mov	dx, ax
lodsw			; Load String
xchg	ax, bx		; Exchange Register/Memory with	Register
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9


loc_126CB:
mov	dx, 7Eh	; '~'
mov	bx, 4Ch	; 'L'
mov	bp, 0C2h ; '�'
mov	ax, 4Ch	; 'L'

loc_126D7:		; Jump
jmp	loc_1C526

sub_126AC endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_11045

loc_126DA:		; Call Procedure
call	sub_1E270

mov	cl, ds:0C8h
xor	ch, ch		; Logical Exclusive OR
jcxz	short loc_126F1	; Jump if CX is	0

mov	si, 1179h


loc_126E8:		; Compare Two Operands
cmp	ax, [si]
jz	short loc_1272B	; Jump if Zero (ZF=1)

add	si, 2		; Add
loop	loc_126E8	; Loop while CX	!= 0


loc_126F1:
mov	cl, ds:0C8h
mov	si, 1179h
cmp	cl, 0Ah		; Compare Two Operands
jb	short loc_12707	; Jump if Below	(CF=1)

push	ax
call	sub_1272F	; Call Procedure

mov	cl, 9
mov	si, 1179h
pop	ax


loc_12707:		; Add
add	cl, cl
xor	ch, ch		; Logical Exclusive OR
add	si, cx		; Add
mov	[si], ax
inc	byte ptr ds:0C8h ; Increment by	1
inc	byte ptr ds:0C9h ; Increment by	1
cmp	byte ptr ds:2Ah, 38h ; '8' ; Compare Two Operands


loc_1271C:		; Jump if Below	(CF=1)
jb	short loc_1272B

cmp	byte ptr ds:0Bh, 8 ; Compare Two Operands
jz	short loc_1272B	; Jump if Zero (ZF=1)

mov	ax, 201h
call	sub_129EE	; Call Procedure


loc_1272B:		; Call Procedure
call	sub_1E283

retn			; Return Near from Procedure

; END OF FUNCTION CHUNK	FOR sub_11045



sub_1272F proc near
mov	cl, ds:0C8h
xor	ch, ch		; Logical Exclusive OR
jcxz	short locret_1274D ; Jump if CX	is 0

mov	si, 1179h
dec	byte ptr ds:0C8h ; Decrement by	1
mov	di, si
add	si, 2		; Add
push	ds
pop	es
mov	cx, 9
rep movsw		; Move Byte(s) from String to String
xor	ax, ax		; Logical Exclusive OR
stosw			; Store	String


locret_1274D:		; Return Near from Procedure
retn

sub_1272F endp




sub_1274E proc near
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

mov	ax, 15h
call	_sub_1C13E_open_sprite_sheet ; COMM.HSQ

mov	si, 14C8h
call	sub_1C21B	; Call Procedure

mov	al, 1

sub_1274E endp




sub_1275F proc near
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

and	ax, 7		; Logical AND
add	al, 11		; Add
mov	bx, 86
mov	dx, 100
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9


loc_12770:		; Jump
jmp	_sub_1C07C_set_frontbuffer_as_active_framebuffer

sub_1275F endp




sub_12773 proc near
mov	ax, 15h
call	_sub_1C13E_open_sprite_sheet ; COMM.HSQ

mov	al, 9
call	_sub_1AB15_audio_start_voc ; Play SN9.VOC - Computer beeps

mov	ds:_unk_2CCC6_sav_file_first_word, 4


loc_12784:
mov	bp, offset word_21C66

loc_12787:
mov	ax, 9
call	sub_1E353	; Call Procedure

dec	ds:_unk_2CCC6_sav_file_first_word ; Decrement by 1
jns	short loc_12784	; Jump if Not Sign (SF=0)

jmp	short sub_1274E	; Jump

sub_12773 endp




sub_12795 proc near
mov	ax, 15h
call	_sub_1C13E_open_sprite_sheet ; COMM.HSQ

mov	ds:_unk_2CCC6_sav_file_first_word, 0


loc_127A1:
mov	bp, offset sub_127B6
mov	ax, 9
call	sub_1E353	; Call Procedure

inc	ds:_unk_2CCC6_sav_file_first_word ; Increment by 1
cmp	ds:_unk_2CCC6_sav_file_first_word, 0Dh ; Compare Two Operands
jb	short loc_127A1	; Jump if Below	(CF=1)

retn			; Return Near from Procedure

sub_12795 endp




sub_127B6 proc near
mov	ax, ds:_unk_2CCC6_sav_file_first_word
and	ax, 7		; Logical AND
cmp	al, 5		; Compare Two Operands
jb	short loc_127C4	; Jump if Below	(CF=1)

sub	al, 8		; Integer Subtraction
neg	al		; Two's Complement Negation


loc_127C4:		; Add
add	al, 2
call	sub_1275F	; Call Procedure

sub_127B6 endp




sub_127C9 proc near
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

mov	bx, 67h	; 'g'


loc_127CF:
push	bx
mov	bx, 0Fh


loc_127D3:		; Call Procedure
call	sub_1E3B7

cmp	al, dl		; Compare Two Operands
jz	short loc_127D3	; Jump if Zero (ZF=1)

mov	dl, al
add	ax, 17h		; Add
pop	bx
push	dx
mov	dx, 0A3h ; '�'
call	sub_1C2FD	; Call Procedure

pop	dx
add	bx, 3		; Add
cmp	bx, 70h	; 'p'   ; Compare Two Operands
jbe	short loc_127CF	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	si, 14CEh
mov	ax, ds:_unk_2CCC6_sav_file_first_word
and	ax, 3		; Logical AND

loc_127F9:		; Add
add	al, 13h
mov	[si], al
mov	[si+6],	al
call	sub_1C21B	; Call Procedure

jmp	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Jump

sub_127C9 endp




sub_12806 proc near
call	sub_1274E	; Call Procedure

mov	al, 2
call	sub_1275F	; Call Procedure

mov	cx, 14h
call	sub_1281C	; Call Procedure

call	sub_1ABA9	; Call Procedure

mov	al, 1
jmp	sub_1275F	; Jump

sub_12806 endp




sub_1281C proc near
mov	ax, 15h
call	_sub_1C13E_open_sprite_sheet ; COMM.HSQ

mov	ds:_unk_2CCC6_sav_file_first_word, 0


loc_12828:
push	cx
call	sub_127C9	; Call Procedure

mov	ax, 9
call	sub_1E3A0	; Call Procedure

inc	word ptr ds:0D816h ; Increment by 1
pop	cx
loop	loc_12828	; Loop while CX	!= 0

retn			; Return Near from Procedure

sub_1281C endp




sub_1283A proc near
xor	ax, ax		; Logical Exclusive OR
jmp	short loc_12841	; Jump

; ���������������������������������������������������������������������������
xor	ax, ax		; Logical Exclusive OR
dec	ax		; Decrement by 1


loc_12841:
mov	ds:0DBh, al
neg	ax		; Two's Complement Negation
add	al, 2Ah	; '*'   ; Add
call	sub_1AB45	; Call Procedure

call	sub_198B2	; Call Procedure

call	sub_12806	; Call Procedure

call	loc_12A7F	; Call Procedure

call	sub_13AE9	; Call Procedure

mov	ds:byte_1F599, 0
push	ds
pop	es
mov	di, 1FC3h
xor	al, al		; Logical Exclusive OR
stosb			; Store	String
mov	si, offset unk_20629
xor	cx, cx		; Logical Exclusive OR
mov	cl, ds:0C8h
add	si, cx		; Add
add	si, cx		; Add
mov	bl, ds:0DBh


loc_12875:		; Integer Subtraction
sub	si, 2
mov	ax, [si]
mov	ah, al
xor	ah, bl		; Logical Exclusive OR
js	short loc_1288B	; Jump if Sign (SF=1)

and	ax, 3Fh		; Logical AND
add	ax, 78h	; 'x'   ; Add

loc_12886:		; Store	String
stosw

loc_12887:
mov	ax, offset sub_1290B
stosw			; Store	String


loc_1288B:		; Loop while CX	!= 0
loop	loc_12875


loc_1288D:
mov	ax, 0A3h ; '�'
stosw			; Store	String
mov	ax, 29D4h
stosw			; Store	String

loc_12895:		; Logical Exclusive OR
xor	ax, ax
stosw			; Store	String
mov	bp, 1FC2h
mov	bx, 0F66h

loc_1289E:		; Jump
jmp	sub_1D323

sub_1283A endp




sub_128A1 proc near
mov	ds:byte_23C59, al
call	sub_12795	; Call Procedure

call	_sub_1C49A_gfx_copy_framebuffer_to_screen ; Call Procedure

call	sub_1ABA9	; Call Procedure

mov	bp, offset sub_128B5
mov	al, 8
jmp	_sub_1C108_transition ;	Jump

sub_128A1 endp




sub_128B5 proc near
mov	ax, 21
call	_sub_1C13E_open_sprite_sheet ; COMM.HSQ

mov	al, 0Ah

loc_128BD:		; Play SNA.VOC
call	_sub_1AB15_audio_start_voc

mov	al, ds:byte_23C59
xor	ah, ah		; Logical Exclusive OR
mov	si, ax
shl	si, 1		; Shift	Logical	Left
mov	dx, ds:word_2170D[si]
xor	bx, bx		; Logical Exclusive OR
xchg	bl, dh		; Exchange Register/Memory with	Register
add	ax, 1Eh		; Add
shl	si, 1		; Shift	Logical	Left
mov	ds:word_23CA8[si], dx
mov	ds:word_23CAA[si], bx
jmp	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

sub_128B5 endp




sub_128E1 proc near
cmp	byte ptr ds:24h, 0Ch ; Compare Two Operands

loc_128E6:		; Jump if Not Zero (ZF=0)
jnz	short loc_128EB


loc_128E8:		; Call Procedure
call	sub_1215F


loc_128EB:		; Compare Two Operands
cmp	byte ptr ds:47A9h, 0
jz	short locret_1290A ; Jump if Zero (ZF=1)

call	_sub_1C49A_gfx_copy_framebuffer_to_screen ; Call Procedure

mov	byte ptr ds:47A6h, 0FFh
mov	al, 8
mov	bp, offset loc_12DD3
call	_sub_1C108_transition ;	Call Procedure

mov	byte ptr ds:47A9h, 0
call	sub_12773	; Call Procedure


locret_1290A:		; Return Near from Procedure
retn

sub_128E1 endp




sub_1290B proc near
mov	al, ds:1FC3h
cbw			; AL ->	AX (with sign)
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right

loc_12913:		; Add
add	cx, ax
inc	cx		; Increment by 1
mov	si, 1179h
xor	ax, ax		; Logical Exclusive OR
mov	al, ds:0C8h
add	si, ax		; Add
add	si, ax		; Add


loc_12922:		; Integer Subtraction
sub	si, 2
mov	ax, [si]
xor	al, ds:0DBh	; Logical Exclusive OR
js	short loc_12922	; Jump if Sign (SF=1)

loop	loc_12922	; Loop while CX	!= 0

mov	ax, [si]
mov	ds:24h,	ah
and	al, 3Fh		; Logical AND
cmp	byte ptr ds:0DBh, 0 ; Compare Two Operands
jnz	short loc_12956	; Jump if Not Zero (ZF=0)

or	byte ptr [si], 80h ; Logical Inclusive OR

loc_12941:		; Decrement by 1
dec	byte ptr ds:0C9h

loc_12945:		; Compare Two Operands
cmp	al, 0Bh
jnz	short loc_12956	; Jump if Not Zero (ZF=0)

sub	ah, 2		; Integer Subtraction
cmp	ah, 2		; Compare Two Operands
jnb	short loc_12956	; Jump if Not Below (CF=0)

or	byte ptr ds:0BFh, 20h ;	Logical	Inclusive OR


loc_12956:		; Logical Exclusive OR
xor	ah, ah
cmp	al, ds:47A9h	; Compare Two Operands
jz	short loc_12970	; Jump if Zero (ZF=1)

push	ax
call	sub_128E1	; Call Procedure

pop	ax
push	ax
add	ax, 1Ah		; Add
call	sub_1AB45	; Call Procedure

pop	ax
push	ax
call	sub_128A1	; Call Procedure

pop	ax


loc_12970:
mov	ds:0E9h, al
xor	bl, bl		; Logical Exclusive OR
xchg	bl, ds:46D9h	; Exchange Register/Memory with	Register
push	bx
call	sub_196F1	; Call Procedure

call	sub_198F5	; Call Procedure

mov	byte ptr ds:1C06h, 80h ; '�'
mov	bp, 1FF2h
mov	bx, offset sub_12997
call	sub_1D323	; Call Procedure

pop	ax
mov	ds:46D9h, al


locret_12992:		; Return Near from Procedure
retn

sub_1290B endp




sub_12993 proc near
mov	al, 6
jmp	short loc_12999	; Jump

sub_12993 endp




sub_12997 proc near
xor	al, al		; Logical Exclusive OR


loc_12999:
mov	bl, ds:0C9h
mov	ds:0EBh, bl
cmp	byte ptr ds:47A9h, 0 ; Compare Two Operands
jz	short locret_12992 ; Jump if Zero (ZF=1)

push	ax
call	sub_197CF	; Call Procedure

call	sub_198F5	; Call Procedure

call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

call	sub_128B5	; Call Procedure

call	sub_128E1	; Call Procedure

mov	byte ptr ds:24h, 0
pop	ax
mov	ds:23h,	al
call	sub_1D316	; Call Procedure

call	sub_12EB2	; Call Procedure

call	loc_12DD3	; Call Procedure

cmp	byte ptr ds:47A7h, 0 ; Compare Two Operands
jnz	short locret_12992 ; Jump if Not Zero (ZF=0)

jmp	sub_1D280	; Jump

sub_12997 endp




sub_129D4 proc near
mov	ax, 29h	; ')'
call	sub_1AB45	; Call Procedure

mov	byte ptr ds:47A6h, 0FFh
mov	bp, 2DBFh
call	sub_1C097	; Call Procedure

call	sub_1D316	; Call Procedure

call	sub_1D280	; Call Procedure

jmp	sub_1ABA9	; Jump

sub_129D4 endp




sub_129EE proc near
xor	di, di		; Logical Exclusive OR

sub_129EE endp




sub_129F0 proc near
test	byte ptr ds:0Ah, 1 ; Logical Compare
jz	short locret_12A33 ; Jump if Zero (ZF=1)

mov	si, 1190h
mov	cl, [si]
xor	ch, ch		; Logical Exclusive OR
jcxz	short loc_12A14	; Jump if CX is	0

inc	si		; Increment by 1


loc_12A01:		; Compare Two Operands
cmp	ax, [si]
jnz	short loc_12A0A	; Jump if Not Zero (ZF=0)

cmp	di, [si+2]	; Compare Two Operands
jz	short locret_12A33 ; Jump if Zero (ZF=1)


loc_12A0A:		; Add
add	si, 4
loop	loc_12A01	; Loop while CX	!= 0

mov	si, 1190h
mov	cl, [si]


loc_12A14:		; Compare Two Operands
cmp	cx, 0Ah
jb	short loc_12A25	; Jump if Below	(CF=1)

push	ax
push	si
push	di
call	sub_12A34	; Call Procedure

pop	di
pop	si
pop	ax
mov	cx, 9


loc_12A25:		; Increment by 1
inc	byte ptr [si]
inc	si		; Increment by 1
add	cx, cx		; Add
add	cx, cx		; Add
add	si, cx		; Add
mov	[si], ax
mov	[si+2],	di


locret_12A33:		; Return Near from Procedure
retn

sub_129F0 endp




sub_12A34 proc near
mov	si, 1190h
dec	byte ptr [si]	; Decrement by 1
jnz	short loc_12A3F	; Jump if Not Zero (ZF=0)

mov	byte ptr [si-1], 0


loc_12A3F:		; Increment by 1
inc	si
mov	di, si
add	si, 4		; Add
push	ds
pop	es
mov	cx, 12h
rep movsw		; Move Byte(s) from String to String
xor	ax, ax		; Logical Exclusive OR
stosw			; Store	String
stosw			; Store	String
retn			; Return Near from Procedure

sub_12A34 endp




sub_12A51 proc near
mov	si, 1190h
mov	dl, al
mov	bx, di
xor	cx, cx		; Logical Exclusive OR
xor	bp, bp		; Logical Exclusive OR
lodsb			; Load String
mov	cl, al
jcxz	short locret_12AAE ; Jump if CX	is 0

mov	di, si
push	ds
pop	es


loc_12A65:		; Load String
lodsw
cmp	ah, dl		; Compare Two Operands
jnz	short loc_12A78	; Jump if Not Zero (ZF=0)

cmp	dl, 0Fh		; Compare Two Operands
jnz	short loc_12A73	; Jump if Not Zero (ZF=0)

cmp	bx, [si]	; Compare Two Operands
jnz	short loc_12A78	; Jump if Not Zero (ZF=0)


loc_12A73:		; Add
add	si, 2
jmp	short loc_12A7B	; Jump

; ���������������������������������������������������������������������������

loc_12A78:		; Store	String
stosw
movsw			; Move Byte(s) from String to String
inc	bp		; Increment by 1


loc_12A7B:		; Loop while CX	!= 0
loop	loc_12A65

jmp	short loc_12A9E	; Jump

; ���������������������������������������������������������������������������

loc_12A7F:
mov	si, 1190h
xor	cx, cx		; Logical Exclusive OR
xor	bp, bp		; Logical Exclusive OR
lodsb			; Load String
mov	cl, al
jcxz	short locret_12AAE ; Jump if CX	is 0

mov	di, si
push	ds
pop	es


loc_12A8F:		; Load String
lodsw
cmp	al, 1		; Compare Two Operands
jnz	short loc_12A99	; Jump if Not Zero (ZF=0)

add	si, 2		; Add
jmp	short loc_12A9C	; Jump

; ���������������������������������������������������������������������������

loc_12A99:		; Store	String
stosw
movsw			; Move Byte(s) from String to String
inc	bp		; Increment by 1


loc_12A9C:		; Loop while CX	!= 0
loop	loc_12A8F


loc_12A9E:
mov	cx, bp
mov	ch, cl
xchg	cl, ds:1190h	; Exchange Register/Memory with	Register
cmp	cl, ch		; Compare Two Operands
jz	short locret_12AAE ; Jump if Zero (ZF=1)

xor	ax, ax		; Logical Exclusive OR
stosw			; Store	String
stosw			; Store	String


locret_12AAE:		; Return Near from Procedure
retn

sub_12A51 endp




sub_12AAF proc near
push	si
mov	si, 1190h
xor	cx, cx		; Logical Exclusive OR
mov	cl, [si]
jcxz	short loc_12ACD	; Jump if CX is	0

inc	si		; Increment by 1


loc_12ABA:		; Compare Two Operands
cmp	al, [si+1]
jnz	short loc_12AC8	; Jump if Not Zero (ZF=0)

cmp	al, 0Fh		; Compare Two Operands
jnz	short loc_12AD0	; Jump if Not Zero (ZF=0)

cmp	di, [si+2]	; Compare Two Operands
jz	short loc_12AD0	; Jump if Zero (ZF=1)


loc_12AC8:		; Add
add	si, 4
loop	loc_12ABA	; Loop while CX	!= 0


loc_12ACD:
pop	si
clc			; Clear	Carry Flag
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_12AD0:
mov	ax, [si]
mov	di, [si+2]
pop	si
stc			; Set Carry Flag
retn			; Return Near from Procedure

sub_12AAF endp




sub_12AD8 proc near
push	ax
mov	ax, ds:1191h
mov	bx, ds:12h
mov	cl, ah
shr	bx, cl		; Shift	Logical	Right
shr	bx, 1		; Shift	Logical	Right
jnb	short loc_12AF7	; Jump if Not Below (CF=0)

mov	di, ds:1193h
cmp	cl, 0Fh		; Compare Two Operands
jnz	short loc_12AFA	; Jump if Not Zero (ZF=0)

cmp	di, ds:114Eh	; Compare Two Operands
jz	short loc_12AFA	; Jump if Zero (ZF=1)


loc_12AF7:
pop	ax
clc			; Clear	Carry Flag
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_12AFA:		; Add
add	sp, 2
call	_sub_1DBB2_call_restore_cursor ; Call Procedure


loc_12B00:
push	word ptr ds:11CEh
or	di, di		; Logical Inclusive OR
jz	short loc_12B0D	; Jump if Zero (ZF=1)

push	ax
call	sub_1331E	; Call Procedure

pop	ax


loc_12B0D:
mov	ds:0EAh, al
mov	al, ah
xor	ah, ah		; Logical Exclusive OR
call	sub_196D8	; Call Procedure

call	sub_19945	; Call Procedure

mov	byte ptr ds:0EAh, 0FFh
mov	al, 1
call	sub_19EF1	; Call Procedure

pop	di
call	sub_1331E	; Call Procedure

stc			; Set Carry Flag
retn			; Return Near from Procedure

sub_12AD8 endp




sub_12B2A proc near

; FUNCTION CHUNK AT 3542 SIZE 0000000F BYTES

mov	al, ds:46D9h
or	al, ds:4774h	; Logical Inclusive OR
or	al, ds:11C9h	; Logical Inclusive OR
jnz	short locret_12B8F ; Jump if Not Zero (ZF=0)

call	sub_1D41B	; Call Procedure

cmp	bp, 1F0Eh	; Compare Two Operands
jnz	short locret_12B8F ; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:0FBh, 0 ; Compare Two Operands
js	short locret_12B8F ; Jump if Sign (SF=1)

mov	ax, ds:_word_2C32A_time_passed
cmp	byte ptr ds:2Ah, 14h ; Compare Two Operands
jb	short locret_12B8F ; Jump if Below (CF=1)

jz	short loc_12BA1	; Jump if Zero (ZF=1)

cmp	byte ptr ds:1190h, 0 ; Compare Two Operands
jz	short locret_12B8F ; Jump if Zero (ZF=1)

sub	ax, ds:word_2D10A ; Integer Subtraction
cmp	ax, 32h	; '2'   ; Compare Two Operands
jb	short locret_12B8F ; Jump if Below (CF=1)

call	sub_12AD8	; Call Procedure

jnb	short loc_12B70	; Jump if Not Below (CF=0)

mov	byte ptr ds:23h, 0
jmp	loc_13542	; Jump

; ���������������������������������������������������������������������������

loc_12B70:		; Compare Two Operands
cmp	byte ptr ds:2Bh, 0
jnz	short loc_12BD2	; Jump if Not Zero (ZF=0)

mov	bl, 28h	; '('
cmp	ax, 96h	; '�'   ; Compare Two Operands
jb	short loc_12B90	; Jump if Below	(CF=1)

cmp	ax, 0FAh ; '�'  ; Compare Two Operands
jb	short locret_12B8F ; Jump if Below (CF=1)

cmp	ax, 15Eh	; Compare Two Operands
mov	bl, 26h	; '&'
jb	short loc_12B90	; Jump if Below	(CF=1)

cmp	ax, 1C2h	; Compare Two Operands
jnb	short loc_12BD2	; Jump if Not Below (CF=0)


locret_12B8F:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_12B90:
push	bx
call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	_sub_1C49A_gfx_copy_framebuffer_to_screen ; Call Procedure

pop	ax
mov	bp, offset nullsub_1
call	_sub_1C108_transition ;	Call Procedure

jmp	_sub_1DBEC_draw_mouse ;	Jump

; ���������������������������������������������������������������������������

loc_12BA1:		; Compare Two Operands
cmp	word ptr ds:10h, 0
jnz	short locret_12B8F ; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:8, 0FFh ; Compare Two Operands
jnz	short locret_12B8F ; Jump if Not Zero (ZF=0)

sub	ax, ds:0DC5Ah	; Integer Subtraction
cmp	ax, 3E8h	; Compare Two Operands
jb	short locret_12B8F ; Jump if Below (CF=1)

add	word ptr ds:0DC5Ah, 3B6h ; Add
call	sub_11071	; Call Procedure

call	sub_1B17A	; Call Procedure


loc_12BC4:		; Call Procedure
call	sub_12B2A

cmp	byte ptr ds:0EAh, 0FFh ; Compare Two Operands
jnz	short loc_12BC4	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_12BCF:		; Jump
jmp	sub_12A34

; ���������������������������������������������������������������������������

loc_12BD2:		; Call Procedure
call	_sub_1DBB2_call_restore_cursor

call	sub_1AD5E	; Call Procedure

mov	di, ds:1193h
or	di, di		; Logical Inclusive OR
jz	short loc_12BF4	; Jump if Zero (ZF=1)

mov	ax, di
sub	ax, 100h	; Integer Subtraction
cmp	ax, 7AAh	; Compare Two Operands
jb	short loc_12BF1	; Jump if Below	(CF=1)

mov	byte ptr ds:1193h, 0
jmp	short loc_12BF4	; Jump

; ���������������������������������������������������������������������������

loc_12BF1:		; Call Procedure
call	sub_1331E


loc_12BF4:
mov	ax, ds:1191h
mov	ds:0EAh, al
cmp	al, 1		; Compare Two Operands
jnz	short loc_12C01	; Jump if Not Zero (ZF=0)

mov	ds:0EBh, al


loc_12C01:
mov	al, ah
xor	ah, ah		; Logical Exclusive OR
mov	di, ds:1193h
cmp	ax, 10h		; Compare Two Operands
jnb	short loc_12BCF	; Jump if Not Below (CF=0)

cmp	al, 0Eh		; Compare Two Operands
jnz	short loc_12C16	; Jump if Not Zero (ZF=0)

or	di, di		; Logical Inclusive OR
jz	short loc_12BCF	; Jump if Zero (ZF=1)


loc_12C16:
mov	ds:47C4h, ax
or	di, di		; Logical Inclusive OR
jz	short loc_12C47	; Jump if Zero (ZF=1)

call	sub_1331E	; Call Procedure

call	sub_12E98	; Call Procedure

cmp	word ptr ds:47C4h, 0Eh ; Compare Two Operands
jb	short loc_12C47	; Jump if Below	(CF=1)

mov	al, 3
cmp	byte ptr ds:0EAh, 0Eh ;	Compare	Two Operands
jz	short loc_12C3A	; Jump if Zero (ZF=1)

mov	al, [di+9]
or	al, al		; Logical Inclusive OR
jz	short loc_12C47	; Jump if Zero (ZF=1)


loc_12C3A:		; Call Procedure
call	sub_16906

mov	word ptr ds:47C4h, 0Eh
mov	ds:4756h, si


loc_12C47:		; Call Procedure
call	sub_12C92

mov	al, 1
call	sub_19EF1	; Call Procedure

call	sub_12A34	; Call Procedure

xor	ax, ax		; Logical Exclusive OR
mov	ds:1F0Fh, al
mov	ds:1F10h, ax
call	sub_1D397	; Call Procedure

call	sub_1B2B9	; Call Procedure

mov	ax, 0BB8h
call	sub_1DDB0	; Call Procedure

call	sub_1B2B3	; Call Procedure

mov	si, 2CC7h
call	sub_1DA5F	; Call Procedure

call	sub_198E6	; Call Procedure

xor	ax, ax		; Logical Exclusive OR
mov	ds:479Eh, ax
mov	ds:4540h, ax
mov	byte ptr ds:0EAh, 0FFh
mov	byte ptr ds:0E8h, 0Ah
mov	word ptr ds:0DC30h, 0
mov	al, 6
call	sub_1189A	; Call Procedure

jmp	sub_1C412	; Jump

sub_12B2A endp




sub_12C92 proc near
mov	al, 6
mov	bp, offset sub_12C9A
jmp	_sub_1C108_transition ;	Jump

sub_12C92 endp




sub_12C9A proc near
mov	ds:byte_1F598, 0
mov	al, 23h	; '#'
call	sub_1C2F2	; Call Procedure

call	sub_1C412	; Call Procedure

mov	ax, ds:word_23C74
call	sub_196D8	; Call Procedure

xor	ax, ax		; Logical Exclusive OR
mov	ds:word_2109A, ax
mov	ds:word_210A8, ax
mov	ds:byte_23B8F, al
mov	si, 0C0B6h
call	sub_1DA5F	; Call Procedure

mov	si, 2CC7h
mov	bp, 6
jmp	sub_1DA25	; Jump

sub_12C9A endp




sub_12CC7 proc near
mov	al, 0Ah
mov	si, 1478h
jmp	sub_1C0D5	; Jump

sub_12CC7 endp




sub_12CCF proc near
or	byte ptr ds:0Ah, 8 ; Logical Inclusive OR
cmp	byte ptr ds:9Fh, 1 ; Compare Two Operands
jnz	short locret_12D2B ; Jump if Not Zero (ZF=0)

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	sub_1ABCC	; Call Procedure

jnz	short loc_12CEB	; Jump if Not Zero (ZF=0)

mov	ax, 258h
call	sub_1DDB0	; Call Procedure

jmp	short loc_12CEE	; Jump

; ���������������������������������������������������������������������������

loc_12CEB:		; Call Procedure
call	sub_1ABD5


loc_12CEE:		; Compare Two Operands
cmp	ds:byte_1F4D9, 64h ; 'd'
jb	short loc_12D26	; Jump if Below	(CF=1)

or	ds:byte_1F4BA, 2 ; Logical Inclusive OR
mov	ds:byte_1F585, 0FFh
mov	al, 38h	; '8'
mov	bp, offset nullsub_1
call	_sub_1C108_transition ;	Call Procedure

mov	ax, 3E8h
call	sub_1E387	; Call Procedure

call	sub_18C8A	; Call Procedure

mov	al, 36h	; '6'
mov	bp, offset nullsub_1
call	_sub_1C108_transition ;	Call Procedure

mov	cx, 3
call	sub_10FD9	; Call Procedure

mov	byte ptr ds:23h, 11h
jmp	sub_135AD	; Jump

; ���������������������������������������������������������������������������

loc_12D26:
mov	byte ptr ds:46D9h, 3


locret_12D2B:		; Return Near from Procedure
retn

sub_12CCF endp




sub_12D2C proc near
inc	ds:byte_1F572	; Increment by 1
sub	sp, 32h		; Integer Subtraction
mov	bx, sp
mov	bp, offset sub_12D62
call	sub_11258	; Call Procedure

mov	word ptr [bx], 0
mov	si, sp


loc_12D41:		; Load String
lodsw
or	ax, ax		; Logical Inclusive OR
jz	short loc_12D5E	; Jump if Zero (ZF=1)

push	si
mov	si, ax
push	si
mov	di, 11Ch
call	sub_184A6	; Call Procedure

pop	si
call	sub_18308	; Call Procedure

pop	si
mov	ax, sp
add	ax, 0Eh		; Add
cmp	si, ax		; Compare Two Operands
jb	short loc_12D41	; Jump if Below	(CF=1)


loc_12D5E:		; Add
add	sp, 32h
retn			; Return Near from Procedure

sub_12D2C endp




sub_12D62 proc near
cmp	byte ptr [si+3], 4 ; Compare Two Operands
jnz	short locret_12D73 ; Jump if Not Zero (ZF=0)

test	byte ptr [si+19h], 4 ; Logical Compare
jz	short locret_12D73 ; Jump if Zero (ZF=1)

mov	[bx], si
add	bx, 2		; Add


locret_12D73:		; Return Near from Procedure
retn

sub_12D62 endp



; -> es:di

_sub_12D74_open_SAL_resource proc near
mov	si, ds:word_205FE
cmp	si, 100h	; Compare Two Operands
jb	short locret_12DB0 ; Jump if Below (CF=1)

xor	ax, ax		; Logical Exclusive OR
call	_sub_15E4F_calc_SAL_index ; SAL	index -> ax

cmp	ax, 2		; Compare Two Operands
jnb	short loc_12D8F	; Jump if Not Below (CF=0)

test	ds:byte_23BE2, 1 ; Logical Compare
jnz	short locret_12DB0 ; Jump if Not Zero (ZF=0)


loc_12D8F:		; Compare Two Operands
cmp	ax, 4
ja	short locret_12DB0 ; Jump if Above (CF=0 & ZF=0)

jnz	short loc_12D97	; Jump if Not Zero (ZF=0)

dec	ax		; Decrement by 1


loc_12D97:		; Compare Two Operands
cmp	ds:_byte_208FC_loaded_SAL_index, al
jz	short locret_12DB0 ; Jump if Zero (ZF=1)

mov	ds:_byte_208FC_loaded_SAL_index, al
add	ax, 0A1h	; SIET.SAL
push	ds
pop	es
mov	di, offset _work_2B11E_SAL_data
mov	si, ax
call	_sub_1F0B9_open_resource_by_index_si ; reads and decompresses to es:di

call	_sub_10098_adjust_sub_resource_pointers	; Call Procedure


locret_12DB0:		; Return Near from Procedure
retn

_sub_12D74_open_SAL_resource endp




sub_12DB1 proc near
mov	bp, offset sub_1D717
call	sub_1C097	; Call Procedure

call	sub_1D95B	; Call Procedure

mov	ds:byte_23C56, 0FFh


loc_12DBF:		; -> es:di
call	_sub_12D74_open_SAL_resource

xor	ax, ax		; Logical Exclusive OR
mov	ds:_byte_2D196_in_transition?, al
mov	ds:byte_23C54, al
mov	ds:word_23C5A, ax
mov	bp, offset sub_12EB2
call	sub_1C097	; Call Procedure


loc_12DD3:		; Compare Two Operands
cmp	ds:byte_1F4DB, 0
jz	short loc_12DFB	; Jump if Zero (ZF=1)

mov	ds:byte_23BE2, 0
call	_sub_12D74_open_SAL_resource ; -> es:di

or	ds:byte_2066C, 1 ; Logical Inclusive OR
mov	ds:byte_23B8F, 0
call	sub_10ACD	; Call Procedure

call	sub_11797	; Call Procedure

call	_sub_1C4CD_gfx_copy_framebuf_to_screen ; Call Procedure

call	sub_1C0F4	; Call Procedure

jmp	sub_117E6	; Jump

; ���������������������������������������������������������������������������

loc_12DFB:		; Logical Compare
test	ds:byte_23BE2, 1
jz	short loc_12E05	; Jump if Zero (ZF=1)

call	sub_1488A	; Call Procedure


loc_12E05:		; Logical Exclusive OR
xor	ax, ax
mov	ds:14h,	ax
mov	ds:byte_23B8F, al
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

call	sub_15BA0	; Call Procedure

call	sub_137B2	; Call Procedure

test	ds:byte_20679, 3 ; Logical Compare
jnz	short loc_12E20	; Jump if Not Zero (ZF=0)

call	sub_1C412	; Call Procedure


loc_12E20:		; Call Procedure
call	sub_1AD5E

call	sub_11834	; Call Procedure

call	sub_11797	; Call Procedure

mov	al, ds:byte_23B8F
mov	ah, al
xchg	al, ds:byte_23B90 ; Exchange Register/Memory with Register
cmp	al, ah		; Compare Two Operands
jz	short loc_12E4C	; Jump if Zero (ZF=1)

mov	ax, ds:_word_2D086_framebuffer_front
cmp	ax, ds:_word_2D088_vga_base_a000 ; Compare Two Operands
jz	short sub_12E52	; Jump if Zero (ZF=1)

mov	al, 10h
mov	bp, offset nullsub_1
call	_sub_1C108_transition ;	Call Procedure

call	sub_1AE04	; Call Procedure

jmp	short sub_12E52	; Jump

; ���������������������������������������������������������������������������

loc_12E4C:		; Call Procedure
call	sub_1C0F4

call	_sub_1C4CD_gfx_copy_framebuf_to_screen ; Call Procedure

sub_12DB1 endp




sub_12E52 proc near

; FUNCTION CHUNK AT 3723 SIZE 0000008A BYTES

call	sub_135AD	; Call Procedure

mov	ax, ds:_word_2C32A_time_passed
mov	ds:word_2D10A, ax
cmp	ds:byte_23C57, 0 ; Compare Two Operands
jnz	short locret_12E97 ; Jump if Not Zero (ZF=0)

mov	al, ds:byte_23BE5
or	al, al		; Logical Inclusive OR
jns	short loc_12E6C	; Jump if Not Sign (SF=0)

jmp	loc_13723	; Jump

; ���������������������������������������������������������������������������

loc_12E6C:		; Compare Two Operands
cmp	byte ptr ds:8, 0FFh
jz	short loc_12E7D	; Jump if Zero (ZF=1)

cmp	ds:byte_23C24, 0 ; Compare Two Operands
jnz	short locret_12E97 ; Jump if Not Zero (ZF=0)

jmp	sub_117E6	; Jump

; ���������������������������������������������������������������������������

loc_12E7D:		; Compare Two Operands
cmp	ds:byte_20679, 0
jnz	short locret_12E97 ; Jump if Not Zero (ZF=0)

mov	si, ds:word_23C5A
or	si, si		; Logical Inclusive OR
jz	short locret_12E97 ; Jump if Zero (ZF=1)

xor	ax, ax		; Logical Exclusive OR
mov	al, [si+0Eh]
mov	ds:word_23C74, ax
call	sub_1978E	; Call Procedure


locret_12E97:		; Return Near from Procedure
retn

sub_12E52 endp




sub_12E98 proc near
mov	ds:47E6h, di
xor	ah, ah		; Logical Exclusive OR
mov	al, [di]
add	ax, 0		; Add
mov	ds:11EDh, ax
mov	al, [di+1]
xor	ah, ah		; Logical Exclusive OR
add	ax, 0Ch		; Add
mov	ds:11EFh, ax
retn			; Return Near from Procedure

sub_12E98 endp




sub_12EB2 proc near

; FUNCTION CHUNK AT 2EC9 SIZE 00000032 BYTES

cmp	ds:byte_23C24, 0 ; Compare Two Operands
jz	short loc_12EC9	; Jump if Zero (ZF=1)

call	loc_1301A	; Call Procedure

call	sub_198E6	; Call Procedure

sub_12EB2 endp




sub_12EBF proc near
mov	bp, ds:2220h
mov	bx, 0F66h
jmp	sub_1D338	; Jump

sub_12EBF endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_12EB2

loc_12EC9:
mov	di, ds:114Eh
call	sub_12E98	; Call Procedure

call	sub_12EFB	; Call Procedure

cmp	byte ptr ds:11C9h, 0 ; Compare Two Operands
jnz	short loc_12EDD	; Jump if Not Zero (ZF=0)

call	sub_13090	; Call Procedure


loc_12EDD:
mov	ax, ds:0DC38h
cmp	ax, 74h	; 't'   ; Compare Two Operands
jb	short loc_12EEC	; Jump if Below	(CF=1)

mov	ax, 0DBECh
push	ax
call	_sub_1DBB2_call_restore_cursor ; Call Procedure


loc_12EEC:		; Call Procedure
call	sub_12FFB

call	sub_1D763	; Call Procedure

mov	bp, 1F0Eh
mov	bx, 0F66h
jmp	sub_1D338	; Jump

; END OF FUNCTION CHUNK	FOR sub_12EB2



sub_12EFB proc near
push	ds
pop	es
mov	di, 1F0Fh
xor	al, al		; Logical Exclusive OR
stosb			; Store	String
mov	bx, ds:6
mov	dx, ds:4
cmp	bl, 80h	; '�'   ; Compare Two Operands
jz	short loc_12F13	; Jump if Zero (ZF=1)

jmp	loc_12FAA	; Jump

; ���������������������������������������������������������������������������

loc_12F13:
mov	si, offset unk_216BC
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
cmp	dl, 1		; Compare Two Operands
jnz	short loc_12F58	; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:2Bh, 0 ; Compare Two Operands
jz	short loc_12F3D	; Jump if Zero (ZF=1)

mov	si, offset unk_216C8
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
mov	si, offset unk_216C4
lodsw			; Load String
cmp	byte ptr ds:2Ah, 4Fh ; 'O' ; Compare Two Operands
sbb	ah, ah		; Integer Subtraction with Borrow
and	ah, 40h		; Logical AND
stosw			; Store	String
movsw			; Move Byte(s) from String to String
jmp	short loc_12FA3	; Jump

; ���������������������������������������������������������������������������

loc_12F3D:
push	di
mov	di, ds:114Eh
call	sub_17F27	; Call Procedure

pop	di
mov	si, 21DCh
lodsw			; Load String
cmp	byte ptr ds:46FFh, 1 ; Compare Two Operands
sbb	ah, ah		; Integer Subtraction with Borrow
and	ah, 40h		; Logical AND
stosw			; Store	String
movsw			; Move Byte(s) from String to String
jmp	short loc_12FA3	; Jump

; ���������������������������������������������������������������������������

loc_12F58:		; Compare Two Operands
cmp	bh, 1
jnz	short loc_12FA3	; Jump if Not Zero (ZF=0)

cmp	dl, 8		; Compare Two Operands
jnz	short loc_12F99	; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:0C8h, 0 ; Compare Two Operands
jz	short loc_12FA3	; Jump if Zero (ZF=1)

mov	si, 21E8h
lodsw			; Load String
mov	cl, ds:0C9h
mov	ch, 27h	; '''
cmp	cl, 1		; Compare Two Operands
sbb	ah, ah		; Integer Subtraction with Borrow
add	ch, ah		; Add
cmp	byte ptr ds:47A9h, 0 ; Compare Two Operands
jz	short loc_12F83	; Jump if Zero (ZF=1)

mov	ch, 28h	; '('


loc_12F83:
mov	ds:1248h, ch
and	ah, 40h		; Logical AND
stosw			; Store	String
movsw			; Move Byte(s) from String to String
lodsw			; Load String
cmp	cl, ds:0C8h	; Compare Two Operands
cmc			; Complement Carry Flag
sbb	ah, ah		; Integer Subtraction with Borrow
and	ah, 40h		; Logical AND
stosw			; Store	String
movsw			; Move Byte(s) from String to String


loc_12F99:		; Compare Two Operands
cmp	dl, 9
jnz	short loc_12FA3	; Jump if Not Zero (ZF=0)

mov	si, offset unk_216A0
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String


loc_12FA3:
mov	si, offset unk_216A4
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
jmp	short loc_12FF7	; Jump

; ���������������������������������������������������������������������������

loc_12FAA:		; Logical Compare
test	ds:byte_20679, 3
jnz	short loc_12FD7	; Jump if Not Zero (ZF=0)

mov	si, offset unk_216BC
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
mov	si, offset unk_216C4
lodsw			; Load String
cmp	byte ptr ds:2Ah, 4Fh ; 'O' ; Compare Two Operands
sbb	ah, ah		; Integer Subtraction with Borrow
and	ah, 40h		; Logical AND
stosw			; Store	String
movsw			; Move Byte(s) from String to String
call	sub_11AE0	; Call Procedure

mov	si, offset unk_21690
cmp	al, 0Bh		; Compare Two Operands
jb	short loc_12FD3	; Jump if Below	(CF=1)

add	si, 4		; Add


loc_12FD3:		; Move Byte(s) from String to String
movsw
movsw			; Move Byte(s) from String to String
jmp	short loc_12FA3	; Jump

; ���������������������������������������������������������������������������

loc_12FD7:
mov	si, offset unk_216AC
cmp	ds:byte_2067B, 0 ; Compare Two Operands
jz	short loc_12FF0	; Jump if Zero (ZF=1)

mov	si, offset unk_216B0
cmp	ds:byte_1F4DA, 32h ; '2' ; Compare Two Operands
jb	short loc_12FF0	; Jump if Below	(CF=1)

movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
mov	si, offset unk_216B4


loc_12FF0:		; Move Byte(s) from String to String
movsw
movsw			; Move Byte(s) from String to String
mov	si, 21F8h
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String


loc_12FF7:		; Logical Exclusive OR
xor	ax, ax
stosw			; Store	String
retn			; Return Near from Procedure

sub_12EFB endp




sub_12FFB proc near
cmp	byte ptr ds:2Bh, 0 ; Compare Two Operands
jnz	short loc_1301A	; Jump if Not Zero (ZF=0)

test	byte ptr ds:11C9h, 3 ; Logical Compare
jz	short loc_13020	; Jump if Zero (ZF=1)

cmp	byte ptr ds:11CAh, 0 ; Compare Two Operands
jnz	short loc_1301A	; Jump if Not Zero (ZF=0)

mov	si, 1D72h
cmp	byte ptr ds:11CBh, 0 ; Compare Two Operands
jnz	short loc_1301D	; Jump if Not Zero (ZF=0)


loc_1301A:
mov	si, offset unk_211CE


loc_1301D:		; Jump
jmp	sub_1D72B

; ���������������������������������������������������������������������������

loc_13020:
mov	bx, ds:6
cmp	bl, 80h	; '�'   ; Compare Two Operands
jnz	short loc_13073	; Jump if Not Zero (ZF=0)

mov	dx, ds:4
cmp	dh, 21h	; '!'   ; Compare Two Operands
jz	short loc_13073	; Jump if Zero (ZF=1)

call	sub_13EFE	; Call Procedure

inc	si		; Increment by 1
mov	di, 1B96h
mov	al, 20h	; ' '
cmp	word ptr ds:114Eh, 100h	; Compare Two Operands
jnz	short loc_13045	; Jump if Not Zero (ZF=0)

mov	al, 80h	; '�'


loc_13045:
mov	bx, 21h	; '!'
cmp	dl, 1		; Compare Two Operands
jnz	short loc_13050	; Jump if Not Zero (ZF=0)

inc	bx		; Increment by 1
mov	al, 20h	; ' '


loc_13050:
mov	[di+2],	bx
mov	[di+46h], al
mov	ds:1CC4h, al
mov	cx, 4


loc_1305C:		; Load String
lodsb
add	di, 0Eh		; Add
mov	ah, 20h	; ' '
or	al, al		; Logical Inclusive OR
jz	short loc_1306C	; Jump if Zero (ZF=1)

cmp	al, 0FBh ; '�'  ; Compare Two Operands
jl	short loc_1306C	; Jump if Less (SF!=OF)

mov	ah, 80h	; '�'


loc_1306C:
mov	[di], ah
loop	loc_1305C	; Loop while CX	!= 0

jmp	loc_1D735	; Jump

; ���������������������������������������������������������������������������

loc_13073:
mov	di, 1B98h
mov	word ptr [di], 23h ; '#'
mov	bx, 1Dh
mov	cx, 4


loc_13080:		; Add
add	di, 0Eh
mov	[di], bx
mov	word ptr [di-2], 80h ; '�'
inc	bx		; Increment by 1
loop	loc_13080	; Loop while CX	!= 0

jmp	loc_1D735	; Jump

sub_12FFB endp




sub_13090 proc near
call	sub_198E6	; Call Procedure


loc_13093:		; Call Procedure
call	sub_13127

mov	di, 1F0Ch


loc_13099:		; Add
add	di, 4
cmp	word ptr [di], 0 ; Compare Two Operands
jnz	short loc_13099	; Jump if Not Zero (ZF=0)

mov	word ptr ds:12h, 0
push	ds
pop	es
mov	bp, 30B9h
call	loc_136EE	; Call Procedure

mov	bp, 3120h
call	loc_136EE	; Call Procedure

xor	ax, ax		; Logical Exclusive OR
stosw			; Store	String
retn			; Return Near from Procedure

sub_13090 endp

; ���������������������������������������������������������������������������
test	byte ptr [si+0Fh], 40h ; Logical Compare
jnz	short locret_1311F ; Jump if Not Zero (ZF=0)

cmp	word ptr ds:47AAh, 0 ; Compare Two Operands
jnz	short loc_130CA	; Jump if Not Zero (ZF=0)

mov	ds:47AAh, si


loc_130CA:
mov	al, [si+0Eh]
mov	cl, al
xor	ah, ah		; Logical Exclusive OR
add	ax, 78h	; 'x'   ; Add
stosw			; Store	String
mov	ax, 1
shl	ax, cl		; Shift	Logical	Left
or	ds:12h,	ax	; Logical Inclusive OR
mov	ax, [si+4]
stosw			; Store	String
cmp	cl, 0Fh		; Compare Two Operands
jnz	short locret_1311F ; Jump if Not Zero (ZF=0)

mov	cl, ds:476Ah
xor	ch, ch		; Logical Exclusive OR
dec	cx		; Decrement by 1
jle	short loc_130FE	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

push	si
mov	si, ax
mov	ax, 87h	; '�'


loc_130F6:		; Increment by 1
inc	ax
stosw			; Store	String
xchg	ax, si		; Exchange Register/Memory with	Register
stosw			; Store	String
xchg	ax, si		; Exchange Register/Memory with	Register
loop	loc_130F6	; Loop while CX	!= 0

pop	si


loc_130FE:		; Compare Two Operands
cmp	byte ptr ds:2Ah, 5
jb	short locret_1311F ; Jump if Below (CF=1)

mov	al, ds:476Bh
or	al, al		; Logical Inclusive OR
jz	short locret_1311F ; Jump if Zero (ZF=1)

push	di
dec	al		; Decrement by 1
sub	al, ds:476Ah	; Integer Subtraction
cbw			; AL ->	AX (with sign)
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
add	di, ax		; Add
mov	word ptr [di], 8Fh ; '�'
pop	di


locret_1311F:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������
test	byte ptr [si+0Fh], 40h ; Logical Compare
jnz	short loc_130CA	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure




sub_13127 proc near
mov	byte ptr ds:476Bh, 0
mov	byte ptr ds:476Ah, 0
mov	ax, 7F80h
mov	ds:10CAh, ax
mov	ds:10BAh, ax
mov	ds:10AAh, ax
mov	ds:109Ah, ax
mov	bx, ds:6
cmp	bl, 80h	; '�'   ; Compare Two Operands
jnz	short locret_1316D ; Jump if Not Zero (ZF=0)

mov	di, ds:114Eh
mov	dx, ds:4
mov	bp, 316Eh
call	sub_16603	; Call Procedure

cmp	byte ptr [di+8], 21h ; '!' ; Compare Two Operands
jnz	short loc_1316A	; Jump if Not Zero (ZF=0)

mov	ds:10A8h, dx
mov	ds:10AAh, bx
push	di
call	sub_12318	; Call Procedure

pop	di


loc_1316A:		; Call Procedure
call	sub_1331E


locret_1316D:		; Return Near from Procedure
retn

sub_13127 endp

; ���������������������������������������������������������������������������
mov	al, [si+3]
mov	ah, 2
test	al, 20h		; Logical Compare
jz	short loc_13181	; Jump if Zero (ZF=1)

cmp	byte ptr [di+8], 28h ; '(' ; Compare Two Operands
jb	short loc_13190	; Jump if Below	(CF=1)

inc	ah		; Increment by 1
jmp	short loc_13190	; Jump

; ���������������������������������������������������������������������������

loc_13181:		; Logical Compare
test	byte ptr [si+10h], 80h
jnz	short locret_1316D ; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:2Bh, 0 ; Compare Two Operands
jz	short loc_13190	; Jump if Zero (ZF=1)

dec	ah		; Decrement by 1


loc_13190:		; Compare Two Operands
cmp	ah, dl
jnz	short locret_1316D ; Jump if Not Zero (ZF=0)

test	byte ptr [si+10h], 80h ; Logical Compare
jnz	short loc_131C9	; Jump if Not Zero (ZF=0)

mov	bp, 10B8h
mov	di, 4756h
cmp	al, 80h	; '�'   ; Compare Two Operands
jnb	short loc_131ED	; Jump if Not Below (CF=0)

mov	bp, 10C8h
mov	di, 4758h
and	byte ptr ds:476Ah, 7 ; Logical AND
mov	al, ds:476Ah
inc	byte ptr ds:476Ah ; Increment by 1
xor	ah, ah		; Logical Exclusive OR
cmp	si, 8E0h	; Compare Two Operands
jnz	short loc_131C3	; Jump if Not Zero (ZF=0)

inc	ax		; Increment by 1
mov	ds:476Bh, al
dec	ax		; Decrement by 1


loc_131C3:		; Shift	Logical	Left
shl	ax, 1
add	di, ax		; Add
jmp	short loc_131ED	; Jump

; ���������������������������������������������������������������������������

loc_131C9:
mov	bp, 1098h
mov	di, 4768h
mov	al, [si+3]
and	al, 10h		; Logical AND
and	byte ptr [bp+0Fh], 0EFh	; Logical AND
or	[bp+0Fh], al	; Logical Inclusive OR
mov	word ptr ds:0EEh, 0
or	al, al		; Logical Inclusive OR
mov	al, 0FFh
jnz	short loc_131EA	; Jump if Not Zero (ZF=0)

mov	al, [si+15h]


loc_131EA:
mov	ds:0EDh, al


loc_131ED:
mov	[di], si
mov	[bp+0],	dx
mov	[bp+2],	bx
retn			; Return Near from Procedure




sub_131F6 proc near
call	sub_1E270	; Call Procedure

mov	di, [si+4]

loc_131FC:
mov	ds:2Ch,	di
mov	al, [si]
mov	ds:2Eh,	al
mov	al, [si+3]
mov	ds:30h,	al
and	ax, 0Fh		; Logical AND
mov	ds:2Fh,	al
add	ax, 18h		; Add
mov	ds:11F3h, ax
call	sub_132C7	; Call Procedure

call	sub_1329D	; Call Procedure

mov	ds:48h,	ax
mov	ax, [si+10h]
mov	ds:32h,	ax
mov	ax, [si+12h]
mov	ds:34h,	ax
and	ax, 0Fh		; Logical AND
mov	ds:31h,	al
add	ax, 0		; Add
mov	ds:11FFh, ax
call	sub_16EFD	; Call Procedure

mov	ds:36h,	al
mov	al, [si+16h]
mov	ds:38h,	al
call	sub_13310	; Call Procedure

mov	ds:11F7h, ax
mov	al, [si+17h]
mov	ds:39h,	al
call	sub_13310	; Call Procedure

mov	ds:11F9h, ax
mov	al, [si+18h]
mov	ds:3Ah,	al
call	sub_13310	; Call Procedure

mov	ds:11FBh, ax
mov	ax, [si+0Ch]
mov	ds:44h,	ax
mov	ax, [si+0Eh]
mov	ds:46h,	ax
xor	ah, ah		; Logical Exclusive OR
add	ax, 0E8h ; '�'  ; Add
mov	ds:11F1h, ax
call	sub_1693B	; Call Procedure

mov	bp, ax
mov	al, [bp+si+16h]
mov	ds:37h,	al
mov	al, [si+19h]
mov	ds:3Bh,	al
mov	al, [si+1Ah]
mov	ds:3Ch,	al
call	sub_11AC5	; Call Procedure

sub	al, [si+14h]	; Integer Subtraction
mov	ds:40h,	al
call	sub_1331E	; Call Procedure

call	sub_1E283	; Call Procedure

retn			; Return Near from Procedure

sub_131F6 endp




sub_1329D proc near
cmp	byte ptr [si+3], 0 ; Compare Two Operands
jz	short loc_132AA	; Jump if Zero (ZF=1)

xor	ax, ax		; Logical Exclusive OR
and	word ptr [si+10h], 0FFF3h ; Logical AND
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_132AA:
mov	ax, ds:42h
or	ax, ax		; Logical Inclusive OR
jz	short loc_132C1	; Jump if Zero (ZF=1)

mov	cx, ax
mov	ax, [si+0Eh]
xor	dx, dx		; Logical Exclusive OR
div	cx		; Unsigned Divide
shl	dx, 1		; Shift	Logical	Left
cmp	cx, dx		; Compare Two Operands
adc	ax, 0		; Add with Carry


loc_132C1:
mov	ds:4Ah,	ax
jmp	sub_1708A	; Jump

sub_1329D endp




sub_132C7 proc near
mov	ax, ds:2
sub	ax, [si+0Ah]	; Integer Subtraction
mov	ds:42h,	ax
mov	dx, ax
mov	cl, 4
shr	ax, cl		; Shift	Logical	Right
mov	ds:41h,	al
mov	ax, 74h	; 't'
test	byte ptr [si+3], 10h ; Logical Compare
jnz	short loc_1330C	; Jump if Not Zero (ZF=0)

mov	ax, 70h	; 'p'
cmp	dx, 3		; Compare Two Operands
jb	short loc_1330C	; Jump if Below	(CF=1)

inc	ax		; Increment by 1
cmp	dx, 10h		; Compare Two Operands
jb	short loc_1330C	; Jump if Below	(CF=1)

inc	ax		; Increment by 1
cmp	dx, 20h	; ' '   ; Compare Two Operands
jb	short loc_1330C	; Jump if Below	(CF=1)

inc	ax		; Increment by 1
push	ax
push	si
mov	si, ax
call	sub_1CF70	; Call Procedure

call	sub_1D03C	; Call Procedure


loc_13301:
mov	ax, dx
mov	cl, 4
shr	ax, cl		; Shift	Logical	Right
call	sub_1E2E3	; Call Procedure

pop	si
pop	ax


loc_1330C:
mov	ds:11F5h, ax
retn			; Return Near from Procedure

sub_132C7 endp




sub_13310 proc near
xor	ah, ah		; Logical Exclusive OR
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
add	ax, 0D1h ; '�'  ; Add
retn			; Return Near from Procedure

sub_13310 endp




sub_1331E proc near
mov	ds:11CEh, di
push	si
push	di
mov	ah, [di]
mov	al, [di+1]
mov	ds:4Eh,	ax
mov	bx, 1141h
xlat			; Table	Lookup Translation
mov	ds:50h,	al
mov	al, [di+0Ah]
mov	ds:51h,	al
mov	al, [di+12h]
mov	ds:52h,	al
mov	al, [di+1Bh]
mov	ds:54h,	al
mov	al, [di+8]

loc_13348:
mov	ds:4Dh,	al
push	ds
pop	es
push	di
lea	si, [di+14h]	; Load Effective Address
mov	di, 55h	; 'U'
mov	cx, 7
rep movsb		; Move Byte(s) from String to String
pop	di
call	sub_133BE	; Call Procedure

call	sub_134A5	; Call Procedure

call	sub_17F27	; Call Procedure

mov	di, 46FEh
mov	al, 0FFh
mov	cx, 7


loc_1336B:		; Compare Two Operands
cmp	byte ptr [di], 1
rcl	al, 1		; Rotate Through Carry Left
inc	di		; Increment by 1
loop	loc_1336B	; Loop while CX	!= 0

not	al		; One's Complement Negation
mov	cl, 1
shl	al, cl		; Shift	Logical	Left
mov	ds:53h,	al
pop	di
call	sub_13385	; Call Procedure

call	sub_15274	; Call Procedure

pop	si
retn			; Return Near from Procedure

sub_1331E endp




sub_13385 proc near
mov	byte ptr ds:0F7h, 0
cmp	di, ds:1150h	; Compare Two Operands
jz	short locret_133BD ; Jump if Zero (ZF=1)

mov	ax, di
sub	ax, 100h	; Integer Subtraction
mov	bl, 1Ch
div	bl		; Unsigned Divide
inc	ax		; Increment by 1
mov	bh, al
mov	bl, 80h	; '�'
mov	si, 1018h

loc_133A1:		; Call Procedure
call	sub_133AD

mov	si, 1028h
call	sub_133AD	; Call Procedure

mov	si, 1048h

sub_13385 endp




sub_133AD proc near
cmp	bx, [si+2]	; Compare Two Operands
jnz	short locret_133BD ; Jump if Not Zero (ZF=0)

mov	cl, [si+0Eh]
mov	al, 1
shl	al, cl		; Shift	Logical	Left
or	ds:0F7h, al	; Logical Inclusive OR


locret_133BD:		; Return Near from Procedure
retn

sub_133AD endp




sub_133BE proc near
xor	ax, ax		; Logical Exclusive OR
mov	ds:94h,	ax
mov	ds:96h,	ax
mov	ds:5Ch,	ax
mov	ds:5Eh,	ax
mov	bp, 3406h
call	sub_16603	; Call Procedure

call	sub_133D9	; Call Procedure

mov	ds:9Ch,	al
retn			; Return Near from Procedure

sub_133BE endp




sub_133D9 proc near
mov	ax, ds:96h
mov	dx, ds:94h
cmp	ax, dx		; Compare Two Operands
pushf			; Push Flags Register onto the Stack
jnb	short loc_133E6	; Jump if Not Below (CF=0)

xchg	ax, dx		; Exchange Register/Memory with	Register


loc_133E6:
mov	cx, dx
jcxz	short loc_133FD	; Jump if CX is	0

xor	dx, dx		; Logical Exclusive OR
xchg	ah, dl		; Exchange Register/Memory with	Register
xchg	al, ah		; Exchange Register/Memory with	Register
cmp	dx, cx		; Compare Two Operands
jnb	short loc_133FD	; Jump if Not Below (CF=0)

div	cx		; Unsigned Divide
shr	ax, 1		; Shift	Logical	Right
cmp	ax, 0FCh ; '�'  ; Compare Two Operands
jb	short loc_13400	; Jump if Below	(CF=1)


loc_133FD:
mov	ax, 0FCh ; '�'


loc_13400:		; Pop Stack into Flags Register
popf
jnb	short locret_13405 ; Jump if Not Below (CF=0)


loc_13403:		; Two's Complement Negation
neg	al


locret_13405:		; Return Near from Procedure
retn

sub_133D9 endp

; ���������������������������������������������������������������������������
test	byte ptr [si+3], 20h ; Logical Compare
jnz	short locret_1342C ; Jump if Not Zero (ZF=0)

call	sub_1342D	; Call Procedure

test	byte ptr [si+10h], 80h ; Logical Compare
jnz	short loc_13428	; Jump if Not Zero (ZF=0)

add	ds:96h,	ax	; Add
mov	ax, [si+10h]
or	ds:5Ch,	ax	; Logical Inclusive OR
mov	ax, [si+12h]
or	ds:5Eh,	ax	; Logical Inclusive OR
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_13428:		; Add
add	ds:94h,	ax


locret_1342C:		; Return Near from Procedure
retn




sub_1342D proc near
call	sub_16EFD	; Call Procedure

xor	ah, ah		; Logical Exclusive OR
add	al, al		; Add
add	al, [si+17h]	; Add
jnb	short loc_1343B	; Jump if Not Below (CF=0)

mov	al, 0FFh


loc_1343B:		; Unsigned Multiplication of AL	or AX
mul	byte ptr [si+1Ah]
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
mov	dx, ax
mov	bl, [si+19h]
shl	bl, 1		; Shift	Logical	Left
shl	bl, 1		; Shift	Logical	Left
shl	dx, 1		; Shift	Logical	Left
shl	bl, 1		; Shift	Logical	Left
jnb	short loc_13459	; Jump if Not Below (CF=0)

add	ax, dx		; Add
jb	short loc_13477	; Jump if Below	(CF=1)


loc_13459:		; Shift	Logical	Left
shl	dx, 1
shl	bl, 1		; Shift	Logical	Left
jnb	short loc_13463	; Jump if Not Below (CF=0)

add	ax, dx		; Add
jb	short loc_13477	; Jump if Below	(CF=1)


loc_13463:		; Shift	Logical	Left
shl	dx, 1
shl	bl, 1		; Shift	Logical	Left
jnb	short loc_1346D	; Jump if Not Below (CF=0)

add	ax, dx		; Add
jb	short loc_13477	; Jump if Below	(CF=1)


loc_1346D:		; Shift	Logical	Left
shl	dx, 1
shl	bl, 1		; Shift	Logical	Left
jnb	short loc_1347A	; Jump if Not Below (CF=0)

add	ax, dx		; Add
jnb	short loc_1347A	; Jump if Not Below (CF=0)


loc_13477:
mov	ax, 0FFFFh


loc_1347A:
mov	al, ah
xor	ah, ah		; Logical Exclusive OR
or	ax, ax		; Logical Inclusive OR
jnz	short locret_13489 ; Jump if Not Zero (ZF=0)

cmp	byte ptr [si+1Ah], 1 ; Compare Two Operands
cmc			; Complement Carry Flag
adc	al, ah		; Add with Carry


locret_13489:		; Return Near from Procedure
retn

sub_1342D endp




sub_1348A proc near
call	sub_16EFD	; Call Procedure

xor	ah, ah		; Logical Exclusive OR
add	al, al		; Add
add	al, [si+16h]	; Add
jnb	short loc_13498	; Jump if Not Below (CF=0)

mov	al, 0FFh


loc_13498:		; Unsigned Multiplication of AL	or AX
mul	byte ptr [si+1Ah]
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
jmp	short loc_1347A	; Jump

sub_1348A endp




sub_134A5 proc near
push	si
push	ds
pop	es
push	di
mov	di, 60h	; '`'
mov	cx, 33h	; '3'
xor	al, al		; Logical Exclusive OR
rep stosb		; Store	String
pop	di
mov	bp, 34D0h
call	sub_16639	; Call Procedure

mov	al, ds:60h
add	al, ds:7Eh	; Add
mov	ds:91h,	al
mov	al, ds:61h
add	al, ds:7Fh	; Add
mov	ds:92h,	al
pop	si
retn			; Return Near from Procedure

sub_134A5 endp

; ���������������������������������������������������������������������������
test	byte ptr [si+3], 20h ; Logical Compare
jnz	short locret_1351A ; Jump if Not Zero (ZF=0)

mov	al, [si+3]
mov	dx, 61h	; 'a'
test	al, 40h		; Logical Compare
jz	short loc_134E3	; Jump if Zero (ZF=1)

mov	dx, 7Fh	; ''


loc_134E3:
mov	bx, dx
test	byte ptr [si+10h], 80h ; Logical Compare
jnz	short loc_134F0	; Jump if Not Zero (ZF=0)

dec	bx		; Decrement by 1
cmp	al, 80h	; '�'   ; Compare Two Operands
jz	short loc_1351B	; Jump if Zero (ZF=1)


loc_134F0:		; Increment by 1
inc	byte ptr [bx]
mov	ah, al
and	ax, 30Fh	; Logical AND
cmp	ah, 3		; Compare Two Operands
jnz	short loc_134FE	; Jump if Not Zero (ZF=0)

and	al, 0FCh	; Logical AND


loc_134FE:		; Logical Exclusive OR
xor	ah, ah
mov	bx, dx
add	bx, ax		; Add
inc	byte ptr [bx+1]	; Increment by 1
cmp	bx, 7Fh	; ''   ; Compare Two Operands
jnb	short locret_1351A ; Jump if Not Below (CF=0)

mov	ax, [si+12h]
and	ax, 0Fh		; Logical AND
mov	bx, 71h	; 'q'
add	bx, ax		; Add
inc	byte ptr [bx]	; Increment by 1


locret_1351A:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1351B:		; Increment by 1
inc	byte ptr ds:90h
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������
cmp	byte ptr ds:47A7h, 0 ; Compare Two Operands
jnz	short locret_1351A ; Jump if Not Zero (ZF=0)

mov	al, [si+0Eh]
xor	ah, ah		; Logical Exclusive OR
push	si
call	sub_196F1	; Call Procedure

pop	si
jnb	short loc_13542	; Jump if Not Below (CF=0)

mov	ax, ds:47C4h
mov	di, ds:114Eh
call	sub_12AAF	; Call Procedure

jnb	short locret_135AC ; Jump if Not Below (CF=0)

call	loc_12B00	; Call Procedure

; START	OF FUNCTION CHUNK FOR sub_12B2A

loc_13542:
mov	ax, ds:47C4h
mov	di, ds:114Eh
call	sub_12A51	; Call Procedure

mov	byte ptr ds:0E7h, 0

; END OF FUNCTION CHUNK	FOR sub_12B2A



sub_13551 proc near
inc	byte ptr ds:47A7h ; Increment by 1
cmp	byte ptr ds:23h, 3 ; Compare Two Operands
jnz	short loc_13572	; Jump if Not Zero (ZF=0)

mov	bp, 1F92h
mov	bx, 97CFh
call	sub_1D323	; Call Procedure

mov	word ptr ds:1BEAh, 0
mov	word ptr ds:1BF8h, 0
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_13572:		; Compare Two Operands
cmp	byte ptr ds:23h, 4
jnz	short loc_13595	; Jump if Not Zero (ZF=0)

mov	bp, 1F9Eh
and	byte ptr [bp+0Bh], 0BFh	; Logical AND
mov	bx, 97CFh
call	sub_1D323	; Call Procedure

mov	word ptr ds:1BEAh, 0
mov	word ptr ds:1BF8h, 0
jmp	sub_12FFB	; Jump

; ���������������������������������������������������������������������������

loc_13595:		; Compare Two Operands
cmp	byte ptr ds:4774h, 0
jnz	short locret_135AC ; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:23h, 64h ; 'd' ; Compare Two Operands
jnb	short locret_135AC ; Jump if Not Below (CF=0)

mov	ax, ds:47C4h

loc_135A6:		; Call Procedure
call	sub_193DF

call	sub_1D280	; Call Procedure


locret_135AC:		; Return Near from Procedure
retn

sub_13551 endp




sub_135AD proc near
cmp	byte ptr ds:11C9h, 0 ; Compare Two Operands
jnz	short loc_135E9	; Jump if Not Zero (ZF=0)

xor	ax, ax		; Logical Exclusive OR
mov	ds:1Ah,	al
mov	ds:47A7h, al
xchg	al, ds:47A6h	; Exchange Register/Memory with	Register
or	al, al		; Logical Inclusive OR
jnz	short locret_135AC ; Jump if Not Zero (ZF=0)

inc	byte ptr ds:1Ah	; Increment by 1
cmp	byte ptr ds:0Bh, 8 ; Compare Two Operands
jnz	short loc_135E3	; Jump if Not Zero (ZF=0)

mov	ax, ds:0C0h
and	ax, ds:1158h	; Logical AND
jz	short loc_135E3	; Jump if Zero (ZF=1)

test	word ptr ds:12h, 8 ; Logical Compare
jz	short loc_135E3	; Jump if Zero (ZF=1)

call	sub_12566	; Call Procedure


loc_135E3:
mov	bp, 3520h
jmp	loc_136EE	; Jump

; ���������������������������������������������������������������������������

loc_135E9:		; Logical Exclusive OR
xor	ax, ax
mov	ds:1Ah,	al
mov	ds:47A7h, al
mov	ds:23h,	al
xchg	al, ds:47A6h	; Exchange Register/Memory with	Register
or	al, al		; Logical Inclusive OR
jnz	short locret_135AC ; Jump if Not Zero (ZF=0)

cmp	word ptr ds:1152h, 0FFFFh ; Compare Two	Operands
jz	short loc_13637	; Jump if Zero (ZF=1)

call	sub_140F9	; Call Procedure

call	sub_14182	; Call Procedure

cmp	byte ptr ds:23h, 0 ; Compare Two Operands
jz	short locret_13636 ; Jump if Zero (ZF=1)

call	sub_1366F	; Call Procedure

js	short locret_13636 ; Jump if Sign (SF=1)

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	sub_1368B	; Call Procedure

push	ax
mov	ax, 4Bh	; 'K'
call	sub_1E387	; Call Procedure


loc_13622:
pop	ax
push	ax

loc_13624:		; Call Procedure
call	sub_196D8

pop	ax
jb	short locret_13636 ; Jump if Below (CF=1)

mov	cl, 10h
mul	cl		; Unsigned Multiplication of AL	or AX
add	ax, 0FD8h	; Add
mov	si, ax
call	sub_13551	; Call Procedure


locret_13636:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_13637:		; Call Procedure
call	sub_14182

cmp	byte ptr ds:23h, 0 ; Compare Two Operands
jz	short locret_13636 ; Jump if Zero (ZF=1)

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	sub_1439F	; Call Procedure

mov	cx, 200Ch

loc_1364A:
mov	dx, 66h	; 'f'
mov	bx, 4Eh	; 'N'
mov	ax, 0BFh ; '�'
call	sub_1D194	; Call Procedure

call	sub_1C0F4	; Call Procedure

call	sub_1C4DD	; Call Procedure

call	sub_14ACA	; Call Procedure

mov	bp, 1F9Eh
or	byte ptr [bp+0Bh], 40h ; Logical Inclusive OR
mov	bx, 4ABEh
call	sub_1D323	; Call Procedure

jmp	sub_12FFB	; Jump

sub_135AD endp




sub_1366F proc near
mov	ax, ds:1152h
cmp	ax, 0FFFFh	; Compare Two Operands
jz	short loc_13688	; Jump if Zero (ZF=1)

cmp	ah, 0FFh	; Compare Two Operands
jz	short loc_13686	; Jump if Zero (ZF=1)

test	word ptr ds:0, 80h ; Logical Compare
jnz	short loc_13686	; Jump if Not Zero (ZF=0)

xchg	al, ah		; Exchange Register/Memory with	Register


loc_13686:		; Logical Exclusive OR
xor	ah, ah


loc_13688:		; Logical Inclusive OR
or	ax, ax
retn			; Return Near from Procedure

sub_1366F endp




sub_1368B proc near
call	sub_1E270	; Call Procedure

or	byte ptr ds:4728h, 1 ; Logical Inclusive OR
mov	bl, ds:11C9h
and	bl, 3		; Logical AND
cmp	bl, 2		; Compare Two Operands
jz	short loc_136CB	; Jump if Zero (ZF=1)

dec	bl		; Decrement by 1
jnz	short loc_136C7	; Jump if Not Zero (ZF=0)

mov	byte ptr ds:473Eh, 1
mov	byte ptr ds:47A4h, 1
push	ax
mov	al, 34h	; '4'
call	sub_1C2F2	; Call Procedure

call	sub_1C0F4	; Call Procedure

call	sub_1C412	; Call Procedure

pop	ax
or	ax, ax		; Logical Inclusive OR
js	short loc_136C4	; Jump if Sign (SF=1)

mov	ds:47C4h, ax
call	sub_1978E	; Call Procedure


loc_136C4:		; Call Procedure
call	sub_1C4DD


loc_136C7:		; Call Procedure
call	sub_1E283

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_136CB:		; Call Procedure
call	sub_14AEB

call	sub_1C474	; Call Procedure

jmp	short loc_136C7	; Jump

sub_1368B endp




sub_136D3 proc near
cmp	byte ptr ds:23h, 0 ; Compare Two Operands
jz	short locret_136ED ; Jump if Zero (ZF=1)

call	sub_198B2	; Call Procedure

mov	byte ptr ds:47A7h, 0
mov	bp, 3520h
call	loc_136EE	; Call Procedure

mov	byte ptr ds:23h, 0


locret_136ED:		; Return Near from Procedure
retn

sub_136D3 endp

; ���������������������������������������������������������������������������

loc_136EE:
push	bx
push	dx
mov	si, 0FD8h
mov	cx, 10h
mov	bx, ds:6
mov	dx, ds:4


loc_136FE:		; Compare Two Operands
cmp	bx, [si+2]
jnz	short loc_1371B	; Jump if Not Zero (ZF=0)

cmp	dx, [si]	; Compare Two Operands
jnz	short loc_1371B	; Jump if Not Zero (ZF=0)

pop	dx
pop	bx
push	bx
push	dx
push	cx
push	si
push	bp
call	bp		; Indirect Call	Near Procedure

; ���������������������������������������������������������������������������
db 5Dh
; ���������������������������������������������������������������������������
pop	si
pop	cx
mov	bx, ds:6
mov	dx, ds:4


loc_1371B:		; Add
add	si, 10h
loop	loc_136FE	; Loop while CX	!= 0

pop	dx
pop	bx




nullsub_6 proc near
retn			; Return Near from Procedure

nullsub_6 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_12E52

loc_13723:		; Logical AND
and	byte ptr ds:4735h, 7Fh
sub	al, 94h	; '�'   ; Integer Subtraction
jb	short nullsub_6	; Jump if Below	(CF=1)

test	al, 0Fh		; Logical Compare
jnz	short nullsub_6	; Jump if Not Zero (ZF=0)

push	ax
call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

call	sub_137AD	; Call Procedure

call	sub_1C4DD	; Call Procedure

pop	ax
xor	ah, ah		; Logical Exclusive OR
mov	cl, 4
shr	ax, cl		; Shift	Logical	Right
inc	ax		; Increment by 1
cmp	al, 0Ah		; Compare Two Operands
jb	short loc_1374B	; Jump if Below	(CF=1)

mov	al, 0Ah


loc_1374B:		; Exchange Register/Memory with	Register
xchg	al, ah
call	sub_1E387	; Call Procedure

cmp	byte ptr ds:4735h, 37h ; '7' ; Compare Two Operands
jb	short loc_137AA	; Jump if Below	(CF=1)

call	sub_10E77	; Call Procedure


loc_1375A:
mov	cx, 5
call	sub_10FD9	; Call Procedure

mov	bp, offset _sub_1C0AD_gfx_clear_frame_buffer
mov	al, 34h	; '4'
call	_sub_1C108_transition ;	Call Procedure

call	sub_10086	; Call Procedure

mov	bp, offset sub_11A0F
call	sub_1C097	; Call Procedure

mov	si, word ptr ds:loc_1114E+2
mov	ds:byte_23C56, 0FFh
mov	bp, 401Fh
call	sub_1C097	; Call Procedure

mov	dx, ds:4
mov	bx, ds:6
cmp	dh, 21h	; '!'   ; Compare Two Operands
jnb	short loc_13796	; Jump if Not Below (CF=0)

mov	dl, 2
cmp	dh, 20h	; ' '   ; Compare Two Operands
jnz	short loc_13796	; Jump if Not Zero (ZF=0)

mov	dl, 0Ah


loc_13796:
mov	bp, offset sub_14057
mov	al, 34h	; '4'
mov	ds:byte_23C56, 0FFh
call	_sub_1C108_transition ;	Call Procedure

inc	ds:byte_1F597	; Increment by 1
jmp	sub_135AD	; Jump

; ���������������������������������������������������������������������������

loc_137AA:		; Jump
jmp	sub_12DB1

; END OF FUNCTION CHUNK	FOR sub_12E52



sub_137AD proc near
mov	al, 22h	; '"'
jmp	sub_1C2F2	; Jump

sub_137AD endp




sub_137B2 proc near
call	sub_198E6	; Call Procedure

sub_137B2 endp




sub_137B5 proc near

; FUNCTION CHUNK AT 39EC SIZE 00000087 BYTES

call	sub_14D00	; Call Procedure

mov	word ptr ds:472Dh, 0
call	sub_15BA8	; Call Procedure

call	sub_1C432	; Call Procedure

mov	ax, 0FFFFh
cmp	ds:8, al	; Compare Two Operands
jz	short loc_137D5	; Jump if Zero (ZF=1)

mov	dx, ds:4
call	sub_13EFE	; Call Procedure

lodsb			; Load String


loc_137D5:		; Logical Inclusive OR
or	ax, ax
js	short loc_137DC	; Jump if Sign (SF=1)


loc_137D9:		; Jump
jmp	loc_139EC

; ���������������������������������������������������������������������������

loc_137DC:		; Call Procedure
call	sub_13AE9


loc_137DF:		; Logical Inclusive OR
or	byte ptr ds:47A4h, 1
test	byte ptr ds:11C9h, 3 ; Logical Compare
jnz	short sub_137F4	; Jump if Not Zero (ZF=0)

sub_137B5 endp




sub_137EB proc near

; FUNCTION CHUNK AT 4D06 SIZE 00000051 BYTES

call	sub_1380C	; Call Procedure

call	sub_14E12	; Call Procedure

jmp	loc_14D06	; Jump

sub_137EB endp




sub_137F4 proc near
mov	byte ptr ds:4728h, 0

loc_137F9:		; Call Procedure
call	sub_14988

call	sub_14A5A	; Call Procedure

mov	ax, ds:word_23D2E

loc_13802:		; Call Procedure
call	_sub_1CA1B_hnm_load

call	ds:_ptr_22D65_gfx_vtable_func_41_copy_pal2_to_pal1 ; Indirect Call Far Procedure
jmp	sub_1388D	; Jump

sub_137F4 endp




sub_1380C proc near
mov	byte ptr ds:22E3h, 1

loc_13811:		; Call Procedure
call	sub_1388D


loc_13814:
mov	si, ds:1150h

loc_13818:
mov	ax, 1972h
call	_sub_15E4F_calc_SAL_index ; SAL	index -> ax


loc_1381E:
mov	bx, ax

loc_13820:
mov	dx, ds:4

loc_13824:
mov	ax, ds:6
cmp	al, 80h	; '�'   ; Compare Two Operands
mov	al, 0
jz	short loc_13834	; Jump if Zero (ZF=1)

cmp	dx, [si+2]	; Compare Two Operands
jnz	short loc_1384A	; Jump if Not Zero (ZF=0)

mov	al, ah


loc_13834:		; Compare Two Operands
cmp	al, [bx+5]
jnb	short loc_1384A	; Jump if Not Below (CF=0)

add	al, [bx]	; Add
cmp	al, 7Fh	; ''   ; Compare Two Operands
jnz	short loc_13847	; Jump if Not Zero (ZF=0)

mov	ah, [si]
shr	ah, 1		; Shift	Logical	Right
add	al, ah		; Add
sub	al, 5		; Integer Subtraction


loc_13847:		; Jump
jmp	sub_1C2F2

; ���������������������������������������������������������������������������

loc_1384A:
mov	di, ds:1150h
test	byte ptr [di+0Ah], 1 ; Logical Compare
jnz	short loc_13872	; Jump if Not Zero (ZF=0)

call	sub_1407E	; Call Procedure

call	_sub_1B58B_map_func ; Call Procedure

dec	di		; Decrement by 1
mov	cx, 4


loc_1385E:
mov	al, es:[di]
inc	di		; Increment by 1
and	al, 30h		; Logical AND
cmp	al, 10h		; Compare Two Operands
jz	short loc_13872	; Jump if Zero (ZF=1)

loop	loc_1385E	; Loop while CX	!= 0

mov	bx, 13h
mov	cx, 42h	; 'B'
jmp	short loc_13878	; Jump

; ���������������������������������������������������������������������������

loc_13872:
mov	bx, 0Ah
mov	cx, 88h	; '�'


loc_13878:
mov	ax, ds:6
xchg	al, ah		; Exchange Register/Memory with	Register
xor	ax, ds:4	; Logical Exclusive OR
inc	ax		; Increment by 1
xor	dx, dx		; Logical Exclusive OR
div	bx		; Unsigned Divide
mov	ax, dx
add	ax, cx		; Add
jmp	sub_1C2F2	; Jump

sub_1380C endp




sub_1388D proc near
mov	byte ptr ds:46DFh, 1
call	sub_1395C	; Call Procedure


loc_13895:		; Compare Two Operands
cmp	byte ptr ds:46D7h, 0
jz	short loc_138AD	; Jump if Zero (ZF=1)

cmp	ds:46D6h, bl	; Compare Two Operands
jz	short locret_138B3 ; Jump if Zero (ZF=1)


loc_138A2:
mov	byte ptr ds:46D7h, 30h ; '0'

loc_138A7:		; Call Procedure
call	sub_13971

jmp	sub_139B9	; Jump

; ���������������������������������������������������������������������������

loc_138AD:		; Call Procedure
call	sub_13971

call	sub_1398C	; Call Procedure


locret_138B3:		; Return Near from Procedure
retn

sub_1388D endp




sub_138B4 proc near
call	sub_1388D	; Call Procedure


loc_138B7:
mov	ax, 28h	; '('
call	_sub_1C13E_open_sprite_sheet ; SKY.HSQ

xor	ax, ax		; Logical Exclusive OR

loc_138BF:
mov	bp, 14h
xor	bx, bx		; Logical Exclusive OR

loc_138C4:
mov	cx, 4


loc_138C7:		; Logical Exclusive OR
xor	dx, dx
push	cx
push	bp


loc_138CB:
push	ax
call	sub_1C2FD	; Call Procedure

pop	ax

loc_138D0:		; Add
add	dx, 40
cmp	dx, 320		; Compare Two Operands
jb	short loc_138CB	; Jump if Below	(CF=1)


loc_138D9:
pop	bp
pop	cx
inc	ax		; Increment by 1

loc_138DC:		; Add
add	bx, bp
loop	loc_138C7	; Loop while CX	!= 0


locret_138E0:		; Return Near from Procedure
retn

sub_138B4 endp




sub_138E1 proc near
cmp	byte ptr ds:46DFh, 0 ; Compare Two Operands
jz	short locret_138E0 ; Jump if Zero (ZF=1)

call	sub_1395C	; Call Procedure

cmp	ds:46D6h, bl	; Compare Two Operands
jz	short locret_138E0 ; Jump if Zero (ZF=1)

sub_138E1 endp




sub_138F1 proc near
call	sub_13971	; Call Procedure

call	sub_139B9	; Call Procedure

mov	al, 40h	; '@'
xchg	al, ds:46D7h	; Exchange Register/Memory with	Register

loc_138FD:		; Logical Inclusive OR
or	al, al
jnz	short locret_138E0 ; Jump if Not Zero (ZF=0)


loc_13901:
mov	si, 3916h

loc_13904:
mov	bp, 10h
jmp	sub_1DA25	; Jump

sub_138F1 endp




sub_1390A proc near
cmp	byte ptr ds:46D7h, 0 ; Compare Two Operands
jz	short locret_138E0 ; Jump if Zero (ZF=1)

call	sub_13916	; Call Procedure

jmp	short sub_1390A	; Jump

sub_1390A endp




sub_13916 proc near
cmp	byte ptr ds:46DFh, 0 ; Compare Two Operands
jz	short sub_13950	; Jump if Zero (ZF=1)


loc_1391D:
mov	cx, 1C5h

loc_13920:
mov	bx, 0DBh ; '�'
cmp	byte ptr ds:22E3h, 0 ; Compare Two Operands
jnz	short loc_13930	; Jump if Not Zero (ZF=0)

mov	cx, 0F0h ; '�'
mov	bx, 180h


loc_13930:
mov	al, ds:46D7h
push	ax

loc_13934:		; Indirect Call	Far Procedure
call	dword ptr ds:3951h
pop	ax
cmp	byte ptr ds:227Dh, 0 ; Compare Two Operands
jnz	short loc_1394A	; Jump if Not Zero (ZF=0)

mov	cx, 30h	; '0'

loc_13943:
mov	bx, 2D0h
call	dword ptr ds:3951h ; Indirect Call Far Procedure


loc_1394A:		; Decrement by 1
dec	byte ptr ds:46D7h
jnz	short nullsub_7	; Jump if Not Zero (ZF=0)

sub_13916 endp




sub_13950 proc near
mov	byte ptr ds:46D7h, 0
mov	si, 3916h

loc_13958:		; Jump
jmp	sub_1DA5F

sub_13950 endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_7. PRESS KEYPAD "+" TO EXPAND]



sub_1395C proc near
mov	ax, ds:word_1F4B2


loc_1395F:
mov	ah, al
shr	ah, 1		; Shift	Logical	Right
shr	ah, 1		; Shift	Logical	Right
and	ax, 1C0Fh	; Logical AND

loc_13968:		; "\b\b\t\t\t\t\t\t\t\t\t\n\n\v\v\v"
mov	bx, offset asc_21730
xlat			; Table	Lookup Translation

loc_1396C:		; Add
add	al, ah

loc_1396E:
mov	bl, al
retn			; Return Near from Procedure

sub_1395C endp




sub_13971 proc near
mov	ax, 28h	; '('   ; SKY.HSQ

loc_13974:		; Add
add	al, ds:byte_21793


loc_13978:
mov	ds:byte_2D064, al

loc_1397B:		; Call Procedure
call	_sub_1C13E_open_sprite_sheet

mov	al, bl

loc_13980:		; Logical Exclusive OR
xor	ah, ah
mov	ds:byte_23B86, al
call	sub_1C1F4	; Call Procedure

lea	dx, [si+6]	; Load Effective Address

locret_1398B:		; Return Near from Procedure
retn

sub_13971 endp




sub_1398C proc near
mov	cx, 1C5h

loc_1398F:
mov	bx, 0DBh ; '�'
cmp	byte ptr ds:22E3h, 0 ; Compare Two Operands
jnz	short loc_1399F	; Jump if Not Zero (ZF=0)

mov	cx, 0F0h ; '�'
mov	bx, 180h


loc_1399F:
push	cx

loc_139A0:		; Indirect Call	Far Procedure
call	dword ptr ds:38BDh
pop	cx
add	dx, cx		; Add
cmp	byte ptr ds:227Dh, 0 ; Compare Two Operands
jnz	short locret_139B8 ; Jump if Not Zero (ZF=0)


loc_139AE:
mov	cx, 30h	; '0'

loc_139B1:
mov	bx, 2D0h

loc_139B4:		; Indirect Call	Far Procedure
call	dword ptr ds:38BDh


locret_139B8:		; Return Near from Procedure
retn

sub_1398C endp




sub_139B9 proc near
mov	cx, 1C5h
mov	bx, 0DBh ; '�'
cmp	byte ptr ds:22E3h, 0 ; Compare Two Operands
jnz	short loc_139CC	; Jump if Not Zero (ZF=0)

mov	cx, 0F0h ; '�'
mov	bx, 180h


loc_139CC:
push	cx
call	dword ptr ds:394Dh ; Indirect Call Far Procedure
pop	cx
add	dx, cx		; Add
cmp	byte ptr ds:227Dh, 0 ; Compare Two Operands
jnz	short locret_139E5 ; Jump if Not Zero (ZF=0)

mov	cx, 30h	; '0'
mov	bx, 2D0h
call	dword ptr ds:394Dh ; Indirect Call Far Procedure


locret_139E5:		; Return Near from Procedure
retn

sub_139B9 endp




sub_139E6 proc near
mov	si, offset unk_2B566
jmp	sub_1DA5F	; Jump

sub_139E6 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_137B5

loc_139EC:
mov	ds:byte_21793, 1
push	ax
call	sub_13AE9	; Call Procedure

mov	ax, ds:4
cmp	ax, 2005h	; Compare Two Operands
jz	short loc_13A1D	; Jump if Zero (ZF=1)

cmp	ax, 1005h	; Compare Two Operands
jz	short loc_13A18	; Jump if Zero (ZF=1)

dec	al		; Decrement by 1
jnz	short loc_13A20	; Jump if Not Zero (ZF=0)

cmp	ah, 21h	; '!'   ; Compare Two Operands
jnz	short loc_13A13	; Jump if Not Zero (ZF=0)

pop	ax
mov	di, ds:114Eh
mov	al, [di]
push	ax


loc_13A13:		; Call Procedure
call	sub_137EB

jmp	short loc_13A20	; Jump

; ���������������������������������������������������������������������������

loc_13A18:
mov	byte ptr ds:22E3h, 0


loc_13A1D:		; Call Procedure
call	sub_138B4


loc_13A20:
pop	ax
call	_sub_13B59_draw_SAL ; Call Procedure

cmp	ds:byte_23B8F, 0 ; Compare Two Operands
jz	short sub_13A7C	; Jump if Zero (ZF=1)

cmp	byte ptr ds:word_1F4B4,	1 ; Compare Two	Operands
jnz	short sub_13A7C	; Jump if Not Zero (ZF=0)

cmp	ds:byte_23BE1, 0FFh ; Compare Two Operands
jz	short locret_13A7B ; Jump if Zero (ZF=1)

mov	cl, ds:byte_23BAF
xor	ch, ch		; Logical Exclusive OR
jcxz	short locret_13A7B ; Jump if CX	is 0

mov	ax, offset unk_22D3D
push	ax
mov	ds:byte_23BE1, 0
test	ds:byte_23C54, 81h ; Logical Compare
jnz	short locret_13A7B ; Jump if Not Zero (ZF=0)

mov	ax, 51
call	_sub_1C13E_open_sprite_sheet ; RES_DN35_HSQ

call	sub_13A95	; Call Procedure

mov	ax, dx
add	ax, 0Ch		; Add
mov	ds:word_23BDD, ax
mov	ax, bx
add	ax, 8		; Add
mov	ds:word_23BDF, ax


loc_13A6A:
push	cx
push	bx
push	dx
call	sub_13AA9	; Call Procedure

pop	dx
pop	bx
pop	cx

; END OF FUNCTION CHUNK	FOR sub_137B5



sub_13A73 proc near
add	dx, 46h	; 'F'   ; Add
add	bx, 0Ah		; Add
loop	loc_13A6A	; Loop while CX	!= 0


locret_13A7B:		; Return Near from Procedure
retn

sub_13A73 endp




sub_13A7C proc near
call	sub_139E6	; Call Procedure

mov	ax, ds:4
cmp	al, 4		; Compare Two Operands
jnz	short locret_13A94 ; Jump if Not Zero (ZF=0)

cmp	ah, 20h	; ' '   ; Compare Two Operands
jnb	short locret_13A94 ; Jump if Not Below (CF=0)

mov	si, offset sub_1C0B6
mov	bp, 0Ch
call	sub_1DA25	; Call Procedure


locret_13A94:		; Return Near from Procedure
retn

sub_13A7C endp




sub_13A95 proc near
mov	dx, 95h	; '�'
mov	bx, 39h	; '9'
cmp	byte ptr ds:5, 20h ; ' ' ; Compare Two Operands
jb	short locret_13AA8 ; Jump if Below (CF=1)

mov	dx, 0CAh ; '�'
mov	bx, 49h	; 'I'


locret_13AA8:		; Return Near from Procedure
retn

sub_13A95 endp




sub_13AA9 proc near
xor	ax, ax		; Logical Exclusive OR
call	sub_1C305	; Call Procedure

add	dx, 6		; Add
add	bx, 1Eh		; Add
mov	ax, 1
call	sub_1C305	; Call Procedure

sub	dx, 2		; Integer Subtraction
add	bx, 14h		; Add
mov	al, ds:4731h
xor	ah, ah		; Logical Exclusive OR
push	ax
sub	al, 0Fh		; Integer Subtraction
jnb	short loc_13ACC	; Jump if Not Below (CF=0)

xor	ax, ax		; Logical Exclusive OR


loc_13ACC:		; Compare Two Operands
cmp	al, 5
jbe	short loc_13AD2	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	al, 5


loc_13AD2:		; Add
add	al, 2
call	sub_1C305	; Call Procedure

sub	dx, 55h	; 'U'   ; Integer Subtraction
sub	bx, 35h	; '5'   ; Integer Subtraction
pop	ax
cmp	al, 0Eh		; Compare Two Operands
jb	short loc_13AE4	; Jump if Below	(CF=1)

mov	al, 0Eh


loc_13AE4:		; Add
add	al, 8
jmp	sub_1C30D	; Jump

sub_13AA9 endp




sub_13AE9 proc near
push	ax
push	ds
pop	es
mov	cx, 46
mov	ax, 0FFFFh
mov	di, offset word_23CA8
rep stosw		; Store	String
pop	ax
retn			; Return Near from Procedure

sub_13AE9 endp




sub_13AF9 proc near
cmp	byte ptr ds:2Bh, 0 ; Compare Two Operands
jz	short loc_13B03	; Jump if Zero (ZF=1)

jmp	sub_1C43E	; Jump

; ���������������������������������������������������������������������������

loc_13B03:		; Compare Two Operands
cmp	byte ptr ds:47A4h, 0
js	short locret_13B58 ; Jump if Sign (SF=1)

mov	ax, ds:47C4h
cmp	al, 0Fh		; Compare Two Operands
jnz	short loc_13B15	; Jump if Not Zero (ZF=0)

add	al, ds:476Ch	; Add


loc_13B15:
mov	di, ax
shl	di, 1		; Shift	Logical	Left
shl	di, 1		; Shift	Logical	Left
mov	dx, [di+47F8h]
or	dx, dx		; Logical Inclusive OR
js	short locret_13B58 ; Jump if Sign (SF=1)

push	ds:word_23CAA[di]
push	dx
or	ds:byte_23C54, 80h ; Logical Inclusive OR
call	sub_137B5	; Call Procedure

pop	dx
pop	bx
cmp	dx, 0F0h ; '�'  ; Compare Two Operands
jb	short loc_13B3B	; Jump if Below	(CF=1)

mov	dx, 0F0h ; '�'


loc_13B3B:		; Compare Two Operands
cmp	bx, 71h	; 'q'
jb	short loc_13B43	; Jump if Below	(CF=1)

mov	bx, 71h	; 'q'


loc_13B43:
mov	es, ds:_word_2D08E_framebuffer2_seg
push	ds
mov	ds, ds:_word_2D08A_framebuffer_active
mov	bp, 6
call	ss:_ptr_22D65_gfx_vtable_func_37 ; Indirect Call Far Procedure
pop	ds
jmp	sub_1C43E	; Jump

; ���������������������������������������������������������������������������

locret_13B58:		; Return Near from Procedure
retn

sub_13AF9 endp




_sub_13B59_draw_SAL proc near

; FUNCTION CHUNK AT 3D12 SIZE 0000001D BYTES

sub	sp, 24		; Integer Subtraction
mov	ds:_word_23CA6_SAL_stack_buffer_24b, sp
xor	ah, ah		; Logical Exclusive OR
dec	ax		; Decrement by 1
push	ax
mov	cl, 4
shr	ax, cl		; Shift	Logical	Right
jz	short loc_13B70	; Jump if Zero (ZF=1)

add	ax, 13h		; Add
call	_sub_1C13E_open_sprite_sheet ; RES_GENERIC_HSQ


loc_13B70:
pop	ax
and	ax, 0Fh		; Logical AND
shl	ax, 1		; Shift	Logical	Left
mov	si, offset _work_2B11E_SAL_data
add	si, ax		; Add
mov	si, [si]	; Fetch	SAL subchunk offset. ds:si points to chunk
call	_sub_13D83_do_weird_shit_with_stack_buffer ; Call Procedure


loc_13B80:		; Fetch	word from SAL chunk
lodsw
cmp	ax, 0FFFFh	; Compare Two Operands
jz	short loc_13BB5	; If -1	goto

js	short loc_13BBF	; If high bit set, goto

mov	di, ax		; ah = flags, al = sprite_index
shr	ah, 1		; Shift	Logical	Right
and	ah, 1		; grab second-lowest bit from flags and	combine	with sprite x
lodsb			; Load String
mov	dx, ax		; dx = sprite x
lodsb			; Load String
xor	ah, ah		; Logical Exclusive OR
mov	bx, ax		; bx = sprite y
lodsb			; Load String
push	si
mov	cs:_byte_1C21A_pal_offset, al
mov	ax, di
and	ax, 0FDFFh	; Logical AND
dec	ax		; Decrement by 1
and	di, 1FFh	; Logical AND
cmp	di, 1		; Compare Two Operands
jnz	short loc_13BAF	; Jump if Not Zero (ZF=0)

jmp	loc_13D12	; Jump

; ���������������������������������������������������������������������������

loc_13BAF:		; dx = sprite x
call	_sub_1C22F_draw_sprite ; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

pop	si
jmp	short loc_13B80	; Jump

; ���������������������������������������������������������������������������

loc_13BB5:
mov	cs:_byte_1C21A_pal_offset, 0
add	sp, 18h		; Add
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_13BBF:		; Compare Two Operands
cmp	ah, 0C0h ; '�'
jz	short loc_13BC9	; Jump if Zero (ZF=1)

call	_sub_13BE9_SAL_polygon ; Call Procedure

jmp	short loc_13B80	; Jump

; ���������������������������������������������������������������������������

loc_13BC9:
push	ax
mov	es, ds:_word_2D08A_framebuffer_active
lodsw			; Load String
mov	dx, ax
lodsw			; Load String
mov	bx, ax
lodsw			; Load String
mov	di, ax
lodsw			; Load String
mov	cx, ax
pop	ax
push	si
mov	bp, 0FFFFh
mov	si, offset unk_20920
call	ds:_ptr_22D65_gfx_vtable_func_19 ; Indirect Call Far Procedure
pop	si
jmp	short loc_13B80	; Jump

_sub_13B59_draw_SAL endp




_sub_13BE9_SAL_polygon proc near
mov	ds:word_21789, offset RESOURCE_GLOBDATA
push	ds
pop	es
mov	al, [si-2]
mov	ds:byte_23C9D, al
mov	al, [si-1]
mov	ds:byte_23C9C, al
lodsb			; Load String
cbw			; AL ->	AX (with sign)
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
mov	ds:word_2178B, ax
lodsb			; Load String
cbw			; AL ->	AX (with sign)
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
mov	ds:word_2178D, ax
lodsw			; Load String
mov	dx, ax
lodsw			; Load String
mov	bx, ax
mov	ds:word_23C9E, dx
mov	ds:word_23CA0, bx


loc_13C25:		; Load String
lodsw
push	ax
and	ax, 3FFFh	; Logical AND
mov	di, ax
lodsw			; Load String
mov	cx, ax
call	sub_13E13	; Call Procedure

mov	dx, di
mov	bx, cx
pop	ax
test	ax, 4000h	; Logical Compare
jz	short loc_13C25	; Jump if Zero (ZF=1)

mov	ds:word_23CA2, di
mov	ds:word_23CA4, cx
mov	dx, ds:word_23C9E
mov	bx, ds:word_23CA0
mov	ds:word_21789, offset unk_24112
test	ax, 8000h	; Logical Compare
jnz	short loc_13C71	; Jump if Not Zero (ZF=0)


loc_13C57:		; Load String
lodsw
push	ax
and	ax, 3FFFh	; Logical AND
mov	di, ax
lodsw			; Load String
mov	cx, ax
call	sub_13E13	; Call Procedure

mov	dx, di
mov	bx, cx
pop	ax
or	ax, ax		; Logical Inclusive OR
jns	short loc_13C57	; Jump if Not Sign (SF=0)

mov	dx, di
mov	bx, cx


loc_13C71:
mov	di, ds:word_23CA2
mov	cx, ds:word_23CA4
call	sub_13E13	; Call Procedure

mov	es, ds:_word_2D08A_framebuffer_active
push	si
mov	bx, ds:word_23CA0
mov	bp, ds:word_23CA4
sub	bp, bx		; Integer Subtraction
lea	si, RESOURCE_GLOBDATA ;	Load Effective Address
mov	cx, bp
mov	bp, 0
mov	ah, ds:byte_23C9C
and	ah, 3Eh		; Logical AND
jz	short loc_13CA0	; Jump if Zero (ZF=1)

mov	bp, 1


loc_13CA0:
mov	al, 2
mov	ds:word_2178F, ax
mov	ah, ds:byte_23C9D
xor	al, al		; Logical Exclusive OR
test	ds:byte_23C9C, 1 ; Logical Compare
jnz	short loc_13CE0	; Jump if Not Zero (ZF=0)


loc_13CB2:
push	cx
push	ax
lodsw			; Load String
mov	dx, ax
lodsw			; Load String
mov	cx, ax
pop	ax

loc_13CBB:		; Compare Two Operands
cmp	dx, cx
jb	short loc_13CC1	; Jump if Below	(CF=1)

xchg	dx, cx		; Exchange Register/Memory with	Register


loc_13CC1:		; Increment by 1
inc	cx
sub	cx, dx		; Integer Subtraction
jz	short loc_13CD6	; Jump if Zero (ZF=1)

push	si
push	bx
mov	si, ds:word_2178F
mov	di, ds:word_2178B
call	ds:_ptr_22D65_gfx_vtable_func_36 ; Indirect Call Far Procedure
pop	bx
pop	si


loc_13CD6:		; Add
add	ax, ds:word_2178D
inc	bx		; Increment by 1
pop	cx
loop	loc_13CB2	; Loop while CX	!= 0

pop	si
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_13CE0:
push	cx
push	ax
lodsw			; Load String
mov	dx, ax
lodsw			; Load String
mov	cx, ax
pop	ax
cmp	dx, cx		; Compare Two Operands
jnb	short loc_13CEF	; Jump if Not Below (CF=0)

xchg	dx, cx		; Exchange Register/Memory with	Register


loc_13CEF:		; Decrement by 1
dec	cx
sub	cx, dx		; Integer Subtraction
jz	short loc_13D08	; Jump if Zero (ZF=1)

neg	cx		; Two's Complement Negation
push	si
push	bx
mov	si, ds:word_2178F
mov	di, ds:word_2178B
std			; Set Direction	Flag
call	ds:_ptr_22D65_gfx_vtable_func_36 ; Indirect Call Far Procedure
pop	bx
pop	si
cld			; Clear	Direction Flag


loc_13D08:		; Add
add	ax, ds:word_2178D
inc	bx		; Increment by 1
pop	cx
loop	loc_13CE0	; Loop while CX	!= 0

pop	si
retn			; Return Near from Procedure

_sub_13BE9_SAL_polygon endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR _sub_13B59_draw_SAL

loc_13D12:		; Logical Compare
test	ds:byte_23C54, 81h
jnz	short loc_13D2B	; Jump if Not Zero (ZF=0)

mov	di, ds:_word_23CA6_SAL_stack_buffer_24b
dec	ds:_word_23CA6_SAL_stack_buffer_24b ; Decrement	by 1
cmp	byte ptr [di], 0FFh ; Compare Two Operands
jz	short loc_13D2B	; Jump if Zero (ZF=1)

mov	al, [di]
call	sub_13D2F	; Call Procedure


loc_13D2B:
pop	si
jmp	loc_13B80	; Jump

; END OF FUNCTION CHUNK	FOR _sub_13B59_draw_SAL



sub_13D2F proc near
push	word ptr ds:2784h
push	ax
xor	ah, ah		; Logical Exclusive OR
mov	di, ax
shl	di, 1		; Shift	Logical	Left
shl	di, 1		; Shift	Logical	Left
mov	[di+47F8h], dx
mov	[di+47FAh], bx
mov	ax, 26h	; '&'
call	_sub_1C13E_open_sprite_sheet ; RES_PERS_HSQ

pop	ax
mov	ch, ah
cmp	al, 0Fh		; Compare Two Operands
jb	short loc_13D58	; Jump if Below	(CF=1)

sub	al, 0Fh		; Integer Subtraction
mov	ds:476Ch, al
mov	al, 0Fh


loc_13D58:		; Call Procedure
call	sub_19123

call	sub_1127C	; Call Procedure

jnb	short loc_13D65	; Jump if Not Below (CF=0)

mov	al, 11h
add	bx, 35h	; '5'   ; Add


loc_13D65:		; Compare Two Operands
cmp	al, 0Ch
jnz	short loc_13D72	; Jump if Not Zero (ZF=0)

test	byte ptr ds:10A7h, 10h ; Logical Compare
jz	short loc_13D72	; Jump if Zero (ZF=1)

mov	al, 12h


loc_13D72:
mov	ah, ch
shl	al, 1		; Shift	Logical	Left
push	ax
call	sub_1C2FD	; Call Procedure

pop	ax
inc	ax		; Increment by 1
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

pop	ax
jmp	_sub_1C13E_open_sprite_sheet ; Jump

sub_13D2F endp




_sub_13D83_do_weird_shit_with_stack_buffer proc	near
push	ds
pop	es
mov	ax, 0FFFFh
mov	cx, 23
mov	di, ds:_word_23CA6_SAL_stack_buffer_24b
rep stosb		; Store	String
mov	di, ds:_word_23CA6_SAL_stack_buffer_24b
cmp	ds:byte_23C24, 0 ; Compare Two Operands
jz	short loc_13DB0	; Jump if Zero (ZF=1)

mov	ax, ds:word_23C28
or	ax, ax		; Logical Inclusive OR
jz	short loc_13DB0	; Jump if Zero (ZF=1)

push	si
mov	si, ax
lods	byte ptr cs:[si] ; Load	String
mov	cl, al
rep movs byte ptr es:[di], byte	ptr cs:[si] ; Move Byte(s) from	String to String
pop	si
jmp	short loc_13DE5	; Jump

; ���������������������������������������������������������������������������

loc_13DB0:
mov	dx, ds:word_1F4C2
xor	dx, ds:word_1F4C0 ; Logical Exclusive OR
mov	cl, [si]
or	cl, cl		; Logical Inclusive OR
jz	short loc_13DE5	; Jump if Zero (ZF=1)

mov	ch, ds:byte_1F575
and	ch, 0Fh		; Logical AND
mov	ax, 0FFFFh


loc_13DC8:		; Increment by 1
inc	ax
shr	dx, 1		; Shift	Logical	Right
jnb	short loc_13DD0	; Jump if Not Below (CF=0)

call	sub_13DF4	; Call Procedure


loc_13DD0:		; Logical Inclusive OR
or	dx, dx
jnz	short loc_13DC8	; Jump if Not Zero (ZF=0)

mov	dl, ds:byte_23C1A
dec	dx		; Decrement by 1
jle	short loc_13DE5	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

mov	ax, 0Fh


loc_13DDE:		; Increment by 1
inc	ax
call	sub_13DF4	; Call Procedure

dec	dx		; Decrement by 1
jnz	short loc_13DDE	; Jump if Not Zero (ZF=0)


loc_13DE5:		; Load String
lodsb
xor	ah, ah		; Logical Exclusive OR
mov	di, ds:_word_23CA6_SAL_stack_buffer_24b
dec	ax		; Decrement by 1
add	di, ax		; Add
mov	ds:_word_23CA6_SAL_stack_buffer_24b, di
retn			; Return Near from Procedure

_sub_13D83_do_weird_shit_with_stack_buffer endp




sub_13DF4 proc near
mov	bx, ax
add	bl, ch		; Add


loc_13DF8:		; Integer Subtraction
sub	bl, cl
jnb	short loc_13DF8	; Jump if Not Below (CF=0)

add	bl, cl		; Add
cmp	byte ptr [bx+di], 0FFh ; Compare Two Operands
jz	short loc_13E10	; Jump if Zero (ZF=1)

mov	bx, 0FFFFh


loc_13E06:		; Increment by 1
inc	bx
cmp	bl, cl		; Compare Two Operands
jnb	short locret_13E12 ; Jump if Not Below (CF=0)

cmp	byte ptr [bx+di], 0FFh ; Compare Two Operands
jnz	short loc_13E06	; Jump if Not Zero (ZF=0)


loc_13E10:
mov	[bx+di], al


locret_13E12:		; Return Near from Procedure
retn

sub_13DF4 endp




sub_13E13 proc near
push	bx
push	cx
push	dx
push	di
mov	ds:word_23C98, dx
mov	ds:word_23C9A, bx
sub	bx, cx		; Integer Subtraction
sub	dx, di		; Integer Subtraction
neg	bx		; Two's Complement Negation
neg	dx		; Two's Complement Negation
call	sub_13E80	; Call Procedure

pop	di
pop	dx
pop	cx
pop	bx
retn			; Return Near from Procedure

sub_13E13 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_13E80

loc_13E2F:
mov	bx, ds:word_23C9A
mov	cx, dx
mov	dx, ds:word_23C98
add	ds:word_23C98, cx ; Add
jnb	short loc_13E41	; Jump if Not Below (CF=0)

add	dx, cx		; Add


loc_13E41:
mov	di, ds:word_21789
mov	ax, dx
stosw			; Store	String
add	di, 2		; Add
mov	ds:word_21789, di
pop	si
pop	di
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_13E52:
mov	cx, bx
mov	bx, ds:word_23C9A
mov	dx, ds:word_23C98
or	ax, ax		; Logical Inclusive OR
jns	short loc_13E68	; Jump if Not Sign (SF=0)

sub	ds:word_23C9A, cx ; Integer Subtraction
sub	bx, cx		; Integer Subtraction
jmp	short loc_13E6C	; Jump

; ���������������������������������������������������������������������������

loc_13E68:		; Add
add	ds:word_23C9A, cx


loc_13E6C:		; Increment by 1
inc	cx
mov	di, ds:word_21789
mov	ax, dx


loc_13E73:		; Store	String
stosw
add	di, 2		; Add
loop	loc_13E73	; Loop while CX	!= 0

mov	ds:word_21789, di
pop	si
pop	di
retn			; Return Near from Procedure

; END OF FUNCTION CHUNK	FOR sub_13E80


; Attributes: bp-based frame

sub_13E80 proc near

arg_0= word ptr	 6

; FUNCTION CHUNK AT 3E2F SIZE 00000051 BYTES

push	di
push	si
or	bx, bx		; Logical Inclusive OR
jz	short loc_13E2F	; Jump if Zero (ZF=1)

mov	ax, 1
jns	short loc_13E8F	; Jump if Not Sign (SF=0)

neg	bx		; Two's Complement Negation
neg	ax		; Two's Complement Negation


loc_13E8F:		; Logical Inclusive OR
or	dx, dx
jz	short loc_13E52	; Jump if Zero (ZF=1)

mov	cx, 1
jns	short loc_13E9C	; Jump if Not Sign (SF=0)

neg	cx		; Two's Complement Negation
neg	dx		; Two's Complement Negation


loc_13E9C:
push	ax
push	cx
push	ax
push	cx
mov	bp, sp
mov	si, bx
mov	di, dx
xor	ax, ax		; Logical Exclusive OR
cmp	dx, bx		; Compare Two Operands
jbe	short loc_13EB1	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	[bp+2],	ax
jmp	short loc_13EBA	; Jump

; ���������������������������������������������������������������������������

loc_13EB1:		; Logical Inclusive OR
or	bx, bx
jz	short loc_13EF8	; Jump if Zero (ZF=1)

xchg	di, si		; Exchange Register/Memory with	Register
mov	[bp+0],	ax


loc_13EBA:
mov	ax, di
mov	cx, di
shr	ax, 1		; Shift	Logical	Right


loc_13EC0:		; Add
add	ax, si
cmp	ax, di		; Compare Two Operands
jb	short loc_13ED0	; Jump if Below	(CF=1)

sub	ax, di		; Integer Subtraction
mov	dx, [bp+4]
mov	bx, [bp+arg_0]
jmp	short loc_13ED6	; Jump

; ���������������������������������������������������������������������������

loc_13ED0:
mov	dx, [bp+0]
mov	bx, [bp+2]


loc_13ED6:		; Add
add	dx, ds:word_23C98
cmp	bx, 1		; Compare Two Operands
jnz	short loc_13EF2	; Jump if Not Zero (ZF=0)

push	di
push	ax
mov	di, ds:word_21789
mov	ax, ds:word_23C98
stosw			; Store	String
add	di, 2		; Add
mov	ds:word_21789, di
pop	ax
pop	di


loc_13EF2:
mov	ds:word_23C98, dx
loop	loc_13EC0	; Loop while CX	!= 0


loc_13EF8:		; Add
add	sp, 8
pop	si
pop	di
retn			; Return Near from Procedure

sub_13E80 endp ; sp =  8




sub_13EFE proc near
mov	al, dh
xor	ah, ah		; Logical Exclusive OR
shl	ax, 1		; Shift	Logical	Left
mov	si, ax
mov	si, ds:word_20874[si]
mov	al, dl
dec	al		; Decrement by 1
mov	ah, 5
mul	ah		; Unsigned Multiplication of AL	or AX
add	si, ax		; Add


locret_13F14:		; Return Near from Procedure
retn

sub_13EFE endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_19215

loc_13F15:
mov	bp, 1
jmp	short sub_13F27	; Jump

; END OF FUNCTION CHUNK	FOR sub_19215
; ���������������������������������������������������������������������������
mov	bp, 2
jmp	short sub_13F27	; Jump

; ���������������������������������������������������������������������������
mov	bp, 3
jmp	short sub_13F27	; Jump

; ���������������������������������������������������������������������������
mov	bp, 4




sub_13F27 proc near
push	bp
call	sub_1D2BD	; Call Procedure

call	_sub_1AC30_call_pcm_audio_vtable_func_5	; Call Procedure

call	sub_1A7A5	; Call Procedure

pop	bp
mov	byte ptr ds:47A9h, 0
mov	byte ptr ds:26h, 0
mov	dx, ds:4
mov	bx, ds:6
cmp	bl, 80h	; '�'   ; Compare Two Operands
jz	short loc_13F67	; Jump if Zero (ZF=1)

mov	al, ds:4735h
and	al, 7Fh		; Logical AND
inc	al		; Increment by 1
jns	short loc_13F54	; Jump if Not Sign (SF=0)

dec	al		; Decrement by 1


loc_13F54:		; Logical Inclusive OR
or	al, 80h
mov	ds:4735h, al
cmp	byte ptr ds:0F4h, 14h ;	Compare	Two Operands
jnb	short loc_13F64	; Jump if Not Below (CF=0)

inc	byte ptr ds:0F4h ; Increment by	1


loc_13F64:		; Jump
jmp	loc_13FF5

; ���������������������������������������������������������������������������

loc_13F67:		; Call Procedure
call	sub_13EFE

mov	dl, [bp+si]
or	dl, dl		; Logical Inclusive OR
jz	short locret_13F14 ; Jump if Zero (ZF=1)

js	short loc_13FD2	; Jump if Sign (SF=1)

cmp	byte ptr ds:0Bh, 1 ; Compare Two Operands
jnz	short loc_13F84	; Jump if Not Zero (ZF=0)

call	sub_1E270	; Call Procedure

mov	cl, 2
call	_sub_1B389_open_sav_cl ; Call Procedure

call	sub_1E283	; Call Procedure


loc_13F84:
mov	si, ds:114Eh
test	byte ptr [si+0Ah], 10h ; Logical Compare
jnz	short loc_13FAA	; Jump if Not Zero (ZF=0)

or	byte ptr [si+0Ah], 10h ; Logical Inclusive OR
cmp	dh, 20h	; ' '   ; Compare Two Operands
adc	byte ptr ds:25h, 0 ; Add with Carry
mov	byte ptr ds:26h, 0FFh
call	sub_1E270	; Call Procedure

mov	cl, 3
call	_sub_1B389_open_sav_cl ; Call Procedure

call	sub_1E283	; Call Procedure


loc_13FAA:
mov	ds:0Ch,	dl
mov	byte ptr ds:23h, 1
call	sub_1A1C4	; Call Procedure

push	bx
push	dx
call	sub_136D3	; Call Procedure

pop	dx
pop	bx
call	sub_1A1E2	; Call Procedure

jz	short loc_13FC3	; Jump if Zero (ZF=1)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_13FC3:
push	bx
push	dx
call	sub_1ABD5	; Call Procedure

pop	dx
pop	bx
mov	byte ptr ds:23h, 5
jmp	sub_14057	; Jump

; ���������������������������������������������������������������������������

loc_13FD2:
mov	byte ptr ds:0E7h, 0
xor	dh, dh		; Logical Exclusive OR
neg	dl		; Two's Complement Negation
mov	bp, dx
xor	si, si		; Logical Exclusive OR
xchg	si, ds:114Eh	; Exchange Register/Memory with	Register
mov	dx, [si+2]
mov	bx, [si+4]
xor	bh, bh		; Logical Exclusive OR
mov	byte ptr ds:8, 0FFh
mov	byte ptr ds:9, 0FFh


loc_13FF5:		; Shift	Logical	Left
shl	bp, 1
mov	ax, [bp+1454h]
call	sub_1B5CF	; Call Procedure

or	bh, bh		; Logical Inclusive OR
jnz	short sub_14057	; Jump if Not Zero (ZF=0)

sub_13F27 endp

; START	OF FUNCTION CHUNK FOR sub_14F0C

loc_14002:
mov	ax, bx
cbw			; AL ->	AX (with sign)
mov	bx, ax
call	sub_1B532	; Call Procedure

xor	bh, bh		; Logical Exclusive OR
test	al, 40h		; Logical Compare
jz	short sub_14057	; Jump if Zero (ZF=1)

call	sub_1409A	; Call Procedure

jnz	short sub_14057	; Jump if Not Zero (ZF=0)

cmp	dx, [si+2]	; Compare Two Operands
jnz	short sub_14057	; Jump if Not Zero (ZF=0)

mov	ax, bx
cbw			; AL ->	AX (with sign)
mov	bx, ax
mov	byte ptr ds:4735h, 0
mov	ds:114Eh, si
mov	ds:1150h, si
mov	di, si
call	sub_1503C	; Call Procedure

mov	word ptr ds:9Ah, 0
mov	word ptr ds:98h, 0
call	sub_1425B	; Call Procedure

call	sub_140AE	; Call Procedure

mov	ds:8, dh
mov	ds:9, bh
cmp	dh, 20h	; ' '   ; Compare Two Operands
jb	short loc_14054	; Jump if Below	(CF=1)

or	byte ptr [si+0Ah], 10h ; Logical Inclusive OR


loc_14054:		; Call Procedure
call	sub_12170

; END OF FUNCTION CHUNK	FOR sub_14F0C



sub_14057 proc near
call	sub_140C3	; Call Procedure

mov	ds:4, dx
mov	al, dl
xchg	al, ds:0Bh	; Exchange Register/Memory with	Register
mov	ds:0Dh,	al
mov	ds:6, bx
cmp	byte ptr ds:46EBh, 0 ; Compare Two Operands
js	short locret_14099 ; Jump if Sign (SF=1)

cmp	dx, 3002h	; Compare Two Operands
jnz	short loc_1407B	; Jump if Not Zero (ZF=0)

jmp	loc_116FC	; Jump

; ���������������������������������������������������������������������������

loc_1407B:		; Jump
jmp	loc_12DBF

sub_14057 endp




sub_1407E proc near
mov	dx, ds:4
mov	bx, ds:6
cmp	bl, 80h	; '�'   ; Compare Two Operands
jnz	short loc_14096	; Jump if Not Zero (ZF=0)

mov	si, ds:114Eh
mov	dx, [si+2]
mov	bx, [si+4]
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_14096:		; Exchange Register/Memory with	Register
xchg	ax, bx
cbw			; AL ->	AX (with sign)
xchg	ax, bx		; Exchange Register/Memory with	Register


locret_14099:		; Return Near from Procedure
retn

sub_1407E endp




sub_1409A proc near
mov	si, 0E4h ; '�'


loc_1409D:		; Add
add	si, 1Ch
cmp	word ptr [si], 0FFFFh ;	Compare	Two Operands
jz	short loc_140AB	; Jump if Zero (ZF=1)

cmp	di, [si+6]	; Compare Two Operands
jnz	short loc_1409D	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_140AB:		; Logical Inclusive OR
or	si, si
retn			; Return Near from Procedure

sub_1409A endp




sub_140AE proc near
mov	ax, di
sub	ax, 100h	; Integer Subtraction
mov	bl, 1Ch
div	bl		; Unsigned Divide
mov	bh, al
inc	bh		; Increment by 1
mov	bl, 80h	; '�'
mov	dh, [di+8]
mov	dl, 1
retn			; Return Near from Procedure

sub_140AE endp




sub_140C3 proc near
mov	bp, 40C9h
jmp	loc_136EE	; Jump

sub_140C3 endp

; ���������������������������������������������������������������������������
test	byte ptr [si+0Fh], 40h ; Logical Compare
jz	short locret_140D4 ; Jump if Zero (ZF=1)

mov	[si], dx
mov	[si+2],	bx


locret_140D4:		; Return Near from Procedure
retn




sub_140D5 proc near
mov	byte ptr ds:23h, 7
call	sub_136D3	; Call Procedure

call	sub_14AC4	; Call Procedure

mov	bp, 40E6h
jmp	loc_136EE	; Jump

sub_140D5 endp




sub_140E6 proc near
test	byte ptr [si+0Fh], 40h ; Logical Compare
jz	short locret_140F8 ; Jump if Zero (ZF=1)

test	byte ptr [si+0Fh], 2 ; Logical Compare
jz	short locret_140F8 ; Jump if Zero (ZF=1)

call	sub_19556	; Call Procedure

call	sub_19655	; Call Procedure


locret_140F8:		; Return Near from Procedure
retn

sub_140E6 endp




sub_140F9 proc near
test	byte ptr ds:11C9h, 3 ; Logical Compare
jnz	short loc_14101	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_14101:		; Compare Two Operands
cmp	word ptr ds:10h, 0
jz	short locret_14181 ; Jump if Zero (ZF=1)

call	sub_1407E	; Call Procedure

mov	cx, 9
mov	ax, 9
call	sub_1B56C	; Call Procedure

mov	cx, 51h	; 'Q'


loc_14117:		; Load String
lodsb
test	al, 40h		; Logical Compare
jz	short loc_1417C	; Jump if Zero (ZF=1)

mov	di, [si]
push	cx
push	si
call	sub_1409A	; Call Procedure

jnz	short loc_1417A	; Jump if Not Zero (ZF=0)

test	byte ptr [si+0Ah], 80h ; Logical Compare
jz	short loc_1417A	; Jump if Zero (ZF=1)

mov	al, ds:2Ah
cmp	al, [si+0Bh]	; Compare Two Operands
jb	short loc_1417A	; Jump if Below	(CF=1)

mov	di, si
call	sub_15124	; Call Procedure

jb	short loc_1417A	; Jump if Below	(CF=1)

sub	al, ds:11C7h	; Integer Subtraction
add	al, 60h	; '`'   ; Add
cmp	al, 0C0h ; '�'  ; Compare Two Operands
jnb	short loc_1417A	; Jump if Not Below (CF=0)

xor	ah, ah		; Logical Exclusive OR
mov	cx, 0CEh ; '�'
cmp	al, 60h	; '`'   ; Compare Two Operands
jb	short loc_14152	; Jump if Below	(CF=1)

inc	ah		; Increment by 1
add	cx, 2		; Add


loc_14152:
mov	ds:11F5h, cx
mov	ds:0E1h, ah
call	sub_16231	; Call Procedure

add	ax, 48h	; 'H'   ; Add
mov	ds:11F3h, ax
mov	byte ptr ds:23h, 3
call	sub_1425B	; Call Procedure

call	sub_14944	; Call Procedure

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	sub_12EFB	; Call Procedure

call	sub_12FFB	; Call Procedure

call	sub_1D397	; Call Procedure


loc_1417A:
pop	si
pop	cx


loc_1417C:		; Add
add	si, 2
loop	loc_14117	; Loop while CX	!= 0


locret_14181:		; Return Near from Procedure
retn

sub_140F9 endp




sub_14182 proc near
mov	al, ds:11C9h
and	al, 3		; Logical AND
dec	al		; Decrement by 1
jnz	short locret_14181 ; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:11CBh, 0 ; Compare Two Operands
jnz	short loc_1419B	; Jump if Not Zero (ZF=0)

mov	di, ds:11C5h
call	sub_15D36	; Call Procedure

jb	short loc_141C5	; Jump if Below	(CF=1)


loc_1419B:		; Call Procedure
call	sub_1407E

call	sub_1B532	; Call Procedure

and	al, 30h		; Logical AND
cmp	al, 30h	; '0'   ; Compare Two Operands
jb	short loc_141C5	; Jump if Below	(CF=1)

cmp	byte ptr ds:4726h, 0 ; Compare Two Operands
jnz	short loc_141B3	; Jump if Not Zero (ZF=0)

mov	byte ptr ds:23h, 4


loc_141B3:
mov	al, 40h	; '@'
call	sub_141CC	; Call Procedure

sub	byte ptr ds:4726h, 20h ; ' ' ; Integer Subtraction
jnz	short locret_14181 ; Jump if Not Zero (ZF=0)

mov	byte ptr ds:46D9h, 2
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_141C5:
mov	byte ptr ds:4726h, 0
xor	al, al		; Logical Exclusive OR

sub_14182 endp




sub_141CC proc near
mov	ds:21FDh, al
cmp	word ptr ds:1F12h, 4FFBh ; Compare Two Operands
jnz	short locret_141DA ; Jump if Not Zero (ZF=0)

mov	ds:1F11h, al


locret_141DA:		; Return Near from Procedure
retn

sub_141CC endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_141E1

loc_141DB:		; Decrement by 1
dec	byte ptr ds:196Ch
clc			; Clear	Carry Flag
retn			; Return Near from Procedure

; END OF FUNCTION CHUNK	FOR sub_141E1



sub_141E1 proc near

; FUNCTION CHUNK AT 41DB SIZE 00000006 BYTES

cmp	byte ptr ds:196Ch, 0 ; Compare Two Operands
jnz	short loc_141DB	; Jump if Not Zero (ZF=0)

mov	al, ds:11C7h
add	al, 20h	; ' '   ; Add
test	al, 40h		; Logical Compare
mov	cx, 1
mov	ax, 8
jz	short loc_141F8	; Jump if Zero (ZF=1)

xchg	ax, cx		; Exchange Register/Memory with	Register


loc_141F8:		; Call Procedure
call	sub_1B56C

mov	cx, 8


loc_141FE:		; Load String
lodsb
test	al, 40h		; Logical Compare
jnz	short loc_1420A	; Jump if Not Zero (ZF=0)


loc_14203:		; Add
add	si, 2
loop	loc_141FE	; Loop while CX	!= 0

clc			; Clear	Carry Flag
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1420A:
mov	di, [si]
push	cx
push	si
call	sub_1409A	; Call Procedure

jnz	short loc_14257	; Jump if Not Zero (ZF=0)

test	byte ptr [si+0Ah], 80h ; Logical Compare
jz	short loc_14221	; Jump if Zero (ZF=1)

mov	al, ds:2Ah
cmp	al, [si+0Bh]	; Compare Two Operands
jb	short loc_14257	; Jump if Below	(CF=1)


loc_14221:
mov	di, si
call	sub_15124	; Call Procedure

jb	short loc_14257	; Jump if Below	(CF=1)

sub	al, ds:11C7h	; Integer Subtraction
add	al, 20h	; ' '   ; Add
cmp	al, 40h	; '@'   ; Compare Two Operands
jnb	short loc_14257	; Jump if Not Below (CF=0)

sub	al, 20h	; ' '   ; Integer Subtraction
cbw			; AL ->	AX (with sign)
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
mov	ds:1968h, ax
xor	ax, ax		; Logical Exclusive OR
call	_sub_15E4F_calc_SAL_index ; SAL	index -> ax

mov	bx, 196Dh
xlat			; Table	Lookup Translation
mov	ds:196Ah, ax
pop	si
pop	cx
mov	byte ptr ds:196Ch, 6
stc			; Set Carry Flag
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_14257:
pop	si
pop	cx
jmp	short loc_14203	; Jump

sub_141E1 endp




sub_1425B proc near
test	byte ptr [di+0Ah], 80h ; Logical Compare
jz	short locret_14284 ; Jump if Zero (ZF=1)

and	byte ptr [di+0Ah], 7Fh ; Logical AND
mov	byte ptr [di+0Bh], 0
cmp	byte ptr [di+8], 20h ; ' ' ; Compare Two Operands
jnb	short locret_14284 ; Jump if Not Below (CF=0)

inc	byte ptr ds:27h	; Increment by 1
cmp	word ptr [di], 603h ; Compare Two Operands
jnz	short locret_14284 ; Jump if Not Zero (ZF=0)

call	sub_1E270	; Call Procedure

mov	al, 10h
call	sub_1121F	; Call Procedure

call	sub_1E283	; Call Procedure


locret_14284:		; Return Near from Procedure
retn

sub_1425B endp




sub_14285 proc near
mov	di, 15Fh
cmp	word ptr cs:[di+2], 0 ;	Compare	Two Operands
jnz	short loc_142AA	; Jump if Not Zero (ZF=0)

push	cs
pop	es
assume es:seg000
mov	si, 0BEh ; '�'  ; VER.BIN
call	_sub_1F0B9_open_resource_by_index_si ; reads and decompresses to es:di

mov	si, 15Fh
mov	di, offset unk_29F16
push	ds
pop	es
assume es:nothing
mov	cx, 4
rep movs word ptr es:[di], word	ptr cs:[si] ; Move Byte(s) from	String to String
add	word ptr cs:[si], 167h ; Add


loc_142AA:
mov	ds:word_23D2E, 1
mov	ds:byte_23BEE, 0
mov	ds:byte_20679, 8
mov	si, cs:word_10167
add	si, cs:[si]	; Add
mov	ds:word_29F1E, si
mov	ax, 39h	; '9'
call	_sub_1C13E_open_sprite_sheet ; RES_VER_HSQ

call	ds:_ptr_22D65_gfx_vtable_func_32 ; Indirect Call Far Procedure
retn			; Return Near from Procedure

sub_14285 endp




sub_142D1 proc near
call	sub_198B2	; Call Procedure

call	sub_14285	; Call Procedure

jmp	short loc_14305	; Jump

sub_142D1 endp




sub_142D9 proc near
mov	dx, ds:4
mov	bx, ds:6
mov	dl, 1
call	sub_14057	; Call Procedure

call	loc_1186B	; Call Procedure

sub_142D9 endp

; START	OF FUNCTION CHUNK FOR sub_19215

loc_142E9:		; Call Procedure
call	sub_198B2

call	sub_138E1	; Call Procedure

mov	ax, 24h	; '$'
call	_sub_1C13E_open_sprite_sheet ; RES_ORNYPAN_HSQ

mov	ds:byte_23BEE, 1
mov	ds:byte_20679, 4
mov	ds:word_23D2E, 2


loc_14305:
mov	bp, 212Eh
call	sub_149EA	; Call Procedure


loc_1430B:
mov	bx, 4415h
call	sub_1D323	; Call Procedure

mov	ax, 1AC8h
call	sub_1D95E	; Call Procedure

call	sub_14ACA	; Call Procedure

mov	word ptr ds:46FCh, 0
call	sub_15B5D	; Call Procedure

mov	byte ptr ds:46EBh, 1
mov	si, 1CCAh
call	sub_1D72B	; Call Procedure

mov	si, 149Ch
mov	di, 46E3h
call	sub_1DAAA	; Call Procedure

call	sub_15B99	; Call Procedure

call	sub_1439F	; Call Procedure

mov	ax, 2BCh
call	sub_1AB4F	; Call Procedure

call	sub_14658	; Call Procedure

mov	ds:word_23B9D, 4377h
call	sub_15B93	; Call Procedure

call	_sub_1B6C3_map_func ; Call Procedure

call	_sub_1C137_load_icons_sprites ;	Call Procedure

call	sub_15DCE	; Call Procedure

cmp	byte ptr ds:473Eh, 0 ; Compare Two Operands
jz	short loc_1436E	; Jump if Zero (ZF=1)

mov	ax, 24h	; '$'
call	_sub_1C13E_open_sprite_sheet ; RES_ORNYPAN_HSQ

mov	si, 14C0h
call	sub_1C21B	; Call Procedure

call	sub_1C0F4	; Call Procedure


loc_1436E:		; Call Procedure
call	sub_1C4DD

call	sub_1445D	; Call Procedure

jmp	sub_1D280	; Jump

; END OF FUNCTION CHUNK	FOR sub_19215



sub_14377 proc near
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

call	sub_15B93	; Call Procedure

call	_sub_1B6C3_map_func ; Call Procedure

call	_sub_1C137_load_icons_sprites ;	Call Procedure

call	sub_15DCE	; Call Procedure

cmp	byte ptr ds:473Eh, 0 ; Compare Two Operands
jz	short loc_14399	; Jump if Zero (ZF=1)

mov	ax, 24h	; '$'
call	_sub_1C13E_open_sprite_sheet ; RES_ORNYPAN_HSQ

mov	si, 14C0h
call	sub_1C21B	; Call Procedure


loc_14399:		; Call Procedure
call	sub_1C4ED

jmp	sub_1445D	; Jump

sub_14377 endp




sub_1439F proc near
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

cmp	ds:byte_23BEE, 0 ; Compare Two Operands
jnz	short loc_143CC	; Jump if Not Zero (ZF=0)

mov	ax, 24h	; '$'
call	_sub_1C13E_open_sprite_sheet ; RES_ORNYPAN_HSQ

call	_sub_1C49A_gfx_copy_framebuffer_to_screen ; Call Procedure

call	sub_1C412	; Call Procedure

call	ds:_ptr_22D65_gfx_vtable_func_32 ; Indirect Call Far Procedure
call	sub_15B69	; Call Procedure

mov	si, 14A4h
mov	al, 0F5h ; '�'
mov	es, ds:_word_2D08A_framebuffer_active
call	ds:_ptr_22D65_gfx_vtable_func_10 ; Indirect Call Far Procedure
jmp	sub_1C4DD	; Jump

; ���������������������������������������������������������������������������

loc_143CC:		; Compare Two Operands
cmp	byte ptr ds:2Bh, 0
jnz	short loc_143D6	; Jump if Not Zero (ZF=0)

call	sub_138B4	; Call Procedure


loc_143D6:
mov	ax, 24h	; '$'
call	_sub_1C13E_open_sprite_sheet ; RES_ORNYPAN_HSQ

mov	si, 14B4h
call	sub_1C21B	; Call Procedure

retn			; Return Near from Procedure

sub_1439F endp




sub_143E3 proc near
cmp	byte ptr ds:473Eh, 0 ; Compare Two Operands
jnz	short loc_143FC	; Jump if Not Zero (ZF=0)

cmp	word ptr ds:0DBEAh, 0 ;	Compare	Two Operands
jnz	short loc_1440F	; Jump if Not Zero (ZF=0)

mov	si, 14ACh
push	si
call	sub_1C446	; Call Procedure

pop	si
jmp	_sub_1C4F0_rect_at_si_to_regs ;	Jump

; ���������������������������������������������������������������������������

loc_143FC:		; Compare Two Operands
cmp	byte ptr ds:6, 80h ; '�'


loc_14401:		; Jump if Not Zero (ZF=0)
jnz	short loc_1440F

call	sub_1388D	; Call Procedure

call	sub_1C43E	; Call Procedure

call	sub_1C4DD	; Call Procedure

jmp	sub_1C0F4	; Jump

; ���������������������������������������������������������������������������

loc_1440F:		; Call Procedure
call	sub_14ABE

jmp	sub_1C0F4	; Jump

sub_143E3 endp




sub_14415 proc near
xor	al, al		; Logical Exclusive OR
xchg	al, ds:46EBh	; Exchange Register/Memory with	Register
or	al, al		; Logical Inclusive OR
jnz	short loc_14420	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_14420:
mov	word ptr ds:0A5C0h, 0
call	sub_1DAA3	; Call Procedure

mov	si, 44ABh
call	sub_1DA5F	; Call Procedure

call	sub_1469B	; Call Procedure

call	sub_15BA0	; Call Procedure

call	sub_143E3	; Call Procedure

call	sub_1C0F4	; Call Procedure

cmp	word ptr ds:11C5h, 0 ; Compare Two Operands
jnz	short loc_14447	; Jump if Not Zero (ZF=0)

mov	byte ptr ds:11C9h, 0


loc_14447:		; Call Procedure
call	sub_1D95B

call	sub_1D717	; Call Procedure

call	sub_12FFB	; Call Procedure

cmp	byte ptr ds:4728h, 0 ; Compare Two Operands
jle	short loc_1445A	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

call	sub_149D4	; Call Procedure


loc_1445A:		; Jump
jmp	sub_14AC4

sub_14415 endp




sub_1445D proc near
mov	si, 44ABh
call	sub_1DA5F	; Call Procedure

call	sub_1407E	; Call Procedure

call	sub_162D6	; Call Procedure

jnb	short loc_14472	; Jump if Not Below (CF=0)

mov	word ptr ds:4749h, 0
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_14472:		; Call Procedure
call	_sub_1C137_load_icons_sprites

mov	ax, 4Ch	; 'L'
call	sub_1C1F4	; Call Procedure

lods	word ptr es:[si] ; Load	String
and	ah, 0Fh		; Logical AND
mov	bp, ax
lods	word ptr es:[si] ; Load	String
xor	ah, ah		; Logical Exclusive OR
sub	bx, ax		; Integer Subtraction
sub	dx, 0Dh		; Integer Subtraction
add	bp, dx		; Add
add	ax, bx		; Add
mov	di, 4749h
mov	[di], dx
mov	[di+2],	bx
mov	[di+4],	bp
mov	[di+6],	ax
mov	si, 44ABh
mov	bp, 12Ch
call	sub_1DA25	; Call Procedure

mov	byte ptr ds:4751h, 0
inc	byte ptr ds:4751h ; Increment by 1
push	ds:_word_2D08A_framebuffer_active
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

call	sub_15B93	; Call Procedure

call	_sub_1C137_load_icons_sprites ;	Call Procedure

mov	si, 4749h
call	sub_1DB74	; Call Procedure

mov	dx, [si]
mov	bx, [si+2]
mov	bp, [si+4]
mov	ax, [si+6]
mov	si, 0D834h
cmp	bp, [si+4]	; Compare Two Operands
jb	short loc_144D8	; Jump if Below	(CF=1)

mov	bp, [si+4]


loc_144D8:		; Compare Two Operands
cmp	ax, [si+6]
jb	short loc_144E0	; Jump if Below	(CF=1)

mov	ax, [si+6]


loc_144E0:		; Compare Two Operands
cmp	dx, [si]
jnb	short loc_144E6	; Jump if Not Below (CF=0)

mov	dx, [si]


loc_144E6:		; Compare Two Operands
cmp	bx, [si+2]
jnb	short loc_144EE	; Jump if Not Below (CF=0)

mov	bx, [si+2]


loc_144EE:		; Call Procedure
call	sub_1C4FB

mov	bl, ds:4751h
shr	bl, 1		; Shift	Logical	Right
jnb	short loc_14507	; Jump if Not Below (CF=0)

mov	ax, 4Ch	; 'L'
mov	dx, ds:4749h
mov	bx, ds:474Bh
call	sub_1C30D	; Call Procedure


loc_14507:
pop	ds:_word_2D08A_framebuffer_active
jmp	sub_1DB67	; Jump

sub_1445D endp




sub_1450E proc near

; FUNCTION CHUNK AT 4703 SIZE 00000092 BYTES

test	byte ptr ds:11C9h, 0Fh ; Logical Compare
jz	short locret_14533 ; Jump if Zero (ZF=1)

push	bx
push	dx
call	sub_14586	; Call Procedure

pop	dx
pop	bx
mov	di, ds:46FCh
or	di, di		; Logical Inclusive OR
jz	short locret_14533 ; Jump if Zero (ZF=1)

js	short loc_14534	; Jump if Sign (SF=1)

test	byte ptr ds:11C9h, 3 ; Logical Compare
jnz	short loc_14534	; Jump if Not Zero (ZF=0)

cmp	di, ds:114Eh	; Compare Two Operands
jnz	short loc_14534	; Jump if Not Zero (ZF=0)


locret_14533:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_14534:
push	bx
push	dx
push	di
call	sub_1456C	; Call Procedure

call	sub_1AB45	; Call Procedure

pop	di
mov	cx, 9


loc_14541:
push	cx
push	di
mov	ax, 14h
call	sub_1E3A0	; Call Procedure

push	di
xor	di, di		; Logical Exclusive OR
call	sub_145DE	; Call Procedure

pop	di
mov	ax, 0Ah
call	sub_1E3A0	; Call Procedure

call	sub_145DE	; Call Procedure

pop	di
pop	cx
loop	loc_14541	; Loop while CX	!= 0

push	di
call	sub_1ABA9	; Call Procedure

pop	di
pop	dx
pop	bx
mov	byte ptr ds:4732h, 80h ; '�'
jmp	loc_14703	; Jump

sub_1450E endp




sub_1456C proc near
mov	ax, di
cmp	ah, 0FFh	; Compare Two Operands
jz	short loc_14582	; Jump if Zero (ZF=1)

mov	ax, [di]
dec	ax		; Decrement by 1
shl	al, 1		; Shift	Logical	Left
shl	al, 1		; Shift	Logical	Left
shl	al, 1		; Shift	Logical	Left
shl	al, 1		; Shift	Logical	Left
or	al, ah		; Logical Inclusive OR
xor	ah, ah		; Logical Exclusive OR


loc_14582:		; Add
add	ax, 2BCh
retn			; Return Near from Procedure

sub_1456C endp




sub_14586 proc near
call	sub_15D1D	; Call Procedure

mov	di, 0
jnb	short loc_145D3	; Jump if Not Below (CF=0)

mov	al, 0FFh
call	sub_15E6D	; Call Procedure

cmp	ax, 9		; Compare Two Operands
jb	short loc_145D3	; Jump if Below	(CF=1)

mov	di, 0FFFFh
mov	dx, ds:4749h
or	dx, dx		; Logical Inclusive OR
jz	short loc_145D3	; Jump if Zero (ZF=1)

add	dx, 0Bh		; Add
sub	dx, ds:0DC36h	; Integer Subtraction
neg	dx		; Two's Complement Negation
mov	bx, ds:0DC38h
sub	bx, ds:474Fh	; Integer Subtraction
call	loc_1514E	; Call Procedure

add	al, 3		; Add
mov	ah, al
and	ah, 1Fh		; Logical AND
cmp	ah, 6		; Compare Two Operands
mov	di, 0FFFFh
jnb	short loc_145D3	; Jump if Not Below (CF=0)

rol	al, 1		; Rotate Left
rol	al, 1		; Rotate Left
rol	al, 1		; Rotate Left
and	al, 7		; Logical AND
or	ax, 0FFF0h	; Logical Inclusive OR
mov	di, ax


loc_145D3:
mov	ax, di
xchg	ax, ds:46FCh	; Exchange Register/Memory with	Register
cmp	ax, di		; Compare Two Operands
jnz	short sub_145DE	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

sub_14586 endp




sub_145DE proc near
push	ds:_word_2D08A_framebuffer_active
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	sub_1D075	; Call Procedure

mov	dx, 55h	; 'U'
mov	bx, 22h	; '"'
mov	cx, 0F5FEh
cmp	ds:byte_23BEE, 0 ; Compare Two Operands
jz	short loc_14600	; Jump if Zero (ZF=1)

add	bx, 4		; Add
mov	ch, 20h	; ' '


loc_14600:		; Logical Inclusive OR
or	di, di
jz	short loc_1462A	; Jump if Zero (ZF=1)

call	sub_1469B	; Call Procedure


loc_14607:		; Compare Two Operands
cmp	di, 0FFF0h
jb	short loc_14636	; Jump if Below	(CF=1)

mov	ax, 0A4h ; '�'
call	sub_1D194	; Call Procedure

sub	di, 0FFF0h	; Integer Subtraction
cmp	di, 8		; Compare Two Operands
jnb	short loc_14641	; Jump if Not Below (CF=0)

mov	al, 20h	; ' '
call	ds:off_219C8	; Indirect Call	Near Procedure

mov	ax, di
add	ax, 0DAh ; '�'  ; Add
call	sub_1D19B	; Call Procedure

jmp	short loc_14641	; Jump

; ���������������������������������������������������������������������������

loc_1462A:		; Call Procedure
call	sub_14658

mov	ds:word_2D094, cx
call	sub_1D04E	; Call Procedure

jmp	short loc_14641	; Jump

; ���������������������������������������������������������������������������

loc_14636:
push	cx
call	sub_1629D	; Call Procedure

call	sub_1D05F	; Call Procedure

pop	cx
call	sub_162A6	; Call Procedure


loc_14641:		; Compare Two Operands
cmp	ds:word_2CCDC, 0EDh ; '�'
ja	short loc_14651	; Jump if Above	(CF=0 &	ZF=0)

mov	al, 20h	; ' '
call	ds:off_219C8	; Indirect Call	Near Procedure

jmp	short loc_14641	; Jump

; ���������������������������������������������������������������������������

loc_14651:
pop	ds:_word_2D08A_framebuffer_active
jmp	_sub_1DBEC_draw_mouse ;	Jump

sub_145DE endp




sub_14658 proc near
cmp	word ptr ds:473Fh, 0 ; Compare Two Operands
jnz	short locret_1469A ; Jump if Not Zero (ZF=0)

call	sub_1E270	; Call Procedure

mov	si, 57h	; 'W'
call	sub_1CF70	; Call Procedure

mov	ds:word_23BF1, es
mov	ds:word_23BEF, si
mov	ds:word_23BF3, 55h ; 'U'
mov	cx, 0F561h
mov	ax, 22h	; '"'
cmp	ds:byte_23BEE, 0 ; Compare Two Operands
jz	short loc_14687	; Jump if Zero (ZF=1)

add	al, 4		; Add
mov	ch, 20h	; ' '


loc_14687:
mov	ds:word_23BF5, ax
mov	ds:word_23BF7, cx
mov	si, offset unk_23B65
mov	bp, 18h
call	sub_1DA25	; Call Procedure

call	sub_1E283	; Call Procedure


locret_1469A:		; Return Near from Procedure
retn

sub_14658 endp




sub_1469B proc near
cmp	word ptr ds:473Fh, 0 ; Compare Two Operands
jz	short locret_146B4 ; Jump if Zero (ZF=1)

mov	word ptr ds:473Fh, 0
call	sub_1E270	; Call Procedure

mov	si, 46B5h
call	sub_1DA5F	; Call Procedure

call	sub_1E283	; Call Procedure


locret_146B4:		; Return Near from Procedure
retn

sub_1469B endp




sub_146B5 proc near
les	si, ds:473Fh	; Load Full Pointer to ES:xx
mov	al, es:[si]
or	al, al		; Logical Inclusive OR
js	short locret_14702 ; Jump if Sign (SF=1)

inc	word ptr ds:473Fh ; Increment by 1
mov	si, 14A4h
call	sub_1DB74	; Call Procedure

push	ds:_word_2D08A_framebuffer_active
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

mov	dx, ds:4743h

loc_146D5:
mov	bx, ds:4745h

loc_146D9:		; Call Procedure
call	sub_1D04E


loc_146DC:
mov	cx, ds:4747h

loc_146E0:
mov	ds:0DBE4h, cx

loc_146E4:		; Call Procedure
call	sub_1D075


loc_146E7:
push	ax

loc_146E8:		; Call Procedure
call	sub_1D12F


loc_146EB:		; Call Procedure
call	sub_1D05F

mov	ds:4743h, dx
mov	ds:4745h, bx
pop	ax
pop	ds:_word_2D08A_framebuffer_active
call	sub_1DB67	; Call Procedure


loc_146FE:		; Compare Two Operands
cmp	al, 20h	; ' '
jz	short sub_146B5	; Jump if Zero (ZF=1)


locret_14702:		; Return Near from Procedure
retn

sub_146B5 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_1450E

loc_14703:		; Call Procedure
call	sub_14944

call	sub_138E1	; Call Procedure

mov	al, ds:11C9h
push	ax
shr	al, 1		; Shift	Logical	Right

loc_1470F:		; Shift	Logical	Right
shr	al, 1
or	ds:11C9h, al	; Logical Inclusive OR
call	sub_1AD5E	; Call Procedure

cmp	byte ptr ds:2Bh, 0 ; Compare Two Operands
jz	short loc_14727	; Jump if Zero (ZF=1)


loc_1471F:
mov	byte ptr ds:2Bh, 0
call	sub_10B21	; Call Procedure


loc_14727:		; Call Procedure
call	sub_1D2EA

call	sub_14D00	; Call Procedure


loc_1472D:
pop	ax

loc_1472E:		; Logical Compare
test	al, 3

loc_14730:		; Jump if Not Zero (ZF=0)
jnz	short loc_1478F


loc_14732:
mov	word ptr ds:472Bh, 0
push	ax
call	loc_141C5	; Call Procedure


loc_1473C:
mov	al, ds:11C9h

loc_1473F:		; Logical AND
and	al, 3

loc_14741:		; Decrement by 1
dec	al

loc_14743:		; Jump if Not Zero (ZF=0)
jnz	short loc_14748


loc_14745:		; Call Procedure
call	sub_1181E


loc_14748:		; Call Procedure
call	sub_1C474

call	sub_140D5	; Call Procedure

pop	ax
mov	bl, ds:11C7h
push	bx
call	sub_14795	; Call Procedure

pop	ax
mov	ds:11C7h, al
mov	byte ptr ds:8, 0FFh
call	sub_14B3B	; Call Procedure

mov	word ptr ds:114Eh, 0

loc_14769:
mov	word ptr ds:4729h, 0

loc_1476F:		; Compare Two Operands
cmp	byte ptr ds:46EBh, 0

loc_14774:		; Jump if Sign (SF=1)
js	short loc_14779


loc_14776:		; Call Procedure
call	loc_12DBF


loc_14779:		; Call Procedure
call	sub_14AB8


loc_1477C:
mov	al, ds:11C9h
and	al, 3		; Logical AND
dec	al		; Decrement by 1
jnz	short loc_1478F	; Jump if Not Zero (ZF=0)

mov	di, ds:1150h
dec	byte ptr [di+15h] ; Decrement by 1
jmp	_sub_1AC14_pcm_stop_voc_q ; Jump

; ���������������������������������������������������������������������������

loc_1478F:		; Call Procedure
call	sub_12EB2

jmp	sub_1C0F4	; Jump

; END OF FUNCTION CHUNK	FOR sub_1450E



sub_14795 proc near
cmp	ds:byte_23B9B, 0 ; Compare Two Operands
js	short locret_147CD ; Jump if Sign (SF=1)

cmp	al, 4		; Compare Two Operands

loc_1479E:		; Jump if Zero (ZF=1)
jz	short loc_147CE


loc_147A0:		; Call Procedure
call	sub_198AF

mov	ds:_byte_2C398_key_hit_qq, 0
mov	al, 50h	; 'P'

loc_147AA:		; Call Procedure
call	sub_1121F


loc_147AD:
mov	ds:byte_1F598, 0

loc_147B2:		; Call Procedure
call	sub_11797

mov	al, 10h
mov	bp, offset sub_14913
call	_sub_1C108_transition ;	Call Procedure

mov	ds:byte_2172D, 1

loc_147C2:		; Call Procedure
call	sub_1491C


loc_147C5:
mov	ds:byte_2172D, 0
jmp	_sub_1AC14_pcm_stop_voc_q ; Jump

; ���������������������������������������������������������������������������

locret_147CD:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_147CE:		; Call Procedure
call	sub_1CE53


loc_147D1:		; Logical Exclusive OR
xor	al, al

loc_147D3:		; Exchange Register/Memory with	Register
xchg	al, ds:byte_23BE2
shl	al, 1		; Shift	Logical	Left
jnb	short locret_147CD ; Jump if Not Below (CF=0)


loc_147DB:		; Call Procedure
call	sub_1181E


loc_147DE:
mov	ds:byte_23BE1, 0FFh
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure


loc_147E6:		; Call Procedure
call	sub_137B2


loc_147E9:		; Call Procedure
call	sub_1C412


loc_147EC:		; Call Procedure
call	sub_15BA0


loc_147EF:
mov	ds:byte_23BE1, 0

loc_147F4:
mov	al, 6

loc_147F6:		; Play SN6.VOC
call	_sub_1AB15_audio_start_voc


loc_147F9:
mov	cl, 1

sub_14795 endp




sub_147FB proc near
mov	bp, 4821h
mov	ax, 14h
call	sub_1E353	; Call Procedure

add	ds:4731h, cl	; Add
mov	al, ds:4731h
cmp	al, 1Ah		; Compare Two Operands
jnz	short loc_14816	; Jump if Not Zero (ZF=0)

or	cl, cl		; Logical Inclusive OR
js	short loc_14816	; Jump if Sign (SF=1)

call	_sub_1AC30_call_pcm_audio_vtable_func_5	; Call Procedure


loc_14816:		; Call Procedure
call	sub_1AE04

cmp	byte ptr ds:4731h, 21h ; '!' ; Compare Two Operands
jb	short sub_147FB	; Jump if Below	(CF=1)

retn			; Return Near from Procedure

sub_147FB endp




sub_14821 proc near
push	cx
call	sub_1C43E	; Call Procedure

mov	ax, 2Ah	; '*'
call	_sub_1C13E_open_sprite_sheet ; RES_ORNYTK_HSQ

call	sub_1C0F4	; Call Procedure

call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

call	sub_13A95	; Call Procedure

mov	al, ds:4731h
cmp	al, 0Dh		; Compare Two Operands
jnz	short loc_14840	; Jump if Not Zero (ZF=0)

push	ax
call	_sub_1AC30_call_pcm_audio_vtable_func_5	; Call Procedure

pop	ax


loc_14840:		; Integer Subtraction
sub	al, 0Eh
jbe	short loc_1485D	; Jump if Below	or Equal (CF=1 | ZF=1)

pop	cx
push	cx
or	cl, cl		; Logical Inclusive OR
mov	cx, 5
jns	short loc_1484F	; Jump if Not Sign (SF=0)

neg	cx		; Two's Complement Negation


loc_1484F:
mov	ah, al


loc_14851:		; Integer Subtraction
sub	dx, cx

loc_14853:		; Decrement by 1
dec	ah
jnz	short loc_14851	; Jump if Not Zero (ZF=0)

mul	al		; Unsigned Multiplication of AL	or AX
sar	ax, 1		; Shift	Arithmetic Right
sub	bx, ax		; Integer Subtraction


loc_1485D:		; Call Procedure
call	sub_13AA9

call	sub_13A95	; Call Procedure

mov	cl, ds:byte_23BAF
xor	ch, ch		; Logical Exclusive OR

loc_14869:		; Jump if CX is	0
jcxz	short loc_1487B

mov	al, ds:byte_23BE1

loc_1486E:
push	ax

loc_1486F:
mov	byte ptr ds:4731h, 0

loc_14874:		; Call Procedure
call	sub_13A73

pop	ax

loc_14878:
mov	ds:4731h, al


loc_1487B:		; Call Procedure
call	sub_1C4DD


loc_1487E:		; Compare Two Operands
cmp	byte ptr ds:46D7h, 0
jz	short loc_14888	; Jump if Zero (ZF=1)

call	sub_13916	; Call Procedure


loc_14888:
pop	cx
retn			; Return Near from Procedure

sub_14821 endp




sub_1488A proc near
mov	ax, 6
mov	si, ds:114Eh
call	_sub_15E4F_calc_SAL_index ; SAL	index -> ax

cmp	al, 8		; Compare Two Operands
jnb	short loc_148E5	; Jump if Not Below (CF=0)

mov	bx, ax
call	_sub_1DBB2_call_restore_cursor ; Call Procedure

mov	byte ptr ds:4728h, 80h ; '�'


loc_148A2:
push	bx
call	_sub_1CA60_hnm_do_frame	; Call Procedure

xor	ax, ax		; Logical Exclusive OR
call	sub_14EC6	; Call Procedure

pop	bx
cmp	word ptr ds:0DC00h, 2 ;	Compare	Two Operands
jnz	short loc_148A2	; Jump if Not Zero (ZF=0)

mov	ax, 3Ch	; '<'
cmp	bx, 6		; Compare Two Operands
jz	short loc_148C0	; Jump if Zero (ZF=1)

mov	ax, 16h


loc_148C0:		; Compare Two Operands
cmp	ax, ds:0DBEAh
jnz	short loc_148A2	; Jump if Not Zero (ZF=0)

call	sub_1CE4B	; Call Procedure


loc_148C9:		; Call Procedure
call	_sub_1CA60_hnm_do_frame

call	_sub_1CC85_check_if_hnm_complete ; Call	Procedure

jz	short loc_148C9	; Jump if Zero (ZF=1)


loc_148D1:		; Decrement by 1
dec	byte ptr ds:46E0h


loc_148D5:
mov	byte ptr ds:4732h, 0
jmp	_sub_12D74_open_SAL_resource ; -> es:di

; ���������������������������������������������������������������������������

loc_148DD:
mov	bp, 0C4CDh
call	sub_1C8FB	; Call Procedure

jmp	short loc_148D1	; Jump

; ���������������������������������������������������������������������������

loc_148E5:		; Compare Two Operands
cmp	al, 9
jz	short loc_148DD	; Jump if Zero (ZF=1)

mov	byte ptr ds:4731h, 0FFh
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

call	sub_15BA0	; Call Procedure

call	sub_137B2	; Call Procedure

call	sub_1C0F4	; Call Procedure

call	sub_1C412	; Call Procedure

mov	byte ptr ds:4731h, 1Fh
mov	al, 7
call	_sub_1AB15_audio_start_voc ; Play SN7.VOC

mov	cl, 0FFh
call	sub_147FB	; Call Procedure

mov	byte ptr ds:4731h, 0
jmp	short loc_148D5	; Jump

sub_1488A endp




sub_14913 proc near
mov	ax, 14
call	_sub_1CA1B_hnm_load ; VER.HNM

jmp	sub_1388D	; Jump

sub_14913 endp




sub_1491C proc near
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

call	sub_1C0F4	; Call Procedure

mov	al, 8
call	_sub_1AB15_audio_start_voc ; Play SN8.VOC

call	sub_1AE04	; Call Procedure


loc_1492A:		; Call Procedure
call	_sub_1C9E8_hnm_do_frame_skippable

jz	short loc_14934	; Jump if Zero (ZF=1)

call	sub_14937	; Call Procedure

jz	short loc_1492A	; Jump if Zero (ZF=1)


loc_14934:		; Jump
jmp	_sub_1C07C_set_frontbuffer_as_active_framebuffer

sub_1491C endp




sub_14937 proc near
mov	ax, ds:0DBE8h
cmp	al, 0Bh		; Compare Two Operands
jnz	short loc_14941	; Jump if Not Zero (ZF=0)

call	_sub_1AC30_call_pcm_audio_vtable_func_5	; Call Procedure


loc_14941:		; Jump
jmp	_sub_1CC85_check_if_hnm_complete

sub_14937 endp




sub_14944 proc near
call	sub_150BE	; Call Procedure

cmp	di, 0FFF0h	; Compare Two Operands

loc_1494A:		; Jump if Below	(CF=1)
jb	short loc_14965


loc_1494C:		; Decrement by 1
dec	byte ptr ds:11CBh
call	sub_1B5F9	; Call Procedure

mov	cx, bx
mov	di, dx
call	sub_1407E	; Call Procedure

call	sub_15133	; Call Procedure

mov	di, ds:1150h
mov	cl, 1
jmp	short loc_1496A	; Jump

; ���������������������������������������������������������������������������

loc_14965:		; Call Procedure
call	sub_15124

xor	cx, cx		; Logical Exclusive OR


loc_1496A:
mov	ds:11C5h, di
mov	ds:11C8h, cl
mov	byte ptr ds:11C7h, 0
jmp	sub_15119	; Jump

sub_14944 endp




sub_1497A proc near
call	sub_198E6	; Call Procedure

mov	bp, 212Eh
mov	byte ptr ds:4728h, 1
jmp	loc_1430B	; Jump

sub_1497A endp




sub_14988 proc near
mov	word ptr ds:46FCh, 0
call	sub_15B5D	; Call Procedure

mov	si, 148Ah
mov	di, 46E3h
call	sub_15B99	; Call Procedure

mov	word ptr ds:46EDh, 49A0h

sub_14988 endp




sub_149A0 proc near
call	_sub_1C085_set_backbuffer_as_frame_buffer ; Call Procedure

call	sub_15B93	; Call Procedure

mov	byte ptr ds:46EBh, 1
call	_sub_1B6C3_map_func ; Call Procedure

call	sub_15B69	; Call Procedure

call	_sub_1C137_load_icons_sprites ;	Call Procedure

call	sub_15DCE	; Call Procedure

mov	si, ds:11C5h
or	si, si		; Logical Inclusive OR
jz	short loc_149CC	; Jump if Zero (ZF=1)

call	sub_162C9	; Call Procedure

jb	short loc_149CC	; Jump if Below	(CF=1)

dec	bx		; Decrement by 1
dec	dx		; Decrement by 1
mov	ax, 2Eh	; '.'
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9


loc_149CC:
mov	byte ptr ds:46EBh, 0
jmp	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Jump

sub_149A0 endp




sub_149D4 proc near
call	sub_14988	; Call Procedure

jmp	short loc_149E3	; Jump

sub_149D4 endp




sub_149D9 proc near
cmp	byte ptr ds:46EBh, 0 ; Compare Two Operands
js	short loc_149E6	; Jump if Sign (SF=1)

call	sub_149A0	; Call Procedure


loc_149E3:		; Jump
jmp	short sub_14A5A

; ���������������������������������������������������������������������������
align 2

loc_149E6:		; Indirect Near	Jump
jmp	word ptr ds:46EDh

sub_149D9 endp




sub_149EA proc near
mov	byte ptr ds:4728h, 0
push	cs
pop	es
assume es:seg000
mov	di, offset _stru_1E40C_cmd_arg_list
mov	ax, 800h


loc_149F7:		; Store	String
stosw
stosw			; Store	String
cmp	di, 0E85Ch	; Compare Two Operands
jb	short loc_149F7	; Jump if Below	(CF=1)

retn			; Return Near from Procedure

sub_149EA endp




sub_14A00 proc near
push	cs
pop	es
mov	di, ds:149Ah
mov	ax, dx
stosw			; Store	String
mov	ax, bx
stosw			; Store	String
cmp	di, 0E85Ch	; Compare Two Operands
jb	short loc_14A15	; Jump if Below	(CF=1)

mov	di, offset _stru_1E40C_cmd_arg_list


loc_14A15:
mov	ds:149Ah, di
retn			; Return Near from Procedure

sub_14A00 endp




sub_14A1A proc near
cmp	byte ptr ds:4728h, 0 ; Compare Two Operands
js	short locret_14A59 ; Jump if Sign (SF=1)

mov	si, 148Ah
call	sub_1DB74	; Call Procedure

mov	si, ds:149Ah
cmp	si, 0E40Ch	; Compare Two Operands
jnz	short loc_14A34	; Jump if Not Zero (ZF=0)

mov	si, 0E85Ch


loc_14A34:		; Integer Subtraction
sub	si, 4
lods	word ptr cs:[si] ; Load	String
mov	dx, ax
lods	word ptr cs:[si] ; Load	String
mov	bx, ax
dec	ah		; Decrement by 1
jns	short locret_14A59 ; Jump if Not Sign (SF=0)

call	sub_162D6	; Call Procedure

jb	short locret_14A59 ; Jump if Below (CF=1)

dec	bx		; Decrement by 1
dec	dx		; Decrement by 1
call	_sub_1C137_load_icons_sprites ;	Call Procedure

mov	ax, 2Fh	; '/'
call	_sub_1C085_set_backbuffer_as_frame_buffer ; Call Procedure

call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure


locret_14A59:		; Return Near from Procedure
retn

sub_14A1A endp




sub_14A5A proc near
call	_sub_1C137_load_icons_sprites ;	Call Procedure

push	ds:_word_2D08A_framebuffer_active
call	_sub_1C085_set_backbuffer_as_frame_buffer ; Call Procedure

mov	si, ds:149Ah


loc_14A68:		; Load String
lods	word ptr cs:[si]
mov	dx, ax
lods	word ptr cs:[si] ; Load	String
mov	bx, ax
dec	ah		; Decrement by 1
jns	short loc_14A99	; Jump if Not Sign (SF=0)

push	si
call	sub_162D6	; Call Procedure

jb	short loc_14A98	; Jump if Below	(CF=1)

dec	bx		; Decrement by 1
dec	dx		; Decrement by 1
cmp	dx, 0CCh ; '�'  ; Compare Two Operands
jl	short loc_14A98	; Jump if Less (SF!=OF)

cmp	bx, 4		; Compare Two Operands
jl	short loc_14A98	; Jump if Less (SF!=OF)

cmp	dx, 13Ah	; Compare Two Operands
jge	short loc_14A98	; Jump if Greater or Equal (SF=OF)

cmp	bx, 3Ah	; ':'   ; Compare Two Operands
jge	short loc_14A98	; Jump if Greater or Equal (SF=OF)

mov	ax, 2Fh	; '/'
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9


loc_14A98:
pop	si


loc_14A99:		; Compare Two Operands
cmp	si, 0E85Ch
jb	short loc_14AA2	; Jump if Below	(CF=1)

mov	si, 0E40Ch


loc_14AA2:		; Compare Two Operands
cmp	si, ds:149Ah
jnz	short loc_14A68	; Jump if Not Zero (ZF=0)

pop	ds:_word_2D08A_framebuffer_active
retn			; Return Near from Procedure

sub_14A5A endp




sub_14AAD proc near
xor	byte ptr ds:4728h, 80h ; Logical Exclusive OR
js	short locret_14AB7 ; Jump if Sign (SF=1)

call	sub_149D4	; Call Procedure


locret_14AB7:		; Return Near from Procedure
retn

sub_14AAD endp




sub_14AB8 proc near
mov	byte ptr ds:4727h, 0FFh
retn			; Return Near from Procedure

sub_14AB8 endp




sub_14ABE proc near
call	sub_137F4	; Call Procedure

call	sub_1C4DD	; Call Procedure

sub_14ABE endp




sub_14AC4 proc near
mov	byte ptr ds:11CAh, 0
retn			; Return Near from Procedure

sub_14AC4 endp




sub_14ACA proc near
mov	byte ptr ds:11CAh, 1
retn			; Return Near from Procedure

sub_14ACA endp

; ���������������������������������������������������������������������������
call	nullsub_14	; Call Procedure

mov	ah, 0FCh ; '�'
jmp	short loc_14ADC	; Jump

; ���������������������������������������������������������������������������
call	nullsub_14	; Call Procedure

mov	ah, 4


loc_14ADC:		; Shift	Logical	Right
shr	al, 1
jnb	short locret_14AEA ; Jump if Not Below (CF=0)

mov	byte ptr ds:11C8h, 1
mov	al, ah
call	sub_15119	; Call Procedure


locret_14AEA:		; Return Near from Procedure
retn




sub_14AEB proc near
mov	ax, 39h	; '9'
call	_sub_1C13E_open_sprite_sheet ; RES_VER_HSQ

call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

call	sub_14D6C	; Call Procedure

call	sub_14B2B	; Call Procedure

jmp	sub_1C4DD	; Jump

sub_14AEB endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR _sub_1CC96_hnm_decode_video_frame

loc_14AFD:		; Compare Two Operands
cmp	ds:byte_2172D, 0
jnz	short sub_14B16	; Jump if Not Zero (ZF=0)

call	sub_14B2B	; Call Procedure

mov	es, ds:_word_2D088_vga_base_a000
assume es:nothing
mov	si, ds:_word_2D086_framebuffer_front
call	ds:_ptr_22D65_gfx_vtable_func_18 ; Indirect Call Far Procedure
jmp	loc_1DBE3	; Jump

; END OF FUNCTION CHUNK	FOR _sub_1CC96_hnm_decode_video_frame



sub_14B16 proc near
mov	ax, ds:0DBD8h
mov	si, ds:0DBD6h
cmp	ax, si		; Compare Two Operands
jz	short locret_14B2A ; Jump if Zero (ZF=1)

add	ax, 1E0h	; Add
mov	es, ax
call	dword ptr ds:38FDh ; Indirect Call Far Procedure


locret_14B2A:		; Return Near from Procedure
retn

sub_14B16 endp




sub_14B2B proc near

; FUNCTION CHUNK AT DBCA SIZE 00000019 BYTES

cmp	byte ptr ds:4728h, 0 ; Compare Two Operands
js	short loc_14B38	; Jump if Sign (SF=1)

mov	si, 1492h
call	sub_1C46F	; Call Procedure


loc_14B38:		; Jump
jmp	loc_1DBCA

sub_14B2B endp




sub_14B3B proc near
inc	word ptr ds:472Bh ; Increment by 1
test	word ptr ds:472Bh, 0Fh ; Logical Compare
jnz	short loc_14B4D	; Jump if Not Zero (ZF=0)

mov	cx, 1
call	sub_10FD9	; Call Procedure


loc_14B4D:		; Call Procedure
call	sub_1407E

call	sub_15206	; Call Procedure

call	sub_140C3	; Call Procedure

mov	ds:4, dx
mov	ds:6, bx
retn			; Return Near from Procedure

sub_14B3B endp




sub_14B5F proc near
mov	si, 1470h
mov	ax, dx
add	ax, ds:487Ah	; Add
cmp	dx, [si]	; Compare Two Operands
jge	short loc_14B6E	; Jump if Greater or Equal (SF=OF)

mov	dx, [si]


loc_14B6E:		; Compare Two Operands
cmp	dx, [si+4]
jle	short loc_14B76	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

mov	dx, [si+4]


loc_14B76:
mov	ds:4860h, dx
cmp	ax, [si]	; Compare Two Operands
jge	short loc_14B80	; Jump if Greater or Equal (SF=OF)

mov	ax, [si]


loc_14B80:		; Compare Two Operands
cmp	ax, [si+4]
jle	short loc_14B88	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

mov	ax, [si+4]


loc_14B88:
mov	ds:4864h, ax
mov	ax, bx
add	ax, ds:487Ch	; Add
cmp	bx, [si+2]	; Compare Two Operands
jge	short loc_14B99	; Jump if Greater or Equal (SF=OF)

mov	bx, [si+2]


loc_14B99:		; Compare Two Operands
cmp	bx, [si+6]
jle	short loc_14BA1	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

mov	bx, [si+6]


loc_14BA1:
mov	ds:4862h, bx
cmp	ax, [si+2]	; Compare Two Operands
jge	short loc_14BAD	; Jump if Greater or Equal (SF=OF)

mov	ax, [si+2]


loc_14BAD:		; Compare Two Operands
cmp	ax, [si+6]
jle	short loc_14BB5	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

mov	ax, [si+6]


loc_14BB5:
mov	ds:4866h, ax
retn			; Return Near from Procedure

sub_14B5F endp




sub_14BB9 proc near
call	sub_1D41B	; Call Procedure

cmp	word ptr ds:47C6h, 0 ; Compare Two Operands
jnz	short locret_14BDE ; Jump if Not Zero (ZF=0)

cmp	bp, 1F0Eh	; Compare Two Operands
jnz	short locret_14BDE ; Jump if Not Zero (ZF=0)

mov	si, 4860h
call	sub_1C446	; Call Procedure

call	sub_14BDF	; Call Procedure

mov	si, 4860h
call	sub_1DB74	; Call Procedure

call	_sub_1C4F0_rect_at_si_to_regs ;	Call Procedure

call	sub_1DB67	; Call Procedure


locret_14BDE:		; Return Near from Procedure
retn

sub_14BB9 endp




sub_14BDF proc near
mov	ax, ds:word_23D0E
call	_sub_1C13E_open_sprite_sheet ; Call Procedure

mov	ax, ds:word_23D28
xor	ah, ah		; Logical Exclusive OR
add	ax, ds:word_23D24 ; Add
mov	ds:word_23D28, ax
mov	al, ah
cbw			; AL ->	AX (with sign)
add	ds:word_23D20, ax ; Add
mov	ax, ds:word_23D26
xor	ah, ah		; Logical Exclusive OR
add	ax, ds:word_23D22 ; Add
mov	ds:word_23D26, ax
mov	al, ah
cbw			; AL ->	AX (with sign)
add	ds:word_23D1E, ax ; Add
mov	dx, ds:word_23D1E
mov	bx, ds:word_23D20
call	sub_14B5F	; Call Procedure

mov	si, ds:word_23D1A
mov	ds, word ptr ss:_dword_2D060_sprite_sheet_resource_ptr+2
cmp	byte ptr [si], 0FFh ; Compare Two Operands
jnz	short loc_14C29	; Jump if Not Zero (ZF=0)

mov	si, word ptr ss:unk_23D18


loc_14C29:		; Load String
lodsb
xor	ah, ah		; Logical Exclusive OR
or	al, al		; Logical Inclusive OR
jz	short loc_14C3E	; Jump if Zero (ZF=1)

cmp	al, 1		; Compare Two Operands
jnz	short loc_14C37	; Jump if Not Zero (ZF=0)

mov	ah, al
lodsb			; Load String


loc_14C37:
push	si
call	sub_14C45	; Call Procedure

pop	si
jmp	short loc_14C29	; Jump

; ���������������������������������������������������������������������������

loc_14C3E:
push	ss
pop	ds
assume ds:seg001
mov	word_23D1A, si
retn			; Return Near from Procedure

sub_14BDF endp




sub_14C45 proc near
sub	ax, 2		; Integer Subtraction
shl	ax, 1		; Shift	Logical	Left
mov	bp, ax
mov	si, word ptr ss:unk_23D1C
add	si, ds:[bp+si]	; Add


loc_14C54:		; Load String
lodsb
or	al, al		; Logical Inclusive OR
jz	short locret_14C91 ; Jump if Zero (ZF=1)

xor	ah, ah		; Logical Exclusive OR
mov	bp, ax
lodsb			; Load String
mov	dx, ax

loc_14C60:		; Load String
lodsb

loc_14C61:
mov	bx, ax
add	dx, ss:word_23D1E ; Add
add	bx, ss:word_23D20 ; Add
push	si
dec	bp		; Decrement by 1

loc_14C6F:
mov	es, ss:_word_2D08A_framebuffer_active
mov	si, word ptr ss:_dword_2D060_sprite_sheet_resource_ptr
shl	bp, 1		; Shift	Logical	Left
add	si, ds:[bp+si]	; Add
lodsw			; Load String
mov	di, ax
lodsw			; Load String
xor	ah, ah		; Logical Exclusive OR
mov	cx, ax
mov	bp, 4860h
call	ss:_ptr_22D65_gfx_vtable_func_06 ; Indirect Call Far Procedure
pop	si
jmp	short loc_14C54	; Jump

; ���������������������������������������������������������������������������

locret_14C91:		; Return Near from Procedure
retn

sub_14C45 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_14D57

loc_14C92:
push	ds
push	ax
xor	ah, ah		; Logical Exclusive OR
mov	word_23D0E, ax
mov	word_23D1E, dx
mov	word_23D20, bx
mov	word_23D22, bp
mov	word_23D24, cx
mov	word_23D26, 0
mov	word_23D28, 0
call	_sub_1C13E_open_sprite_sheet ; RES_ICONES_HSQ

push	ds
pop	es
assume es:seg001
lds	si, _dword_2D060_sprite_sheet_resource_ptr ; Load Full Pointer to DS:xx
assume ds:nothing
mov	bx, [si]
add	si, [bx+si-2]	; Add
mov	di, 4860h
add	si, 4		; Add
lodsw			; Load String
mov	dx, ax
lodsw			; Load String
mov	bx, ax
lodsw			; Load String
sub	ax, dx		; Integer Subtraction
mov	word ptr ss:unk_23D2A, ax
lodsw			; Load String
sub	ax, bx		; Integer Subtraction
mov	word ptr ss:unk_23D2C, ax
mov	ax, si
add	ax, 2		; Add
mov	word ptr ss:unk_23D1C, ax
add	si, [si]	; Add
pop	ax
mov	al, ah
xor	ah, ah		; Logical Exclusive OR
shl	ax, 1		; Shift	Logical	Left
mov	bp, ax
add	si, ds:[bp+si]	; Add
mov	word ptr ss:unk_23D18, si
mov	ss:word_23D1A, si
pop	ds
retn			; Return Near from Procedure

; END OF FUNCTION CHUNK	FOR sub_14D57



sub_14D00 proc near
mov	si, offset unk_24069
jmp	sub_1DA5F	; Jump

sub_14D00 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_137EB

loc_14D06:
mov	ds:byte_1F5A6, 0
mov	di, ds:word_20600
mov	dx, [di+2]
cmp	dx, ds:4	; Compare Two Operands
jnz	short locret_14D56 ; Jump if Not Zero (ZF=0)

mov	ax, ds:word_23BE3
or	ah, ah		; Logical Inclusive OR
jz	short locret_14D56 ; Jump if Zero (ZF=1)

mov	bx, ds:6
cmp	bl, [di+4]	; Compare Two Operands
jnz	short locret_14D56 ; Jump if Not Zero (ZF=0)

cmp	bh, ah		; Compare Two Operands
ja	short locret_14D56 ; Jump if Above (CF=0 & ZF=0)

push	ax
push	bx
inc	byte ptr ds:0F6h ; Increment by	1
mov	ah, 1
call	sub_14D57	; Call Procedure

call	sub_14BDF	; Call Procedure

call	sub_1C412	; Call Procedure

pop	bx
pop	ax
cmp	bh, al		; Compare Two Operands
ja	short locret_14D56 ; Jump if Above (CF=0 & ZF=0)

mov	al, 5
call	_sub_1AB15_audio_start_voc ; Play SN5.VOC

xor	ah, ah		; Logical Exclusive OR
call	sub_14D57	; Call Procedure

mov	si, 4BB9h
mov	bp, 10h
call	sub_1DA25	; Call Procedure


locret_14D56:		; Return Near from Procedure
retn

; END OF FUNCTION CHUNK	FOR sub_137EB



sub_14D57 proc near

; FUNCTION CHUNK AT 4C92 SIZE 0000006E BYTES

mov	al, 31h	; '1'
mov	dx, 5
shl	bh, 1		; Shift	Logical	Left
shl	bh, 1		; Shift	Logical	Left
add	dl, bh		; Add
mov	bx, 29h	; ')'
xor	bp, bp		; Logical Exclusive OR
xor	cx, cx		; Logical Exclusive OR
jmp	loc_14C92	; Jump

sub_14D57 endp




sub_14D6C proc near
mov	si, ds:word_29F1E
cmp	byte ptr cs:[si], 0FFh ; Compare Two Operands
jnz	short loc_14D82	; Jump if Not Zero (ZF=0)

mov	si, cs:word_10167
add	si, cs:[si]	; Add
mov	ds:word_29F1E, si


loc_14D82:
push	cs
pop	ds

assume ds:seg000

loc_14D84:		; Load String
lodsb
xor	ah, ah		; Logical Exclusive OR
or	al, al		; Logical Inclusive OR
jz	short loc_14D99	; Jump if Zero (ZF=1)

cmp	al, 1		; Compare Two Operands
jnz	short loc_14D92	; Jump if Not Zero (ZF=0)

mov	ah, al
lodsb			; Load String


loc_14D92:
push	si
call	sub_14DA0	; Call Procedure

pop	si
jmp	short loc_14D84	; Jump

; ���������������������������������������������������������������������������

loc_14D99:
push	ss
pop	ds
assume ds:seg001
mov	word_29F1E, si
retn			; Return Near from Procedure

sub_14D6C endp




sub_14DA0 proc near
sub	ax, 2		; Integer Subtraction
shl	ax, 1		; Shift	Logical	Left
mov	bp, ax
mov	si, 169h
add	si, cs:[bp+si]	; Add


loc_14DAD:		; Load String
lodsb
or	al, al		; Logical Inclusive OR
jz	short locret_14DEC ; Jump if Zero (ZF=1)

xor	ah, ah		; Logical Exclusive OR
mov	bp, ax
lodsb			; Load String
mov	dx, ax
lodsb			; Load String
mov	bx, ax
add	dx, word ptr ss:unk_29F16 ; Add
add	bx, word ptr ss:unk_29F18 ; Add
push	si
push	ds
dec	bp		; Decrement by 1
mov	es, ss:_word_2D08A_framebuffer_active
assume es:nothing
lds	si, ss:_dword_2D060_sprite_sheet_resource_ptr ;	Load Full Pointer to DS:xx
assume ds:nothing
shl	bp, 1		; Shift	Logical	Left
add	si, ds:[bp+si]	; Add
lodsw			; Load String
mov	di, ax
lodsw			; Load String
xor	ah, ah		; Logical Exclusive OR
mov	cx, ax
mov	bp, 0AA66h
call	ss:_ptr_22D65_gfx_vtable_func_06 ; Indirect Call Far Procedure
pop	ds
pop	si
jmp	short loc_14DAD	; Jump

; ���������������������������������������������������������������������������

locret_14DEC:		; Return Near from Procedure
retn

sub_14DA0 endp




sub_14DED proc near
xor	cx, cx		; Logical Exclusive OR
mov	bp, 4E04h
push	si
call	sub_1661D	; Call Procedure

mov	ch, [di+14h]
mov	ds:4733h, cx
push	es
call	sub_17F27	; Call Procedure

pop	es
pop	si
retn			; Return Near from Procedure

sub_14DED endp




sub_14E04 proc near
cmp	byte ptr [si+3], 0 ; Compare Two Operands
jnz	short locret_14E11 ; Jump if Not Zero (ZF=0)

test	byte ptr [si+19h], 80h ; Logical Compare
jz	short locret_14E11 ; Jump if Zero (ZF=1)

inc	cx		; Increment by 1


locret_14E11:		; Return Near from Procedure
retn

sub_14E04 endp




sub_14E12 proc near
mov	word ptr ds:4733h, 0
call	sub_1407E	; Call Procedure

call	sub_1B532	; Call Procedure

push	ax

loc_14E1F:		; Call Procedure
call	sub_14EC6

mov	word ptr ds:196Ah, 0
pop	ax
test	al, 40h		; Logical Compare
jz	short loc_14E78	; Jump if Zero (ZF=1)

call	sub_1409A	; Call Procedure

jnz	short loc_14E78	; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:6, 80h ; '�' ; Compare Two Operands
jz	short loc_14E78	; Jump if Zero (ZF=1)

mov	ax, [si+2]
sub	ax, dx		; Integer Subtraction
add	ax, 4		; Add
cmp	ax, 8		; Compare Two Operands
jnb	short loc_14E78	; Jump if Not Below (CF=0)

mov	ds:1968h, ax
inc	ax		; Increment by 1
mov	ds:1964h, ax
sub	ax, 2		; Integer Subtraction
mov	ds:1960h, ax
xor	ax, ax		; Logical Exclusive OR
call	_sub_15E4F_calc_SAL_index ; SAL	index -> ax

mov	bx, 196Dh
xlat			; Table	Lookup Translation
cmp	al, 13h		; Compare Two Operands
jb	short loc_14E6E	; Jump if Below	(CF=1)

sub	cl, 28h	; '('   ; Integer Subtraction
and	cl, 0FBh	; Logical AND
add	al, cl		; Add
cmp	al, 17h		; Compare Two Operands
jb	short loc_14E6E	; Jump if Below	(CF=1)

mov	al, 17h


loc_14E6E:
mov	ds:196Ah, ax
xchg	si, di		; Exchange Register/Memory with	Register
call	sub_14DED	; Call Procedure

xchg	si, di		; Exchange Register/Memory with	Register


loc_14E78:
mov	ax, ds:196Ah
or	ax, ax		; Logical Inclusive OR
jz	short locret_14E8C ; Jump if Zero (ZF=1)

mov	cx, ds:4733h
mov	cl, ds:46FFh
xor	ch, ch		; Logical Exclusive OR
jcxz	short locret_14E8C ; Jump if CX	is 0

nop			; No Operation


locret_14E8C:		; Return Near from Procedure
retn

sub_14E12 endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_14. PRESS	KEYPAD "+" TO EXPAND]
; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_14F0C

loc_14E8E:
mov	dx, ds:4
mov	bx, ds:6
push	word ptr ds:11CCh
call	sub_15206	; Call Procedure

call	sub_15206	; Call Procedure

call	sub_15206	; Call Procedure

call	sub_15206	; Call Procedure

call	sub_15206	; Call Procedure

call	sub_15206	; Call Procedure

call	sub_1B532	; Call Procedure

push	ax
call	sub_15206	; Call Procedure

pop	ax
pop	word ptr ds:11CCh
push	ax
call	sub_1B532	; Call Procedure

push	ax
call	sub_141E1	; Call Procedure

pop	ax
pop	bx
add	al, bl		; Add
shr	al, 1		; Shift	Logical	Right

; END OF FUNCTION CHUNK	FOR sub_14F0C



sub_14EC6 proc near
push	bx
mov	bx, ds:487Eh
cmp	bx, 2		; Compare Two Operands
jb	short loc_14EED	; Jump if Below	(CF=1)

and	al, 0Fh		; Logical AND
cmp	al, 8		; Compare Two Operands
mov	ax, ds:0DC00h
jnb	short loc_14EF3	; Jump if Not Below (CF=0)

cmp	ax, 2		; Compare Two Operands
jbe	short loc_14EED	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	bx, 5
cmp	ax, 4		; Compare Two Operands
jbe	short loc_14EED	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	bx, 2
mov	ds:487Eh, bx


loc_14EED:
mov	ds:0DC02h, bx
pop	bx
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_14EF3:
mov	bx, 3
cmp	ax, 2		; Compare Two Operands
jbe	short loc_14F03	; Jump if Below	or Equal (CF=1 | ZF=1)

cmp	ax, 5		; Compare Two Operands
jz	short loc_14F03	; Jump if Zero (ZF=1)

mov	bx, 4


loc_14F03:
mov	ds:0DC02h, bx
pop	bx
retn			; Return Near from Procedure

sub_14EC6 endp

; ���������������������������������������������������������������������������
call	sub_14AC4	; Call Procedure




sub_14F0C proc near

; FUNCTION CHUNK AT 16FC SIZE 0000000B BYTES
; FUNCTION CHUNK AT 4002 SIZE 00000055 BYTES
; FUNCTION CHUNK AT 4E8E SIZE 00000038 BYTES

cmp	byte ptr ds:4727h, 0 ; Compare Two Operands
jz	short locret_14F33 ; Jump if Zero (ZF=1)

cmp	byte ptr ds:11CAh, 0 ; Compare Two Operands
jnz	short locret_14F33 ; Jump if Not Zero (ZF=0)

mov	word ptr ds:1C06h, 80h ; '�'
mov	ax, 0DBECh
push	ax
call	_sub_1CA60_hnm_do_frame	; Call Procedure

mov	ax, ds:_word_2C32A_time_passed
sub	ax, ds:word_23BD9 ; Integer Subtraction
cmp	ax, 300h	; Compare Two Operands
jnb	short loc_14F34	; Jump if Not Below (CF=0)


locret_14F33:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_14F34:
mov	ax, ds:_word_2C32A_time_passed
mov	ds:word_23BD9, ax
call	sub_14B3B	; Call Procedure

call	sub_14A1A	; Call Procedure

call	sub_1407E	; Call Procedure

call	sub_14A00	; Call Procedure

call	_sub_1B58B_map_func ; Call Procedure

mov	si, ds:11C5h
cmp	di, [si+6]	; Compare Two Operands
jz	short loc_14FB0	; Jump if Zero (ZF=1)

call	sub_12E52	; Call Procedure

cmp	byte ptr ds:47A7h, 0 ; Compare Two Operands
jnz	short locret_14F33 ; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:4728h, 0 ; Compare Two Operands
js	short loc_14FAD	; Jump if Sign (SF=1)

jz	short loc_14F70	; Jump if Zero (ZF=1)

mov	byte ptr ds:4728h, 0
call	sub_15B5D	; Call Procedure

call	sub_149D9	; Call Procedure


loc_14F70:		; Call Procedure
call	sub_1407E

call	sub_162D6	; Call Procedure

jb	short loc_14FAD	; Jump if Below	(CF=1)

cmp	dx, 0D6h ; '�'  ; Compare Two Operands
jl	short loc_14F8E	; Jump if Less (SF!=OF)

cmp	bx, 0Ah		; Compare Two Operands
jl	short loc_14F8E	; Jump if Less (SF!=OF)

cmp	dx, 132h	; Compare Two Operands
jge	short loc_14F8E	; Jump if Greater or Equal (SF=OF)

cmp	bx, 36h	; '6'   ; Compare Two Operands
jl	short loc_14F95	; Jump if Less (SF!=OF)


loc_14F8E:
mov	byte ptr ds:4728h, 1
jmp	short loc_14FAD	; Jump

; ���������������������������������������������������������������������������

loc_14F95:		; Compare Two Operands
cmp	byte ptr ds:11CAh, 0
jnz	short loc_14FAD	; Jump if Not Zero (ZF=0)

dec	bx		; Decrement by 1
dec	dx		; Decrement by 1
call	_sub_1C137_load_icons_sprites ;	Call Procedure

mov	ax, 30h	; '0'
call	_sub_1C085_set_backbuffer_as_frame_buffer ; Call Procedure

call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure


loc_14FAD:		; Jump
jmp	loc_14E8E

; ���������������������������������������������������������������������������

loc_14FB0:
mov	word ptr ds:1C06h, 0
mov	al, ds:11C9h
and	al, 1		; Logical AND
mov	ds:4732h, al
jnz	short loc_14FC3	; Jump if Not Zero (ZF=0)

call	_sub_1CA01_hnm_close_resource ;	Call Procedure


loc_14FC3:		; Call Procedure
call	sub_1E3CC

mov	ds:0C5h, al
xor	al, al		; Logical Exclusive OR
mov	ds:4727h, al
xchg	al, ds:11C9h	; Exchange Register/Memory with	Register
and	al, 3		; Logical AND
dec	al		; Decrement by 1
jnz	short loc_14FDF	; Jump if Not Zero (ZF=0)

mov	di, ds:11C5h
inc	byte ptr [di+15h] ; Increment by 1


loc_14FDF:		; Call Procedure
call	sub_14AC4

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	sub_1D717	; Call Procedure

mov	di, ds:11C5h
mov	bx, [di+4]
mov	dx, [di+2]
mov	word ptr ds:11C5h, 0
jmp	loc_14002	; Jump

sub_14F0C endp




sub_14FFB proc near
mov	word ptr ds:1C06h, 0
call	_sub_1CA01_hnm_close_resource ;	Call Procedure

mov	byte ptr ds:11C8h, 0
mov	cx, 0C8h ; '�'


loc_1500C:
push	cx
call	sub_14B3B	; Call Procedure

call	sub_1407E	; Call Procedure

call	_sub_1B58B_map_func ; Call Procedure

mov	si, ds:11C5h
cmp	di, [si+6]	; Compare Two Operands
jz	short loc_15039	; Jump if Zero (ZF=1)

mov	byte ptr ds:23h, 0
call	sub_14182	; Call Procedure

cmp	byte ptr ds:23h, 0 ; Compare Two Operands
pop	cx
loope	loc_1500C	; Loop while rCX != 0 and ZF=1

jz	short loc_14FC3	; Jump if Zero (ZF=1)

add	byte ptr ds:4726h, 20h ; ' ' ; Add
jmp	sub_12E52	; Jump

; ���������������������������������������������������������������������������

loc_15039:
pop	cx
jmp	short loc_14FC3	; Jump

sub_14FFB endp




sub_1503C proc near
mov	byte ptr ds:0FDh, 0
mov	byte ptr ds:2Bh, 0
test	byte ptr [di+0Ah], 2 ; Logical Compare
jnz	short loc_15058	; Jump if Not Zero (ZF=0)

call	sub_15D36	; Call Procedure

jb	short locret_15081 ; Jump if Below (CF=1)

call	sub_15098	; Call Procedure

or	dx, dx		; Logical Inclusive OR
jz	short loc_1507A	; Jump if Zero (ZF=1)


loc_15058:		; Increment by 1
inc	byte ptr ds:2Bh
call	sub_16144	; Call Procedure

mov	al, [di+8]
mov	ah, 2Fh	; '/'
cmp	al, 20h	; ' '   ; Compare Two Operands
jb	short loc_15075	; Jump if Below	(CF=1)

inc	ah		; Increment by 1
cmp	al, 30h	; '0'   ; Compare Two Operands
jz	short loc_15075	; Jump if Zero (ZF=1)

sub	al, 28h	; '('   ; Integer Subtraction
jb	short loc_15075	; Jump if Below	(CF=1)

add	ah, 3		; Add


loc_15075:
mov	ds:11DDh, ah
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1507A:		; Jump if CX is	0
jcxz	short locret_15081

mov	byte ptr ds:46D9h, 4


locret_15081:		; Return Near from Procedure
retn

sub_1503C endp




sub_15082 proc near
test	byte ptr [si+3], 20h ; Logical Compare
jnz	short locret_15095 ; Jump if Not Zero (ZF=0)

test	byte ptr [si+10h], 80h ; Logical Compare
jnz	short loc_15096	; Jump if Not Zero (ZF=0)

cmp	byte ptr [si+3], 6 ; Compare Two Operands
jnz	short locret_15095 ; Jump if Not Zero (ZF=0)

inc	dx		; Increment by 1


locret_15095:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_15096:		; Increment by 1
inc	cx
retn			; Return Near from Procedure

sub_15082 endp




sub_15098 proc near
mov	bp, 5082h
xor	cx, cx		; Logical Exclusive OR
xor	dx, dx		; Logical Exclusive OR
jmp	sub_16603	; Jump

sub_15098 endp




sub_150A2 proc near
call	sub_1D2E2	; Call Procedure

mov	ax, ds:_word_2D0B0_hnm_video_id
call	_sub_1CA1B_hnm_load ; Call Procedure

mov	di, ds:1150h
call	sub_1407E	; Call Procedure

call	loc_14965	; Call Procedure

call	sub_14AC4	; Call Procedure

call	sub_150BE	; Call Procedure

jmp	sub_12EB2	; Jump

sub_150A2 endp




sub_150BE proc near
mov	byte ptr ds:11CBh, 0
retn			; Return Near from Procedure

sub_150BE endp




sub_150C4 proc near
call	sub_1407E	; Call Procedure

call	sub_15344	; Call Procedure

call	sub_14944	; Call Procedure

call	sub_14AC4	; Call Procedure

mov	byte ptr ds:11C8h, 0
call	sub_150BE	; Call Procedure

jmp	sub_12EB2	; Jump

sub_150C4 endp




sub_150DB proc near
mov	word ptr ds:487Eh, 2
mov	byte ptr ds:473Eh, 1
mov	al, 4
jmp	short loc_150EF	; Jump

; ���������������������������������������������������������������������������
call	sub_14285	; Call Procedure

mov	al, 8


loc_150EF:
mov	di, ds:46F8h
push	di
push	ax
call	sub_1D2BD	; Call Procedure

call	sub_149EA	; Call Procedure

mov	dx, ds:4
mov	bx, ds:6
pop	ax
push	ax
cmp	al, 4		; Compare Two Operands
jnz	short loc_1510B	; Jump if Not Zero (ZF=0)

mov	dl, 1


loc_1510B:		; Call Procedure
call	sub_14057

call	loc_1186B	; Call Procedure

pop	ax
mov	ds:11C9h, al
pop	di
jmp	loc_14703	; Jump

sub_150DB endp




sub_15119 proc near
add	ds:11C7h, al	; Add
mov	word ptr ds:11CCh, 80h ; '�'
retn			; Return Near from Procedure

sub_15119 endp




sub_15124 proc near
push	di
call	sub_1407E	; Call Procedure

mov	cx, [di+4]
mov	di, [di+2]
call	sub_15133	; Call Procedure

pop	di
retn			; Return Near from Procedure

sub_15124 endp




sub_15133 proc near
sub	bx, cx		; Integer Subtraction
neg	bx		; Two's Complement Negation
sub	dx, di		; Integer Subtraction
neg	dx		; Two's Complement Negation
cmp	bx, 0FF80h	; Compare Two Operands
jl	short loc_15146	; Jump if Less (SF!=OF)

cmp	bx, 80h	; '�'   ; Compare Two Operands
jl	short loc_1514A	; Jump if Less (SF!=OF)


loc_15146:		; Shift	Arithmetic Right
sar	bx, 1
sar	dx, 1		; Shift	Arithmetic Right


loc_1514A:
mov	bh, bl
xor	bl, bl		; Logical Exclusive OR


loc_1514E:		; Logical Inclusive OR
or	bx, bx
mov	ax, bx
jns	short loc_15156	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_15156:		; Logical Inclusive OR
or	dx, dx
mov	di, dx
mov	cx, dx
jns	short loc_15160	; Jump if Not Sign (SF=0)

neg	cx		; Two's Complement Negation


loc_15160:		; Compare Two Operands
cmp	cx, ax
jb	short loc_15180	; Jump if Below	(CF=1)

cmp	cx, 1		; Compare Two Operands
jb	short locret_1517F ; Jump if Below (CF=1)

mov	ax, 20h	; ' '
mov	cx, dx
imul	bx		; Signed Multiply
idiv	cx		; Signed Divide
mov	dx, di
or	cx, cx		; Logical Inclusive OR
js	short loc_1517C	; Jump if Sign (SF=1)

add	al, 40h	; '@'   ; Add
clc			; Clear	Carry Flag
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1517C:		; Add
add	al, 0C0h ; '�'
clc			; Clear	Carry Flag


locret_1517F:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_15180:		; Compare Two Operands
cmp	ax, 1
jb	short locret_1517F ; Jump if Below (CF=1)

mov	ax, 20h	; ' '
imul	dx		; Signed Multiply
idiv	bx		; Signed Divide
mov	dx, di
or	bx, bx		; Logical Inclusive OR
js	short loc_15194	; Jump if Sign (SF=1)

sub	al, 80h	; '�'   ; Integer Subtraction


loc_15194:		; Two's Complement Negation
neg	al
clc			; Clear	Carry Flag
retn			; Return Near from Procedure

sub_15133 endp




sub_15198 proc near
mov	bx, ax
add	bl, 20h	; ' '   ; Add
mov	bh, bl
and	bh, 7Fh		; Logical AND
cmp	bh, 40h	; '@'   ; Compare Two Operands
jb	short loc_151BA	; Jump if Below	(CF=1)

mov	dx, 20h	; ' '
sub	al, 40h	; '@'   ; Integer Subtraction
or	bl, bl		; Logical Inclusive OR
jns	short loc_151B6	; Jump if Not Sign (SF=0)

neg	dx		; Two's Complement Negation
sub	al, 80h	; '�'   ; Integer Subtraction
neg	al		; Two's Complement Negation


loc_151B6:		; AL ->	AX (with sign)
cbw
mov	bx, ax
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_151BA:		; Logical Inclusive OR
or	bl, bl
mov	bx, 0FFE0h
jns	short loc_151C7	; Jump if Not Sign (SF=0)

sub	al, 80h	; '�'   ; Integer Subtraction
neg	al		; Two's Complement Negation
neg	bx		; Two's Complement Negation


loc_151C7:		; AL ->	AX (with sign)
cbw
mov	dx, ax
retn			; Return Near from Procedure

sub_15198 endp




sub_151CB proc near
cmp	byte ptr ds:11CBh, 0 ; Compare Two Operands
jnz	short loc_151D9	; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:11C8h, 0 ; Compare Two Operands
jz	short loc_151F5	; Jump if Zero (ZF=1)


loc_151D9:		; Compare Two Operands
cmp	bx, 0FFB3h
jl	short loc_151E3	; Jump if Less (SF!=OF)

cmp	bx, 4Dh	; 'M'   ; Compare Two Operands
jle	short locret_15205 ; Jump if Less or Equal (ZF=1 | SF!=OF)


loc_151E3:
mov	al, ds:11C7h
mov	ah, al
sub	ah, 40h	; '@'   ; Integer Subtraction
xor	ah, bh		; Logical Exclusive OR
js	short locret_15205 ; Jump if Sign (SF=1)

and	al, 80h		; Logical AND
or	al, 40h		; Logical Inclusive OR
jmp	short loc_15202	; Jump

; ���������������������������������������������������������������������������

loc_151F5:
mov	di, ds:11C5h
push	bx
push	dx
call	sub_15124	; Call Procedure

pop	dx
pop	bx
jb	short locret_15205 ; Jump if Below (CF=1)


loc_15202:
mov	ds:11C7h, al


locret_15205:		; Return Near from Procedure
retn

sub_151CB endp




sub_15206 proc near
call	sub_151CB	; Call Procedure

mov	al, ds:11C7h
push	dx
push	bx
shl	bx, 1		; Shift	Logical	Left
jns	short loc_15214	; Jump if Not Sign (SF=0)

neg	bx		; Two's Complement Negation


loc_15214:
mov	bp, [bx+4880h]
call	sub_15198	; Call Procedure

mov	cx, 20h	; ' '
mov	ax, bp
imul	dx		; Signed Multiply
idiv	cx		; Signed Divide
xchg	ax, bx		; Exchange Register/Memory with	Register
imul	bp		; Signed Multiply
idiv	cx		; Signed Divide
mov	dx, bx
mov	bx, ax
or	ax, ax		; Logical Inclusive OR
jns	short loc_15233	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_15233:		; Add
add	ax, ds:11CCh
cmp	ah, 1		; Compare Two Operands
jbe	short loc_1524E	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	cx, ax
mov	ax, dx
cwd			; AX ->	DX:AX (with sign)
mov	dl, ah
mov	ah, al
xor	al, al		; Logical Exclusive OR
idiv	cx		; Signed Divide
mov	dx, ax
mov	ax, 100h


loc_1524E:
mov	ds:11CCh, al
mov	al, ah
cbw			; AL ->	AX (with sign)
or	bx, bx		; Logical Inclusive OR
jns	short loc_1525A	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_1525A:
pop	bx
add	bx, ax		; Add
pop	ax
add	dx, ax		; Add
mov	ax, bx
add	ax, 60h	; '`'   ; Add
cmp	ax, 0C0h ; '�'  ; Compare Two Operands
jb	short locret_15273 ; Jump if Below (CF=1)

add	byte ptr ds:11C7h, 80h ; '�' ; Add
add	dx, 8000h	; Add


locret_15273:		; Return Near from Procedure
retn

sub_15206 endp




sub_15274 proc near
mov	dx, [di+2]
mov	bx, [di+4]
push	si
mov	ax, 0FFFFh
mov	ds:0CAh, ax
mov	ds:0D0h, ax
mov	ds:0D6h, ax
mov	ds:0DCh, ax
mov	ds:0E2h, ax
mov	si, 100h


loc_15290:		; Compare Two Operands
cmp	word ptr [si], 0FFFFh
jz	short loc_152FB	; Jump if Zero (ZF=1)

cmp	si, di		; Compare Two Operands
jz	short loc_152F6	; Jump if Zero (ZF=1)

mov	cx, [si+2]
sub	cx, dx		; Integer Subtraction
jns	short loc_152A2	; Jump if Not Sign (SF=0)

neg	cx		; Two's Complement Negation


loc_152A2:
mov	ax, [si+4]
sub	ax, bx		; Integer Subtraction
jns	short loc_152AB	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_152AB:
mov	cl, ch
xor	ch, ch		; Logical Exclusive OR
cmp	cl, al		; Compare Two Operands
jnb	short loc_152B5	; Jump if Not Below (CF=0)

mov	cx, ax


loc_152B5:		; Compare Two Operands
cmp	byte ptr [si+8], 28h ; '('
jb	short loc_152C9	; Jump if Below	(CF=1)

mov	bp, 0E2h ; '�'
test	byte ptr [si+0Ah], 80h ; Logical Compare
jnz	short loc_152DD	; Jump if Not Zero (ZF=0)

mov	bp, 0DCh ; '�'
jmp	short loc_152DD	; Jump

; ���������������������������������������������������������������������������

loc_152C9:
mov	bp, 0D0h ; '�'
test	byte ptr [si+0Ah], 80h ; Logical Compare
jz	short loc_152DD	; Jump if Zero (ZF=1)

mov	al, ds:2Ah
cmp	al, [si+0Bh]	; Compare Two Operands
jb	short loc_152F6	; Jump if Below	(CF=1)

mov	bp, 0D6h ; '�'


loc_152DD:		; Compare Two Operands
cmp	cx, [bp+0]
jnb	short loc_152E8	; Jump if Not Below (CF=0)

mov	[bp+0],	cx
mov	[bp+2],	si


loc_152E8:		; Compare Two Operands
cmp	cx, ds:0CAh
jnb	short loc_152F6	; Jump if Not Below (CF=0)

mov	ds:0CAh, cx
mov	ds:0CCh, si


loc_152F6:		; Add
add	si, 1Ch
jmp	short loc_15290	; Jump

; ���������������������������������������������������������������������������

loc_152FB:
push	di
mov	bp, 0DEh ; '�'
call	sub_15323	; Call Procedure

mov	bp, 0E4h ; '�'
call	sub_15323	; Call Procedure

mov	bp, 0D8h ; '�'
call	sub_15323	; Call Procedure

add	ax, 0DAh ; '�'  ; Add
mov	ds:11FDh, ax
mov	bp, 0CCh ; '�'
call	sub_15323	; Call Procedure

mov	bp, 0D2h ; '�'
call	sub_15323	; Call Procedure

pop	di
pop	si
retn			; Return Near from Procedure

sub_15274 endp




sub_15323 proc near
push	bx
push	dx
mov	di, [bp+0]
mov	cx, [di+4]
mov	di, [di+2]
push	bp
call	sub_15133	; Call Procedure

pop	bp
add	al, 10h		; Add
rol	al, 1		; Rotate Left
rol	al, 1		; Rotate Left
rol	al, 1		; Rotate Left
and	ax, 7		; Logical AND
mov	[bp+2],	al
pop	dx
pop	bx
retn			; Return Near from Procedure

sub_15323 endp




sub_15344 proc near
push	si
mov	bp, 0FFFFh
mov	si, 100h


loc_1534B:		; Compare Two Operands
cmp	word ptr [si], 0FFFFh
jz	short loc_1537F	; Jump if Zero (ZF=1)

test	byte ptr [si+0Ah], 80h ; Logical Compare
jnz	short loc_1537A	; Jump if Not Zero (ZF=0)

mov	cx, [si+2]
sub	cx, dx		; Integer Subtraction
jns	short loc_1535F	; Jump if Not Sign (SF=0)

neg	cx		; Two's Complement Negation


loc_1535F:
mov	ax, [si+4]
sub	ax, bx		; Integer Subtraction
jns	short loc_15368	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_15368:
mov	cl, ch
xor	ch, ch		; Logical Exclusive OR
cmp	cl, al		; Compare Two Operands
jnb	short loc_15372	; Jump if Not Below (CF=0)

mov	cx, ax


loc_15372:		; Compare Two Operands
cmp	cx, bp
jnb	short loc_1537A	; Jump if Not Below (CF=0)

mov	bp, cx
mov	di, si


loc_1537A:		; Add
add	si, 1Ch
jmp	short loc_1534B	; Jump

; ���������������������������������������������������������������������������

loc_1537F:
pop	si
retn			; Return Near from Procedure

sub_15344 endp




sub_15381 proc near
push	si
mov	bp, 0FFFFh
mov	si, 100h


loc_15388:		; Compare Two Operands
cmp	word ptr [si], 0FFFFh
jz	short loc_1537F	; Jump if Zero (ZF=1)

mov	cx, [si+2]
sub	cx, dx		; Integer Subtraction
jns	short loc_15396	; Jump if Not Sign (SF=0)

neg	cx		; Two's Complement Negation


loc_15396:
mov	ax, [si+4]
sub	ax, bx		; Integer Subtraction
jns	short loc_1539F	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_1539F:
mov	cl, ch
xor	ch, ch		; Logical Exclusive OR
cmp	cl, al		; Compare Two Operands
jnb	short loc_153A9	; Jump if Not Below (CF=0)

mov	cx, ax


loc_153A9:		; Compare Two Operands
cmp	cx, bp
jnb	short loc_153B1	; Jump if Not Below (CF=0)

mov	bp, cx
mov	di, si


loc_153B1:		; Add
add	si, 1Ch
jmp	short loc_15388	; Jump

sub_15381 endp




sub_153B6 proc near
push	si
mov	bp, 0FFFFh
mov	si, 100h


loc_153BD:		; Compare Two Operands
cmp	word ptr [si], 0FFFFh
jz	short loc_1537F	; Jump if Zero (ZF=1)

cmp	byte ptr [si+8], 28h ; '(' ; Compare Two Operands
jb	short loc_153EC	; Jump if Below	(CF=1)

mov	cx, [si+2]
sub	cx, dx		; Integer Subtraction
jns	short loc_153D1	; Jump if Not Sign (SF=0)

neg	cx		; Two's Complement Negation


loc_153D1:
mov	ax, [si+4]
sub	ax, bx		; Integer Subtraction
jns	short loc_153DA	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_153DA:
mov	cl, ch
xor	ch, ch		; Logical Exclusive OR
cmp	cl, al		; Compare Two Operands
jnb	short loc_153E4	; Jump if Not Below (CF=0)

mov	cx, ax


loc_153E4:		; Compare Two Operands
cmp	cx, bp
jnb	short loc_153EC	; Jump if Not Below (CF=0)

mov	bp, cx
mov	di, si


loc_153EC:		; Add
add	si, 1Ch
jmp	short loc_153BD	; Jump

sub_153B6 endp




sub_153F1 proc near
mov	byte ptr ds:4722h, 0
test	byte ptr ds:46EBh, 40h ; Logical Compare
jz	short loc_15400	; Jump if Zero (ZF=1)

jmp	sub_158FA	; Jump

; ���������������������������������������������������������������������������

loc_15400:
mov	word ptr ds:4720h, 1E6Eh

sub_153F1 endp




sub_15406 proc near
mov	dx, ds:11C1h
mov	bx, ds:11C3h
mov	ds:4710h, dx
mov	ds:4712h, bx
call	sub_15BEB	; Call Procedure

call	sub_15F79	; Call Procedure

call	sub_179DE	; Call Procedure

sub_15406 endp




sub_1541F proc near
push	word ptr ds:197Ch
push	word ptr ds:197Eh
pop	word ptr ds:1982h
pop	word ptr ds:1980h

sub_1541F endp




sub_1542F proc near
mov	word ptr ds:46FCh, 0
mov	word ptr ds:479Eh, 0
call	sub_1557B	; Call Procedure

mov	di, 46E3h
add	dx, 5		; Add
add	bx, 7		; Add
mov	[di], dx
mov	[di+2],	bx
add	dx, 0A0h ; '�'  ; Add
mov	[di+4],	dx
add	bx, 59h	; 'Y'   ; Add
mov	[di+6],	bx
mov	si, 4710h
add	dx, 5		; Add
mov	[si+4],	dx
add	bx, 0Ch		; Add
mov	[si+6],	bx
call	near ptr off_1C13B ; Call Procedure

call	sub_1557B	; Call Procedure

mov	ax, 8Dh	; '�'
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

call	sub_15B8D	; Call Procedure

push	word ptr ds:_unk_2D1AE_res_map+2
mov	ax, 3Ah	; ':'
call	_sub_1C13E_open_sprite_sheet ; RES_MAP2_HSQ

call	sub_15584	; Call Procedure

push	word ptr ds:_dword_2D060_sprite_sheet_resource_ptr+2
pop	word ptr ds:_unk_2D1AE_res_map+2
mov	ds:byte_23B9B, 40h ; '@'
call	sub_1B69A	; Call Procedure

call	_sub_1B6C3_map_func ; Call Procedure

pop	word ptr ds:_unk_2D1AE_res_map+2
call	sub_158E4	; Call Procedure

call	_sub_1C137_load_icons_sprites ;	Call Procedure

call	sub_15DCE	; Call Procedure

call	sub_15605	; Call Procedure

call	sub_1563E	; Call Procedure

mov	ds:word_21C22, 5555h
mov	dx, ds:word_20E30
mov	bx, ds:word_20E32
call	sub_1B647	; Call Procedure

mov	cx, bx
mov	di, dx
sub	bx, 20		; Integer Subtraction
add	cx, 19		; Add
sub	dx, 40		; Integer Subtraction
add	di, 39		; Add
mov	ax, ds:word_23BC0
add	ax, 5		; Add
cmp	dx, ax		; Compare Two Operands
jge	short loc_154DA	; Jump if Greater or Equal (SF=OF)

mov	dx, ax


loc_154DA:		; Compare Two Operands
cmp	di, ax
jge	short loc_154E0	; Jump if Greater or Equal (SF=OF)

mov	di, ax


loc_154E0:		; Add
add	ax, 9Fh	; '�'
cmp	dx, ax		; Compare Two Operands
jbe	short loc_154E9	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	dx, ax


loc_154E9:		; Compare Two Operands
cmp	di, ax
jbe	short loc_154EF	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	di, ax


loc_154EF:
mov	ax, ds:4712h
add	ax, 7		; Add
cmp	bx, ax		; Compare Two Operands
jge	short loc_154FB	; Jump if Greater or Equal (SF=OF)

mov	bx, ax


loc_154FB:		; Compare Two Operands
cmp	cx, ax
jge	short loc_15501	; Jump if Greater or Equal (SF=OF)

mov	cx, ax


loc_15501:		; Add
add	ax, 58h	; 'X'
cmp	bx, ax		; Compare Two Operands
jbe	short loc_1550A	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	bx, ax


loc_1550A:		; Compare Two Operands
cmp	cx, ax
jbe	short loc_15510	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	cx, ax


loc_15510:		; Compare Two Operands
cmp	bx, cx
jz	short loc_1551D	; Jump if Zero (ZF=1)

cmp	dx, di		; Compare Two Operands
jz	short loc_1551D	; Jump if Zero (ZF=1)

mov	al, 0FBh ; '�'
call	sub_1C560	; Call Procedure


loc_1551D:
mov	word ptr ds:2772h, 0FFFFh
mov	si, 4710h
mov	di, 0DBE0h
cmp	word ptr [di], 0 ; Compare Two Operands
jz	short loc_15535	; Jump if Zero (ZF=1)

cmp	[di], si	; Compare Two Operands
jz	short loc_15535	; Jump if Zero (ZF=1)

mov	di, 0DBE2h


loc_15535:
mov	[di], si
cmp	di, 0DBE2h	; Compare Two Operands
pushf			; Push Flags Register onto the Stack
xor	di, di		; Logical Exclusive OR
xchg	di, ds:4720h	; Exchange Register/Memory with	Register
or	di, di		; Logical Inclusive OR
jz	short loc_1554D	; Jump if Zero (ZF=1)

xchg	si, di		; Exchange Register/Memory with	Register
mov	al, 6
call	sub_1C0E8	; Call Procedure


loc_1554D:		; Pop Stack into Flags Register
popf
jnz	short loc_15558	; Jump if Not Zero (ZF=0)

call	sub_162F2	; Call Procedure


loc_15553:		; Call Procedure
call	sub_1813E

jmp	short loc_1555B	; Jump

; ���������������������������������������������������������������������������

loc_15558:		; Call Procedure
call	sub_16314


loc_1555B:
mov	si, 4710h
call	_sub_1C4F0_rect_at_si_to_regs ;	Call Procedure

call	sub_1B69A	; Call Procedure

mov	byte ptr ds:46EBh, 0C0h	; '�'
mov	si, 1482h
mov	di, 46E3h
call	sub_15B99	; Call Procedure

call	sub_15B8D	; Call Procedure


loc_15575:
mov	si, 4710h
jmp	sub_1DAAA	; Jump

sub_1542F endp




sub_1557B proc near
mov	dx, ds:4710h
mov	bx, ds:4712h
retn			; Return Near from Procedure

sub_1557B endp




sub_15584 proc near
xor	ax, ax		; Logical Exclusive OR
xchg	ax, ds:115Ah	; Exchange Register/Memory with	Register
or	ax, ax		; Logical Inclusive OR
jz	short locret_155BF ; Jump if Zero (ZF=1)

call	sub_1E270	; Call Procedure

push	ds
push	es
mov	cl, 0Ch


loc_15595:		; Shift	Logical	Right
shr	ax, 1
jnb	short loc_155B8	; Jump if Not Below (CF=0)

push	ax
push	cx
mov	bl, 0Dh
sub	bl, cl		; Integer Subtraction
mov	di, 100h


loc_155A2:		; Compare Two Operands
cmp	[di], bl
jnz	short loc_155AB	; Jump if Not Zero (ZF=0)

call	sub_15D36	; Call Procedure

jnb	short loc_155B6	; Jump if Not Below (CF=0)


loc_155AB:		; Add
add	di, 1Ch
cmp	byte ptr [di], 0FFh ; Compare Two Operands
jnz	short loc_155A2	; Jump if Not Zero (ZF=0)

call	sub_155C0	; Call Procedure


loc_155B6:
pop	cx
pop	ax


loc_155B8:		; Loop while CX	!= 0
loop	loc_15595

pop	es
pop	ds
call	sub_1E283	; Call Procedure


locret_155BF:		; Return Near from Procedure
retn

sub_15584 endp




sub_155C0 proc near
mov	si, 100h


loc_155C3:		; Compare Two Operands
cmp	[si], bl
jnz	short loc_155CD	; Jump if Not Zero (ZF=0)

mov	al, [si+10h]
call	_sub_155DD_map_func ; Call Procedure


loc_155CD:		; Add
add	si, 1Ch
cmp	byte ptr [si], 0FFh ; Compare Two Operands
jnz	short loc_155C3	; Jump if Not Zero (ZF=0)

mov	al, 42h	; 'B'
cmp	bl, 7		; Compare Two Operands
jz	short _sub_155DD_map_func ; Jump if Zero (ZF=1)

retn			; Return Near from Procedure

sub_155C0 endp




_sub_155DD_map_func proc near
push	ds
or	al, al		; Logical Inclusive OR
jz	short loc_15603	; Jump if Zero (ZF=1)

les	di, ds:0DBB0h	; Load Full Pointer to ES:xx
mov	ds, word ptr ds:0DD00h
mov	cx, RES_MAP_SIZE


loc_155ED:		; Compare String
repne scasb
jnz	short loc_15603	; Jump if Not Zero (ZF=0)

mov	ah, [di-1]
and	ah, 30h		; Logical AND
cmp	ah, 30h	; '0'   ; Compare Two Operands
jnz	short loc_15600	; Jump if Not Zero (ZF=0)

and	byte ptr [di-1], 0EFh ;	Logical	AND


loc_15600:		; Increment by 1
inc	cx
loop	loc_155ED	; Loop while CX	!= 0


loc_15603:
pop	ds
retn			; Return Near from Procedure

_sub_155DD_map_func endp




sub_15605 proc near
sub	sp, 8		; Integer Subtraction
mov	si, 4710h
mov	di, sp
push	ds
pop	es
lodsw			; Load String
add	ax, 6		; Add
stosw			; Store	String
lodsw			; Load String
add	ax, 62h	; 'b'   ; Add
stosw			; Store	String
lodsw			; Load String
sub	ax, 6		; Integer Subtraction
stosw			; Store	String
lodsw			; Load String
sub	ax, 2		; Integer Subtraction
stosw			; Store	String
lea	si, [di-8]	; Load Effective Address
mov	al, 0F5h ; '�'
mov	es, ds:_word_2D08A_framebuffer_active
call	dword ptr ds:38DDh ; Indirect Call Far Procedure
mov	byte ptr ds:4724h, 0FFh
call	sub_1D075	; Call Procedure

add	sp, 8		; Add
jmp	sub_1557B	; Jump

sub_15605 endp




sub_1563E proc near
add	bx, 62h	; 'b'   ; Add
add	dx, 6		; Add
mov	cx, 0F5FEh
mov	ds:4725h, cl
cmp	byte ptr ds:4722h, 0 ; Compare Two Operands
jnz	short loc_1568C	; Jump if Not Zero (ZF=0)

push	dx
mov	ax, 65h	; 'e'
call	sub_1D194	; Call Procedure

pop	ax
add	ax, 53h	; 'S'   ; Add
mov	ds:0D82Ch, ax
mov	al, 2Dh	; '-'
call	word ptr ds:2518h ; Indirect Call Near Procedure
add	word ptr ds:0D82Ch, 41h	; 'A' ; Add
mov	al, 2Bh	; '+'
call	word ptr ds:2518h ; Indirect Call Near Procedure
call	near ptr off_1C13B ; Call Procedure

call	sub_1557B	; Call Procedure

add	dx, 5Fh	; '_'   ; Add
add	bx, 63h	; 'c'   ; Add
mov	ax, 80h	; '�'
call	sub_1C2FD	; Call Procedure

add	dx, 3Ch	; '<'   ; Add
mov	ax, 81h	; '�'
jmp	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

; ���������������������������������������������������������������������������

loc_1568C:
mov	ax, 68h	; 'h'
jmp	sub_1D194	; Jump

sub_1563E endp




sub_15692 proc near

; FUNCTION CHUNK AT 571A SIZE 0000000E BYTES

push	di
call	sub_15605	; Call Procedure

pop	di
or	di, di		; Logical Inclusive OR
jz	short sub_1563E	; Jump if Zero (ZF=1)

add	bx, 62h	; 'b'   ; Add
add	dx, 6		; Add
mov	cx, 0F5FEh
call	sub_1629D	; Call Procedure

call	sub_1D05F	; Call Procedure

mov	cx, 0F5FEh
call	sub_162A6	; Call Procedure

cmp	di, 138h	; Compare Two Operands
jb	short locret_15719 ; Jump if Below (CF=1)

cmp	byte ptr [di+8], 21h ; '!' ; Compare Two Operands
jz	short locret_15719 ; Jump if Zero (ZF=1)

xor	bx, bx		; Logical Exclusive OR
xor	cx, cx		; Logical Exclusive OR
mov	bp, 5728h
call	sub_16639	; Call Procedure

mov	dx, ds:4710h
add	dx, 71h	; 'q'   ; Add
mov	ax, cx
or	ax, bx		; Logical Inclusive OR
jz	short loc_1571A	; Jump if Zero (ZF=1)

call	near ptr off_1C13B ; Call Procedure

sub	byte ptr ds:0DBE4h, 3 ;	Integer	Subtraction
xor	ax, ax		; Logical Exclusive OR
call	sub_156ED	; Call Procedure

mov	bl, ch
mov	ax, 1
call	sub_156ED	; Call Procedure

mov	bl, cl
mov	ax, 2

sub_15692 endp




sub_156ED proc near
or	bl, bl		; Logical Inclusive OR
jz	short locret_15719 ; Jump if Zero (ZF=1)

push	cx
push	dx
push	bx
mov	bx, ds:4712h
add	bx, 62h	; 'b'   ; Add
add	ax, 82h	; '�'   ; Add
call	sub_1C2FD	; Call Procedure

add	dx, 6		; Add
call	sub_1D04E	; Call Procedure

mov	al, 3Ah	; ':'
call	word ptr ds:2518h ; Indirect Call Near Procedure
pop	ax
add	al, 30h	; '0'   ; Add
call	word ptr ds:2518h ; Indirect Call Near Procedure
pop	dx
pop	cx
add	dx, 12h		; Add


locret_15719:		; Return Near from Procedure
retn

sub_156ED endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_15692

loc_1571A:
push	dx
call	sub_1D05F	; Call Procedure

pop	dx
mov	cx, 0F5FBh
mov	ax, 66h	; 'f'
jmp	sub_1D194	; Jump

; END OF FUNCTION CHUNK	FOR sub_15692



sub_15728 proc near
jnb	short locret_15745 ; Jump if Not Below (CF=0)

mov	al, [si+3]
and	al, 0Fh		; Logical AND
cmp	al, 2		; Compare Two Operands
jz	short locret_15745 ; Jump if Zero (ZF=1)

shr	al, 1		; Shift	Logical	Right
shr	al, 1		; Shift	Logical	Right
jnz	short loc_1573C	; Jump if Not Zero (ZF=0)

inc	bl		; Increment by 1
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1573C:		; Compare Two Operands
cmp	al, 1
jnz	short loc_15743	; Jump if Not Zero (ZF=0)

inc	ch		; Increment by 1
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_15743:		; Increment by 1
inc	cl


locret_15745:		; Return Near from Procedure
retn

sub_15728 endp




sub_15746 proc near

; FUNCTION CHUNK AT 57AD SIZE 00000005 BYTES

mov	di, 4710h
call	sub_1D6FE	; Call Procedure

jnb	short sub_157B2	; Jump if Not Below (CF=0)

mov	ax, ds:4716h
sub	ax, 0Ah		; Integer Subtraction
cmp	bx, ax		; Compare Two Operands
jnb	short loc_157AD	; Jump if Not Below (CF=0)

call	sub_157B2	; Call Procedure

cmp	byte ptr ds:4722h, 0 ; Compare Two Operands
jnz	short nullsub_15 ; Jump	if Not Zero (ZF=0)

mov	es, word ptr ds:0DBD8h
call	dword ptr ds:3965h ; Indirect Call Far Procedure
sub	al, 50h	; 'P'   ; Integer Subtraction
cmp	al, 10h		; Compare Two Operands
jb	short loc_15772	; Jump if Below	(CF=1)

mov	al, 0FFh


loc_15772:
mov	ah, al
xchg	al, ds:4724h	; Exchange Register/Memory with	Register

loc_15778:		; Compare Two Operands
cmp	al, ah
jz	short nullsub_15 ; Jump	if Zero	(ZF=1)

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	sub_1578B	; Call Procedure

mov	al, ah
call	sub_1578B	; Call Procedure

call	_sub_1DBEC_draw_mouse ;	Call Procedure

sub_15746 endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_15. PRESS	KEYPAD "+" TO EXPAND]



sub_1578B proc near
or	al, al		; Logical Inclusive OR
js	short nullsub_15 ; Jump	if Sign	(SF=1)

push	ax
call	sub_1557B	; Call Procedure

add	dx, 5Eh	; '^'   ; Add
add	bx, 62h	; 'b'   ; Add
xor	ah, ah		; Logical Exclusive OR
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
add	dx, ax		; Add
mov	si, 5
mov	cx, 7
call	dword ptr ds:3961h ; Indirect Call Far Procedure
pop	ax
retn			; Return Near from Procedure

sub_1578B endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_15746

loc_157AD:
mov	cx, 0FEF5h
jmp	short loc_157B5	; Jump

; END OF FUNCTION CHUNK	FOR sub_15746



sub_157B2 proc near
mov	cx, 0F5FEh


loc_157B5:
mov	al, cl
xchg	al, ds:4725h	; Exchange Register/Memory with	Register
cmp	al, cl		; Compare Two Operands
jz	short nullsub_15 ; Jump	if Zero	(ZF=1)

push	bx
push	dx
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

call	sub_1557B	; Call Procedure

add	bx, 62h	; 'b'   ; Add
add	dx, 6		; Add
mov	ax, 65h	; 'e'
cmp	byte ptr ds:4722h, 0 ; Compare Two Operands
jz	short loc_157DA	; Jump if Zero (ZF=1)

mov	ax, 68h	; 'h'


loc_157DA:		; Call Procedure
call	_sub_1DBB2_call_restore_cursor

call	sub_1D194	; Call Procedure

pop	dx
pop	bx
jmp	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Jump

sub_157B2 endp




sub_157E5 proc near
call	sub_1E270	; Call Procedure

push	es
mov	ax, 3Ah	; ':'
call	_sub_1C13E_open_sprite_sheet ; RES_MAP2_HSQ

push	ds
pop	es
mov	di, bp
mov	al, 70h	; 'p'
mov	cx, 100h
rep stosb		; Store	String
cmp	byte ptr ds:4722h, 0 ; Compare Two Operands
jnz	short loc_1583F	; Jump if Not Zero (ZF=0)

mov	si, 100h
mov	di, bp
xor	bx, bx		; Logical Exclusive OR


loc_15808:
mov	al, [si+0Ah]
test	al, 80h		; Logical Compare
jnz	short loc_15832	; Jump if Not Zero (ZF=0)

mov	bl, [si+10h]
test	al, 40h		; Logical Compare
pushf			; Push Flags Register onto the Stack
mov	al, 75h	; 'u'
test	ds:_byte_21DF2_cmd_args, 2 ; Test cmd arg MON =	Monotone
jz	short loc_15820	; Jump if Zero (ZF=1)

mov	al, 78h	; 'x'


loc_15820:		; Pop Stack into Flags Register
popf
jz	short loc_15830	; Jump if Zero (ZF=1)

mov	al, [si+12h]
shr	al, 1		; Shift	Logical	Right
shr	al, 1		; Shift	Logical	Right
shr	al, 1		; Shift	Logical	Right
shr	al, 1		; Shift	Logical	Right
add	al, 50h	; 'P'   ; Add


loc_15830:
mov	[bx+di], al


loc_15832:		; Add
add	si, 1Ch
cmp	byte ptr [si], 0FFh ; Compare Two Operands
jnz	short loc_15808	; Jump if Not Zero (ZF=0)

pop	es
call	sub_1E283	; Call Procedure

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1583F:
mov	di, 100h


loc_15842:
mov	al, [di+0Ah]
test	al, 80h		; Logical Compare
jnz	short loc_15861	; Jump if Not Zero (ZF=0)

push	bp
xor	bx, bx		; Logical Exclusive OR
xor	cx, cx		; Logical Exclusive OR
mov	bp, 5728h
call	sub_16639	; Call Procedure

pop	bp
call	sub_1586E	; Call Procedure

mov	al, [di+10h]
xor	ah, ah		; Logical Exclusive OR
mov	si, ax
mov	[bp+si], bh


loc_15861:		; Add
add	di, 1Ch
cmp	byte ptr [di], 0FFh ; Compare Two Operands
jnz	short loc_15842	; Jump if Not Zero (ZF=0)

pop	es
call	sub_1E283	; Call Procedure

retn			; Return Near from Procedure

sub_157E5 endp




sub_1586E proc near
xor	ax, ax		; Logical Exclusive OR
or	bl, bl		; Logical Inclusive OR
jz	short loc_15876	; Jump if Zero (ZF=1)

mov	al, 1


loc_15876:		; Logical Inclusive OR
or	ch, ch
jz	short loc_1587C	; Jump if Zero (ZF=1)

add	al, 2		; Add


loc_1587C:		; Logical Inclusive OR
or	cl, cl
jz	short loc_15882	; Jump if Zero (ZF=1)

add	al, 4		; Add


loc_15882:		; Shift	Logical	Left
shl	ax, 1
mov	si, ax
jmp	cs:off_1588B[si] ; Indirect Near Jump

; ���������������������������������������������������������������������������
off_1588B dw offset loc_1589B
dw offset loc_1589E
dw offset loc_158A1
dw offset loc_158A4
dw offset loc_158B1
dw offset loc_158B4
dw offset loc_158C1
dw offset loc_158CE
; ���������������������������������������������������������������������������

loc_1589B:		; Logical Exclusive OR
xor	bh, bh
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1589E:
mov	bh, 55h	; 'U'
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_158A1:
mov	bh, 0AAh ; '�'
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_158A4:
mov	bh, 66h	; 'f'
cmp	bl, ch		; Compare Two Operands
jz	short locret_158B0 ; Jump if Zero (ZF=1)

mov	bh, 9Ah	; '�'
jb	short locret_158B0 ; Jump if Below (CF=1)

not	bh		; One's Complement Negation


locret_158B0:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_158B1:
mov	bh, 0FFh
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_158B4:
mov	bh, 77h	; 'w'
cmp	bl, cl		; Compare Two Operands
jz	short locret_158C0 ; Jump if Zero (ZF=1)

mov	bh, 0DFh ; '�'
jb	short locret_158C0 ; Jump if Below (CF=1)

mov	bh, 75h	; 'u'


locret_158C0:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_158C1:
mov	bh, 0BBh ; '�'
cmp	ch, cl		; Compare Two Operands
jz	short locret_158CD ; Jump if Zero (ZF=1)

mov	bh, 0EFh ; '�'
jb	short locret_158CD ; Jump if Below (CF=1)

mov	bh, 0BAh ; '�'


locret_158CD:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_158CE:		; Compare Two Operands
cmp	bl, ch
jnb	short loc_158DB	; Jump if Not Below (CF=0)

mov	bh, 0DEh ; '�'
cmp	ch, cl		; Compare Two Operands
jb	short locret_158DA ; Jump if Below (CF=1)

mov	bh, 9Bh	; '�'


locret_158DA:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_158DB:
mov	bh, 7Bh	; '{'
cmp	bl, cl		; Compare Two Operands
jb	short locret_158E3 ; Jump if Below (CF=1)

mov	bh, 67h	; 'g'


locret_158E3:		; Return Near from Procedure
retn

sub_1586E endp




sub_158E4 proc near
sub	sp, 100h	; Integer Subtraction
mov	bp, sp
call	sub_157E5	; Call Procedure

mov	bh, ds:4722h
call	dword ptr ds:395Dh ; Indirect Call Far Procedure
add	sp, 100h	; Add
retn			; Return Near from Procedure

sub_158E4 endp




sub_158FA proc near
test	byte ptr ds:46EBh, 40h ; Logical Compare
jz	short locret_15922 ; Jump if Zero (ZF=1)

call	sub_1E270	; Call Procedure

and	byte ptr ds:46EBh, 0BFh	; Logical AND
mov	di, 0DBE0h
cmp	word ptr [di], 4710h ; Compare Two Operands
jz	short loc_15915	; Jump if Zero (ZF=1)

mov	di, 0DBE2h


loc_15915:		; Logical Exclusive OR
xor	si, si
xchg	si, [di]	; Exchange Register/Memory with	Register
call	sub_1C6AD	; Call Procedure

call	sub_15AD9	; Call Procedure

call	sub_1E283	; Call Procedure


locret_15922:		; Return Near from Procedure
retn

sub_158FA endp




sub_15923 proc near
call	sub_15944	; Call Procedure

push	bx
call	sub_15C03	; Call Procedure

pop	bx
mov	di, ds:46FCh
or	di, di		; Logical Inclusive OR
jz	short locret_15922 ; Jump if Zero (ZF=1)

and	byte ptr ds:46EBh, 0BFh	; Logical AND

loc_15938:
mov	word ptr ds:0DBE0h, 0
call	sub_15B55	; Call Procedure

jmp	sub_18850	; Jump

sub_15923 endp




sub_15944 proc near
mov	ax, bx
sub	ax, ds:4712h	; Integer Subtraction
sub	ax, 7		; Integer Subtraction
jb	short loc_15955	; Jump if Below	(CF=1)

sub	ax, 59h	; 'Y'   ; Integer Subtraction
jnb	short loc_1596D	; Jump if Not Below (CF=0)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_15955:		; Add
add	sp, 2
mov	ax, dx
sub	ax, ds:4710h	; Integer Subtraction

loc_1595E:		; Integer Subtraction
sub	ax, 0Ah
jnb	short loc_15978	; Jump if Not Below (CF=0)

call	sub_182A0	; Call Procedure

jz	short loc_1596A	; Jump if Zero (ZF=1)

jmp	short sub_158FA	; Jump

; ���������������������������������������������������������������������������

loc_1596A:		; Jump
jmp	sub_1D2E2

; ���������������������������������������������������������������������������

loc_1596D:		; Add
add	sp, 2
xor	byte ptr ds:4722h, 0FFh	; Logical Exclusive OR
jmp	sub_1542F	; Jump

; ���������������������������������������������������������������������������

loc_15978:		; Call Procedure
call	sub_182A0

jz	short locret_1599E ; Jump if Zero (ZF=1)

mov	byte ptr ds:4723h, 1


loc_15982:		; Call Procedure
call	sub_1E270

mov	dx, ds:11C1h
mov	bx, ds:11C3h
mov	si, 0AAh ; '�'
mov	cx, 6Ch	; 'l'
mov	es, word ptr ds:0DBD8h
call	dword ptr ds:3961h ; Indirect Call Far Procedure
call	sub_1E283	; Call Procedure


locret_1599E:		; Return Near from Procedure
retn

sub_15944 endp ; sp =  2




sub_1599F proc near
xor	al, al		; Logical Exclusive OR
xchg	al, ds:4723h	; Exchange Register/Memory with	Register
or	al, al		; Logical Inclusive OR
jz	short locret_15A02 ; Jump if Zero (ZF=1)

call	sub_1557B	; Call Procedure

cmp	dx, ds:11C1h	; Compare Two Operands
jnz	short loc_159B8	; Jump if Not Zero (ZF=0)

cmp	bx, ds:11C3h	; Compare Two Operands
jz	short loc_15982	; Jump if Zero (ZF=1)


loc_159B8:
mov	word ptr ds:0DBE0h, 0
jmp	sub_15B10	; Jump

; ���������������������������������������������������������������������������
cmp	byte ptr ds:4723h, 0 ; Compare Two Operands
jz	short locret_15A02 ; Jump if Zero (ZF=1)

cmp	bx, 98h	; '�'   ; Compare Two Operands
jnb	short sub_1599F	; Jump if Not Below (CF=0)

call	loc_15982	; Call Procedure

mov	si, 11C1h
mov	ax, [si]
add	ax, di		; Add
sub	ax, 5		; Integer Subtraction
cmp	ax, 8Ch	; '�'   ; Compare Two Operands
jb	short loc_159E7	; Jump if Below	(CF=1)

jl	short loc_159E5	; Jump if Less (SF!=OF)

sub	ax, 8Ch	; '�'   ; Integer Subtraction


loc_159E5:		; Integer Subtraction
sub	di, ax


loc_159E7:		; Add
add	[si], di
mov	ax, [si+2]
add	ax, cx		; Add
sub	ax, 5		; Integer Subtraction
cmp	ax, 18h		; Compare Two Operands
jb	short loc_159FD	; Jump if Below	(CF=1)

jl	short loc_159FB	; Jump if Less (SF!=OF)

sub	ax, 18h		; Integer Subtraction


loc_159FB:		; Integer Subtraction
sub	cx, ax


loc_159FD:		; Add
add	[si+2],	cx
jmp	short loc_15982	; Jump

; ���������������������������������������������������������������������������

locret_15A02:		; Return Near from Procedure
retn

sub_1599F endp




sub_15A03 proc near

; FUNCTION CHUNK AT 8685 SIZE 00000034 BYTES

call	sub_18C8A	; Call Procedure

inc	byte ptr ds:46F3h ; Increment by 1
call	sub_168EB	; Call Procedure

mov	ds:1954h, al
not	byte ptr ds:0FBh ; One's Complement Negation
call	sub_15A1A	; Call Procedure

jmp	loc_18685	; Jump

sub_15A03 endp




sub_15A1A proc near
mov	byte ptr ds:28E7h, 1
call	sub_118BA	; Call Procedure

call	sub_15B5D	; Call Procedure

mov	bp, offset sub_15A56
mov	al, 34h	; '4'
mov	dx, 0FFFFh
call	_sub_1C108_transition ;	Call Procedure

cmp	byte ptr ds:46F3h, 0 ; Compare Two Operands
jnz	short loc_15A3A	; Jump if Not Zero (ZF=0)

call	sub_15BB0	; Call Procedure


loc_15A3A:		; Jump
jmp	sub_117E6

sub_15A1A endp




sub_15A3D proc near
mov	byte ptr ds:0FBh, 0FFh
call	near ptr off_1C13B ; Call Procedure

call	dword ptr ds:3935h ; Indirect Call Far Procedure
mov	bp, offset sub_15A56
mov	al, 2
xor	dx, dx		; Logical Exclusive OR
call	_sub_1C108_transition ;	Call Procedure

jmp	sub_1AE04	; Jump

sub_15A3D endp




sub_15A56 proc near
cmp	byte ptr ds:46EBh, 0 ; Compare Two Operands
js	short loc_15A9A	; Jump if Sign (SF=1)

call	sub_1D2BD	; Call Procedure

call	sub_14ACA	; Call Procedure

call	sub_1B930	; Call Procedure

mov	si, 6B34h
mov	bp, 0Fh
call	sub_1DA25	; Call Procedure

mov	si, 1482h
mov	di, 46E3h
call	sub_15B99	; Call Procedure

call	sub_15B69	; Call Procedure

call	sub_11797	; Call Procedure

mov	byte ptr ds:46EBh, 80h ; '�'
call	sub_1AD5E	; Call Procedure

mov	word ptr ds:2786h, 0C835h
mov	ax, 5A9Ah
mov	ds:46EDh, ax
call	ax		; Indirect Call	Near Procedure
call	sub_1D792	; Call Procedure

jmp	loc_1D712	; Jump

; ���������������������������������������������������������������������������

loc_15A9A:		; Call Procedure
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer

call	sub_15B8D	; Call Procedure

mov	al, 80h	; '�'
xchg	al, ds:46EBh	; Exchange Register/Memory with	Register
push	ax
call	_sub_1B6C3_map_func ; Call Procedure

call	near ptr off_1C13B ; Call Procedure

call	sub_15DCE	; Call Procedure

call	sub_16314	; Call Procedure

call	sub_1C412	; Call Procedure

mov	word ptr ds:3CBEh, 0
call	sub_16715	; Call Procedure

mov	si, 46E3h
call	sub_1C6AD	; Call Procedure

call	sub_1878C	; Call Procedure

pop	ax
mov	ds:46EBh, al
and	al, 40h		; Logical AND
jz	short sub_15AD3	; Jump if Zero (ZF=1)

call	sub_15406	; Call Procedure

sub_15A56 endp




sub_15AD3 proc near
mov	ax, 1A9Eh
call	sub_1D95E	; Call Procedure

sub_15AD3 endp




sub_15AD9 proc near
mov	si, 46E3h
jmp	sub_1DAAA	; Jump

sub_15AD9 endp




sub_15ADF proc near
call	sub_17B36	; Call Procedure

xor	ax, ax		; Logical Exclusive OR
mov	ds:46EBh, al
mov	ds:46F3h, al
mov	ds:3CBEh, ax
mov	ds:0A5C0h, ax
mov	ds:0DBE0h, ax
mov	ds:0DBE2h, ax
mov	ds:1954h, ax
mov	word ptr ds:2786h, 0C827h
mov	si, 6B34h
jmp	sub_1DA5F	; Jump

sub_15ADF endp




sub_15B05 proc near
call	sub_182A0	; Call Procedure

jnz	short loc_15B0D	; Jump if Not Zero (ZF=0)

jmp	sub_1541F	; Jump

; ���������������������������������������������������������������������������

loc_15B0D:		; Call Procedure
call	sub_15B5D

sub_15B05 endp




sub_15B10 proc near
call	sub_18850	; Call Procedure

test	byte ptr ds:46EBh, 40h ; Logical Compare
jz	short locret_15B1D ; Jump if Zero (ZF=1)

jmp	loc_15575	; Jump

; ���������������������������������������������������������������������������

locret_15B1D:		; Return Near from Procedure
retn

sub_15B10 endp




sub_15B1E proc near

; FUNCTION CHUNK AT 86B9 SIZE 00000098 BYTES

mov	byte ptr ds:1955h, 3
mov	si, 8E0h
mov	dx, [si+6]
mov	bx, [si+8]
push	si
call	loc_15B60	; Call Procedure

call	sub_15B10	; Call Procedure

pop	si
cmp	word ptr ds:1176h, 1 ; Compare Two Operands
ja	short loc_15B4A	; Jump if Above	(CF=0 &	ZF=0)

test	byte ptr [si+3], 40h ; Logical Compare
jnz	short locret_15B51 ; Jump if Not Zero (ZF=0)

mov	di, [si+4]
cmp	di, ds:114Eh	; Compare Two Operands
jnz	short locret_15B51 ; Jump if Not Zero (ZF=0)


loc_15B4A:		; Logical Compare
test	byte ptr ds:46EBh, 40h
jz	short loc_15B52	; Jump if Zero (ZF=1)


locret_15B51:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_15B52:		; Jump
jmp	loc_186CC

sub_15B1E endp




sub_15B55 proc near
mov	dx, [di+2]
mov	bx, [di+4]
jmp	short loc_15B60	; Jump

sub_15B55 endp




sub_15B5D proc near
call	sub_1407E	; Call Procedure


loc_15B60:
mov	ds:197Eh, bx
mov	ds:197Ch, dx
retn			; Return Near from Procedure

sub_15B5D endp




sub_15B69 proc near
mov	si, 46E3h
mov	al, 0FCh ; '�'


loc_15B6E:
mov	dx, [si]
mov	bx, [si+2]
mov	di, [si+4]
mov	cx, [si+6]
mov	bp, 4


loc_15B7C:
push	ax
push	bp
dec	dx		; Decrement by 1
dec	bx		; Decrement by 1
call	sub_1C560	; Call Procedure

pop	bp
pop	ax
inc	di		; Increment by 1
inc	cx		; Increment by 1
sub	al, 2		; Integer Subtraction
dec	bp		; Decrement by 1
jnz	short loc_15B7C	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

sub_15B69 endp




sub_15B8D proc near
mov	di, 0D83Ch
call	sub_15B96	; Call Procedure

sub_15B8D endp




sub_15B93 proc near
mov	di, 0D834h

sub_15B93 endp




sub_15B96 proc near
mov	si, 46E3h

sub_15B96 endp




sub_15B99 proc near
push	ds
pop	es
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
retn			; Return Near from Procedure

sub_15B99 endp




sub_15BA0 proc near
mov	si, 1470h
mov	di, 0D83Ch
jmp	short sub_15B99	; Jump

sub_15BA0 endp




sub_15BA8 proc near
mov	si, 1470h
mov	di, 0D834h
jmp	short sub_15B99	; Jump

sub_15BA8 endp




sub_15BB0 proc near
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

mov	si, 194Ah
mov	ds:0DBE0h, si
call	sub_17B1B	; Call Procedure

call	sub_1D068	; Call Procedure

mov	si, 0E2h ; '�'
call	sub_1CF70	; Call Procedure

call	sub_1D03C	; Call Procedure

mov	al, ds:28h
xor	ah, ah		; Logical Exclusive OR
call	sub_1E2E3	; Call Procedure

mov	dx, ds:194Ah
mov	bx, ds:194Ch
add	dx, 0Ah		; Add
add	bx, 8		; Add
mov	cx, 0F0h ; '�'
mov	ax, 0E2h ; '�'
call	sub_1D194	; Call Procedure

jmp	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Jump

sub_15BB0 endp




sub_15BEB proc near
cmp	word ptr ds:0DBE0h, 194Ah ; Compare Two	Operands
jnz	short locret_15C02 ; Jump if Not Zero (ZF=0)

call	sub_1E270	; Call Procedure

xor	si, si		; Logical Exclusive OR
xchg	si, ds:0DBE0h	; Exchange Register/Memory with	Register
call	sub_1C6AD	; Call Procedure

call	sub_1E283	; Call Procedure


locret_15C02:		; Return Near from Procedure
retn

sub_15BEB endp




sub_15C03 proc near
mov	di, ds:0DBE0h
cmp	di, 194Ah	; Compare Two Operands
jnz	short loc_15C22	; Jump if Not Zero (ZF=0)

mov	ax, ds:_word_2C32A_time_passed
sub	ax, ds:word_2D10A ; Integer Subtraction
cmp	ax, 3E8h	; Compare Two Operands
jb	short loc_15C22	; Jump if Below	(CF=1)

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	sub_15BEB	; Call Procedure

jmp	_sub_1DBEC_draw_mouse ;	Jump

; ���������������������������������������������������������������������������

loc_15C22:		; Compare Two Operands
cmp	di, 4710h
jz	short loc_15C32	; Jump if Zero (ZF=1)

mov	di, ds:0DBE2h
cmp	di, 4710h	; Compare Two Operands
jnz	short locret_15C75 ; Jump if Not Zero (ZF=0)


loc_15C32:		; Call Procedure
call	sub_1D6FE

jnb	short loc_15C4B	; Jump if Not Below (CF=0)

mov	byte ptr ds:46EBh, 40h ; '@'
mov	al, 0FFh
call	sub_15E6D	; Call Procedure

mov	byte ptr ds:46EBh, 0C0h	; '�'
cmp	ax, 9		; Compare Two Operands
jb	short loc_15C4D	; Jump if Below	(CF=1)


loc_15C4B:		; Logical Exclusive OR
xor	di, di


loc_15C4D:
mov	ax, di
xchg	ax, ds:46FCh	; Exchange Register/Memory with	Register
cmp	ax, di		; Compare Two Operands
jz	short loc_15C6E	; Jump if Zero (ZF=1)

push	bx
push	dx
push	di
push	ds:_word_2D08A_framebuffer_active
call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

call	sub_15692	; Call Procedure

pop	ds:_word_2D08A_framebuffer_active
pop	di
pop	dx
pop	bx


loc_15C6E:		; Logical Inclusive OR
or	di, di
jnz	short locret_15C75 ; Jump if Not Zero (ZF=0)

call	sub_15746	; Call Procedure


locret_15C75:		; Return Near from Procedure
retn

sub_15C03 endp




sub_15C76 proc near

; FUNCTION CHUNK AT 5FB0 SIZE 0000005E BYTES
; FUNCTION CHUNK AT 7EB8 SIZE 00000026 BYTES

call	sub_15BEB	; Call Procedure

call	near ptr off_1C13B ; Call Procedure

mov	di, ds:0DBE0h
or	di, di		; Logical Inclusive OR
jz	short loc_15C95	; Jump if Zero (ZF=1)

call	sub_1D6FE	; Call Procedure

jnb	short loc_15C95	; Jump if Not Below (CF=0)

cmp	di, 4710h	; Compare Two Operands
jnz	short loc_15C92	; Jump if Not Zero (ZF=0)

jmp	sub_15923	; Jump

; ���������������������������������������������������������������������������

loc_15C92:		; Jump
jmp	loc_17E97

; ���������������������������������������������������������������������������

loc_15C95:
mov	di, ds:0DBE2h
or	di, di		; Logical Inclusive OR
jz	short loc_15CA5	; Jump if Zero (ZF=1)

call	sub_1D6FE	; Call Procedure

jnb	short loc_15CA5	; Jump if Not Below (CF=0)

jmp	loc_17EB8	; Jump

; ���������������������������������������������������������������������������

loc_15CA5:		; Compare Two Operands
cmp	byte ptr ds:46F5h, 0
jz	short loc_15CAF	; Jump if Zero (ZF=1)

jmp	sub_1D2E2	; Jump

; ���������������������������������������������������������������������������

loc_15CAF:		; Call Procedure
call	sub_16946

jnb	short loc_15CB7	; Jump if Not Below (CF=0)

jmp	loc_1872C	; Jump

; ���������������������������������������������������������������������������

loc_15CB7:
mov	al, 31h	; '1'
call	sub_15E6D	; Call Procedure

cmp	ax, 14h		; Compare Two Operands
jnb	short loc_15CCA	; Jump if Not Below (CF=0)

cmp	di, ds:46F8h	; Compare Two Operands
jz	short loc_15CCA	; Jump if Zero (ZF=1)

jmp	loc_15FB0	; Jump

; ���������������������������������������������������������������������������

loc_15CCA:		; Call Procedure
call	sub_15F79

call	sub_179DE	; Call Procedure

call	sub_158FA	; Call Procedure

cmp	byte ptr ds:1954h, 0 ; Compare Two Operands
jz	short locret_15CE3 ; Jump if Zero (ZF=1)

call	sub_1D316	; Call Procedure

call	sub_18763	; Call Procedure

call	sub_1D280	; Call Procedure


locret_15CE3:		; Return Near from Procedure
retn

sub_15C76 endp




sub_15CE4 proc near

; FUNCTION CHUNK AT 78BC SIZE 0000002D BYTES

call	sub_15BEB	; Call Procedure

call	near ptr off_1C13B ; Call Procedure

cmp	word ptr ds:0DBE2h, 0 ;	Compare	Two Operands
jnz	short locret_15CE3 ; Jump if Not Zero (ZF=0)

mov	di, ds:0DBE0h
or	di, di		; Logical Inclusive OR
jz	short loc_15D04	; Jump if Zero (ZF=1)

cmp	di, 18DFh	; Compare Two Operands
jnz	short locret_15CE3 ; Jump if Not Zero (ZF=0)

call	sub_1D6FE	; Call Procedure

jb	short loc_15D1A	; Jump if Below	(CF=1)


loc_15D04:		; Call Procedure
call	sub_16946

jnb	short locret_15CE3 ; Jump if Not Below (CF=0)

mov	si, [si+0Ah]
cmp	si, ds:46FAh	; Compare Two Operands
jz	short loc_15D1A	; Jump if Zero (ZF=1)

push	si
call	sub_17B36	; Call Procedure

pop	si
jmp	loc_178BC	; Jump

; ���������������������������������������������������������������������������

loc_15D1A:		; Jump
jmp	sub_179DE

sub_15CE4 endp




sub_15D1D proc near
cmp	dx, ds:46E3h	; Compare Two Operands
cmc			; Complement Carry Flag
jnb	short locret_15D35 ; Jump if Not Below (CF=0)

cmp	dx, ds:46E7h	; Compare Two Operands
jnb	short locret_15D35 ; Jump if Not Below (CF=0)

cmp	bx, ds:46E5h	; Compare Two Operands
cmc			; Complement Carry Flag
jnb	short locret_15D35 ; Jump if Not Below (CF=0)

cmp	bx, ds:46E9h	; Compare Two Operands


locret_15D35:		; Return Near from Procedure
retn

sub_15D1D endp




sub_15D36 proc near
cmp	byte ptr [di+8], 28h ; '(' ; Compare Two Operands
jb	short locret_15D43 ; Jump if Below (CF=1)

test	byte ptr [di+0Ah], 8 ; Logical Compare
jz	short locret_15D43 ; Jump if Zero (ZF=1)

stc			; Set Carry Flag


locret_15D43:		; Return Near from Procedure
retn

sub_15D36 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_174B6

loc_15D44:		; Logical Compare
test	byte ptr ds:11C9h, 3
jz	short sub_15D50	; Jump if Zero (ZF=1)

or	byte ptr ds:4728h, 1 ; Logical Inclusive OR

; END OF FUNCTION CHUNK	FOR sub_174B6



sub_15D50 proc near
push	si
push	di
test	byte ptr [di+0Ah], 80h ; Logical Compare
jnz	short loc_15D6A	; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:46EBh, 0 ; Compare Two Operands
jz	short loc_15D6A	; Jump if Zero (ZF=1)

mov	si, di
call	sub_162C9	; Call Procedure

jb	short loc_15D6A	; Jump if Below	(CF=1)

inc	byte ptr ds:46ECh ; Increment by 1


loc_15D6A:
pop	di
pop	si
retn			; Return Near from Procedure

sub_15D50 endp




sub_15D6D proc near
mov	byte ptr ds:46ECh, 0
cmp	byte ptr ds:46EBh, 0 ; Compare Two Operands
js	short loc_15D82	; Jump if Sign (SF=1)

jz	short locret_15DCD ; Jump if Zero (ZF=1)

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

jmp	word ptr ds:46EDh ; Indirect Near Jump

; ���������������������������������������������������������������������������

loc_15D82:		; Call Procedure
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	sub_15B8D	; Call Procedure

mov	al, 80h	; '�'
xchg	al, ds:46EBh	; Exchange Register/Memory with	Register
push	ax
push	word ptr ds:46EFh
call	_sub_1B6C3_map_func ; Call Procedure

call	near ptr off_1C13B ; Call Procedure

call	sub_15DCE	; Call Procedure

call	sub_16314	; Call Procedure

call	sub_1C412	; Call Procedure

mov	word ptr ds:3CBEh, 0
call	sub_16715	; Call Procedure

mov	si, 46E3h
call	sub_1C6AD	; Call Procedure

pop	si
or	si, si		; Logical Inclusive OR
jz	short loc_15DBC	; Jump if Zero (ZF=1)

call	sub_1697C	; Call Procedure


loc_15DBC:		; Call Procedure
call	sub_11C18

pop	ax
mov	ds:46EBh, al
and	al, 40h		; Logical AND
jz	short loc_15DCA	; Jump if Zero (ZF=1)

call	sub_1542F	; Call Procedure


loc_15DCA:		; Jump
jmp	near ptr off_1C13B

; ���������������������������������������������������������������������������

locret_15DCD:		; Return Near from Procedure
retn

sub_15D6D endp




sub_15DCE proc near
mov	al, ds:46EBh
or	al, al		; Logical Inclusive OR
jns	short loc_15DDA	; Jump if Not Sign (SF=0)

push	ax
call	sub_1633B	; Call Procedure

pop	ax


loc_15DDA:
mov	di, 0A5C0h
and	al, 40h		; Logical AND
jz	short loc_15DF1	; Jump if Zero (ZF=1)

sub	di, 6		; Integer Subtraction


loc_15DE4:		; Add
add	di, 6
cmp	word ptr [di], 0 ; Compare Two Operands
jz	short loc_15DF1	; Jump if Zero (ZF=1)

test	[di+5],	al	; Logical Compare
jz	short loc_15DE4	; Jump if Zero (ZF=1)


loc_15DF1:
mov	si, 100h


loc_15DF4:		; Compare Two Operands
cmp	word ptr [si], 0FFFFh
jz	short loc_15E3D	; Jump if Zero (ZF=1)

test	byte ptr [si+0Ah], 80h ; Logical Compare
jnz	short loc_15E38	; Jump if Not Zero (ZF=0)

call	sub_162C9	; Call Procedure

jb	short loc_15E38	; Jump if Below	(CF=1)

mov	[di], si
mov	[di+2],	dx
mov	bh, ds:46EBh
mov	[di+4],	bx
xor	bh, bh		; Logical Exclusive OR
call	sub_15E42	; Call Procedure

cmp	cl, 20h	; ' '   ; Compare Two Operands
jnb	short loc_15E2E	; Jump if Not Below (CF=0)

push	ax
push	bx
push	dx
push	si
call	sub_17C8F	; Call Procedure

cmp	ax, ds:1176h	; Compare Two Operands
pop	si
pop	dx
pop	bx
pop	ax
jbe	short loc_15E2E	; Jump if Below	or Equal (CF=1 | ZF=1)

add	ax, 5		; Add


loc_15E2E:
push	si
push	di
call	sub_1C343	; Call Procedure

pop	di
pop	si
add	di, 6		; Add


loc_15E38:		; Add
add	si, 1Ch
jmp	short loc_15DF4	; Jump

; ���������������������������������������������������������������������������

loc_15E3D:
mov	word ptr [di], 0
retn			; Return Near from Procedure

sub_15DCE endp




sub_15E42 proc near
mov	ax, 3Ah	; ':'
test	ds:byte_23B9B, 80h ; Logical Compare
jz	short _sub_15E4F_calc_SAL_index	; SAL index -> ax

mov	ax, 7Ah	; 'z'

sub_15E42 endp



; SAL index -> ax

_sub_15E4F_calc_SAL_index proc near
mov	cl, [si+8]
cmp	cl, 20h	; ' '   ; Compare Two Operands
jb	short locret_15E6A ; Jump if Below (CF=1)

inc	ax		; Increment by 1
cmp	cl, 21h	; '!'   ; Compare Two Operands
jb	short locret_15E6A ; Jump if Below (CF=1)

inc	ax		; Increment by 1
cmp	cl, 28h	; '('   ; Compare Two Operands
jb	short locret_15E6A ; Jump if Below (CF=1)

inc	ax		; Increment by 1
cmp	cl, 30h	; '0'   ; Compare Two Operands
jb	short locret_15E6A ; Jump if Below (CF=1)

inc	ax		; Increment by 1


locret_15E6A:		; Return Near from Procedure
retn

_sub_15E4F_calc_SAL_index endp

; ���������������������������������������������������������������������������
mov	al, 20h	; ' '



; Attributes: bp-based frame

sub_15E6D proc near

var_8= word ptr	-8
var_6= word ptr	-6
var_4= word ptr	-4
var_2= word ptr	-2

push	si
mov	bp, sp
sub	sp, 8		; Integer Subtraction
mov	[bp+var_8], 0FFFFh
mov	[bp+var_6], dx
mov	[bp+var_4], bx
mov	[bp+var_2], 0
mov	si, 0A5BAh


loc_15E86:		; Add
add	si, 6
mov	di, [si]
or	di, di		; Logical Inclusive OR
jz	short loc_15EBF	; Jump if Zero (ZF=1)

cmp	[di+8],	al	; Compare Two Operands
jnb	short loc_15E86	; Jump if Not Below (CF=0)

mov	bx, [si+4]
cmp	bh, ds:46EBh	; Compare Two Operands
jnz	short loc_15E86	; Jump if Not Zero (ZF=0)

xor	bh, bh		; Logical Exclusive OR
mov	dx, [si+2]
sub	dx, [bp+var_6]	; Integer Subtraction
jns	short loc_15EA9	; Jump if Not Sign (SF=0)

neg	dx		; Two's Complement Negation


loc_15EA9:		; Integer Subtraction
sub	bx, [bp+var_4]
jns	short loc_15EB0	; Jump if Not Sign (SF=0)

neg	bx		; Two's Complement Negation


loc_15EB0:		; Add
add	dx, bx
cmp	dx, [bp+var_8]	; Compare Two Operands
jnb	short loc_15E86	; Jump if Not Below (CF=0)

mov	[bp+var_8], dx
mov	[bp+var_2], di
jmp	short loc_15E86	; Jump

; ���������������������������������������������������������������������������

loc_15EBF:
mov	di, [bp+var_2]
mov	ax, [bp+var_8]
mov	dx, [bp+var_6]
mov	bx, [bp+var_4]
add	sp, 8		; Add
pop	si
retn			; Return Near from Procedure

sub_15E6D endp




sub_15ED0 proc near
mov	bp, 0A5BAh


loc_15ED3:		; Add
add	bp, 6
mov	ax, [bp+0]
cmp	ax, di		; Compare Two Operands
jz	short locret_15EE3 ; Jump if Zero (ZF=1)

or	ax, ax		; Logical Inclusive OR
jnz	short loc_15ED3	; Jump if Not Zero (ZF=0)

or	bp, bp		; Logical Inclusive OR


locret_15EE3:		; Return Near from Procedure
retn

sub_15ED0 endp




sub_15EE4 proc near
call	sub_15ED0	; Call Procedure

jnz	short locret_15EE3 ; Jump if Not Zero (ZF=0)

mov	si, 1668h
call	sub_16252	; Call Procedure

mov	bx, ax
inc	ax		; Increment by 1
cmp	di, ds:46F8h	; Compare Two Operands
jnz	short loc_15F12	; Jump if Not Zero (ZF=0)

cmp	al, ds:46F7h	; Compare Two Operands
jnz	short loc_15F01	; Jump if Not Zero (ZF=0)

jmp	sub_17B1B	; Jump

; ���������������������������������������������������������������������������

loc_15F01:		; Call Procedure
call	sub_1E270

mov	byte ptr ds:46D8h, 1
call	sub_15F91	; Call Procedure

call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

call	sub_1E283	; Call Procedure


loc_15F12:
mov	ds:46F7h, al
mov	cl, [bx+11D0h]
xor	ch, ch		; Logical Exclusive OR
mov	dx, [bp+2]
mov	bx, [bp+4]
or	bh, bh		; Logical Inclusive OR
jns	short locret_15EE3 ; Jump if Not Sign (SF=0)


loc_15F25:		; Logical Exclusive OR
xor	bh, bh
push	bx
push	dx
mov	ax, cx
shr	ax, 1		; Shift	Logical	Right
sub	bx, ax		; Integer Subtraction
cmp	bx, 4		; Compare Two Operands
jge	short loc_15F37	; Jump if Greater or Equal (SF=OF)

mov	bx, 4


loc_15F37:
mov	ax, 94h	; '�'
sub	ax, cx		; Integer Subtraction
cmp	bx, ax		; Compare Two Operands
jl	short loc_15F42	; Jump if Less (SF!=OF)

mov	bx, ax


loc_15F42:		; Add
add	dx, 0Fh
cmp	dx, 0D2h ; '�'  ; Compare Two Operands
jl	short loc_15F4F	; Jump if Less (SF!=OF)

sub	dx, 82h	; '�'   ; Integer Subtraction


loc_15F4F:
mov	[si], dx
mov	[si+2],	bx
add	dx, 6Ah	; 'j'   ; Add
mov	[si+4],	dx
add	bx, cx		; Add
mov	[si+6],	bx
mov	ds:0DBE0h, si
pop	dx
pop	bx
mov	ax, 0Ah
sub	dx, ax		; Integer Subtraction
sub	bx, ax		; Integer Subtraction
mov	di, 0D816h
mov	[di], dx
mov	[di+2],	bx
mov	al, 6
jmp	sub_17B0F	; Jump

sub_15EE4 endp




sub_15F79 proc near
xor	ax, ax		; Logical Exclusive OR
xchg	ax, ds:46F8h	; Exchange Register/Memory with	Register
or	ax, ax		; Logical Inclusive OR
jz	short locret_15F90 ; Jump if Zero (ZF=1)

call	sub_1D41B	; Call Procedure

mov	al, [bp+0]
inc	al		; Increment by 1
jz	short sub_15F91	; Jump if Zero (ZF=1)

jmp	sub_1D2E2	; Jump

; ���������������������������������������������������������������������������

locret_15F90:		; Return Near from Procedure
retn

sub_15F79 endp




sub_15F91 proc near
mov	word ptr ds:46F8h, 0
mov	byte ptr ds:46F7h, 0
mov	si, 1668h


loc_15F9F:		; Call Procedure
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer

mov	word ptr ds:0DBE0h, 0
call	sub_1C6AD	; Call Procedure

mov	al, 8
jmp	sub_17B2B	; Jump

sub_15F91 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_15C76

loc_15FB0:		; Call Procedure
call	sub_158FA

call	sub_17B36	; Call Procedure

cmp	di, ds:114Eh	; Compare Two Operands
jz	short sub_1600E	; Jump if Zero (ZF=1)

cmp	byte ptr ds:8, 0FFh ; Compare Two Operands
jz	short loc_15FF9	; Jump if Zero (ZF=1)

cmp	byte ptr ds:0Bh, 2 ; Compare Two Operands
jbe	short loc_15FD8	; Jump if Below	or Equal (CF=1 | ZF=1)

cmp	byte ptr ds:8, 20h ; ' ' ; Compare Two Operands
jnb	short sub_1600E	; Jump if Not Below (CF=0)

cmp	byte ptr ds:8, 28h ; '(' ; Compare Two Operands
jnb	short sub_1600E	; Jump if Not Below (CF=0)


loc_15FD8:
push	di
mov	di, ds:114Eh
call	sub_17F27	; Call Procedure

pop	di
mov	bp, 20DAh
mov	ax, [bp+2]
and	ah, 1Fh		; Logical AND
cmp	byte ptr ds:46FFh, 0 ; Compare Two Operands
jnz	short loc_15FF4	; Jump if Not Zero (ZF=0)

or	ah, 40h		; Logical Inclusive OR


loc_15FF4:
mov	[bp+2],	ax
jmp	short loc_16003	; Jump

; ���������������������������������������������������������������������������

loc_15FF9:		; Logical Compare
test	byte ptr ds:0Ah, 40h
jz	short sub_1600E	; Jump if Zero (ZF=1)

mov	bp, 20E6h


loc_16003:
push	bp
call	sub_1600E	; Call Procedure

pop	bp
mov	bx, 5F91h
jmp	sub_1D323	; Jump

; END OF FUNCTION CHUNK	FOR sub_15C76



sub_1600E proc near
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

push	di
call	sub_15EE4	; Call Procedure

pop	di
mov	ds:46F8h, di
call	sub_1D068	; Call Procedure

mov	cl, 9Ah	; '�'
mov	ch, ds:1671h
mov	dx, ds:1668h
mov	bx, ds:166Ah
add	dx, 0Ch		; Add
add	bx, 4		; Add
call	sub_1629D	; Call Procedure

mov	cl, 96h	; '�'
sub	dx, 8		; Integer Subtraction
add	bx, 9		; Add
call	sub_162A6	; Call Procedure

call	sub_16252	; Call Procedure

cmp	al, 2		; Compare Two Operands
jz	short loc_16059	; Jump if Zero (ZF=1)

test	byte ptr ds:0Ah, 20h ; Logical Compare
jz	short loc_16056	; Jump if Zero (ZF=1)

or	al, al		; Logical Inclusive OR
jnz	short loc_16056	; Jump if Not Zero (ZF=0)

push	ax
call	sub_1605C	; Call Procedure

pop	ax


loc_16056:		; Call Procedure
call	sub_160AC


loc_16059:		; Jump
jmp	_sub_1C07C_set_frontbuffer_as_active_framebuffer

sub_1600E endp




sub_1605C proc near
call	sub_1D075	; Call Procedure

mov	cl, 90h	; '�'
add	bx, 0Ah		; Add
mov	dx, ds:1668h
add	dx, 4		; Add
mov	ax, 6Ch	; 'l'
call	sub_1D194	; Call Procedure

mov	al, [di+1Bh]
mov	si, 75h	; 'u'
mov	bp, 6Dh	; 'm'
test	byte ptr [di+0Ah], 20h ; Logical Compare
jz	short loc_1609D	; Jump if Zero (ZF=1)

push	cx
push	ax
push	si
call	sub_1E295	; Call Procedure

pop	ax
pop	cx
add	bx, 7		; Add
mov	dx, ds:1668h
add	dx, 4		; Add
mov	bp, ds:166Ch
push	bx
call	sub_1617A	; Call Procedure

pop	bx
pop	cx
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1609D:
mov	ax, bp
add	bx, 7		; Add
mov	dx, ds:1668h
add	dx, 0Ah		; Add
jmp	sub_1D194	; Jump

sub_1605C endp




sub_160AC proc near
call	near ptr off_1C13B ; Call Procedure

call	sub_1D068	; Call Procedure

mov	cl, 9Ah	; '�'
mov	dx, ds:1668h
add	bx, 0Ch		; Add
add	dx, 4		; Add
call	sub_1627E	; Call Procedure

jb	short loc_160D6	; Jump if Below	(CF=1)

mov	ax, 6Eh	; 'n'
call	sub_1D194	; Call Procedure

add	bx, 0Ah		; Add
lea	si, [di+14h]	; Load Effective Address
mov	bp, ds:166Eh
jmp	sub_17E3D	; Jump

; ���������������������������������������������������������������������������

loc_160D6:
mov	ax, 4Ch	; 'L'
call	sub_1D194	; Call Procedure

add	bx, 6		; Add
add	dx, 2Fh	; '/'   ; Add
push	bx
push	dx
call	sub_160F8	; Call Procedure

xor	ah, ah		; Logical Exclusive OR
add	ax, 0Fh		; Add
mov	cl, 5
shr	ax, cl		; Shift	Logical	Right
add	ax, 8Eh	; '�'   ; Add
pop	dx
pop	bx
jmp	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

sub_160AC endp




sub_160F8 proc near
xor	bx, bx		; Logical Exclusive OR
xor	cx, cx		; Logical Exclusive OR
xor	dx, dx		; Logical Exclusive OR
mov	ds:0D81Ch, dx
mov	bp, 6155h
call	sub_16603	; Call Procedure

xor	ax, ax		; Logical Exclusive OR
add	bx, dx		; Add
jz	short loc_16114	; Jump if Zero (ZF=1)

xchg	ah, dl		; Exchange Register/Memory with	Register
xchg	dh, dl		; Exchange Register/Memory with	Register
div	bx		; Unsigned Divide


loc_16114:
mov	bx, ax
xor	ax, ax		; Logical Exclusive OR
mov	dx, ds:0D81Ch
add	cx, dx		; Add
jz	short loc_16126	; Jump if Zero (ZF=1)

xchg	ah, dl		; Exchange Register/Memory with	Register
xchg	dh, dl		; Exchange Register/Memory with	Register
div	cx		; Unsigned Divide


loc_16126:
mov	cx, ax
mov	si, bx
cmp	si, cx		; Compare Two Operands
jnb	short loc_16130	; Jump if Not Below (CF=0)

mov	si, cx


loc_16130:
mov	ax, bx
sub	ax, cx		; Integer Subtraction
or	si, si		; Logical Inclusive OR
jz	short loc_1613F	; Jump if Zero (ZF=1)

cwd			; AX ->	DX:AX (with sign)
xchg	al, ah		; Exchange Register/Memory with	Register
xchg	al, dl		; Exchange Register/Memory with	Register
idiv	si		; Signed Divide


loc_1613F:		; Shift	Arithmetic Right
sar	ax, 1
add	al, 80h	; '�'   ; Add
retn			; Return Near from Procedure

sub_160F8 endp




sub_16144 proc near
call	sub_1E270	; Call Procedure

push	es
call	sub_160F8	; Call Procedure

or	al, 1		; Logical Inclusive OR
mov	ds:0FDh, al
pop	es
call	sub_1E283	; Call Procedure

retn			; Return Near from Procedure

sub_16144 endp




sub_16155 proc near
xor	ax, ax		; Logical Exclusive OR
mov	al, [si+1Ah]
test	byte ptr [si+10h], 80h ; Logical Compare
jz	short loc_16165	; Jump if Zero (ZF=1)

add	ds:0D81Ch, ax	; Add
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_16165:		; Compare Two Operands
cmp	byte ptr [si+3], 6
jnz	short locret_16179 ; Jump if Not Zero (ZF=0)

test	byte ptr [si+3], 20h ; Logical Compare
jnz	short loc_16173	; Jump if Not Zero (ZF=0)

add	dx, ax		; Add


loc_16173:		; Add
add	cx, [si+0Ch]
add	bx, [si+0Eh]	; Add


locret_16179:		; Return Near from Procedure
retn

sub_16155 endp




sub_1617A proc near
and	cx, 0FFh	; Logical AND
jz	short locret_161D2 ; Jump if Zero (ZF=1)

push	bx
push	di
push	ax
push	dx
call	sub_1C1F4	; Call Procedure

mov	di, bp
sub	di, dx		; Integer Subtraction
mov	bp, es:[si]
and	bp, 0FFFh	; Logical AND
add	bp, 2		; Add
mov	ax, di
xor	dx, dx		; Logical Exclusive OR
div	cx		; Unsigned Divide
cmp	ax, bp		; Compare Two Operands
jnb	short loc_161B5	; Jump if Not Below (CF=0)

sub	di, bp		; Integer Subtraction
mov	ax, di
xor	dx, dx		; Logical Exclusive OR
div	cx		; Unsigned Divide
mov	bp, ax
cmp	bp, 2		; Compare Two Operands
jnb	short loc_161B5	; Jump if Not Below (CF=0)

mov	bp, 2
mov	cx, di
shr	cx, 1		; Shift	Logical	Right


loc_161B5:
pop	dx
pop	ax


loc_161B7:
push	ax
push	bx
push	cx
push	dx
push	bp
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

pop	bp
pop	dx
pop	cx
pop	bx
pop	ax
add	dx, bp		; Add
loop	loc_161B7	; Loop while CX	!= 0

pop	di
pop	bx
call	sub_1C1F4	; Call Procedure

add	bl, es:[si+2]	; Add
inc	bx		; Increment by 1


locret_161D2:		; Return Near from Procedure
retn

sub_1617A endp




sub_161D3 proc near
and	cx, 0FFh	; Logical AND
jz	short locret_161D2 ; Jump if Zero (ZF=1)

push	bx
push	di
push	ax
push	dx
call	sub_1C1F4	; Call Procedure

mov	di, bp
sub	di, bx		; Integer Subtraction
mov	bp, es:[si+2]
and	bp, 0FFh	; Logical AND
add	bp, 2		; Add
mov	ax, di
xor	dx, dx		; Logical Exclusive OR
div	cx		; Unsigned Divide
cmp	ax, bp		; Compare Two Operands
jnb	short loc_1620F	; Jump if Not Below (CF=0)

sub	di, bp		; Integer Subtraction
mov	ax, di
xor	dx, dx		; Logical Exclusive OR
div	cx		; Unsigned Divide
mov	bp, ax
cmp	bp, 2		; Compare Two Operands
jnb	short loc_1620F	; Jump if Not Below (CF=0)

mov	bp, 2
mov	cx, di
shr	cx, 1		; Shift	Logical	Right


loc_1620F:
pop	dx
pop	ax


loc_16211:
push	ax
push	bx
push	cx
push	dx
push	bp
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

pop	bp
pop	dx
pop	cx
pop	bx
pop	ax
add	bx, bp		; Add
loop	loc_16211	; Loop while CX	!= 0

pop	di
pop	bx
call	sub_1C1F4	; Call Procedure

mov	ax, es:[si]
and	ah, 0Fh		; Logical AND
add	dx, ax		; Add
inc	dx		; Increment by 1
retn			; Return Near from Procedure

sub_161D3 endp




sub_16231 proc near
push	bx
mov	bl, [di+8]
xor	ax, ax		; Logical Exclusive OR
cmp	bl, 20h	; ' '   ; Compare Two Operands
jb	short loc_16250	; Jump if Below	(CF=1)

inc	ax		; Increment by 1
cmp	bl, 21h	; '!'   ; Compare Two Operands
jb	short loc_16250	; Jump if Below	(CF=1)

inc	ax		; Increment by 1
cmp	bl, 28h	; '('   ; Compare Two Operands
jb	short loc_16250	; Jump if Below	(CF=1)

inc	ax		; Increment by 1
cmp	bl, 30h	; '0'   ; Compare Two Operands
jb	short loc_16250	; Jump if Below	(CF=1)

sub	al, 2		; Integer Subtraction


loc_16250:
pop	bx
retn			; Return Near from Procedure

sub_16231 endp




sub_16252 proc near
call	sub_1627E	; Call Procedure

jb	short loc_1627A	; Jump if Below	(CF=1)

call	sub_15D36	; Call Procedure

mov	ax, 2
jb	short loc_16260	; Jump if Below	(CF=1)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_16260:		; Logical Compare
test	byte ptr [di+0Ah], 10h
jz	short locret_1627D ; Jump if Zero (ZF=1)

call	sub_16231	; Call Procedure

or	ax, ax		; Logical Inclusive OR
jz	short locret_1627D ; Jump if Zero (ZF=1)

cmp	al, 3		; Compare Two Operands
jnz	short loc_16274	; Jump if Not Zero (ZF=0)

xor	ax, ax		; Logical Exclusive OR
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_16274:		; Compare Two Operands
cmp	al, 2
mov	al, 2
jnz	short locret_1627D ; Jump if Not Zero (ZF=0)


loc_1627A:
mov	ax, 1


locret_1627D:		; Return Near from Procedure
retn

sub_16252 endp




sub_1627E proc near
call	sub_1E270	; Call Procedure

test	byte ptr [di+0Ah], 2 ; Logical Compare
jnz	short loc_16293	; Jump if Not Zero (ZF=0)

call	sub_15D36	; Call Procedure

jb	short loc_16298	; Jump if Below	(CF=1)

call	sub_15098	; Call Procedure

or	dx, dx		; Logical Inclusive OR
jz	short loc_16298	; Jump if Zero (ZF=1)


loc_16293:		; Call Procedure
call	sub_1E283

stc			; Set Carry Flag
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_16298:		; Call Procedure
call	sub_1E283

clc			; Clear	Carry Flag
retn			; Return Near from Procedure

sub_1627E endp




sub_1629D proc near
call	sub_16231	; Call Procedure

add	ax, 44h	; 'D'   ; Add
jmp	sub_1D194	; Jump

sub_1629D endp




sub_162A6 proc near
mov	al, [di]
xor	ah, ah		; Logical Exclusive OR
add	ax, 0		; Add
call	sub_1D194	; Call Procedure

cmp	byte ptr [di+1], 3 ; Compare Two Operands
mov	al, 20h	; ' '
jb	short loc_162BA	; Jump if Below	(CF=1)

mov	al, 2Dh	; '-'


loc_162BA:		; Indirect Call	Near Procedure
call	word ptr ds:2518h
mov	al, [di+1]
xor	ah, ah		; Logical Exclusive OR
add	ax, 0Ch		; Add
jmp	sub_1D19B	; Jump

sub_162A6 endp




sub_162C9 proc near
cmp	byte ptr ds:46EBh, 1 ; Compare Two Operands
jb	short locret_162F1 ; Jump if Below (CF=1)

mov	dx, [si+2]
mov	bx, [si+4]

sub_162C9 endp




sub_162D6 proc near
call	sub_1B647	; Call Procedure

cmp	dx, ds:46E3h	; Compare Two Operands
jb	short locret_162F1 ; Jump if Below (CF=1)

cmp	dx, ds:46E7h	; Compare Two Operands
cmc			; Complement Carry Flag
jb	short locret_162F1 ; Jump if Below (CF=1)

cmp	bx, ds:46E5h	; Compare Two Operands
jb	short locret_162F1 ; Jump if Below (CF=1)

cmp	bx, ds:46E9h	; Compare Two Operands
cmc			; Complement Carry Flag


locret_162F1:		; Return Near from Procedure
retn

sub_162D6 endp




sub_162F2 proc near
call	sub_168EB	; Call Procedure

test	byte ptr [si+3], 40h ; Logical Compare
jnz	short loc_16306	; Jump if Not Zero (ZF=0)

mov	si, [si+4]


loc_162FE:		; Call Procedure
call	sub_162C9

mov	ax, 36h	; '6'
jmp	short loc_16322	; Jump

; ���������������������������������������������������������������������������

loc_16306:
mov	dx, [si+6]
mov	bx, [si+8]
call	sub_162D6	; Call Procedure

mov	ax, 36h	; '6'
jmp	short loc_16322	; Jump

sub_162F2 endp




sub_16314 proc near
call	sub_1407E	; Call Procedure

call	sub_162D6	; Call Procedure

mov	ax, 4Ch	; 'L'
pushf			; Push Flags Register onto the Stack
sub	dx, 0Dh		; Integer Subtraction
popf			; Pop Stack into Flags Register


loc_16322:		; Jump if Below	(CF=1)
jb	short locret_162F1

push	word ptr ds:2784h
push	ax
call	_sub_1C137_load_icons_sprites ;	Call Procedure

pop	ax
call	sub_1C1F4	; Call Procedure

sub	bl, es:[si+2]	; Integer Subtraction
call	sub_1C30D	; Call Procedure

pop	ax
jmp	_sub_1C13E_open_sprite_sheet ; Jump

sub_16314 endp




sub_1633B proc near
mov	dx, ds:197Ch
mov	bx, ds:197Eh
sub	bx, 12h		; Integer Subtraction


loc_16346:		; Call Procedure
call	sub_1634D

inc	bx		; Increment by 1
jnb	short loc_16346	; Jump if Not Below (CF=0)

retn			; Return Near from Procedure

sub_1633B endp




sub_1634D proc near
push	bx
push	dx
call	sub_162D6	; Call Procedure

pop	si
pop	cx
jb	short locret_16369 ; Jump if Below (CF=1)

push	bx
push	cx
push	dx
push	si
call	sub_1636A	; Call Procedure

pop	si
pop	dx
pop	cx
pop	bx
push	cx
push	si
call	sub_1639A	; Call Procedure

pop	dx
pop	bx
clc			; Clear	Carry Flag


locret_16369:		; Return Near from Procedure
retn

sub_1634D endp




sub_1636A proc near
xchg	dx, si		; Exchange Register/Memory with	Register
xchg	bx, cx		; Exchange Register/Memory with	Register
call	_sub_1B58B_map_func ; Call Procedure

xchg	dx, si		; Exchange Register/Memory with	Register
mov	bx, cx


loc_16375:
mov	ax, es:[di]
and	ax, 3030h	; Logical AND
cmp	al, 10h		; Compare Two Operands
jz	short loc_16395	; Jump if Zero (ZF=1)


loc_1637F:		; Add
add	dx, 4
cmp	dx, ds:46E7h	; Compare Two Operands
jnb	short locret_16394 ; Jump if Not Below (CF=0)

inc	di		; Increment by 1
inc	si		; Increment by 1
cmp	si, bp		; Compare Two Operands
jb	short loc_16375	; Jump if Below	(CF=1)

sub	si, bp		; Integer Subtraction
sub	di, bp		; Integer Subtraction
jmp	short loc_16375	; Jump

; ���������������������������������������������������������������������������

locret_16394:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_16395:		; Call Procedure
call	sub_163C7

jmp	short loc_1637F	; Jump

sub_1636A endp




sub_1639A proc near
xchg	dx, si		; Exchange Register/Memory with	Register
xchg	bx, cx		; Exchange Register/Memory with	Register
call	_sub_1B58B_map_func ; Call Procedure

xchg	dx, si		; Exchange Register/Memory with	Register
mov	bx, cx


loc_163A5:
mov	ax, es:[di]
and	ax, 3030h	; Logical AND
cmp	al, 10h		; Compare Two Operands
jz	short loc_163C2	; Jump if Zero (ZF=1)


loc_163AF:		; Integer Subtraction
sub	dx, 4
cmp	dx, ds:46E3h	; Compare Two Operands
jb	short locret_16394 ; Jump if Below (CF=1)

dec	di		; Decrement by 1
dec	si		; Decrement by 1
jns	short loc_163A5	; Jump if Not Sign (SF=0)

add	si, bp		; Add
add	di, bp		; Add
jmp	short loc_163A5	; Jump

; ���������������������������������������������������������������������������

loc_163C2:		; Call Procedure
call	sub_163C7

jmp	short loc_163AF	; Jump

sub_1639A endp




sub_163C7 proc near
push	bx
push	dx
push	si
push	di
push	bp
push	es
cmp	ah, 10h		; Compare Two Operands
mov	ax, 78h	; 'x'
jnz	short loc_163D6	; Jump if Not Zero (ZF=0)

inc	ax		; Increment by 1


loc_163D6:		; Add
add	bp, di
and	di, 3		; Logical AND
shr	bp, 1		; Shift	Logical	Right
shr	bp, 1		; Shift	Logical	Right
and	bp, 3		; Logical AND
add	bx, di		; Add
add	dx, bp		; Add
call	sub_1C343	; Call Procedure

pop	es
pop	bp
pop	di
pop	si
pop	dx
pop	bx
retn			; Return Near from Procedure

sub_163C7 endp




_sub_163F0_map_func_qq proc near

; FUNCTION CHUNK AT 65B6 SIZE 0000004D BYTES

cmp	byte ptr ds:46DEh, 0 ; Compare Two Operands
jz	short locret_1642D ; Jump if Zero (ZF=1)

mov	es, word ptr ds:0DD00h
mov	di, 100h


loc_163FE:
mov	al, [di+0Ah]
test	al, 20h		; Logical Compare
jz	short loc_16422	; Jump if Zero (ZF=1)

mov	bl, [di+1Bh]
mov	bh, 0FAh ; '�'
cmp	bl, bh		; Compare Two Operands
jnb	short loc_16422	; Jump if Not Below (CF=0)

mov	si, [di+6]
call	sub_1642E	; Call Procedure

shr	dx, 1		; Shift	Logical	Right
inc	dx		; Increment by 1
add	bl, dl		; Add
cmp	bl, bh		; Compare Two Operands
jb	short loc_1641F	; Jump if Below	(CF=1)

mov	bl, bh


loc_1641F:
mov	[di+1Bh], bl


loc_16422:		; Add
add	di, 1Ch
cmp	word ptr [di], 0FFFFh ;	Compare	Two Operands
jnz	short loc_163FE	; Jump if Not Zero (ZF=0)

jmp	loc_165B6	; Jump

; ���������������������������������������������������������������������������

locret_1642D:		; Return Near from Procedure
retn

_sub_163F0_map_func_qq endp




sub_1642E proc near
mov	cx, 3
dec	si		; Decrement by 1
xor	dx, dx		; Logical Exclusive OR


loc_16434:		; Load String
lods	word ptr es:[si]
and	ax, 3030h	; Logical AND
cmp	ah, 10h		; Compare Two Operands
jnz	short loc_1643F	; Jump if Not Zero (ZF=0)

inc	dx		; Increment by 1


loc_1643F:		; Compare Two Operands
cmp	al, 10h
jnz	short loc_16444	; Jump if Not Zero (ZF=0)

inc	dx		; Increment by 1


loc_16444:		; Loop while CX	!= 0
loop	loc_16434

retn			; Return Near from Procedure

sub_1642E endp




sub_16447 proc near
mov	byte ptr ds:4739h, 30h ; '0'
jmp	short loc_16458	; Jump

sub_16447 endp




sub_1644E proc near
mov	byte ptr ds:4739h, 20h ; ' '
xor	cx, cx		; Logical Exclusive OR
mov	cl, [di+0Bh]


loc_16458:
mov	cs:word_164ED, offset sub_1646F
mov	dx, [di+2]
mov	bx, [di+4]
mov	ds:0D81Ch, dx
mov	ds:0D818h, bx
jmp	short sub_164B2	; Jump

sub_1644E endp




sub_1646F proc near
add	bx, ds:0D818h	; Add
cmp	bx, 5Dh	; ']'   ; Compare Two Operands
jg	short locret_164B1 ; Jump if Greater (ZF=0 & SF=OF)

cmp	bx, 0FFA3h	; Compare Two Operands
jl	short locret_164B1 ; Jump if Less (SF!=OF)

push	dx
mov	dx, ds:0D81Ch
call	_sub_1B58B_map_func ; Call Procedure

pop	ax
add	di, ax		; Add
add	dx, ax		; Add
jns	short loc_16492	; Jump if Not Sign (SF=0)


loc_1648C:		; Add
add	di, bp
add	dx, bp		; Add
js	short loc_1648C	; Jump if Sign (SF=1)


loc_16492:
mov	al, es:[di]
mov	ah, al
and	ah, 30h		; Logical AND
cmp	ah, 10h		; Compare Two Operands
jz	short loc_164A5	; Jump if Zero (ZF=1)

xor	al, ah		; Logical Exclusive OR
or	al, ds:4739h	; Logical Inclusive OR


loc_164A5:		; Store	String
stosb
inc	dx		; Increment by 1
cmp	dx, bp		; Compare Two Operands
jb	short loc_164AF	; Jump if Below	(CF=1)

sub	dx, bp		; Integer Subtraction
sub	di, bp		; Integer Subtraction


loc_164AF:		; Loop while CX	!= 0
loop	loc_16492


locret_164B1:		; Return Near from Procedure
retn

sub_1646F endp




sub_164B2 proc near
xor	bx, bx		; Logical Exclusive OR
mov	dx, bx
mov	di, dx
sub	bx, cx		; Integer Subtraction
mov	si, cx
dec	si		; Decrement by 1
mov	ax, cx
xor	bp, bp		; Logical Exclusive OR
jmp	short loc_164C6	; Jump

; ���������������������������������������������������������������������������

loc_164C3:		; Increment by 1
inc	bp
inc	dx		; Increment by 1
dec	di		; Decrement by 1


loc_164C6:		; Integer Subtraction
sub	ax, bp
jns	short loc_164C3	; Jump if Not Sign (SF=0)

call	sub_164EF	; Call Procedure

inc	bx		; Increment by 1
dec	si		; Decrement by 1
add	ax, cx		; Add
js	short loc_164D5	; Jump if Sign (SF=1)

loop	loc_164C3	; Loop while CX	!= 0


loc_164D5:		; Increment by 1
inc	bp
dec	cx		; Decrement by 1
jmp	short loc_164DE	; Jump

; ���������������������������������������������������������������������������

loc_164D9:		; Increment by 1
inc	dx
dec	di		; Decrement by 1
sub	ax, bp		; Integer Subtraction
inc	bp		; Increment by 1


loc_164DE:		; Call Procedure
call	sub_164EF

inc	bx		; Increment by 1
dec	si		; Decrement by 1
add	ax, cx		; Add
jb	short loc_164E9	; Jump if Below	(CF=1)

loop	loc_164DE	; Loop while CX	!= 0


loc_164E9:		; Decrement by 1
dec	cx
jns	short loc_164D9	; Jump if Not Sign (SF=0)

retn			; Return Near from Procedure

sub_164B2 endp

; ���������������������������������������������������������������������������
word_164ED dw 0



sub_164EF proc near
push	ax
push	bx
push	cx
push	dx
push	si
push	di
push	bp
mov	cx, dx
sub	cx, di		; Integer Subtraction
inc	cx		; Increment by 1
mov	dx, di
push	si
push	cx
push	dx
call	cs:word_164ED	; Indirect Call	Near Procedure
pop	dx
pop	cx
pop	bx
call	cs:word_164ED	; Indirect Call	Near Procedure
pop	bp
pop	di
pop	si
pop	dx
pop	cx
pop	bx
pop	ax
retn			; Return Near from Procedure

sub_164EF endp




sub_16515 proc near
call	sub_15D50	; Call Procedure

mov	byte ptr ds:4736h, 44h ; 'D'
xor	cx, cx		; Logical Exclusive OR
mov	cl, [di+0Bh]
mov	cs:word_164ED, offset sub_1653A
mov	ax, [di+0Ch]
mov	ds:0D81Ch, ax
mov	ax, [di+0Eh]
cbw			; AL ->	AX (with sign)
mov	ds:0D818h, ax
call	sub_164B2	; Call Procedure

retn			; Return Near from Procedure

sub_16515 endp




sub_1653A proc near
add	bx, ds:0D818h	; Add
cmp	bx, 56h	; 'V'   ; Compare Two Operands
jg	short locret_165B3 ; Jump if Greater (ZF=0 & SF=OF)

cmp	bx, 0FFAAh	; Compare Two Operands
jl	short locret_165B3 ; Jump if Less (SF!=OF)

push	dx
mov	dx, ds:0D81Ch
call	_sub_1B58B_map_func ; Call Procedure

pop	ax
add	di, ax		; Add
add	dx, ax		; Add
jns	short loc_1655D	; Jump if Not Sign (SF=0)


loc_16557:		; Add
add	di, bp
add	dx, bp		; Add
js	short loc_16557	; Jump if Sign (SF=1)


loc_1655D:
mov	al, es:[di]
mov	ah, al
and	al, 30h		; Logical AND
cmp	al, 10h		; Compare Two Operands
mov	al, ah
jz	short loc_165A7	; Jump if Zero (ZF=1)

test	al, 40h		; Logical Compare
jz	short loc_16593	; Jump if Zero (ZF=1)

call	sub_1409A	; Call Procedure

jnz	short loc_16593	; Jump if Not Zero (ZF=0)

mov	byte ptr [si+12h], 0
call	sub_1E270	; Call Procedure

push	es
mov	di, si
call	sub_15D36	; Call Procedure

jb	short loc_1658F	; Jump if Below	(CF=1)

cmp	di, 138h	; Compare Two Operands
jb	short loc_1658F	; Jump if Below	(CF=1)

and	byte ptr [di+0Ah], 7Fh ; Logical AND
call	loc_17443	; Call Procedure


loc_1658F:
pop	es
call	sub_1E283	; Call Procedure


loc_16593:		; Logical AND
and	ax, 0ECFh
or	al, 20h		; Logical Inclusive OR
cmp	ah, 8		; Compare Two Operands
jnb	short loc_165A7	; Jump if Not Below (CF=0)

rol	byte ptr ds:4736h, 1 ; Rotate Left
jnb	short loc_165A7	; Jump if Not Below (CF=0)

and	al, 0CFh	; Logical AND
or	al, 10h		; Logical Inclusive OR


loc_165A7:		; Store	String
stosb
inc	dx		; Increment by 1
cmp	dx, bp		; Compare Two Operands
jb	short loc_165B1	; Jump if Below	(CF=1)

sub	dx, bp		; Integer Subtraction
sub	di, bp		; Integer Subtraction


loc_165B1:		; Loop while CX	!= 0
loop	loc_1655D


locret_165B3:		; Return Near from Procedure
retn

sub_1653A endp

; ���������������������������������������������������������������������������
word_165B4 dw 1
; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR _sub_163F0_map_func_qq

loc_165B6:
mov	es, word ptr ds:0DD00h
mov	si, cs:word_165B4
xor	bp, bp		; Logical Exclusive OR
mov	cx, 46h	; 'F'


loc_165C4:		; Shift	Logical	Right
shr	si, 1
jnb	short loc_165CC	; Jump if Not Below (CF=0)

xor	si, 402h	; Logical Exclusive OR


loc_165CC:
mov	di, si


loc_165CE:
mov	al, es:[di]
mov	ah, al
and	ah, 30h		; Logical AND
cmp	ah, 10h		; Compare Two Operands
jnz	short loc_165E2	; Jump if Not Zero (ZF=0)

and	al, 0CFh	; Logical AND
or	al, 20h		; Logical Inclusive OR
stosb			; Store	String
dec	di		; Decrement by 1
inc	bp		; Increment by 1


loc_165E2:		; Add
add	di, 7FFh
cmp	di, RES_MAP_SIZE ; Compare Two Operands
jb	short loc_165CE	; Jump if Below	(CF=1)

loop	loc_165C4	; Loop while CX	!= 0

mov	cs:word_165B4, si
or	bp, bp		; Logical Inclusive OR
jz	short locret_16602 ; Jump if Zero (ZF=1)

cmp	byte ptr ds:46EBh, 0 ; Compare Two Operands
jns	short locret_16602 ; Jump if Not Sign (SF=0)

inc	byte ptr ds:46ECh ; Increment by 1


locret_16602:		; Return Near from Procedure
retn

; END OF FUNCTION CHUNK	FOR _sub_163F0_map_func_qq



sub_16603 proc near
push	si
mov	al, [di+9]


loc_16607:		; Logical Inclusive OR
or	al, al
jz	short loc_1661B	; Jump if Zero (ZF=1)

call	sub_16906	; Call Procedure

push	si
push	di
push	bp
call	bp		; Indirect Call	Near Procedure
pop	bp
pop	di
pop	si
mov	al, [si+1]
jmp	short loc_16607	; Jump

; ���������������������������������������������������������������������������

loc_1661B:
pop	si
retn			; Return Near from Procedure

sub_16603 endp




sub_1661D proc near
push	si
mov	al, [di+9]


loc_16621:		; Logical Inclusive OR
or	al, al
jz	short loc_16637	; Jump if Zero (ZF=1)

call	sub_16906	; Call Procedure

jnb	short loc_16632	; Jump if Not Below (CF=0)

push	si
push	di
push	bp
call	bp		; Indirect Call	Near Procedure
pop	bp
pop	di
pop	si


loc_16632:
mov	al, [si+1]
jmp	short loc_16621	; Jump

; ���������������������������������������������������������������������������

loc_16637:
pop	si
retn			; Return Near from Procedure

sub_1661D endp




sub_16639 proc near
call	sub_16603	; Call Procedure

push	si
mov	si, 8AAh


loc_16640:
mov	al, [si+3]
test	al, 40h		; Logical Compare
jz	short loc_16665	; Jump if Zero (ZF=1)

push	bx
mov	bx, [si+4]
and	al, 3		; Logical AND
cmp	al, 3		; Compare Two Operands
jnz	short loc_16654	; Jump if Not Zero (ZF=0)

mov	bx, [si+0Ch]


loc_16654:		; Compare Two Operands
cmp	bx, di
pop	bx
jnz	short loc_16665	; Jump if Not Zero (ZF=0)

push	si
push	di
push	bp
cmp	byte ptr [si+3], 80h ; '�' ; Compare Two Operands
call	bp		; Indirect Call	Near Procedure
pop	bp
pop	di
pop	si


loc_16665:		; Add
add	si, 1Bh
cmp	si, 0FBBh	; Compare Two Operands
jb	short loc_16640	; Jump if Below	(CF=1)

pop	si
retn			; Return Near from Procedure

sub_16639 endp




sub_16670 proc near
mov	bl, [si+3]
and	bl, 0EFh	; Logical AND
xor	cx, cx		; Logical Exclusive OR
mov	bp, offset sub_1667D
jmp	short sub_16603	; Jump

sub_16670 endp




sub_1667D proc near
mov	al, [si+3]
and	al, 0EFh	; Logical AND
cmp	al, bl		; Compare Two Operands
jnz	short locret_1668E ; Jump if Not Zero (ZF=0)

add	cx, [si+0Eh]	; Add
jnb	short locret_1668E ; Jump if Not Below (CF=0)

mov	cx, 0FFFFh


locret_1668E:		; Return Near from Procedure
retn

sub_1667D endp




sub_1668F proc near
test	byte ptr [si+3], 20h ; Logical Compare
jnz	short locret_166B0 ; Jump if Not Zero (ZF=0)

test	byte ptr [si+10h], 80h ; Logical Compare
jnz	short locret_166B0 ; Jump if Not Zero (ZF=0)

or	byte ptr [si+3], 20h ; Logical Inclusive OR
mov	byte ptr [si+19h], 0
mov	ax, ds:2
mov	[si+0Ah], ax
push	di
mov	al, 4
call	sub_16FB0	; Call Procedure

pop	di


locret_166B0:		; Return Near from Procedure
retn

sub_1668F endp




sub_166B1 proc near
call	sub_1858C	; Call Procedure

push	si
push	di
call	sub_16917	; Call Procedure

jnz	short loc_166BE	; Jump if Not Zero (ZF=0)

call	sub_1C58A	; Call Procedure


loc_166BE:
pop	di
pop	si
mov	word ptr [si+4], 0FBCh
mov	byte ptr [si+3], 0A0h ;	'�'
mov	byte ptr [si+1Ah], 0
retn			; Return Near from Procedure

sub_166B1 endp




sub_166CE proc near
test	byte ptr [si+3], 80h ; Logical Compare
jz	short locret_16714 ; Jump if Zero (ZF=1)

test	byte ptr [si+10h], 80h ; Logical Compare
jnz	short locret_16714 ; Jump if Not Zero (ZF=0)

inc	byte ptr ds:28h	; Increment by 1
mov	al, ds:28h
cmp	al, ds:1178h	; Compare Two Operands
jb	short loc_166EE	; Jump if Below	(CF=1)

push	si
mov	al, 4Ch	; 'L'
call	sub_1121F	; Call Procedure

pop	si


loc_166EE:
mov	al, 1
call	sub_16F78	; Call Procedure

and	byte ptr [si+3], 20h ; Logical AND
or	byte ptr [si+3], 2 ; Logical Inclusive OR
call	sub_16B25	; Call Procedure

call	sub_11AC5	; Call Procedure

mov	[si+14h], al
mov	di, [si+4]
cmp	byte ptr [di+0Bh], 0 ; Compare Two Operands
jnz	short locret_16714 ; Jump if Not Zero (ZF=0)

mov	byte ptr [di+0Bh], 2
call	sub_1644E	; Call Procedure


locret_16714:		; Return Near from Procedure
retn

sub_166CE endp




sub_16715 proc near
mov	bp, 0A5C0h


loc_16718:
mov	di, [bp+0]
or	di, di		; Logical Inclusive OR
jz	short loc_16737	; Jump if Zero (ZF=1)

mov	al, [di+9]
or	al, al		; Logical Inclusive OR
jz	short loc_16732	; Jump if Zero (ZF=1)


loc_16726:
push	bp
call	sub_16757	; Call Procedure

pop	bp
mov	al, [si+1]
or	al, al		; Logical Inclusive OR
jnz	short loc_16726	; Jump if Not Zero (ZF=0)


loc_16732:		; Add
add	bp, 6
jmp	short loc_16718	; Jump

; ���������������������������������������������������������������������������

loc_16737:
mov	si, 88Fh


loc_1673A:		; Add
add	si, 1Bh
cmp	si, 0FBBh	; Compare Two Operands
jnb	short locret_16756 ; Jump if Not Below (CF=0)

test	byte ptr [si+10h], 10h ; Logical Compare
jnz	short loc_1673A	; Jump if Not Zero (ZF=0)

test	byte ptr [si+3], 40h ; Logical Compare
jz	short loc_1673A	; Jump if Zero (ZF=1)

mov	al, [si]
call	sub_16757	; Call Procedure

jmp	short loc_1673A	; Jump

; ���������������������������������������������������������������������������

locret_16756:		; Return Near from Procedure
retn

sub_16715 endp




sub_16757 proc near
call	sub_16906	; Call Procedure

call	sub_1686E	; Call Procedure

jb	short locret_1676D ; Jump if Below (CF=1)

call	sub_16770	; Call Procedure

cmp	bp, 1		; Compare Two Operands
jb	short locret_1676D ; Jump if Below (CF=1)

push	si
call	sub_1C5CF	; Call Procedure

pop	si
clc			; Clear	Carry Flag


locret_1676D:		; Return Near from Procedure
retn

sub_16757 endp




sub_1676E proc near
stc			; Set Carry Flag
retn			; Return Near from Procedure

sub_1676E endp




sub_16770 proc near
test	byte ptr [si+10h], 10h ; Logical Compare
jnz	short loc_1678F	; Jump if Not Zero (ZF=0)

mov	al, [si+3]
test	byte ptr [si+10h], 80h ; Logical Compare
jnz	short loc_16792	; Jump if Not Zero (ZF=0)

or	al, al		; Logical Inclusive OR
jns	short loc_16792	; Jump if Not Sign (SF=0)

mov	bp, [si+4]
test	byte ptr [bp+0Ah], 10h ; Logical Compare
mov	bp, 181Fh
jnz	short locret_16791 ; Jump if Not Zero (ZF=0)


loc_1678F:		; Logical Exclusive OR
xor	bp, bp


locret_16791:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_16792:		; Logical Compare
test	al, 40h
jz	short loc_16799	; Jump if Zero (ZF=1)

jmp	sub_16827	; Jump

; ���������������������������������������������������������������������������

loc_16799:		; Logical Compare
test	al, 30h
jz	short loc_167C5	; Jump if Zero (ZF=1)

and	ax, 0Fh		; Logical AND
mov	bp, ax
shl	bp, 1		; Shift	Logical	Left
mov	bp, [bp+16B6h]
or	ax, ax		; Logical Inclusive OR
jnz	short locret_167C4 ; Jump if Not Zero (ZF=0)

mov	al, [si+19h]
and	al, 0C0h	; Logical AND
jz	short locret_167C4 ; Jump if Zero (ZF=1)

mov	bp, 1813h
cmp	al, 80h	; '�'   ; Compare Two Operands
jz	short locret_167C4 ; Jump if Zero (ZF=1)

mov	bp, 1817h
cmp	al, 40h	; '@'   ; Compare Two Operands
jz	short locret_167C4 ; Jump if Zero (ZF=1)

mov	bp, 181Bh


locret_167C4:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_167C5:		; Logical AND
and	ax, 0Fh
jz	short loc_1680A	; Jump if Zero (ZF=1)


loc_167CA:
mov	bp, ax
shl	bp, 1		; Shift	Logical	Left
mov	bp, [bp+179Ch]
cmp	bp, 1774h	; Compare Two Operands
jz	short loc_167ED	; Jump if Zero (ZF=1)

cmp	bp, 1732h	; Compare Two Operands
jnz	short locret_16791 ; Jump if Not Zero (ZF=0)

mov	bp, [si+4]
test	byte ptr [bp+0Ah], 2 ; Logical Compare
mov	bp, 16AAh
jnz	short locret_16791 ; Jump if Not Zero (ZF=0)

mov	bp, 1732h


loc_167ED:
mov	al, [si+2]
dec	al		; Decrement by 1
and	al, 7		; Logical AND
cmp	al, 3		; Compare Two Operands
jb	short locret_16809 ; Jump if Below (CF=1)

add	bp, 0Ah		; Add
cmp	al, 3		; Compare Two Operands
jz	short locret_16809 ; Jump if Zero (ZF=1)

add	bp, 0Ah		; Add
cmp	al, 4		; Compare Two Operands
jz	short locret_16809 ; Jump if Zero (ZF=1)

add	bp, 0Ah		; Add


locret_16809:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1680A:		; Logical Compare
test	byte ptr [si+19h], 0C0h
jz	short loc_167CA	; Jump if Zero (ZF=1)

mov	al, [si+19h]
and	al, 0C0h	; Logical AND
mov	bp, 17BCh
cmp	al, 80h	; '�'   ; Compare Two Operands
jz	short locret_16826 ; Jump if Zero (ZF=1)

mov	bp, 17C9h
cmp	al, 40h	; '@'   ; Compare Two Operands
jz	short locret_16826 ; Jump if Zero (ZF=1)

mov	bp, 1806h


locret_16826:		; Return Near from Procedure
retn

sub_16770 endp




sub_16827 proc near
push	bx
push	dx
push	di
mov	di, [si+4]
mov	ax, [di+2]
mov	bx, [di+4]
sub	ax, [si+6]	; Integer Subtraction
mov	al, ah
cbw			; AL ->	AX (with sign)
mov	dx, ax
mov	di, dx
jns	short loc_16841	; Jump if Not Sign (SF=0)

neg	di		; Two's Complement Negation


loc_16841:		; Integer Subtraction
sub	bx, [si+8]
mov	cx, bx
jns	short loc_1684A	; Jump if Not Sign (SF=0)

neg	cx		; Two's Complement Negation


loc_1684A:
mov	bp, 2
cmp	di, cx		; Compare Two Operands
jb	short loc_16854	; Jump if Below	(CF=1)

dec	bp		; Decrement by 1
xchg	dx, bx		; Exchange Register/Memory with	Register


loc_16854:		; Logical Inclusive OR
or	bx, bx
jns	short loc_1685B	; Jump if Not Sign (SF=0)

xor	bp, 2		; Logical Exclusive OR


loc_1685B:		; Call Procedure
call	sub_1693B

shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
add	bp, ax		; Add
shl	bp, 1		; Shift	Logical	Left
mov	bp, [bp+18BFh]
pop	di
pop	dx
pop	bx
retn			; Return Near from Procedure

sub_16827 endp




sub_1686E proc near
cmp	byte ptr ds:46EBh, 80h ; '�' ; Compare Two Operands
jb	short locret_168AE ; Jump if Below (CF=1)

test	byte ptr [si+3], 40h ; Logical Compare
jnz	short loc_168AF	; Jump if Not Zero (ZF=0)

mov	bl, [si+2]
dec	bx		; Decrement by 1
push	di
mov	di, [si+4]
test	byte ptr [di+0Ah], 2 ; Logical Compare
jz	short loc_1688C	; Jump if Zero (ZF=1)

xor	bl, 8		; Logical Exclusive OR


loc_1688C:
pop	di
and	bx, 0Fh		; Logical AND
add	bx, bx		; Add
mov	al, [bx+1672h]
cbw			; AL ->	AX (with sign)
mov	dx, ax
mov	al, [bx+1673h]
cbw			; AL ->	AX (with sign)
add	dx, [bp+2]	; Add
mov	bx, [bp+4]
cmp	bh, 80h	; '�'   ; Compare Two Operands
jb	short locret_168AE ; Jump if Below (CF=1)

xor	bh, bh		; Logical Exclusive OR
add	bx, ax		; Add
clc			; Clear	Carry Flag


locret_168AE:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_168AF:
mov	dx, [si+6]
mov	bx, [si+8]
call	sub_1B647	; Call Procedure

cmp	dx, 0FFF0h	; Compare Two Operands
jle	short loc_168D0	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

cmp	bx, 0FFF0h	; Compare Two Operands
jle	short loc_168D0	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

cmp	dx, 148h	; Compare Two Operands
jge	short loc_168D0	; Jump if Greater or Equal (SF=OF)

cmp	bx, 0A0h ; '�'  ; Compare Two Operands
jge	short loc_168D0	; Jump if Greater or Equal (SF=OF)

clc			; Clear	Carry Flag
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_168D0:		; Set Carry Flag
stc
retn			; Return Near from Procedure

sub_1686E endp




sub_168D2 proc near
xor	cx, cx		; Logical Exclusive OR
mov	bp, offset sub_168DA
jmp	sub_16603	; Jump

sub_168D2 endp




sub_168DA proc near
test	byte ptr [si+10h], 10h ; Logical Compare
jz	short locret_168EA ; Jump if Zero (ZF=1)


loc_168E0:		; Logical AND
and	byte ptr [si+10h], 0EFh
inc	cx		; Increment by 1
push	cx
call	loc_1846C	; Call Procedure

pop	cx


locret_168EA:		; Return Near from Procedure
retn

sub_168DA endp




sub_168EB proc near
mov	al, ds:1954h
cmp	byte ptr ds:46EBh, 80h ; '�' ; Compare Two Operands
jnb	short sub_16906	; Jump if Not Below (CF=0)

mov	al, ds:476Ch
xor	ah, ah		; Logical Exclusive OR
add	ax, ax		; Add
mov	si, ax
mov	si, [si+4758h]
mov	al, [si]
jmp	short loc_16912	; Jump

sub_168EB endp




sub_16906 proc near
mov	si, ax
dec	al		; Decrement by 1
mov	ah, 1Bh
mul	ah		; Unsigned Multiplication of AL	or AX
add	ax, 8AAh	; Add
xchg	ax, si		; Exchange Register/Memory with	Register


loc_16912:		; Compare Two Operands
cmp	byte ptr [si+3], 80h ; '�'
retn			; Return Near from Procedure

sub_16906 endp




sub_16917 proc near
cmp	byte ptr ds:46EBh, 0 ; Compare Two Operands
mov	di, 3CAFh
jns	short loc_16938	; Jump if Not Sign (SF=0)

mov	cx, ds:3CBEh


loc_16925:		; Jump if CX is	0
jcxz	short loc_16938


loc_16927:		; Add
add	di, 11h
cmp	[di+0Ah], si	; Compare Two Operands
loopne	loc_16927	; Loop while rCX != 0 and ZF=0

jnz	short locret_16937 ; Jump if Not Zero (ZF=0)

test	byte ptr [di+0Ch], 40h ; Logical Compare
jnz	short loc_16925	; Jump if Not Zero (ZF=0)


locret_16937:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_16938:		; Logical Inclusive OR
or	di, di
retn			; Return Near from Procedure

sub_16917 endp




sub_1693B proc near
mov	al, [si+3]
and	ax, 0Fh		; Logical AND
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
retn			; Return Near from Procedure

sub_1693B endp




sub_16946 proc near
mov	si, 3CBEh
lodsw			; Load String
mov	cx, ax
jcxz	short loc_16972	; Jump if CX is	0

mov	al, 11h
mul	cl		; Unsigned Multiplication of AL	or AX
add	si, ax		; Add


loc_16954:		; Integer Subtraction
sub	si, 11h
cmp	[si], dx	; Compare Two Operands
jge	short loc_16970	; Jump if Greater or Equal (SF=OF)

cmp	[si+2],	bx	; Compare Two Operands
jge	short loc_16970	; Jump if Greater or Equal (SF=OF)

cmp	dx, [si+4]	; Compare Two Operands
jge	short loc_16970	; Jump if Greater or Equal (SF=OF)

test	byte ptr [si+0Ch], 40h ; Logical Compare
jnz	short loc_16970	; Jump if Not Zero (ZF=0)

cmp	bx, [si+6]	; Compare Two Operands
jl	short loc_16974	; Jump if Less (SF!=OF)


loc_16970:		; Loop while CX	!= 0
loop	loc_16954


loc_16972:		; Clear	Carry Flag
clc
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_16974:
mov	di, [si+0Ah]
cmp	byte ptr [di+3], 80h ; '�' ; Compare Two Operands
retn			; Return Near from Procedure

sub_16946 endp




sub_1697C proc near
call	sub_16917	; Call Procedure

jnz	short locret_169A2 ; Jump if Not Zero (ZF=0)

test	byte ptr [si+3], 40h ; Logical Compare
jnz	short loc_1698F	; Jump if Not Zero (ZF=0)

mov	di, [si+4]
call	sub_15ED0	; Call Procedure

jnz	short locret_169A2 ; Jump if Not Zero (ZF=0)


loc_1698F:		; Call Procedure
call	sub_1686E

jb	short locret_169A2 ; Jump if Below (CF=1)

mov	bp, 18FDh
call	sub_1C5CF	; Call Procedure

or	byte ptr [di+0Ch], 40h ; Logical Inclusive OR
mov	ds:4752h, di


locret_169A2:		; Return Near from Procedure
retn

sub_1697C endp




sub_169A3 proc near
push	di
xor	di, di		; Logical Exclusive OR
xchg	di, ds:4752h	; Exchange Register/Memory with	Register
or	di, di		; Logical Inclusive OR
jz	short loc_169B1	; Jump if Zero (ZF=1)

call	sub_1C58A	; Call Procedure


loc_169B1:
pop	di
retn			; Return Near from Procedure

sub_169A3 endp




sub_169B3 proc near
call	sub_168EB	; Call Procedure

mov	bp, 215Ah
mov	al, [si+3]
and	al, 0Fh		; Logical AND
cmp	al, 2		; Compare Two Operands
jz	short loc_16A07	; Jump if Zero (ZF=1)

call	sub_1693B	; Call Procedure

mov	bp, 216Eh
cmp	ax, 1		; Compare Two Operands
jb	short loc_169F6	; Jump if Below	(CF=1)

mov	bp, 21A6h
jnz	short loc_169F6	; Jump if Not Zero (ZF=0)

mov	bp, 2182h
and	word ptr ds:2188h, 0BFFFh ; Logical AND
cmp	word ptr ds:0E2h, 1Eh ;	Compare	Two Operands
jb	short loc_169E8	; Jump if Below	(CF=1)

or	word ptr ds:2188h, 4000h ; Logical Inclusive OR


loc_169E8:
mov	al, [si+3]
and	al, 0Fh		; Logical AND
cmp	al, 5		; Compare Two Operands
jnz	short loc_169F6	; Jump if Not Zero (ZF=0)

mov	bp, 219Ah
jmp	short loc_16A25	; Jump

; ���������������������������������������������������������������������������

loc_169F6:		; Logical AND
and	word ptr [bp+2], 0BFFFh
cmp	byte ptr ds:2Ah, 10h ; Compare Two Operands
jnb	short loc_16A07	; Jump if Not Below (CF=0)

or	word ptr [bp+2], 4000h ; Logical Inclusive OR


loc_16A07:		; Load Effective Address
lea	bx, [bp-2]


loc_16A0A:		; Add
add	bx, 4
mov	ax, [bx]
and	ax, 0FFFh	; Logical AND
jz	short loc_16A25	; Jump if Zero (ZF=1)

cmp	ax, 77h	; 'w'   ; Compare Two Operands
jnz	short loc_16A0A	; Jump if Not Zero (ZF=0)

test	byte ptr ds:0Ah, 20h ; Logical Compare
jnz	short loc_16A23	; Jump if Not Zero (ZF=0)

or	ax, 4000h	; Logical Inclusive OR


loc_16A23:
mov	[bx], ax


loc_16A25:
mov	bx, 0F66h
jmp	sub_1D323	; Jump

sub_169B3 endp




sub_16A2B proc near
mov	al, 1
jmp	short loc_16A35	; Jump

sub_16A2B endp




sub_16A2F proc near
mov	al, 2
jmp	short loc_16A35	; Jump

sub_16A2F endp




sub_16A33 proc near
mov	al, 3


loc_16A35:
push	ax
call	sub_168EB	; Call Procedure

pop	ax
mov	cl, [si+3]
and	cl, 0Ch		; Logical AND
or	cl, al		; Logical Inclusive OR
jmp	short loc_16A89	; Jump

; ���������������������������������������������������������������������������
db 90h
; ���������������������������������������������������������������������������
mov	al, 1
call	loc_16A35	; Call Procedure

mov	byte ptr ds:46D8h, 1
call	sub_168EB	; Call Procedure

and	byte ptr [si+10h], 0BFh	; Logical AND
mov	di, [si+4]
call	sub_1331E	; Call Procedure

mov	di, ds:0E4h
call	sub_182DA	; Call Procedure

jnz	short sub_16AC5	; Jump if Not Zero (ZF=0)

call	sub_18770	; Call Procedure

jmp	sub_184A6	; Jump

; ���������������������������������������������������������������������������
call	sub_18770	; Call Procedure

jmp	short sub_16AC5	; Jump

; ���������������������������������������������������������������������������
db  90h	; �
; ���������������������������������������������������������������������������
call	sub_168EB	; Call Procedure

xor	cl, cl		; Logical Exclusive OR
cmp	si, 8E0h	; Compare Two Operands
jnz	short loc_16A89	; Jump if Not Zero (ZF=0)

inc	cx		; Increment by 1
call	loc_16A89	; Call Procedure

jmp	sub_12EBF	; Jump

; ���������������������������������������������������������������������������
mov	cl, 4
jmp	short loc_16A89	; Jump

; ���������������������������������������������������������������������������
mov	cl, 8


loc_16A89:		; Call Procedure
call	sub_168EB

mov	al, [si+3]
and	al, 0Fh		; Logical AND
cmp	al, cl		; Compare Two Operands
jz	short loc_16AB5	; Jump if Zero (ZF=1)

push	word ptr [si+3]
push	si
push	word ptr [si+12h]
call	loc_16ACB	; Call Procedure

call	sub_1A1C4	; Call Procedure

mov	al, 0Ah
call	sub_17BB9	; Call Procedure

call	sub_1A1E2	; Call Procedure

pop	ax
pop	si
pop	cx
jz	short loc_16AB8	; Jump if Zero (ZF=1)

mov	[si+12h], ax
call	loc_16ACB	; Call Procedure


loc_16AB5:		; Jump
jmp	sub_1D2E2

; ���������������������������������������������������������������������������

loc_16AB8:		; Call Procedure
call	sub_1693B

or	al, al		; Logical Inclusive OR
jz	short loc_16AB5	; Jump if Zero (ZF=1)

and	byte ptr [si+19h], 7Fh ; Logical AND
jmp	short loc_16AB5	; Jump

sub_16A33 endp




sub_16AC5 proc near
mov	cl, [si+3]
and	cl, 0FCh	; Logical AND


loc_16ACB:
mov	al, [si+3]
and	al, 0Fh		; Logical AND
cmp	al, cl		; Compare Two Operands
jz	short locret_16B24 ; Jump if Zero (ZF=1)

sub_16AC5 endp




sub_16AD4 proc near
mov	di, [si+4]
cmp	cl, 8		; Compare Two Operands
jnz	short loc_16AEA	; Jump if Not Zero (ZF=0)

cmp	di, 7C8h	; Compare Two Operands
jnz	short loc_16AEA	; Jump if Not Zero (ZF=0)

cmp	byte ptr [di+1Ah], 0 ; Compare Two Operands
jnz	short loc_16AEA	; Jump if Not Zero (ZF=0)

mov	cl, 0Ah


loc_16AEA:
mov	[si+3],	cl
and	byte ptr [si+12h], 0CFh	; Logical AND
and	word ptr [si+10h], 0FEFFh ; Logical AND
call	sub_16C15	; Call Procedure

jb	short loc_16B00	; Jump if Below	(CF=1)

or	word ptr [si+10h], 100h	; Logical Inclusive OR


loc_16B00:		; Call Procedure
call	sub_18461

call	sub_16B25	; Call Procedure

cmp	byte ptr [si+3], 2 ; Compare Two Operands
jz	short loc_16B19	; Jump if Zero (ZF=1)

call	sub_1693B	; Call Procedure

mov	cl, al
mov	ax, 2000h
shl	ax, cl		; Shift	Logical	Left
or	[si+12h], ax	; Logical Inclusive OR


loc_16B19:
mov	al, [si]
cmp	al, ds:1954h	; Compare Two Operands
jnz	short locret_16B24 ; Jump if Not Zero (ZF=0)

call	sub_17847	; Call Procedure


locret_16B24:		; Return Near from Procedure
retn

sub_16AD4 endp




sub_16B25 proc near
mov	ax, ds:2
mov	[si+0Ah], ax
xor	ax, ax		; Logical Exclusive OR
mov	[si+0Ch], ax
mov	[si+0Eh], ax
retn			; Return Near from Procedure

sub_16B25 endp




sub_16B34 proc near
inc	byte ptr ds:46F6h ; Increment by 1
mov	al, ds:46F6h
and	al, 3		; Logical AND
jz	short loc_16B4B	; Jump if Zero (ZF=1)

mov	cx, 1
mov	di, ds:4752h
or	di, di		; Logical Inclusive OR
jnz	short loc_16B55	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_16B4B:
mov	si, 3CBEh
lodsw			; Load String
mov	cx, ax
jcxz	short locret_16B89 ; Jump if CX	is 0

mov	di, si


loc_16B55:		; Logical Compare
test	byte ptr [di+0Ch], 1
jz	short loc_16B84	; Jump if Zero (ZF=1)

mov	si, [di+0Dh]
lodsb			; Load String
or	al, al		; Logical Inclusive OR
jnz	short loc_16B6D	; Jump if Not Zero (ZF=0)

mov	si, [di+0Fh]
lodsb			; Load String
test	byte ptr [di+0Ch], 2 ; Logical Compare
jnz	short loc_16B84	; Jump if Not Zero (ZF=0)


loc_16B6D:		; Logical Exclusive OR
xor	ah, ah
mov	[di+8],	ax
lodsb			; Load String
cbw			; AL ->	AX (with sign)
mov	dx, ax
lodsb			; Load String
cbw			; AL ->	AX (with sign)
mov	bx, ax
mov	[di+0Dh], si
push	cx
push	di
call	sub_1C661	; Call Procedure

pop	di
pop	cx


loc_16B84:		; Add
add	di, 11h
loop	loc_16B55	; Loop while CX	!= 0


locret_16B89:		; Return Near from Procedure
retn

sub_16B34 endp




sub_16B8A proc near
mov	ah, [di+0Ah]
and	ah, 41h		; Logical AND
cmp	ah, 1		; Compare Two Operands
cmc			; Complement Carry Flag
jmp	short loc_16BB6	; Jump

sub_16B8A endp




sub_16B96 proc near
test	word ptr [si+10h], 200h	; Logical Compare
stc			; Set Carry Flag
jnz	short loc_16BB6	; Jump if Not Zero (ZF=0)

test	word ptr [si+12h], 30h ; Logical Compare
stc			; Set Carry Flag
jnz	short loc_16BB6	; Jump if Not Zero (ZF=0)

cmp	byte ptr [di+12h], 1 ; Compare Two Operands
jb	short loc_16BB6	; Jump if Below	(CF=1)

mov	al, [di+0Ah]
xor	al, 40h		; Logical Exclusive OR
and	al, 41h		; Logical AND
jz	short loc_16BB6	; Jump if Zero (ZF=1)

stc			; Set Carry Flag


loc_16BB6:		; Push Flags Register onto the Stack
pushf
sbb	ah, ah		; Integer Subtraction with Borrow
mov	al, [si+3]
and	ax, 1010h	; Logical AND
cmp	al, ah		; Compare Two Operands
jz	short loc_16BD5	; Jump if Zero (ZF=1)

xor	byte ptr [si+3], 10h ; Logical Exclusive OR
push	ax
push	di
call	sub_18461	; Call Procedure

pop	di
pop	ax
test	al, 10h		; Logical Compare
jz	short loc_16BD5	; Jump if Zero (ZF=1)

call	sub_16B25	; Call Procedure


loc_16BD5:		; Pop Stack into Flags Register
popf
retn			; Return Near from Procedure

sub_16B96 endp




sub_16BD7 proc near
test	word ptr [si+12h], 30h ; Logical Compare
stc			; Set Carry Flag
jnz	short loc_16BB6	; Jump if Not Zero (ZF=0)

cmp	byte ptr [di+1Bh], 1 ; Compare Two Operands
jb	short loc_16BB6	; Jump if Below	(CF=1)

test	byte ptr [di+0Ah], 20h ; Logical Compare
stc			; Set Carry Flag
jz	short loc_16BB6	; Jump if Zero (ZF=1)

mov	al, [si+19h]
and	al, 2		; Logical AND
cmp	al, 1		; Compare Two Operands
jmp	short loc_16BB6	; Jump

sub_16BD7 endp

; ���������������������������������������������������������������������������
off_16BF5 dw offset sub_16B96
dw offset sub_16B8A
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset sub_16BD7
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1



sub_16C15 proc near
mov	di, [si+4]
mov	bl, [si+3]
and	bx, 0Fh		; Logical AND
shl	bx, 1		; Shift	Logical	Left
clc			; Clear	Carry Flag
jmp	cs:off_16BF5[bx] ; Indirect Near Jump

sub_16C15 endp

; ���������������������������������������������������������������������������
off_16C26 dw offset sub_16FE5
dw offset sub_170CC
dw offset nullsub_1
dw offset nullsub_1
dw offset sub_171EF
dw offset sub_172B0
dw offset _sub_1739E_map_func
dw offset nullsub_1
dw offset sub_17693
dw offset sub_17711
dw offset sub_1767D
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1



sub_16C46 proc near
mov	al, ds:2Ah
sub	al, 2Dh	; '-'   ; Integer Subtraction
cmp	al, 3		; Compare Two Operands
jnb	short locret_16C6E ; Jump if Not Below (CF=0)

test	word ptr ds:10h, 10h ; Logical Compare
jnz	short locret_16C6E ; Jump if Not Zero (ZF=0)

mov	di, ds:473Ch
or	di, di		; Logical Inclusive OR
jz	short locret_16C6E ; Jump if Zero (ZF=1)

call	sub_1331E	; Call Procedure

cmp	byte ptr ds:66h, 0 ; Compare Two Operands
jz	short locret_16C6E ; Jump if Zero (ZF=1)

mov	al, 30h	; '0'
jmp	sub_1121F	; Jump

; ���������������������������������������������������������������������������

locret_16C6E:		; Return Near from Procedure
retn

sub_16C46 endp




sub_16C6F proc near
xor	si, si		; Logical Exclusive OR
mov	ax, ds:101Ah
cmp	al, 80h	; '�'   ; Compare Two Operands
jnz	short loc_16C83	; Jump if Not Zero (ZF=0)

mov	al, 1Ch
dec	ah		; Decrement by 1
mul	ah		; Unsigned Multiplication of AL	or AX
add	ax, 100h	; Add
mov	si, ax


loc_16C83:
mov	ds:473Ch, si
call	sub_16C46	; Call Procedure

mov	byte ptr ds:4737h, 0
mov	si, 8AAh


loc_16C92:		; Logical Compare
test	word ptr [si+12h], 430h
jnz	short loc_16CD3	; Jump if Not Zero (ZF=0)

cmp	byte ptr [si+1Ah], 14h ; Compare Two Operands
jnb	short loc_16CA4	; Jump if Not Below (CF=0)

call	sub_16D19	; Call Procedure

jb	short loc_16CC3	; Jump if Below	(CF=1)


loc_16CA4:
mov	al, [si+3]
test	al, 0A0h	; Logical Compare
jnz	short loc_16CC3	; Jump if Not Zero (ZF=0)

test	al, 40h		; Logical Compare
jnz	short loc_16CED	; Jump if Not Zero (ZF=0)

and	ax, 0Fh		; Logical AND
mov	bx, ax
shl	bx, 1		; Shift	Logical	Left
push	si
mov	di, [si+4]
call	cs:off_16C26[bx] ; Indirect Call Near Procedure

pop	si
call	sub_16D7B	; Call Procedure


loc_16CC3:		; Add
add	si, 1Bh
cmp	si, 0FBBh	; Compare Two Operands
jb	short loc_16C92	; Jump if Below	(CF=1)

mov	al, ds:4737h
mov	ds:0FAh, al
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_16CD3:		; Logical Compare
test	byte ptr [si+3], 40h
jnz	short loc_16CED	; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:0FAh, 0 ; Compare Two Operands
jz	short loc_16CC3	; Jump if Zero (ZF=1)

and	byte ptr [si+12h], 0CFh	; Logical AND
test	word ptr [si+12h], 400h	; Logical Compare
jnz	short loc_16CC3	; Jump if Not Zero (ZF=0)

jmp	short loc_16C92	; Jump

; ���������������������������������������������������������������������������

loc_16CED:
mov	al, [si]
cmp	al, ds:1954h	; Compare Two Operands
jz	short loc_16CC3	; Jump if Zero (ZF=1)

push	si
call	sub_18308	; Call Procedure

pop	si
jmp	short loc_16CC3	; Jump

sub_16C6F endp




sub_16CFC proc near
cmp	byte ptr [di+8], 20h ; ' ' ; Compare Two Operands
jnb	short locret_16D18 ; Jump if Not Below (CF=0)

cmp	byte ptr [di+0Bh], 0Ch ; Compare Two Operands
jnb	short locret_16D18 ; Jump if Not Below (CF=0)

test	byte ptr [di+0Ah], 1 ; Logical Compare
jnz	short locret_16D18 ; Jump if Not Zero (ZF=0)

inc	byte ptr [di+0Bh] ; Increment by 1
push	si
push	di
call	sub_1644E	; Call Procedure

pop	di
pop	si


locret_16D18:		; Return Near from Procedure
retn

sub_16CFC endp




sub_16D19 proc near
test	byte ptr [si+3], 0E3h ;	Logical	Compare
jnz	short locret_16D5E ; Jump if Not Zero (ZF=0)

test	byte ptr [si+10h], 80h ; Logical Compare
jnz	short locret_16D5E ; Jump if Not Zero (ZF=0)

cmp	si, 8E0h	; Compare Two Operands
jz	short locret_16D5E ; Jump if Zero (ZF=1)

mov	di, [si+4]
xor	bx, bx		; Logical Exclusive OR
mov	cl, [si+1Ah]
not	cl		; One's Complement Negation
mov	dx, si
mov	bp, offset sub_16D5F
call	sub_1661D	; Call Procedure

or	bx, bx		; Logical Inclusive OR
jz	short locret_16D5E ; Jump if Zero (ZF=1)

mov	al, [si+1Ah]
add	[bx+1Ah], al	; Add
mov	al, [si+19h]
mov	ah, al
and	al, [bx+19h]	; Logical AND
mov	[si+19h], al
or	[bx+19h], ah	; Logical Inclusive OR
or	word ptr [bx+12h], 200h	; Logical Inclusive OR
call	sub_166B1	; Call Procedure

stc			; Set Carry Flag


locret_16D5E:		; Return Near from Procedure
retn

sub_16D19 endp




sub_16D5F proc near
test	byte ptr [si+3], 0A0h ;	Logical	Compare
jnz	short locret_16D7A ; Jump if Not Zero (ZF=0)

cmp	si, 8E0h	; Compare Two Operands
jz	short locret_16D7A ; Jump if Zero (ZF=1)

cmp	si, dx		; Compare Two Operands

loc_16D6D:		; Jump if Zero (ZF=1)
jz	short locret_16D7A

mov	al, [si+1Ah]
cmp	cl, al		; Compare Two Operands
jb	short locret_16D7A ; Jump if Below (CF=1)

mov	bx, si
mov	cl, al


locret_16D7A:		; Return Near from Procedure
retn

sub_16D5F endp




sub_16D7B proc near
test	word ptr ds:2, 3Fh ; Logical Compare
jz	short loc_16D84	; Jump if Zero (ZF=1)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_16D84:		; Call Procedure
call	sub_1693B

mov	cl, al
mov	ax, 0C000h
rol	ax, cl		; Rotate Left
and	ax, [si+12h]	; Logical AND
jz	short locret_16DBA ; Jump if Zero (ZF=1)

shl	ax, 1		; Shift	Logical	Left
jnb	short loc_16DA0	; Jump if Not Below (CF=0)

cmp	byte ptr [si+18h], 0 ; Compare Two Operands
jz	short loc_16DA0	; Jump if Zero (ZF=1)

dec	byte ptr [si+18h] ; Decrement by 1


loc_16DA0:		; Shift	Logical	Left
shl	ax, 1
jnb	short loc_16DAD	; Jump if Not Below (CF=0)

cmp	byte ptr [si+17h], 0 ; Compare Two Operands
jz	short loc_16DAD	; Jump if Zero (ZF=1)

dec	byte ptr [si+17h] ; Decrement by 1


loc_16DAD:		; Shift	Logical	Left
shl	ax, 1
jnb	short locret_16DBA ; Jump if Not Below (CF=0)

cmp	byte ptr [si+16h], 0 ; Compare Two Operands
jz	short locret_16DBA ; Jump if Zero (ZF=1)

dec	byte ptr [si+16h] ; Decrement by 1


locret_16DBA:		; Return Near from Procedure
retn

sub_16D7B endp




sub_16DBB proc near
push	si
call	sub_140AE	; Call Procedure

mov	si, 0FD8h
mov	cx, 0Ch


loc_16DC5:		; Compare Two Operands
cmp	bx, [si+2]
jnz	short loc_16DD6	; Jump if Not Zero (ZF=0)

mov	ax, [si]
mov	ah, dh
cmp	al, 1		; Compare Two Operands
jz	short loc_16DD4	; Jump if Zero (ZF=1)

mov	al, 2


loc_16DD4:
mov	[si], ax


loc_16DD6:		; Add
add	si, 10h
loop	loc_16DC5	; Loop while CX	!= 0

cmp	bx, ds:6	; Compare Two Operands
jnz	short loc_16DFB	; Jump if Not Zero (ZF=0)

or	byte ptr ds:473Bh, 80h ; Logical Inclusive OR
mov	ax, ds:4
mov	ah, dh
cmp	al, 1		; Compare Two Operands
jz	short loc_16DF1	; Jump if Zero (ZF=1)

mov	al, 2


loc_16DF1:
mov	ds:4, ax
mov	ds:0Bh,	al
mov	ds:8, ah


loc_16DFB:
pop	si
mov	bp, offset sub_16E0F
call	sub_16603	; Call Procedure

sub_16DBB endp




sub_16E02 proc near
xor	cx, cx		; Logical Exclusive OR
mov	bp, offset loc_1764D
call	sub_16603	; Call Procedure

or	cx, cx		; Logical Inclusive OR
jnz	short sub_16E02	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

sub_16E02 endp




sub_16E0F proc near
test	word ptr [si+10h], 20h ; Logical Compare
jz	short locret_16E1F ; Jump if Zero (ZF=1)

and	word ptr [si+10h], 0FFDFh ; Logical AND
or	word ptr [si+12h], 1000h ; Logical Inclusive OR


locret_16E1F:		; Return Near from Procedure
retn

sub_16E0F endp




sub_16E20 proc near
cmp	byte ptr ds:46DEh, 0 ; Compare Two Operands
jnz	short loc_16E28	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_16E28:		; Logical Compare
test	byte ptr [di+0Ah], 8
jz	short loc_16E4B	; Jump if Zero (ZF=1)

call	sub_11AC5	; Call Procedure

sub	al, [di+0Bh]	; Integer Subtraction
cmp	al, 0FEh ; '�'  ; Compare Two Operands
jnb	short locret_16E81 ; Jump if Not Below (CF=0)

and	byte ptr [di+0Ah], 0F7h	; Logical AND
and	byte ptr [di+8], 7 ; Logical AND
inc	byte ptr ds:27h	; Increment by 1
call	sub_16DBB	; Call Procedure

mov	byte ptr [di+0Bh], 5


loc_16E4B:		; Call Procedure
call	sub_16CFC

call	sub_11AC5	; Call Procedure

sub	al, [si+14h]	; Integer Subtraction
cmp	al, 8		; Compare Two Operands
jbe	short loc_16E5D	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	al, 1
call	sub_16F93	; Call Procedure


loc_16E5D:
mov	al, [si]
cmp	al, [di+9]	; Compare Two Operands
jnz	short locret_16E81 ; Jump if Not Zero (ZF=0)

xor	dx, dx		; Logical Exclusive OR
mov	bp, 6E82h
call	sub_1661D	; Call Procedure

cmp	dl, 3		; Compare Two Operands
jnz	short locret_16E81 ; Jump if Not Zero (ZF=0)

mov	bp, 6EA8h
call	sub_1661D	; Call Procedure

mov	ax, 302h
push	si
push	di
call	sub_129F0	; Call Procedure

pop	di
pop	si


locret_16E81:		; Return Near from Procedure
retn

sub_16E20 endp




sub_16E82 proc near
cmp	di, ds:114Eh	; Compare Two Operands
jz	short locret_16EA7 ; Jump if Zero (ZF=1)

cmp	byte ptr [di+8], 21h ; '!' ; Compare Two Operands
jnb	short locret_16EA7 ; Jump if Not Below (CF=0)

cmp	byte ptr [si+15h], 28h ; '(' ; Compare Two Operands
jnb	short locret_16EA7 ; Jump if Not Below (CF=0)

mov	al, [si+3]
and	al, 2Fh		; Logical AND
jnz	short locret_16EA7 ; Jump if Not Zero (ZF=0)

mov	dh, 1
test	byte ptr [si+12h], 80h ; Logical Compare
jz	short loc_16EA5	; Jump if Zero (ZF=1)

shl	dh, 1		; Shift	Logical	Left


loc_16EA5:		; Logical Inclusive OR
or	dl, dh


locret_16EA7:		; Return Near from Procedure
retn

sub_16E82 endp




sub_16EA8 proc near
cmp	byte ptr [si+15h], 28h ; '(' ; Compare Two Operands
jnb	short locret_16EBE ; Jump if Not Below (CF=0)

mov	al, [si+3]
and	al, 2Fh		; Logical AND
and	al, 0FBh	; Logical AND
jnz	short locret_16EBE ; Jump if Not Zero (ZF=0)

call	sub_17085	; Call Procedure

or	byte ptr [si+12h], 10h ; Logical Inclusive OR


locret_16EBE:		; Return Near from Procedure
retn

sub_16EA8 endp




sub_16EBF proc near
push	di
mov	di, [si+4]
mov	bp, offset sub_16ECB
call	sub_1661D	; Call Procedure

pop	di
retn			; Return Near from Procedure

sub_16EBF endp




sub_16ECB proc near
test	byte ptr [si+12h], 10h ; Logical Compare
jz	short locret_16EDA ; Jump if Zero (ZF=1)

mov	cl, [si+3]
and	cl, 0Fh		; Logical AND
jmp	sub_16AD4	; Jump

; ���������������������������������������������������������������������������

locret_16EDA:		; Return Near from Procedure
retn

sub_16ECB endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_171EF

loc_16EDB:
mov	al, 1

; END OF FUNCTION CHUNK	FOR sub_171EF



sub_16EDD proc near
mov	dl, [bx+si+16h]
add	al, dl		; Add
cmp	al, 5Fh	; '_'   ; Compare Two Operands
jbe	short loc_16EE8	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	al, 5Fh	; '_'


loc_16EE8:
mov	[bx+si+16h], al
xor	al, dl		; Logical Exclusive OR
and	al, 0F0h	; Logical AND
jz	short locret_16EFC ; Jump if Zero (ZF=1)

mov	ax, [si+10h]
and	al, 0FCh	; Logical AND
inc	bx		; Increment by 1
or	al, bl		; Logical Inclusive OR
mov	[si+10h], ax


locret_16EFC:		; Return Near from Procedure
retn

sub_16EDD endp




sub_16EFD proc near
mov	ah, [si+3]
and	ah, 0Fh		; Logical AND
mov	al, [si+15h]
cmp	byte ptr ds:0FAh, 0 ; Compare Two Operands
jz	short loc_16F0F	; Jump if Zero (ZF=1)

add	al, 14h		; Add


loc_16F0F:		; Compare Two Operands
cmp	ah, 6
jnz	short loc_16F23	; Jump if Not Zero (ZF=0)

push	di
mov	di, [si+4]
cmp	di, ds:114Eh	; Compare Two Operands
pop	di
jnz	short loc_16F31	; Jump if Not Zero (ZF=0)

add	al, 1Eh		; Add
jmp	short loc_16F2B	; Jump

; ���������������������������������������������������������������������������

loc_16F23:		; Logical AND
and	ah, 0FEh
cmp	ah, 8		; Compare Two Operands
jz	short loc_16F2F	; Jump if Zero (ZF=1)


loc_16F2B:		; Compare Two Operands
cmp	al, 64h	; 'd'
jb	short loc_16F31	; Jump if Below	(CF=1)


loc_16F2F:
mov	al, 64h	; 'd'


loc_16F31:		; Compare Two Operands
cmp	byte ptr ds:2Ah, 64h ; 'd'
jb	short locret_16F47 ; Jump if Below (CF=1)

cmp	byte ptr ds:2Ah, 68h ; 'h' ; Compare Two Operands
jnb	short locret_16F47 ; Jump if Not Below (CF=0)

sub	al, 28h	; '('   ; Integer Subtraction
cmp	al, 0Ah		; Compare Two Operands
jge	short locret_16F47 ; Jump if Greater or	Equal (SF=OF)

mov	al, 0Ah


locret_16F47:		; Return Near from Procedure
retn

sub_16EFD endp




sub_16F48 proc near
add	[si+15h], al	; Add
cmp	byte ptr [si+15h], 64h ; 'd' ; Compare Two Operands
jbe	short locret_16F55 ; Jump if Below or Equal (CF=1 | ZF=1)

mov	byte ptr [si+15h], 64h ; 'd'


locret_16F55:		; Return Near from Procedure
retn

sub_16F48 endp




sub_16F56 proc near
push	si
mov	si, 8AAh


loc_16F5A:		; Logical Compare
test	byte ptr [si+3], 0A0h
jnz	short loc_16F6D	; Jump if Not Zero (ZF=0)

add	[si+15h], al	; Add
cmp	byte ptr [si+15h], 64h ; 'd' ; Compare Two Operands
jbe	short loc_16F6D	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	byte ptr [si+15h], 64h ; 'd'


loc_16F6D:		; Add
add	si, 1Bh
cmp	si, 0FBBh	; Compare Two Operands
jb	short loc_16F5A	; Jump if Below	(CF=1)

pop	si
retn			; Return Near from Procedure

sub_16F56 endp




sub_16F78 proc near
mov	ah, ds:29h
add	al, ah		; Add
cmp	al, 0C8h ; '�'  ; Compare Two Operands
jbe	short loc_16F84	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	al, 0C8h ; '�'


loc_16F84:
mov	ds:29h,	al
and	ax, 0FCFCh	; Logical AND
sub	al, ah		; Integer Subtraction
shr	al, 1		; Shift	Logical	Right
shr	al, 1		; Shift	Logical	Right
jnz	short sub_16F56	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

sub_16F78 endp




sub_16F93 proc near
sub	[si+15h], al	; Integer Subtraction
jnb	short loc_16F9C	; Jump if Not Below (CF=0)

mov	byte ptr [si+15h], 0


loc_16F9C:		; Compare Two Operands
cmp	byte ptr [si+15h], 5
jnb	short locret_16FAF ; Jump if Not Below (CF=0)

mov	byte ptr [si+15h], 4
push	ax
call	sub_17085	; Call Procedure

or	word ptr [si+12h], 20h ; Logical Inclusive OR
pop	ax


locret_16FAF:		; Return Near from Procedure
retn

sub_16F93 endp




sub_16FB0 proc near
mov	ah, al
mov	al, ds:29h
sub	al, ah		; Integer Subtraction
ja	short loc_16FBB	; Jump if Above	(CF=0 &	ZF=0)

mov	al, 1


loc_16FBB:
mov	ah, al
xchg	al, ds:29h	; Exchange Register/Memory with	Register
and	ax, 0FCFCh	; Logical AND
sub	al, ah		; Integer Subtraction
shr	al, 1		; Shift	Logical	Right
shr	al, 1		; Shift	Logical	Right
jnz	short loc_16FCD	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_16FCD:
push	si
mov	si, 8AAh


loc_16FD1:		; Logical Compare
test	byte ptr [si+3], 0A0h
jnz	short loc_16FDA	; Jump if Not Zero (ZF=0)

call	sub_16F93	; Call Procedure


loc_16FDA:		; Add
add	si, 1Bh
cmp	si, 0FBBh	; Compare Two Operands
jb	short loc_16FD1	; Jump if Below	(CF=1)

pop	si
retn			; Return Near from Procedure

sub_16FB0 endp




sub_16FE5 proc near
call	sub_16E20	; Call Procedure

test	word ptr [si+10h], 200h	; Logical Compare
jnz	short loc_1705C	; Jump if Not Zero (ZF=0)

call	sub_16B96	; Call Procedure

jnb	short loc_16FF7	; Jump if Not Below (CF=0)

jmp	loc_1707B	; Jump

; ���������������������������������������������������������������������������

loc_16FF7:		; Call Procedure
call	sub_1714C


loc_16FFA:		; Logical Inclusive OR
or	word ptr [si+10h], 100h
call	sub_1708A	; Call Procedure

push	ax
mov	dx, [si+0Eh]
add	ax, dx		; Add
mov	[si+0Eh], ax
xor	ax, dx		; Logical Exclusive OR
and	ax, 0FF80h	; Logical AND
jz	short loc_17019	; Jump if Zero (ZF=1)

mov	al, 1
xor	bx, bx		; Logical Exclusive OR
call	sub_16EDD	; Call Procedure


loc_17019:
pop	ax
push	ax
add	ax, ds:46E1h	; Add
xor	dx, dx		; Logical Exclusive OR
mov	cx, 0Ah
div	cx		; Unsigned Divide
mov	ds:46E1h, dx
add	ds:0A0h, ax	; Add
pop	ax
add	al, [di+13h]	; Add
adc	ah, 0		; Add with Carry
mov	cl, [di+11h]
div	cl		; Unsigned Divide
mov	[di+13h], ah
mov	ah, [di+12h]
and	ah, 0Fh		; Logical AND
cmp	al, ah		; Compare Two Operands
jbe	short loc_17052	; Jump if Below	or Equal (CF=1 | ZF=1)

test	byte ptr ds:46EBh, 40h ; Logical Compare
jz	short loc_17052	; Jump if Zero (ZF=1)

inc	byte ptr ds:46ECh ; Increment by 1


loc_17052:		; Integer Subtraction
sub	[di+12h], al
jnb	short locret_1705B ; Jump if Not Below (CF=0)

mov	byte ptr [di+12h], 0


locret_1705B:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1705C:
mov	ax, ds:2
mov	ah, [si]
and	ax, 0F0Fh	; Logical AND
cmp	al, ah		; Compare Two Operands
jnz	short loc_17074	; Jump if Not Zero (ZF=0)

and	word ptr [si+10h], 0FDFFh ; Logical AND
call	sub_16B96	; Call Procedure

jb	short locret_1705B ; Jump if Below (CF=1)

jmp	short loc_16FFA	; Jump

; ���������������������������������������������������������������������������

loc_17074:
mov	word ptr [si+0Ch], 0
jmp	short sub_17085	; Jump

; ���������������������������������������������������������������������������

loc_1707B:
mov	word ptr [si+0Ch], 0
mov	word ptr [si+0Eh], 0

sub_16FE5 endp




sub_17085 proc near
or	byte ptr [si+3], 10h ; Logical Inclusive OR
retn			; Return Near from Procedure

sub_17085 endp




sub_1708A proc near
call	sub_16EFD	; Call Procedure

mov	ah, [si+16h]
and	ah, 0F0h	; Logical AND
add	al, ah		; Add
mul	byte ptr [si+1Ah] ; Unsigned Multiplication of AL or AX
test	byte ptr [si+19h], 80h ; Logical Compare
jnz	short loc_170A2	; Jump if Not Zero (ZF=0)

shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right


loc_170A2:
mov	al, [di+12h]
and	al, 0F0h	; Logical AND
inc	ax		; Increment by 1
mul	ah		; Unsigned Multiplication of AL	or AX
xchg	al, ah		; Exchange Register/Memory with	Register
rol	ax, 1		; Rotate Left
and	ah, 1		; Logical AND
mov	dx, ax
xchg	dx, [si+0Ch]	; Exchange Register/Memory with	Register
sub	dx, ax		; Integer Subtraction
jz	short locret_170CB ; Jump if Zero (ZF=1)

mov	bl, 8
jb	short loc_170C0	; Jump if Below	(CF=1)

mov	bl, 4


loc_170C0:
mov	cx, [si+10h]
and	cl, 0F3h	; Logical AND
or	cl, bl		; Logical Inclusive OR
mov	[si+10h], cx


locret_170CB:		; Return Near from Procedure
retn

sub_1708A endp




sub_170CC proc near
mov	al, [di+0Ah]
test	al, 2		; Logical Compare
jnz	short locret_1710F ; Jump if Not Zero (ZF=0)

test	al, 40h		; Logical Compare
jnz	short loc_17126	; Jump if Not Zero (ZF=0)

call	sub_16B8A	; Call Procedure

jb	short locret_1710F ; Jump if Below (CF=1)

mov	ax, [si+0Ch]
or	ax, ax		; Logical Inclusive OR
jnz	short loc_170F7	; Jump if Not Zero (ZF=0)

mov	al, [di+11h]
mov	cl, 4
shl	ax, cl		; Shift	Logical	Left
mov	cl, [si+15h]
add	cl, [si+16h]	; Add
div	cl		; Unsigned Divide
xor	ah, ah		; Logical Exclusive OR
mov	[si+0Ch], ax


loc_170F7:
mov	cx, ds:2
sub	cx, [si+0Ah]	; Integer Subtraction
cmp	ax, cx		; Compare Two Operands
jbe	short loc_17110	; Jump if Below	or Equal (CF=1 | ZF=1)

jcxz	short locret_1710F ; Jump if CX	is 0

mov	dx, 64h	; 'd'
xchg	ax, cx		; Exchange Register/Memory with	Register
mul	dx		; Unsigned Multiplication of AL	or AX
div	cx		; Unsigned Divide
mov	[si+0Eh], ax


locret_1710F:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_17110:		; Logical Exclusive OR
xor	bx, bx
mov	al, 2
call	sub_16EDD	; Call Procedure

or	byte ptr [di+0Ah], 40h ; Logical Inclusive OR
test	byte ptr ds:46EBh, 40h ; Logical Compare
jz	short loc_17126	; Jump if Zero (ZF=1)

inc	byte ptr ds:46ECh ; Increment by 1


loc_17126:
mov	al, [si+3]
push	ax
call	sub_16B8A	; Call Procedure

mov	word ptr [si+0Eh], 64h ; 'd'
pop	ax
cmp	si, ds:46EFh	; Compare Two Operands
jz	short locret_1710F ; Jump if Zero (ZF=1)

cmp	word ptr ds:11D3h, 0 ; Compare Two Operands
jnz	short loc_17149	; Jump if Not Zero (ZF=0)

test	al, 10h		; Logical Compare
jnz	short locret_1710F ; Jump if Not Zero (ZF=0)

mov	al, 0Eh
jmp	short sub_171B2	; Jump

; ���������������������������������������������������������������������������
db 90h
; ���������������������������������������������������������������������������

loc_17149:		; Jump
jmp	sub_184A6

sub_170CC endp




sub_1714C proc near

; FUNCTION CHUNK AT 71A4 SIZE 0000000E BYTES

test	byte ptr ds:0Ah, 1 ; Logical Compare
jz	short locret_171BB ; Jump if Zero (ZF=1)

test	byte ptr [si+19h], 80h ; Logical Compare
jz	short locret_171BB ; Jump if Zero (ZF=1)

mov	ax, ds:2
mov	ah, [si]
and	ax, 0F0Fh	; Logical AND
cmp	al, ah		; Compare Two Operands
jnz	short locret_171BB ; Jump if Not Zero (ZF=0)

call	sub_171BC	; Call Procedure

call	sub_1E3CC	; Call Procedure

mov	al, [di]
mov	bx, 1141h
xlat			; Table	Lookup Translation
cmp	al, ah		; Compare Two Operands
jb	short locret_171BB ; Jump if Below (CF=1)

or	word ptr [si+10h], 4000h ; Logical Inclusive OR
test	byte ptr [si+19h], 40h ; Logical Compare
jnz	short locret_171BB ; Jump if Not Zero (ZF=0)

and	ah, 3		; Logical AND
jz	short locret_171BB ; Jump if Zero (ZF=1)

cmp	ah, 2		; Compare Two Operands
ja	short loc_171A4	; Jump if Above	(CF=0 &	ZF=0)

jz	short sub_1719C	; Jump if Zero (ZF=1)

or	word ptr [si+10h], 2000h ; Logical Inclusive OR
sub	byte ptr [si+1Ah], 2 ; Integer Subtraction
ja	short locret_171BB ; Jump if Above (CF=0 & ZF=0)

add	byte ptr [si+1Ah], 2 ; Add
retn			; Return Near from Procedure

sub_1714C endp




sub_1719C proc near
or	word ptr [si+10h], 200h	; Logical Inclusive OR
jmp	sub_17085	; Jump

sub_1719C endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_1714C

loc_171A4:		; Logical Inclusive OR
or	word ptr [si+10h], 1000h
and	byte ptr [si+19h], 7Fh ; Logical AND
dec	byte ptr [di+14h] ; Decrement by 1
mov	al, 6

; END OF FUNCTION CHUNK	FOR sub_1714C



sub_171B2 proc near
mov	ah, 0Fh
push	si
push	di
call	sub_129F0	; Call Procedure

pop	di
pop	si


locret_171BB:		; Return Near from Procedure
retn

sub_171B2 endp




sub_171BC proc near
cmp	byte ptr ds:2Ah, 35h ; '5' ; Compare Two Operands
jb	short locret_171EE ; Jump if Below (CF=1)

test	word ptr [si+12h], 40h ; Logical Compare
jz	short locret_171EE ; Jump if Zero (ZF=1)

rol	word ptr ds:0, 1 ; Rotate Left
rol	word ptr ds:0, 1 ; Rotate Left
rol	word ptr ds:0, 1 ; Rotate Left
test	word ptr ds:0, 7 ; Logical Compare
jnz	short locret_171EE ; Jump if Not Zero (ZF=0)

call	sub_1719C	; Call Procedure

or	word ptr [si+10h], 8000h ; Logical Inclusive OR
or	byte ptr [di+0Ah], 4 ; Logical Inclusive OR
mov	al, 3
jmp	short sub_171B2	; Jump

; ���������������������������������������������������������������������������

locret_171EE:		; Return Near from Procedure
retn

sub_171BC endp




sub_171EF proc near

; FUNCTION CHUNK AT 6EDB SIZE 00000002 BYTES

call	sub_16E20	; Call Procedure

and	word ptr [si+10h], 0FDFFh ; Logical AND
test	byte ptr [di+0Ah], 4 ; Logical Compare
jnz	short loc_1725F	; Jump if Not Zero (ZF=0)

dec	word ptr [si+0Ch] ; Decrement by 1
js	short loc_17203	; Jump if Sign (SF=1)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_17203:		; Compare Two Operands
cmp	di, ds:473Ch
jnz	short loc_17212	; Jump if Not Zero (ZF=0)

or	word ptr [si+10h], 800h	; Logical Inclusive OR
mov	al, 0A0h ; '�'
jmp	short loc_1721B	; Jump

; ���������������������������������������������������������������������������

loc_17212:		; Call Procedure
call	sub_17298

mov	ax, dx
jcxz	short loc_1721B	; Jump if CX is	0

div	cl		; Unsigned Divide


loc_1721B:		; Logical Exclusive OR
xor	ah, ah
sub	al, [si+17h]	; Integer Subtraction
jnb	short loc_17224	; Jump if Not Below (CF=0)

xor	al, al		; Logical Exclusive OR


loc_17224:		; Shift	Logical	Left
shl	ax, 1
mov	cx, ax
call	sub_16EFD	; Call Procedure

xor	ah, ah		; Logical Exclusive OR
cmp	al, 1Eh		; Compare Two Operands
jnb	short loc_17233	; Jump if Not Below (CF=0)

mov	al, 1Eh


loc_17233:		; Add
add	cx, ax
mov	bl, [si+19h]
mov	ax, 0C8h ; '�'
test	bl, 0Ch		; Logical Compare
jnz	short loc_17252	; Jump if Not Zero (ZF=0)

mov	al, 0FAh ; '�'
test	bl, 10h		; Logical Compare
jnz	short loc_17252	; Jump if Not Zero (ZF=0)

mov	ax, 12Ch
test	bl, 20h		; Logical Compare
jnz	short loc_17252	; Jump if Not Zero (ZF=0)

mov	ax, 190h


loc_17252:		; Logical Exclusive OR
xor	dx, dx
div	cx		; Unsigned Divide
mov	[si+0Ch], ax
mov	bx, 1
jmp	loc_16EDB	; Jump

; ���������������������������������������������������������������������������

loc_1725F:
mov	ax, [si+0Eh]
cmp	ah, 0FFh	; Compare Two Operands
jz	short loc_1726D	; Jump if Zero (ZF=1)

mov	ax, 0FF40h
sub	al, [si+17h]	; Integer Subtraction


loc_1726D:		; Decrement by 1
dec	al
jns	short loc_17279	; Jump if Not Sign (SF=0)

call	sub_1727D	; Call Procedure

or	[si+12h], cx	; Logical Inclusive OR
xor	ax, ax		; Logical Exclusive OR


loc_17279:
mov	[si+0Eh], ax
retn			; Return Near from Procedure

sub_171EF endp




sub_1727D proc near
and	byte ptr [di+0Ah], 0FBh	; Logical AND
mov	bp, 7289h
xor	cx, cx		; Logical Exclusive OR
jmp	sub_1661D	; Jump

sub_1727D endp




sub_17289 proc near
test	word ptr [si+12h], 40h ; Logical Compare
jz	short locret_17297 ; Jump if Zero (ZF=1)

and	word ptr [si+12h], 0FFBFh ; Logical AND
mov	cx, 100h


locret_17297:		; Return Near from Procedure
retn

sub_17289 endp




sub_17298 proc near
mov	bp, 72A2h
xor	cx, cx		; Logical Exclusive OR
xor	dx, dx		; Logical Exclusive OR
jmp	sub_1661D	; Jump

sub_17298 endp

; ���������������������������������������������������������������������������
cmp	byte ptr [si+3], 4 ; Compare Two Operands
jnz	short locret_172AF ; Jump if Not Zero (ZF=0)

inc	cx		; Increment by 1
add	dl, [si+17h]	; Add
adc	dh, 0		; Add with Carry


locret_172AF:		; Return Near from Procedure
retn




sub_172B0 proc near
mov	bx, ds:2
sub	bx, [si+0Ah]	; Integer Subtraction
test	byte ptr [si+10h], 40h ; Logical Compare
jnz	short loc_172F7	; Jump if Not Zero (ZF=0)

mov	al, 50h	; 'P'
sub	al, [si+17h]	; Integer Subtraction
cbw			; AL ->	AX (with sign)
sar	ax, 1		; Shift	Arithmetic Right
mov	bp, ax
sar	ax, 1		; Shift	Arithmetic Right
cmp	ax, bx		; Compare Two Operands
jge	short loc_172F7	; Jump if Greater or Equal (SF=OF)

cmp	word ptr [si+0Ch], 0 ; Compare Two Operands
jnz	short loc_172DF	; Jump if Not Zero (ZF=0)

push	bx
push	bp
call	sub_168D2	; Call Procedure

pop	bp
pop	bx
jcxz	short loc_172F3	; Jump if CX is	0

mov	[si+0Ch], cx


loc_172DF:		; Compare Two Operands
cmp	bp, bx
jge	short loc_172F7	; Jump if Greater or Equal (SF=OF)

push	bx
call	sub_133BE	; Call Procedure

pop	bx
mov	ax, ds:94h
xor	dx, dx		; Logical Exclusive OR
div	word ptr [si+0Ch] ; Unsigned Divide
mov	[si+0Eh], ax


loc_172F3:		; Logical Inclusive OR
or	byte ptr [si+10h], 40h


loc_172F7:
mov	al, [si]
cmp	al, [di+9]	; Compare Two Operands
jz	short locret_17316 ; Jump if Zero (ZF=1)

mov	al, [si+17h]
xor	ah, ah		; Logical Exclusive OR
shr	ax, 1		; Shift	Logical	Right
cmp	ax, bx		; Compare Two Operands
jnb	short locret_17316 ; Jump if Not Below (CF=0)

call	sub_1E3CC	; Call Procedure

and	al, 3Fh		; Logical AND
cmp	al, [si+17h]	; Compare Two Operands
jb	short locret_17316 ; Jump if Below (CF=1)

jmp	sub_1668F	; Jump

; ���������������������������������������������������������������������������

locret_17316:		; Return Near from Procedure
retn

sub_172B0 endp




sub_17317 proc near
mov	byte ptr ds:473Ah, 1
mov	di, ds:114Eh
call	sub_133BE	; Call Procedure

mov	ax, ds:94h
mov	ds:98h,	ax
mov	ax, ds:96h
mov	ds:9Ah,	ax
call	sub_1E3CC	; Call Procedure

cmp	al, ds:9Ch	; Compare Two Operands
mov	bp, offset sub_17516
jnb	short loc_1733E	; Jump if Not Below (CF=0)

mov	bp, offset loc_17419


loc_1733E:
mov	cx, 10h


loc_17341:
push	cx
mov	di, ds:114Eh
push	bp
call	sub_133BE	; Call Procedure

pop	bp
call	sub_16603	; Call Procedure

pop	cx
cmp	word ptr ds:94h, 0 ; Compare Two Operands
jz	short loc_1735F	; Jump if Zero (ZF=1)

cmp	word ptr ds:96h, 0 ; Compare Two Operands
jz	short loc_1735F	; Jump if Zero (ZF=1)

loop	loc_17341	; Loop while CX	!= 0


loc_1735F:		; Call Procedure
call	sub_133BE

mov	ax, ds:94h
sub	ds:98h,	ax	; Integer Subtraction
mov	ax, ds:96h
sub	ds:9Ah,	ax	; Integer Subtraction
mov	cx, 14h


loc_17373:
push	cx
mov	bx, 201h
call	sub_1E3B7	; Call Procedure

or	al, al		; Logical Inclusive OR
mov	al, 0Bh
jz	short loc_17382	; Jump if Zero (ZF=1)

mov	al, 11h


loc_17382:
mov	ds:485Dh, al
mov	al, ah
xor	ah, ah		; Logical Exclusive OR
add	al, 28h	; '('   ; Add
call	sub_1DDB0	; Call Procedure

pop	cx
loop	loc_17373	; Loop while CX	!= 0

mov	byte ptr ds:473Ah, 0
jmp	loc_11B8D	; Jump

sub_17317 endp




sub_17399 proc near
mov	byte ptr [si+3], 4
retn			; Return Near from Procedure

sub_17399 endp




_sub_1739E_map_func proc near

; FUNCTION CHUNK AT 751D SIZE 00000035 BYTES

or	byte ptr ds:11BCh, 1 ; Logical Inclusive OR
cmp	di, 11Ch	; Compare Two Operands
jnz	short loc_173D9	; Jump if Not Zero (ZF=0)

inc	byte ptr ds:0C2h ; Increment by	1
mov	bp, offset sub_17399
call	sub_1661D	; Call Procedure

call	sub_16E02	; Call Procedure

les	di, ds:_unk_2D1AE_res_map ; Load Full Pointer to ES:xx
xor	di, di		; Logical Exclusive OR
mov	cx, RES_MAP_SIZE


loc_173BF:
mov	al, es:[di]
mov	ah, al
and	ah, 30h		; Logical AND
cmp	ah, 30h	; '0'   ; Compare Two Operands
jnz	short loc_173CE	; Jump if Not Zero (ZF=0)

and	al, 0EFh	; Logical AND


loc_173CE:		; Store	String
stosb
loop	loc_173BF	; Loop while CX	!= 0

mov	al, 0Ah
mov	di, 11Ch
jmp	sub_171B2	; Jump

; ���������������������������������������������������������������������������

loc_173D9:		; Call Procedure
call	sub_133BE

cmp	word ptr ds:94h, 0 ; Compare Two Operands
jz	short loc_17429	; Jump if Zero (ZF=1)

call	sub_1E3CC	; Call Procedure

cmp	al, ds:9Ch	; Compare Two Operands
jb	short loc_173EF	; Jump if Below	(CF=1)

jmp	loc_1751D	; Jump

; ���������������������������������������������������������������������������

loc_173EF:		; Call Procedure
call	sub_15098

push	cx
call	sub_1342D	; Call Procedure

pop	cx
jcxz	short loc_173FD	; Jump if CX is	0

xor	dx, dx		; Logical Exclusive OR
div	cx		; Unsigned Divide


loc_173FD:
mov	dl, al
inc	dl		; Increment by 1
jnz	short loc_17405	; Jump if Not Zero (ZF=0)

dec	dl		; Decrement by 1


loc_17405:		; Logical Exclusive OR
xor	dh, dh
xor	cx, cx		; Logical Exclusive OR
xor	bx, bx		; Logical Exclusive OR
mov	bp, 7552h
call	sub_16603	; Call Procedure

add	[si+0Ch], cx	; Add
or	bx, bx		; Logical Inclusive OR
jz	short loc_17429	; Jump if Zero (ZF=1)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_17419:		; Compare Two Operands
cmp	byte ptr [si+3], 6
jnz	short locret_17428 ; Jump if Not Zero (ZF=0)

cmp	word ptr ds:94h, 0 ; Compare Two Operands
jz	short loc_17429	; Jump if Zero (ZF=1)

jmp	short loc_173EF	; Jump

; ���������������������������������������������������������������������������

locret_17428:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_17429:		; Compare Two Operands
cmp	di, ds:114Eh
jz	short loc_17434	; Jump if Zero (ZF=1)

mov	al, 7
call	sub_171B2	; Call Procedure


loc_17434:		; Compare Two Operands
cmp	byte ptr [di+8], 28h ; '('
jnb	short loc_17443	; Jump if Not Below (CF=0)

and	byte ptr [di+0Ah], 0FDh	; Logical AND
mov	bp, 75AFh
jmp	short loc_17479	; Jump

; ���������������������������������������������������������������������������

loc_17443:
push	si
push	di
mov	byte ptr [di+0Bh], 5
call	sub_1644E	; Call Procedure

pop	di
pop	si
call	sub_11AC5	; Call Procedure

add	al, 2		; Add
mov	[di+0Bh], al
mov	al, 4
call	sub_16F78	; Call Procedure

mov	al, 1
call	sub_16F56	; Call Procedure

or	byte ptr [di+0Ah], 8 ; Logical Inclusive OR
push	cx
mov	cl, [di]
mov	ax, 8000h
rol	ax, cl		; Rotate Left
mov	ds:115Ah, ax
pop	cx
mov	bp, offset unk_26A5F
call	sub_16603	; Call Procedure

mov	bp, offset unk_26A9A


loc_17479:		; Call Procedure
call	sub_16603

xor	dx, dx		; Logical Exclusive OR
test	word ptr ds:0, 3 ; Logical Compare
jnz	short loc_17487	; Jump if Not Zero (ZF=0)

inc	dx		; Increment by 1


loc_17487:		; Logical Exclusive OR
xor	cx, cx
mov	bp, 762Ah
call	sub_16603	; Call Procedure

cmp	cx, dx		; Compare Two Operands
ja	short loc_17487	; Jump if Above	(CF=0 &	ZF=0)

push	si
push	di
call	sub_11CDA	; Call Procedure

cmp	dl, 1		; Compare Two Operands
ja	short loc_174B1	; Jump if Above	(CF=0 &	ZF=0)

mov	byte ptr ds:0C2h, 1
and	byte ptr ds:0FF7h, 0FDh	; Logical AND
and	byte ptr ds:1007h, 0FDh	; Logical AND
pop	di
call	sub_1765E	; Call Procedure

push	di


loc_174B1:
pop	di
pop	si
jmp	sub_15D50	; Jump

_sub_1739E_map_func endp




sub_174B6 proc near

; FUNCTION CHUNK AT 5D44 SIZE 0000000C BYTES

and	byte ptr [di+0Ah], 0FDh	; Logical AND
cmp	di, ds:114Eh	; Compare Two Operands
jz	short loc_17500	; Jump if Zero (ZF=1)

mov	al, [di+8]
cmp	al, 28h	; '('   ; Compare Two Operands
jnb	short loc_174EB	; Jump if Not Below (CF=0)

and	al, 7		; Logical AND
add	al, 28h	; '('   ; Add
mov	[di+8],	al
dec	byte ptr ds:27h	; Decrement by 1
push	si
call	sub_140AE	; Call Procedure

mov	dl, 3
mov	si, 0FD8h
mov	cx, 9


loc_174DE:		; Compare Two Operands
cmp	bx, [si+2]
jnz	short loc_174E5	; Jump if Not Zero (ZF=0)

mov	[si], dx


loc_174E5:		; Add
add	si, 10h
loop	loc_174DE	; Loop while CX	!= 0

pop	si


loc_174EB:
mov	bp, 7506h
call	sub_16603	; Call Procedure

push	di
mov	cx, 5
call	sub_16447	; Call Procedure

pop	di
and	byte ptr [di+0Ah], 0F6h	; Logical AND
jmp	loc_15D44	; Jump

; ���������������������������������������������������������������������������

loc_17500:
mov	byte ptr ds:46D9h, 6
retn			; Return Near from Procedure

sub_174B6 endp




sub_17506 proc near
test	byte ptr [si+10h], 80h ; Logical Compare
jz	short loc_17511	; Jump if Zero (ZF=1)

or	byte ptr [si+10h], 10h ; Logical Inclusive OR
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_17511:		; Logical Inclusive OR
or	byte ptr [si+3], 20h
retn			; Return Near from Procedure

sub_17506 endp




sub_17516 proc near
cmp	byte ptr [si+3], 6 ; Compare Two Operands
jz	short loc_1751D	; Jump if Zero (ZF=1)

retn			; Return Near from Procedure

sub_17516 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR _sub_1739E_map_func

loc_1751D:
mov	ax, ds:94h
xor	dx, dx		; Logical Exclusive OR
xor	cx, cx		; Logical Exclusive OR
mov	cl, ds:60h
jcxz	short loc_1752C	; Jump if CX is	0

div	cx		; Unsigned Divide


loc_1752C:
mov	dx, ax
call	sub_1758D	; Call Procedure

add	[si+0Eh], ax	; Add
sub	[si+1Ah], al	; Integer Subtraction
ja	short locret_17551 ; Jump if Above (CF=0 & ZF=0)

mov	bx, 7Fh	; ''
call	sub_1E3B7	; Call Procedure

add	al, 1Eh		; Add
mov	[si+1Ah], al
call	sub_1668F	; Call Procedure

call	sub_15098	; Call Procedure

or	dx, dx		; Logical Inclusive OR
jnz	short locret_17551 ; Jump if Not Zero (ZF=0)

call	sub_174B6	; Call Procedure


locret_17551:		; Return Near from Procedure
retn

; END OF FUNCTION CHUNK	FOR _sub_1739E_map_func



sub_17552 proc near
test	byte ptr [si+10h], 80h ; Logical Compare
jz	short locret_1758C ; Jump if Zero (ZF=1)

inc	bx		; Increment by 1
call	sub_1758D	; Call Procedure

add	cx, ax		; Add
sub	[si+1Ah], al	; Integer Subtraction
ja	short locret_1758C ; Jump if Above (CF=0 & ZF=0)

or	byte ptr [si+3], 20h ; Logical Inclusive OR
or	byte ptr [si+10h], 10h ; Logical Inclusive OR
dec	bx		; Decrement by 1
push	bx
push	cx
push	dx
mov	bx, 3
call	sub_1E3B7	; Call Procedure

jnz	short loc_17581	; Jump if Not Zero (ZF=0)

mov	di, [si+4]
and	byte ptr [si+19h], 0FBh	; Logical AND
call	sub_17F75	; Call Procedure


loc_17581:		; Call Procedure
call	sub_16917

jnz	short loc_17589	; Jump if Not Zero (ZF=0)

call	sub_1C58A	; Call Procedure


loc_17589:
pop	dx
pop	cx
pop	bx


locret_1758C:		; Return Near from Procedure
retn

sub_17552 endp




sub_1758D proc near
push	dx
mov	ax, dx
mov	dx, 0FFh
sub	dl, [si+17h]	; Integer Subtraction
sub	dl, [si+17h]	; Integer Subtraction
mul	dx		; Unsigned Multiplication of AL	or AX
mov	al, ah
xor	ah, ah		; Logical Exclusive OR
or	dx, dx		; Logical Inclusive OR
jz	short loc_175A5	; Jump if Zero (ZF=1)

mov	al, 0FFh


loc_175A5:
pop	dx
cmp	al, [si+1Ah]	; Compare Two Operands
jbe	short locret_175AE ; Jump if Below or Equal (CF=1 | ZF=1)

mov	al, [si+1Ah]


locret_175AE:		; Return Near from Procedure
retn

sub_1758D endp




sub_175AF proc near
jnb	short locret_175E2 ; Jump if Not Below (CF=0)

cmp	si, 8E0h	; Compare Two Operands
jz	short loc_175E3	; Jump if Zero (ZF=1)

test	byte ptr [si+3], 20h ; Logical Compare
jnz	short loc_175DE	; Jump if Not Zero (ZF=0)

or	word ptr [si+10h], 400h	; Logical Inclusive OR
cmp	byte ptr [di+8], 28h ; '(' ; Compare Two Operands
jb	short loc_175CC	; Jump if Below	(CF=1)

or	word ptr [si+10h], 20h ; Logical Inclusive OR


loc_175CC:
mov	al, 4
call	sub_16F48	; Call Procedure

mov	bx, 1
mov	al, 3
call	sub_16EDD	; Call Procedure

mov	cl, 4
jmp	loc_16ACB	; Jump

; ���������������������������������������������������������������������������

loc_175DE:
mov	byte ptr [si+3], 22h ; '"'


locret_175E2:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_175E3:		; Logical AND
and	byte ptr [si+3], 0DFh
jmp	sub_16B8A	; Jump

sub_175AF endp




sub_175EA proc near
jb	short locret_1764C ; Jump if Below (CF=1)

test	byte ptr [si+10h], 80h ; Logical Compare
jz	short locret_1764C ; Jump if Zero (ZF=1)

call	sub_1858C	; Call Procedure

and	byte ptr [si+10h], 7Fh ; Logical AND
call	sub_1851F	; Call Procedure

cmp	cl, 8		; Compare Two Operands
jnb	short loc_17655	; Jump if Not Below (CF=0)

mov	byte ptr [si+3], 0A0h ;	'�'
mov	bx, 0F7Fh
call	sub_1E3B7	; Call Procedure

add	ax, 1464h	; Add
mov	[si+1Ah], al
mov	[si+15h], ah
mov	bx, 1F1Fh
call	sub_1E3B7	; Call Procedure

add	ax, 0A0Ah	; Add
mov	[si+16h], al
mov	[si+17h], ah
mov	byte ptr [si+19h], 0
jmp	loc_168E0	; Jump

; ���������������������������������������������������������������������������
jb	short locret_1764C ; Jump if Below (CF=1)

test	byte ptr [si+10h], 80h ; Logical Compare
jz	short locret_1764C ; Jump if Zero (ZF=1)

cmp	cx, dx		; Compare Two Operands
jnb	short loc_17655	; Jump if Not Below (CF=0)

mov	byte ptr [si+3], 0ACh ;	'�'
or	byte ptr [si+10h], 10h ; Logical Inclusive OR
mov	byte ptr [si+1Ah], 0
mov	word ptr [si+0Ch], 0
mov	byte ptr [si+19h], 0
inc	cx		; Increment by 1


locret_1764C:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1764D:		; Jump if Below	(CF=1)
jb	short locret_1765D

test	byte ptr [si+10h], 80h ; Logical Compare
jz	short locret_1765D ; Jump if Zero (ZF=1)


loc_17655:
push	cx
push	dx
call	sub_166B1	; Call Procedure

pop	dx
pop	cx
inc	cx		; Increment by 1


locret_1765D:		; Return Near from Procedure
retn

sub_175EA endp




sub_1765E proc near
call	sub_1E270	; Call Procedure

mov	si, 100h
xor	cx, cx		; Logical Exclusive OR


loc_17666:		; Add
add	cl, [si+19h]
add	si, 1Ch		; Add
cmp	byte ptr [si], 0FFh ; Compare Two Operands
jnz	short loc_17666	; Jump if Not Zero (ZF=0)

sub	cl, 0Ah		; Integer Subtraction
jb	short loc_17679	; Jump if Below	(CF=1)

add	[di+19h], cl	; Add


loc_17679:		; Call Procedure
call	sub_1E283

retn			; Return Near from Procedure

sub_1765E endp




sub_1767D proc near
cmp	byte ptr [di+1Ah], 0 ; Compare Two Operands
jnz	short loc_1768D	; Jump if Not Zero (ZF=0)

inc	byte ptr ds:0ECh ; Increment by	1
jnz	short locret_17692 ; Jump if Not Zero (ZF=0)

mov	byte ptr [di+1Ah], 10h


loc_1768D:
mov	cl, 8
jmp	loc_16ACB	; Jump

; ���������������������������������������������������������������������������

locret_17692:		; Return Near from Procedure
retn

sub_1767D endp




sub_17693 proc near
test	byte ptr [si+3], 10h ; Logical Compare
jnz	short locret_17706 ; Jump if Not Zero (ZF=0)

call	sub_16BD7	; Call Procedure

jb	short locret_17706 ; Jump if Below (CF=1)

mov	byte ptr ds:4737h, 0FFh
or	word ptr [si+10h], 100h	; Logical Inclusive OR
test	byte ptr [di+0Ah], 1 ; Logical Compare
jnz	short loc_176CB	; Jump if Not Zero (ZF=0)

or	byte ptr [di+0Ah], 1 ; Logical Inclusive OR
mov	byte ptr [di+12h], 0
mov	dx, [di+2]
mov	bx, [di+4]
mov	[di+0Ch], dx
xor	bh, bh		; Logical Exclusive OR
mov	[di+0Eh], bx
mov	byte ptr [di+0Bh], 4
jmp	sub_16515	; Jump

; ���������������������������������������������������������������������������

loc_176CB:		; Call Procedure
call	sub_16E20

mov	al, [si+18h]
shr	al, 1		; Shift	Logical	Right
shr	al, 1		; Shift	Logical	Right
jnz	short loc_176D8	; Jump if Not Zero (ZF=0)

inc	ax		; Increment by 1


loc_176D8:		; Add
add	[di+0Fh], al
jnb	short locret_17706 ; Jump if Not Below (CF=0)

mov	bx, 2
mov	al, 1
call	sub_16EDD	; Call Procedure

sub	byte ptr [di+1Bh], 0Ch ; Integer Subtraction
jb	short loc_17707	; Jump if Below	(CF=1)

cmp	byte ptr [di+0Bh], 0Ch ; Compare Two Operands
jnb	short loc_176F4	; Jump if Not Below (CF=0)

inc	byte ptr [di+0Bh] ; Increment by 1


loc_176F4:
mov	ax, [di+0Eh]
cbw			; AL ->	AX (with sign)
sub	ax, 2		; Integer Subtraction
cmp	ax, 0FFAEh	; Compare Two Operands
jl	short loc_17703	; Jump if Less (SF!=OF)

mov	[di+0Eh], al


loc_17703:		; Call Procedure
call	sub_16515


locret_17706:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_17707:
mov	byte ptr [di+1Bh], 0
call	sub_17085	; Call Procedure

jmp	sub_18461	; Jump

sub_17693 endp




sub_17711 proc near
test	byte ptr [di+0Ah], 20h ; Logical Compare
jnz	short loc_17731	; Jump if Not Zero (ZF=0)

mov	al, 1
call	sub_16F48	; Call Procedure

call	sub_1348A	; Call Procedure

add	[di+1Bh], al	; Add
jb	short loc_17725	; Jump if Below	(CF=1)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_17725:		; Logical Inclusive OR
or	byte ptr [di+0Ah], 20h
or	byte ptr [di+8], 8 ; Logical Inclusive OR
mov	byte ptr [di+1Bh], 5


loc_17731:		; Jump
jmp	sub_16AC5

sub_17711 endp




sub_17734 proc near

; FUNCTION CHUNK AT 7D81 SIZE 00000058 BYTES

call	sub_168EB	; Call Procedure

mov	al, [si+19h]
mov	bx, 2
mov	cl, 20h	; ' '
test	al, cl		; Logical Compare
jz	short loc_17780	; Jump if Zero (ZF=1)

inc	bx		; Increment by 1
shr	cl, 1		; Shift	Logical	Right
test	al, cl		; Logical Compare
jz	short loc_17780	; Jump if Zero (ZF=1)

inc	bx		; Increment by 1
shr	cl, 1		; Shift	Logical	Right
test	al, cl		; Logical Compare
jz	short loc_17780	; Jump if Zero (ZF=1)

inc	bx		; Increment by 1
shr	cl, 1		; Shift	Logical	Right
test	al, cl		; Logical Compare
jz	short loc_17780	; Jump if Zero (ZF=1)

mov	al, 0Fh
jmp	short loc_177CA	; Jump

; ���������������������������������������������������������������������������
call	sub_168EB	; Call Procedure

mov	al, [si+19h]
mov	bx, 6
test	al, 2		; Logical Compare
jz	short loc_17780	; Jump if Zero (ZF=1)

mov	al, 0Fh
jmp	short loc_177CA	; Jump

; ���������������������������������������������������������������������������
call	sub_168EB	; Call Procedure

mov	al, [si+19h]
xor	bx, bx		; Logical Exclusive OR
test	al, 80h		; Logical Compare
jz	short loc_17780	; Jump if Zero (ZF=1)

inc	bx		; Increment by 1
test	al, 40h		; Logical Compare
mov	al, 0Fh
jnz	short loc_177CA	; Jump if Not Zero (ZF=0)


loc_17780:
push	si
mov	ax, bx
add	ax, 0E8h ; '�'  ; Add
mov	ds:1203h, ax
call	sub_177D7	; Call Procedure

jb	short loc_17792	; Jump if Below	(CF=1)

pop	si
jmp	loc_17D81	; Jump

; ���������������������������������������������������������������������������

loc_17792:		; Call Procedure
call	sub_17F90

pop	si
cmp	word ptr ds:470Ch, 0FFFFh ; Compare Two	Operands
jz	short loc_177C8	; Jump if Zero (ZF=1)

mov	cl, bl
mov	bh, 80h	; '�'
shr	bh, cl		; Shift	Logical	Right
push	bx
push	si
push	word ptr ds:470Eh
call	sub_16A33	; Call Procedure

pop	di
pop	si
pop	ax
call	sub_1A1E2	; Call Procedure

jnz	short loc_177D4	; Jump if Not Zero (ZF=0)

mov	[si+0Eh], ax
mov	ax, [si+4]
mov	[si+0Ch], ax
call	sub_184A6	; Call Procedure

mov	byte ptr ds:46D8h, 1
jmp	sub_18770	; Jump

; ���������������������������������������������������������������������������

loc_177C8:
mov	al, 0Eh


loc_177CA:
push	ax
push	si
call	loc_1D2FD	; Call Procedure

pop	si
pop	ax
call	sub_17BB9	; Call Procedure


loc_177D4:		; Jump
jmp	near ptr off_1C13B

sub_17734 endp




sub_177D7 proc near
call	sub_168EB	; Call Procedure

mov	di, [si+4]
push	bx
push	si
call	sub_17F27	; Call Procedure

pop	si
pop	bx
mov	al, 1
cmp	bx, 1		; Compare Two Operands
jnz	short loc_177F3	; Jump if Not Zero (ZF=0)

cmp	di, ds:1150h	; Compare Two Operands
jnz	short loc_177F3	; Jump if Not Zero (ZF=0)

inc	al		; Increment by 1


loc_177F3:		; Compare Two Operands
cmp	[bx+46FEh], al
jb	short locret_17809 ; Jump if Below (CF=1)

mov	al, [si+19h]
mov	ds:3Dh,	al
mov	al, 80h	; '�'
mov	cl, bl
shr	al, cl		; Shift	Logical	Right
or	[si+19h], al	; Logical Inclusive OR
clc			; Clear	Carry Flag


locret_17809:		; Return Near from Procedure
retn

sub_177D7 endp




sub_1780A proc near
call	sub_17C63	; Call Procedure

mov	bp, offset unk_215D2
cmp	ax, ds:word_20626 ; Compare Two	Operands
ja	short loc_1783E	; Jump if Above	(CF=0 &	ZF=0)

mov	al, [si+3]
test	al, 20h		; Logical Compare
jz	short loc_17821	; Jump if Zero (ZF=1)

cmp	al, 22h	; '"'   ; Compare Two Operands
jnz	short loc_1783E	; Jump if Not Zero (ZF=0)


loc_17821:
mov	bp, 214Ah
test	byte ptr [si+3], 40h ; Logical Compare
jnz	short loc_1783E	; Jump if Not Zero (ZF=0)

mov	bp, 210Ah
mov	ax, 52h	; 'R'
cmp	byte ptr ds:46F3h, 1 ; Compare Two Operands
adc	ax, 0		; Add with Carry
mov	[bp+12h], ax
call	sub_17847	; Call Procedure


loc_1783E:
mov	bx, offset sub_18751
call	sub_1D323	; Call Procedure

jmp	near ptr off_1C13B ; Jump

sub_1780A endp




sub_17847 proc near
mov	word ptr ds:2110h, 404Fh
or	byte ptr ds:2115h, 40h ; Logical Inclusive OR
or	byte ptr ds:2119h, 40h ; Logical Inclusive OR
test	word ptr [si+12h], 400h	; Logical Compare
jnz	short locret_178BB ; Jump if Not Zero (ZF=0)

mov	al, [si+3]
and	al, 0Fh		; Logical AND
cmp	al, 1		; Compare Two Operands
jz	short loc_1786C	; Jump if Zero (ZF=1)

and	byte ptr ds:2111h, 0BFh	; Logical AND


loc_1786C:		; Compare Two Operands
cmp	al, 2
jnz	short loc_17876	; Jump if Not Zero (ZF=0)

mov	byte ptr ds:2110h, 56h ; 'V'
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_17876:		; Compare Two Operands
cmp	byte ptr ds:2Ah, 5
jb	short loc_17882	; Jump if Below	(CF=1)

and	byte ptr ds:2119h, 0BFh	; Logical AND


loc_17882:		; Compare Two Operands
cmp	byte ptr ds:2Ah, 4
jb	short locret_178BB ; Jump if Below (CF=1)

test	word ptr [si+10h], 200h	; Logical Compare
jnz	short locret_178BB ; Jump if Not Zero (ZF=0)

mov	di, [si+4]
test	byte ptr [di+0Ah], 8 ; Logical Compare
jnz	short loc_1789F	; Jump if Not Zero (ZF=0)

cmp	byte ptr [di+8], 28h ; '(' ; Compare Two Operands
jnb	short locret_178BB ; Jump if Not Below (CF=0)


loc_1789F:
push	si
call	sub_17F27	; Call Procedure

mov	si, 46FEh
mov	cx, 7
xor	al, al		; Logical Exclusive OR


loc_178AB:		; Logical Inclusive OR
or	al, [si]
inc	si		; Increment by 1
loop	loc_178AB	; Loop while CX	!= 0

pop	si
or	al, [si+19h]	; Logical Inclusive OR
jz	short locret_178BB ; Jump if Zero (ZF=1)

and	byte ptr ds:2115h, 0BFh	; Logical AND


locret_178BB:		; Return Near from Procedure
retn

sub_17847 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_15CE4

loc_178BC:
mov	di, [si+4]
call	sub_17C63	; Call Procedure

cmp	ax, ds:1176h	; Compare Two Operands
jnb	short locret_178BB ; Jump if Not Below (CF=0)

call	sub_16917	; Call Procedure

jnz	short locret_178BB ; Jump if Not Zero (ZF=0)

call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

mov	ds:46FAh, si
push	si
mov	si, 18DFh
mov	bx, [di+2]
mov	dx, [di]
mov	cx, 64h	; 'd'
call	loc_15F25	; Call Procedure

pop	si
mov	al, [si]
mov	ds:1955h, al

; END OF FUNCTION CHUNK	FOR sub_15CE4



sub_178E9 proc near
call	sub_16917	; Call Procedure

jz	short loc_178F1	; Jump if Zero (ZF=1)

jmp	sub_179DE	; Jump

; ���������������������������������������������������������������������������

loc_178F1:		; Call Procedure
call	_sub_1C08E_set_screen_as_active_framebuffer

call	sub_131F6	; Call Procedure

add	word ptr ds:11F3h, 0Ch ; Add
mov	si, 18DFh
call	sub_17B1B	; Call Procedure

call	sub_1D075	; Call Procedure

mov	cl, 9Ah	; '�'
mov	ch, ds:18E8h
mov	dx, ds:18DFh
mov	bx, ds:18E1h
add	dx, 0Ch		; Add
add	bx, 4		; Add
mov	ax, 3Ah	; ':'
test	byte ptr ds:30h, 40h ; Logical Compare
jz	short loc_17924	; Jump if Zero (ZF=1)

inc	ax		; Increment by 1


loc_17924:		; Call Procedure
call	sub_18865

mov	cl, 96h	; '�'
sub	dx, 8		; Integer Subtraction
add	bx, 9		; Add
mov	di, ds:2Ch
call	sub_162A6	; Call Procedure

mov	cl, 9Ah	; '�'
add	bx, 0Ah		; Add
mov	al, ds:30h
test	al, 20h		; Logical Compare
jz	short loc_1794C	; Jump if Zero (ZF=1)

cmp	al, 22h	; '"'   ; Compare Two Operands
mov	ax, 41h	; 'A'
jnz	short loc_179B6	; Jump if Not Zero (ZF=0)

inc	ax		; Increment by 1
jmp	short loc_179B6	; Jump

; ���������������������������������������������������������������������������

loc_1794C:
mov	ax, 3Ch	; '<'
call	sub_18865	; Call Procedure

add	bx, 0Fh		; Add
cmp	byte ptr ds:30h, 2 ; Compare Two Operands
jz	short loc_179BC	; Jump if Zero (ZF=1)

mov	al, ds:2Fh
shr	al, 1		; Shift	Logical	Right
and	ax, 6		; Logical AND
add	ax, 11F7h	; Add
mov	si, ax
mov	ax, [si]
call	sub_1D194	; Call Procedure

add	bx, 0Ah		; Add
test	byte ptr ds:30h, 40h ; Logical Compare
jnz	short loc_179BC	; Jump if Not Zero (ZF=0)

mov	ax, 3Fh	; '?'
test	word ptr ds:32h, 200h ;	Logical	Compare
jnz	short loc_179B6	; Jump if Not Zero (ZF=0)

mov	ax, 40h	; '@'
test	word ptr ds:32h, 100h ;	Logical	Compare
jz	short loc_179B6	; Jump if Zero (ZF=1)

test	word ptr ds:34h, 30h ; Logical Compare
jnz	short loc_179B6	; Jump if Not Zero (ZF=0)

mov	ax, 3Dh	; '='
cmp	byte ptr ds:30h, 0 ; Compare Two Operands
jz	short loc_179B6	; Jump if Zero (ZF=1)

mov	ax, 43h	; 'C'
cmp	byte ptr ds:2Fh, 1 ; Compare Two Operands
jz	short loc_179B6	; Jump if Zero (ZF=1)

mov	ax, 3Eh	; '>'
cmp	byte ptr ds:30h, 6 ; Compare Two Operands
jz	short loc_179B6	; Jump if Zero (ZF=1)

jmp	short loc_179BC	; Jump

; ���������������������������������������������������������������������������

loc_179B6:		; Call Procedure
call	sub_18865

add	bx, 11h		; Add


loc_179BC:		; Add
add	bx, 4
mov	ax, 6Eh	; 'n'
mov	cl, 96h	; '�'
call	sub_1D194	; Call Procedure

add	bx, 8		; Add
mov	si, ds:46FAh
call	sub_17EFB	; Call Procedure

mov	si, 4705h
mov	bp, ds:18E5h
call	sub_17E3D	; Call Procedure


loc_179DB:		; Jump
jmp	_sub_1C07C_set_frontbuffer_as_active_framebuffer

sub_178E9 endp




sub_179DE proc near
xor	ax, ax		; Logical Exclusive OR
xchg	ax, ds:46FAh	; Exchange Register/Memory with	Register
or	ax, ax		; Logical Inclusive OR
jz	short loc_179DB	; Jump if Zero (ZF=1)

mov	si, 18DFh
jmp	loc_15F9F	; Jump

sub_179DE endp




sub_179EE proc near
mov	ds:46EFh, si
call	sub_16917	; Call Procedure

mov	si, 18E9h
jnz	short loc_17A1E	; Jump if Not Zero (ZF=0)

mov	ax, 1Eh
mov	bx, 5
cmp	word ptr [di+2], 4Ch ; 'L' ; Compare Two Operands
jge	short loc_17A0C	; Jump if Greater or Equal (SF=OF)

mov	ax, 0Eh
mov	bx, 50h	; 'P'


loc_17A0C:
mov	[si+2],	bx
add	bx, 43h	; 'C'   ; Add
mov	[si+6],	bx
mov	word ptr ds:4710h, 5Ch ; '\'
mov	ds:4712h, ax


loc_17A1E:
mov	ds:0DBE0h, si
mov	al, 2
call	sub_17B0F	; Call Procedure

mov	di, 18E9h
mov	si, 18F3h
mov	dx, [di]
mov	bx, [di+2]
mov	ax, dx
add	ax, 49h	; 'I'   ; Add
mov	ds:2244h, ax
add	bx, 3		; Add
mov	ds:2246h, bx
xor	ax, ax		; Logical Exclusive OR
mov	ds:4784h, ax
mov	word ptr ds:4786h, 5
mov	ds:4788h, ax
inc	ax		; Increment by 1
mov	ds:478Ah, ax
add	dx, 4		; Add
mov	[si], dx
mov	[si+2],	bx
add	dx, 3Dh	; '='   ; Add
add	bx, 3Dh	; '='   ; Add
mov	[si+4],	dx
mov	[si+6],	bx
call	sub_17B1B	; Call Procedure

mov	si, ds:46EFh
test	byte ptr [si+3], 20h ; Logical Compare
jz	short loc_17A96	; Jump if Zero (ZF=1)

mov	di, [si+4]
test	byte ptr [di+0Ah], 2 ; Logical Compare
jnz	short loc_17A82	; Jump if Not Zero (ZF=0)

call	sub_15D36	; Call Procedure

jb	short loc_17A96	; Jump if Below	(CF=1)


loc_17A82:
mov	ax, 0Ch
mov	ds:47C4h, ax
call	sub_191A0	; Call Procedure

call	sub_1C0F4	; Call Procedure

mov	ax, 0Ch
mov	bp, 0
jmp	short loc_17AC1	; Jump

; ���������������������������������������������������������������������������

loc_17A96:
mov	ax, 0Fh
mov	ds:47C4h, ax
mov	ds:4758h, si
mov	byte ptr ds:476Ch, 0
call	sub_191A0	; Call Procedure

call	sub_1C0F4	; Call Procedure

mov	ax, ds:22A6h
sub	ax, 0Eh		; Integer Subtraction
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
mov	bl, ds:47D0h
dec	bl		; Decrement by 1
xor	bh, bh		; Logical Exclusive OR
shl	bx, 1		; Shift	Logical	Left
mov	bp, bx


loc_17AC1:
mov	si, offset word_21769
add	si, ax		; Add
lodsw			; Load String
mov	ds:46D2h, ax
lodsw			; Load String
mov	ds:46D4h, ax
push	ds
mov	si, word ptr ss:unk_23C7A
mov	ds, word ptr ss:_dword_2D060_sprite_sheet_resource_ptr+2
add	si, ds:[bp+si]	; Add
mov	dx, word ptr ss:unk_20DA3
mov	bx, word ptr ss:unk_20DA5
inc	bx		; Increment by 1
inc	dx		; Increment by 1
mov	word ptr ss:unk_23C84, dx
mov	word ptr ss:unk_23C86, bx
add	dx, 3Bh	; ';'   ; Add
add	bx, 3Bh	; ';'   ; Add
mov	word ptr ss:unk_23C88, dx
mov	word ptr ss:unk_23C8A, bx
call	sub_19D6A	; Call Procedure

pop	ds
mov	si, 47D4h
call	_sub_1C4AA_gfx_copy_rect_to_screen ; Call Procedure

jmp	near ptr off_1C13B ; Jump

sub_179EE endp




sub_17B0F proc near
mov	byte ptr ds:46D8h, 0
push	si
xchg	si, di		; Exchange Register/Memory with	Register
call	sub_1C0E8	; Call Procedure

pop	si

sub_17B0F endp




sub_17B1B proc near
mov	es, ds:_word_2D08A_framebuffer_active
mov	al, [si+9]
push	si
call	ds:_ptr_22D65_gfx_vtable_func_10 ; Indirect Call Far Procedure
pop	si
jmp	sub_1C551	; Jump

sub_17B1B endp




sub_17B2B proc near
cmp	ds:byte_23B88, 0 ; Compare Two Operands
jnz	short locret_17B35 ; Jump if Not Zero (ZF=0)

jmp	sub_1C0E8	; Jump

; ���������������������������������������������������������������������������

locret_17B35:		; Return Near from Procedure
retn

sub_17B2B endp




sub_17B36 proc near
push	si
push	di
mov	ds:byte_23B88, 1
mov	ds:_byte_2D196_in_transition?, 80h ; '�'
call	sub_18770	; Call Procedure

call	sub_15F79	; Call Procedure

call	sub_179DE	; Call Procedure

mov	byte ptr ds:0DCE6h, 0
mov	byte ptr ds:46F4h, 0
pop	di
pop	si
retn			; Return Near from Procedure

sub_17B36 endp




sub_17B58 proc near
mov	word ptr ds:1BEAh, 0
mov	byte ptr ds:46F4h, 0
xor	si, si		; Logical Exclusive OR
mov	byte ptr ds:4Ch, 0
xchg	si, ds:46EFh	; Exchange Register/Memory with	Register
or	si, si		; Logical Inclusive OR
jz	short locret_17BA2 ; Jump if Zero (ZF=1)

cmp	byte ptr ds:4Ch, 0 ; Compare Two Operands
jnz	short loc_17B8C	; Jump if Not Zero (ZF=0)

call	sub_11EBE	; Call Procedure

and	word ptr [si+10h], 3F0h	; Logical AND
and	word ptr [si+12h], 0E5FFh ; Logical AND
call	sub_11AC5	; Call Procedure

mov	[si+14h], al


loc_17B8C:		; Call Procedure
call	sub_1A7A5

mov	si, 18E9h
xor	ax, ax		; Logical Exclusive OR
mov	ds:0DBE0h, ax
mov	ds:47BAh, ax
call	sub_1C6AD	; Call Procedure

mov	al, 4
call	sub_17B2B	; Call Procedure


locret_17BA2:		; Return Near from Procedure
retn

sub_17B58 endp




sub_17BA3 proc near
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

cmp	si, ds:46EFh	; Compare Two Operands
jz	short locret_17BB8 ; Jump if Zero (ZF=1)

push	si
mov	ds:46F1h, si
call	sub_179EE	; Call Procedure

call	sub_19F40	; Call Procedure

pop	si


locret_17BB8:		; Return Near from Procedure
retn

sub_17BA3 endp




sub_17BB9 proc near
push	ax
call	sub_131F6	; Call Procedure

pop	ax


loc_17BBE:
mov	ds:46F1h, si
mov	ds:23h,	al
mov	word ptr ds:47BAh, 0
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

mov	ax, 0Fh
call	sub_196F1	; Call Procedure

jb	short loc_17BD9	; Jump if Below	(CF=1)

call	sub_19EFD	; Call Procedure


loc_17BD9:
mov	si, ds:46F1h
jmp	short loc_17C56	; Jump

sub_17BB9 endp

; ���������������������������������������������������������������������������
align 2



sub_17BE0 proc near

; FUNCTION CHUNK AT 7E97 SIZE 00000021 BYTES
; FUNCTION CHUNK AT 7EDE SIZE 00000003 BYTES

cmp	si, ds:46EFh	; Compare Two Operands
jz	short loc_17BE7	; Jump if Zero (ZF=1)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_17BE7:
mov	word ptr ds:47BAh, 0
cmp	byte ptr ds:46F4h, 0 ; Compare Two Operands
jz	short loc_17BFE	; Jump if Zero (ZF=1)

cmp	byte ptr ds:46F5h, 0 ; Compare Two Operands
jz	short loc_17BFE	; Jump if Zero (ZF=1)

jmp	loc_17E97	; Jump

; ���������������������������������������������������������������������������

loc_17BFE:
mov	si, ds:46EFh

sub_17BE0 endp




sub_17C02 proc near
call	sub_17BA3	; Call Procedure

call	sub_131F6	; Call Procedure

mov	di, [si+4]
call	sub_12E98	; Call Procedure

call	sub_17C63	; Call Procedure

cmp	ax, ds:1176h	; Compare Two Operands
jbe	short loc_17C2D	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	byte ptr ds:4Ch, 0FFh
mov	di, ds:4752h
or	di, di		; Logical Inclusive OR
jz	short loc_17C2D	; Jump if Zero (ZF=1)

mov	ax, 1916h
mov	[di+0Dh], ax
mov	[di+0Fh], ax


loc_17C2D:		; Call Procedure
call	sub_19719

mov	si, ds:46EFh
jb	short loc_17C2D	; Jump if Below	(CF=1)

push	si
call	sub_19EFD	; Call Procedure

pop	si
mov	byte ptr ds:46F4h, 0
cmp	byte ptr ds:47A5h, 80h ; '�' ; Compare Two Operands
jnz	short loc_17C56	; Jump if Not Zero (ZF=0)

inc	byte ptr ds:46F4h ; Increment by 1
call	sub_17EFB	; Call Procedure

push	si
call	sub_17E1E	; Call Procedure

pop	si
jmp	short loc_17C56	; Jump

; ���������������������������������������������������������������������������
align 2

loc_17C56:		; Compare Two Operands
cmp	byte ptr ds:46EBh, 0
jns	short loc_17C60	; Jump if Not Sign (SF=0)

call	sub_19901	; Call Procedure


loc_17C60:		; Jump
jmp	_sub_1C07C_set_frontbuffer_as_active_framebuffer

sub_17C02 endp




sub_17C63 proc near
push	si
call	sub_1407E	; Call Procedure

pop	si
mov	bp, bx
shl	bp, 1		; Shift	Logical	Left
jns	short loc_17C70	; Jump if Not Sign (SF=0)

neg	bp		; Two's Complement Negation


loc_17C70:
mov	bp, [bp+4880h]
mov	ax, [si+6]
sub	ax, dx		; Integer Subtraction
jns	short loc_17C7D	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_17C7D:		; Logical Exclusive OR
xor	dx, dx
div	bp		; Unsigned Divide
sub	bx, [si+8]	; Integer Subtraction
jns	short loc_17C88	; Jump if Not Sign (SF=0)

neg	bx		; Two's Complement Negation


loc_17C88:		; Compare Two Operands
cmp	ax, bx
jnb	short locret_17C8E ; Jump if Not Below (CF=0)

mov	ax, bx


locret_17C8E:		; Return Near from Procedure
retn

sub_17C63 endp




sub_17C8F proc near
push	si
call	sub_1407E	; Call Procedure

pop	si
mov	bp, bx
shl	bp, 1		; Shift	Logical	Left
jns	short loc_17C9C	; Jump if Not Sign (SF=0)

neg	bp		; Two's Complement Negation


loc_17C9C:
mov	bp, [bp+4880h]
mov	ax, [si+2]
sub	ax, dx		; Integer Subtraction
jns	short loc_17CA9	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_17CA9:		; Logical Exclusive OR
xor	dx, dx
div	bp		; Unsigned Divide
sub	bx, [si+4]	; Integer Subtraction
jns	short loc_17CB4	; Jump if Not Sign (SF=0)

neg	bx		; Two's Complement Negation


loc_17CB4:		; Compare Two Operands
cmp	ax, bx
jnb	short locret_17CBA ; Jump if Not Below (CF=0)

mov	ax, bx


locret_17CBA:		; Return Near from Procedure
retn

sub_17C8F endp

; ���������������������������������������������������������������������������
mov	byte ptr ds:46F5h, 1
mov	bp, 2012h
mov	bx, 7D68h
call	sub_1D323	; Call Procedure

call	near ptr off_1C13B ; Call Procedure

cmp	byte ptr ds:46F4h, 0 ; Compare Two Operands
jnz	short loc_17CF1	; Jump if Not Zero (ZF=0)

mov	si, ds:46EFh
call	sub_17BE0	; Call Procedure

call	sub_17C02	; Call Procedure

cmp	byte ptr ds:46F4h, 0 ; Compare Two Operands
jnz	short loc_17CF1	; Jump if Not Zero (ZF=0)

call	sub_17C02	; Call Procedure

cmp	byte ptr ds:46F4h, 0 ; Compare Two Operands
jnz	short loc_17CF1	; Jump if Not Zero (ZF=0)

call	sub_17C02	; Call Procedure


loc_17CF1:		; Call Procedure
call	sub_17DD9

call	sub_168EB	; Call Procedure

mov	al, [si+19h]
mov	ds:3Dh,	al
call	sub_17EFB	; Call Procedure

mov	di, [si+4]
call	sub_17F27	; Call Procedure

mov	word ptr ds:1BEAh, 0




sub_17D0C proc near
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

mov	si, 1936h
call	sub_17B1B	; Call Procedure

mov	si, 1940h
call	sub_17B1B	; Call Procedure

call	sub_17E1E	; Call Procedure

push	ds
pop	es
mov	si, 4C60h
mov	di, 4C7Ch
mov	cx, 0Eh
rep movsw		; Move Byte(s) from String to String
mov	bx, ds:1942h
add	bx, 4		; Add
mov	dx, ds:1940h
add	dx, 50h	; 'P'   ; Add
mov	si, 46FEh
mov	bp, ds:1946h
mov	cx, ds:1948h
mov	ds:0DBE4h, cx
call	sub_17E3D	; Call Procedure

mov	cx, ds:1948h
mov	dx, ds:1940h
add	dx, 8		; Add
mov	ax, 6Fh	; 'o'
call	sub_1D194	; Call Procedure

call	sub_1E270	; Call Procedure

call	sub_1D280	; Call Procedure

call	sub_1E283	; Call Procedure

jmp	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Jump

sub_17D0C endp

; ���������������������������������������������������������������������������
mov	byte ptr ds:46F5h, 0
xor	si, si		; Logical Exclusive OR
mov	word ptr ds:0DBE2h, 0
mov	si, 1940h
call	sub_1C6AD	; Call Procedure

call	sub_168EB	; Call Procedure

call	sub_17F11	; Call Procedure

; START	OF FUNCTION CHUNK FOR sub_17734

loc_17D81:		; Call Procedure
call	sub_18461

mov	ah, [si+19h]
mov	al, ds:3Dh
mov	bl, al
xor	bl, ah		; Logical Exclusive OR
and	ah, bl		; Logical AND
mov	ds:3Dh,	ah
and	al, bl		; Logical AND
mov	ds:3Eh,	al
mov	byte ptr ds:3Fh, 0
test	ah, 40h		; Logical Compare
jz	short loc_17DB1	; Jump if Zero (ZF=1)

mov	di, [si+4]
cmp	di, ds:1150h	; Compare Two Operands
jnz	short loc_17DB1	; Jump if Not Zero (ZF=0)

mov	byte ptr ds:3Fh, 40h ; '@'


loc_17DB1:
mov	al, [si+3]
and	al, 0Fh		; Logical AND
cmp	al, 8		; Compare Two Operands
jnz	short loc_17DBD	; Jump if Not Zero (ZF=0)

call	sub_16C15	; Call Procedure


loc_17DBD:
mov	al, 0Ch
call	sub_17BB9	; Call Procedure

mov	byte ptr ds:46F4h, 0
cmp	word ptr ds:1BEAh, 0 ; Compare Two Operands
jnz	short locret_17DD8 ; Jump if Not Zero (ZF=0)

mov	si, ds:46EFh
call	sub_17BE0	; Call Procedure

call	sub_17C02	; Call Procedure


locret_17DD8:		; Return Near from Procedure
retn

; END OF FUNCTION CHUNK	FOR sub_17734



sub_17DD9 proc near
mov	si, 18E9h
mov	di, 1936h
mov	bp, 1940h
mov	ds:0DBE2h, bp
mov	ax, [si]
add	ax, 30h	; '0'   ; Add
mov	[bp+0],	ax
add	ax, 4Dh	; 'M'   ; Add
mov	[di], ax
mov	ax, [si+4]
mov	[di+4],	ax
mov	[bp+4],	ax
mov	ax, [si+2]
add	ax, 2Bh	; '+'   ; Add
mov	[di+2],	ax
mov	ax, [si+6]
mov	[di+6],	ax
inc	ax		; Increment by 1
cmp	ax, 70h	; 'p'   ; Compare Two Operands
jb	short loc_17E14	; Jump if Below	(CF=1)

sub	ax, 6Dh	; 'm'   ; Integer Subtraction


loc_17E14:
mov	[bp+2],	ax
add	ax, 28h	; '('   ; Add
mov	[bp+6],	ax
retn			; Return Near from Procedure

sub_17DD9 endp




sub_17E1E proc near
call	sub_1D068	; Call Procedure

mov	si, 4705h
mov	dx, ds:18E9h
mov	bx, ds:18EBh
add	dx, 80h	; '�'   ; Add
add	bx, 2Dh	; '-'   ; Add
mov	bp, ds:18EFh
mov	word ptr ds:0DBE4h, 0F0h ; '�'

sub_17E1E endp




sub_17E3D proc near
call	near ptr off_1C13B ; Call Procedure

push	di
push	ds
pop	es
mov	di, 4C60h
mov	cx, 0Eh
xor	ax, ax		; Logical Exclusive OR
rep stosw		; Store	String
mov	di, si
mov	cx, 7
xor	al, al		; Logical Exclusive OR
repe scasb		; Compare String
jnz	short loc_17E69	; Jump if Not Zero (ZF=0)

add	bx, 5		; Add
add	dx, 0Ch		; Add
call	sub_1D04E	; Call Procedure

mov	ax, 69h	; 'i'
call	sub_1D19B	; Call Procedure

pop	di
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_17E69:		; Logical Exclusive OR
xor	di, di


loc_17E6B:
mov	al, [si]
or	al, al		; Logical Inclusive OR
jz	short loc_17E8E	; Jump if Zero (ZF=1)

mov	cl, al
push	si
push	di
push	bp
mov	al, [di+192Fh]
xor	ah, ah		; Logical Exclusive OR
shl	di, 1		; Shift	Logical	Left
shl	di, 1		; Shift	Logical	Left
mov	[di+4C60h], dx
call	sub_161D3	; Call Procedure

mov	[di+4C62h], dx
pop	bp
pop	di
pop	si


loc_17E8E:		; Increment by 1
inc	si
inc	di		; Increment by 1
cmp	di, 7		; Compare Two Operands
jb	short loc_17E6B	; Jump if Below	(CF=1)

pop	di
retn			; Return Near from Procedure

sub_17E3D endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_17BE0

loc_17E97:		; Compare Two Operands
cmp	byte ptr ds:46F5h, 0
jz	short nullsub_16 ; Jump	if Zero	(ZF=1)

mov	di, 1936h
call	sub_1D6FE	; Call Procedure

jnb	short nullsub_16 ; Jump	if Not Below (CF=0)

mov	si, 4C7Ch
call	sub_17EE2	; Call Procedure

jnb	short nullsub_16 ; Jump	if Not Below (CF=0)

dec	byte ptr [di+4705h] ; Decrement	by 1
inc	byte ptr [di+46FEh] ; Increment	by 1
jmp	short loc_17EDE	; Jump

; END OF FUNCTION CHUNK	FOR sub_17BE0
; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_15C76

loc_17EB8:		; Compare Two Operands
cmp	byte ptr ds:46F5h, 0
jz	short nullsub_16 ; Jump	if Zero	(ZF=1)

mov	di, 1940h
call	sub_1D6FE	; Call Procedure

jnb	short nullsub_16 ; Jump	if Not Below (CF=0)

mov	si, 4C60h
call	sub_17EE2	; Call Procedure

jnb	short nullsub_16 ; Jump	if Not Below (CF=0)

cmp	byte ptr [di+4705h], 0 ; Compare Two Operands
jnz	short nullsub_16 ; Jump	if Not Zero (ZF=0)

inc	byte ptr [di+4705h] ; Increment	by 1
dec	byte ptr [di+46FEh] ; Decrement	by 1

; END OF FUNCTION CHUNK	FOR sub_15C76
; START	OF FUNCTION CHUNK FOR sub_17BE0

loc_17EDE:		; Call Procedure
call	sub_17D0C

; END OF FUNCTION CHUNK	FOR sub_17BE0
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_16. PRESS	KEYPAD "+" TO EXPAND]



sub_17EE2 proc near
xor	di, di		; Logical Exclusive OR


loc_17EE4:		; Load String
lodsw
or	ax, ax		; Logical Inclusive OR
jz	short loc_17EF1	; Jump if Zero (ZF=1)

cmp	dx, ax		; Compare Two Operands
jb	short loc_17EF1	; Jump if Below	(CF=1)

cmp	dx, [si]	; Compare Two Operands
jb	short nullsub_16 ; Jump	if Below (CF=1)


loc_17EF1:		; Add
add	si, 2
inc	di		; Increment by 1
cmp	di, 7		; Compare Two Operands
jb	short loc_17EE4	; Jump if Below	(CF=1)

retn			; Return Near from Procedure

sub_17EE2 endp




sub_17EFB proc near
push	di
push	ds
pop	es
mov	di, 4705h
mov	ah, [si+19h]


loc_17F04:		; Logical Exclusive OR
xor	al, al
rol	ax, 1		; Rotate Left
stosb			; Store	String
cmp	di, 470Ch	; Compare Two Operands
jb	short loc_17F04	; Jump if Below	(CF=1)

pop	di
retn			; Return Near from Procedure

sub_17EFB endp




sub_17F11 proc near
push	si
mov	si, 470Bh
std			; Set Direction	Flag
xor	ax, ax		; Logical Exclusive OR


loc_17F18:		; Load String
lodsb
ror	ax, 1		; Rotate Right
cmp	si, 4705h	; Compare Two Operands
jnb	short loc_17F18	; Jump if Not Below (CF=0)

pop	si
cld			; Clear	Direction Flag
mov	[si+19h], ah
retn			; Return Near from Procedure

sub_17F11 endp




sub_17F27 proc near
mov	bx, 46FEh


loc_17F2A:
push	di
push	ds
pop	es
mov	al, [di+9]
lea	si, [di+14h]	; Load Effective Address
mov	di, bx
mov	cx, 7
rep movsb		; Move Byte(s) from String to String


loc_17F3A:		; Logical Inclusive OR
or	al, al
jz	short loc_17F5D	; Jump if Zero (ZF=1)

call	sub_16906	; Call Procedure

mov	al, [si+19h]
mov	di, bx
shl	al, 1		; Shift	Logical	Left
jnb	short loc_17F51	; Jump if Not Below (CF=0)


loc_17F4A:		; Integer Subtraction
sub	byte ptr [di], 1
jnb	short loc_17F51	; Jump if Not Below (CF=0)

inc	byte ptr [di]	; Increment by 1


loc_17F51:		; Increment by 1
inc	di
shl	al, 1		; Shift	Logical	Left
jb	short loc_17F4A	; Jump if Below	(CF=1)

jnz	short loc_17F51	; Jump if Not Zero (ZF=0)

mov	al, [si+1]
jmp	short loc_17F3A	; Jump

; ���������������������������������������������������������������������������

loc_17F5D:
pop	di
retn			; Return Near from Procedure

sub_17F27 endp




sub_17F5F proc near
mov	al, [si+19h]
push	di
add	di, 14h		; Add
shl	al, 1		; Shift	Logical	Left
jnb	short loc_17F6C	; Jump if Not Below (CF=0)


loc_17F6A:		; Increment by 1
inc	byte ptr [di]


loc_17F6C:		; Increment by 1
inc	di
shl	al, 1		; Shift	Logical	Left
jb	short loc_17F6A	; Jump if Below	(CF=1)

jnz	short loc_17F6C	; Jump if Not Zero (ZF=0)

pop	di
retn			; Return Near from Procedure

sub_17F5F endp




sub_17F75 proc near
mov	al, [si+19h]
push	di
add	di, 14h		; Add
shl	al, 1		; Shift	Logical	Left
jnb	short loc_17F87	; Jump if Not Below (CF=0)


loc_17F80:		; Integer Subtraction
sub	byte ptr [di], 1
jnb	short loc_17F87	; Jump if Not Below (CF=0)

inc	byte ptr [di]	; Increment by 1


loc_17F87:		; Increment by 1
inc	di
shl	al, 1		; Shift	Logical	Left
jb	short loc_17F80	; Jump if Below	(CF=1)

jnz	short loc_17F87	; Jump if Not Zero (ZF=0)

pop	di
retn			; Return Near from Procedure

sub_17F75 endp



; Attributes: bp-based frame

sub_17F90 proc near

arg_0= word ptr	 2
arg_2= word ptr	 4

mov	di, [si+4]
push	di
push	word ptr [di+4]
push	word ptr [di+2]
mov	bp, sp
mov	word ptr ds:470Ch, 0FFFFh
mov	di, 138h


loc_17FA5:		; Compare Two Operands
cmp	word ptr [di], 0FFFFh
jz	short loc_18014	; Jump if Zero (ZF=1)

test	byte ptr [di+0Ah], 80h ; Logical Compare
jnz	short loc_1800F	; Jump if Not Zero (ZF=0)

cmp	byte ptr [di+8], 28h ; '(' ; Compare Two Operands
jnb	short loc_1800F	; Jump if Not Below (CF=0)

cmp	di, [bp+arg_2]	; Compare Two Operands
jz	short loc_1800F	; Jump if Zero (ZF=1)

mov	dx, [di+2]
sub	dx, [bp+0]	; Integer Subtraction
jns	short loc_17FC5	; Jump if Not Sign (SF=0)

neg	dx		; Two's Complement Negation


loc_17FC5:
mov	ax, [di+4]
sub	ax, [bp+arg_0]	; Integer Subtraction
jns	short loc_17FCF	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_17FCF:
mov	dl, dh
xor	dh, dh		; Logical Exclusive OR
cmp	dl, al		; Compare Two Operands
jnb	short loc_17FD9	; Jump if Not Below (CF=0)

mov	dx, ax


loc_17FD9:		; Compare Two Operands
cmp	dl, 32h	; '2'
jnb	short loc_1800F	; Jump if Not Below (CF=0)

cmp	byte ptr [di+8], 21h ; '!' ; Compare Two Operands
jb	short loc_17FE8	; Jump if Below	(CF=1)

shr	dx, 1		; Shift	Logical	Right
shr	dx, 1		; Shift	Logical	Right


loc_17FE8:		; Compare Two Operands
cmp	dx, ds:470Ch
jnb	short loc_1800F	; Jump if Not Below (CF=0)

push	bx
mov	bx, 4C60h
call	loc_17F2A	; Call Procedure

pop	bx
cmp	byte ptr [bx+4C60h], 0 ; Compare Two Operands
jz	short loc_1800F	; Jump if Zero (ZF=1)

call	sub_18018	; Call Procedure

cmp	byte ptr [bx+4C60h], 0 ; Compare Two Operands
jz	short loc_1800F	; Jump if Zero (ZF=1)

mov	ds:470Ch, dx
mov	ds:470Eh, di


loc_1800F:		; Add
add	di, 1Ch
jmp	short loc_17FA5	; Jump

; ���������������������������������������������������������������������������

loc_18014:		; Add
add	sp, 6
retn			; Return Near from Procedure

sub_17F90 endp




sub_18018 proc near
mov	si, 88Fh


loc_1801B:		; Add
add	si, 1Bh
cmp	si, 0FBBh	; Compare Two Operands
jnb	short loc_1804C	; Jump if Not Below (CF=0)

mov	al, [si+3]
test	al, 40h		; Logical Compare
jz	short loc_1801B	; Jump if Zero (ZF=1)

and	al, 3		; Logical AND
cmp	al, 3		; Compare Two Operands
jnz	short loc_1801B	; Jump if Not Zero (ZF=0)

cmp	di, [si+4]	; Compare Two Operands
jnz	short loc_1801B	; Jump if Not Zero (ZF=0)

cmp	di, [si+0Ch]	; Compare Two Operands
jz	short loc_1801B	; Jump if Zero (ZF=1)

cmp	bl, [si+0Eh]	; Compare Two Operands
jnz	short loc_1801B	; Jump if Not Zero (ZF=0)

dec	byte ptr [bx+4C60h] ; Decrement	by 1
jns	short loc_1801B	; Jump if Not Sign (SF=0)

inc	byte ptr [bx+4C60h] ; Increment	by 1
jmp	short loc_1801B	; Jump

; ���������������������������������������������������������������������������

loc_1804C:		; Compare Two Operands
cmp	di, ds:1150h
jnz	short locret_18063 ; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:2Ah, 50h ; 'P' ; Compare Two Operands
jnb	short locret_18063 ; Jump if Not Below (CF=0)

dec	byte ptr ds:4C61h ; Decrement by 1
jns	short locret_18063 ; Jump if Not Sign (SF=0)

inc	byte ptr ds:4C61h ; Increment by 1


locret_18063:		; Return Near from Procedure
retn

sub_18018 endp

; ���������������������������������������������������������������������������
mov	ax, 1AACh
call	sub_1D95E	; Call Procedure

call	sub_168EB	; Call Procedure

cmp	si, 8E0h	; Compare Two Operands
jz	short loc_18082	; Jump if Zero (ZF=1)

mov	ax, 54h	; 'T'
call	sub_180DF	; Call Procedure

mov	bp, 212Eh
mov	bx, 824Dh
jmp	sub_1D323	; Jump

; ���������������������������������������������������������������������������

loc_18082:
push	ds
pop	es
mov	di, 4718h
mov	si, 11D3h
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
sub	di, 6		; Integer Subtraction
xor	ax, ax		; Logical Exclusive OR
mov	cx, 4
repne scasw		; Compare String
sub	cx, 3		; Integer Subtraction
neg	cx		; Two's Complement Negation
mov	ds:4738h, cl
mov	ax, 55h	; 'U'
call	sub_180DF	; Call Procedure

call	sub_180AC	; Call Procedure

jmp	loc_1D32F	; Jump




sub_180AC proc near
mov	bp, 2136h
and	byte ptr [bp+3], 0BFh ;	Logical	AND
xor	cx, cx		; Logical Exclusive OR
mov	al, ds:4738h
dec	al		; Decrement by 1
cmp	al, 2		; Compare Two Operands
jb	short loc_180C3	; Jump if Below	(CF=1)

or	byte ptr [bp+3], 40h ; Logical Inclusive OR
inc	cx		; Increment by 1


loc_180C3:
mov	bx, 824Dh
retn			; Return Near from Procedure

sub_180AC endp

; ���������������������������������������������������������������������������
retn			; Return Near from Procedure




sub_180C8 proc near
mov	byte ptr ds:4738h, 0
xor	ax, ax		; Logical Exclusive OR
mov	ds:4718h, ax
mov	ds:471Ah, ax
mov	ds:471Ch, ax
retn			; Return Near from Procedure

sub_180C8 endp

; ���������������������������������������������������������������������������
call	sub_180C8	; Call Procedure

jmp	loc_18286	; Jump




sub_180DF proc near
push	ax
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

call	sub_18FD1	; Call Procedure

pop	bx
mov	si, offset unk_216F4
mov	ax, [si+2]
push	ax
push	word ptr [si+6]
push	bx
cmp	ax, 32h	; '2'   ; Compare Two Operands
jb	short loc_180FA	; Jump if Below	(CF=1)

add	ax, 26h	; '&'   ; Add


loc_180FA:
mov	[si+2],	ax

loc_180FD:
mov	word ptr [si+6], 19h
call	sub_19F82	; Call Procedure

pop	ax
call	sub_188AF	; Call Procedure

cmp	byte ptr ds:4774h, 0 ; Compare Two Operands
jnz	short loc_1811E	; Jump if Not Zero (ZF=0)

mov	ax, 10Ah
add	ax, ds:0D810h	; Add
add	ds:4780h, ax	; Add
call	sub_19EFD	; Call Procedure


loc_1811E:
pop	word ptr ds:224Ah
pop	word ptr ds:2246h
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

mov	word ptr ds:4720h, 18F3h
mov	byte ptr ds:4722h, 0
call	sub_1541F	; Call Procedure

mov	word ptr ds:1BEAh, 0
retn			; Return Near from Procedure

sub_180DF endp




sub_1813E proc near
sub	sp, 30h		; Integer Subtraction
mov	di, sp
call	sub_168EB	; Call Procedure

mov	dx, [si+6]
mov	bx, [si+8]
call	sub_181D7	; Call Procedure

cmp	si, 8E0h	; Compare Two Operands
jnz	short loc_1816A	; Jump if Not Zero (ZF=0)

mov	si, 4718h


loc_18158:		; Load String
lodsw
or	ax, ax		; Logical Inclusive OR
jz	short loc_18176	; Jump if Zero (ZF=1)

mov	bx, ax
mov	dx, [bx+2]
mov	bx, [bx+4]
call	sub_181D7	; Call Procedure

jmp	short loc_18158	; Jump

; ���������������������������������������������������������������������������

loc_1816A:
mov	bx, [si+4]
mov	dx, [bx+2]
mov	bx, [bx+4]
call	sub_181D7	; Call Procedure


loc_18176:
mov	si, sp


loc_18178:		; Load String
lodsw
mov	dx, ax
lodsw			; Load String
mov	bx, ax
lodsw			; Load String
mov	di, [si]
cmp	di, 8000h	; Compare Two Operands
jz	short loc_181D3	; Jump if Zero (ZF=1)

push	si
mov	cx, [si+2]
sub	ax, [si+4]	; Integer Subtraction
mov	si, dx
sub	si, di		; Integer Subtraction
xor	ax, si		; Logical Exclusive OR
jns	short loc_181C0	; Jump if Not Sign (SF=0)

mov	ax, si
or	ax, ax		; Logical Inclusive OR
jns	short loc_1819E	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_1819E:		; Compare Two Operands
cmp	ax, 50h	; 'P'
jb	short loc_181C0	; Jump if Below	(CF=1)

cmp	dx, ds:46E3h	; Compare Two Operands
jl	short loc_181B5	; Jump if Less (SF!=OF)

cmp	dx, ds:46E7h	; Compare Two Operands
jge	short loc_181B5	; Jump if Greater or Equal (SF=OF)

xchg	dx, di		; Exchange Register/Memory with	Register
xchg	bx, cx		; Exchange Register/Memory with	Register
neg	si		; Two's Complement Negation


loc_181B5:
mov	ax, 190h
or	si, si		; Logical Inclusive OR
js	short loc_181BE	; Jump if Sign (SF=1)

neg	ax		; Two's Complement Negation


loc_181BE:		; Add
add	dx, ax


loc_181C0:
mov	es, ds:_word_2D08A_framebuffer_active
mov	al, 0Ch
mov	bp, 5555h
mov	si, 46E3h
call	ds:_ptr_22D65_gfx_vtable_func_19 ; Indirect Call Far Procedure
pop	si
jmp	short loc_18178	; Jump

; ���������������������������������������������������������������������������

loc_181D3:		; Add
add	sp, 30h
retn			; Return Near from Procedure

sub_1813E endp




sub_181D7 proc near
mov	[di+4],	dx
push	di
call	sub_1B647	; Call Procedure

pop	di
mov	[di], dx
mov	[di+2],	bx
add	di, 6		; Add
mov	word ptr [di], 8000h
retn			; Return Near from Procedure

sub_181D7 endp

; ���������������������������������������������������������������������������
call	near ptr off_1C13B ; Call Procedure

mov	di, ds:0DBE2h
call	sub_1D6FE	; Call Procedure

jnb	short loc_18246	; Jump if Not Below (CF=0)

call	sub_15944	; Call Procedure

mov	byte ptr ds:46EBh, 40h ; '@'
mov	al, 0FFh
call	sub_15E6D	; Call Procedure

mov	byte ptr ds:46EBh, 0C0h	; '�'
cmp	ax, 9		; Compare Two Operands
jnb	short locret_1824C ; Jump if Not Below (CF=0)

call	sub_18256	; Call Procedure

jb	short locret_1824C ; Jump if Below (CF=1)

call	sub_182B7	; Call Procedure

call	sub_168EB	; Call Procedure

cmp	si, 8E0h	; Compare Two Operands
jnz	short loc_18235	; Jump if Not Zero (ZF=0)

push	si
mov	si, 4718h
mov	di, 11D3h
push	ds
pop	es
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
pop	si
mov	di, ds:11D3h
or	di, di		; Logical Inclusive OR
jz	short loc_18246	; Jump if Zero (ZF=1)


loc_18235:		; Call Procedure
call	sub_182DA

jnz	short loc_18246	; Jump if Not Zero (ZF=0)

call	sub_184A6	; Call Procedure

call	loc_1D2FD	; Call Procedure

call	sub_18250	; Call Procedure

jmp	sub_1878C	; Jump

; ���������������������������������������������������������������������������

loc_18246:		; Call Procedure
call	sub_1D2E2

jmp	near ptr off_1C13B ; Jump

; ���������������������������������������������������������������������������

locret_1824C:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������
call	sub_182B7	; Call Procedure




sub_18250 proc near
call	sub_15AD3	; Call Procedure

jmp	near ptr off_1C13B ; Jump

sub_18250 endp




sub_18256 proc near
call	sub_168EB	; Call Procedure

cmp	si, 8E0h	; Compare Two Operands
jnz	short loc_1829E	; Jump if Not Zero (ZF=0)

mov	al, [di+8]
cmp	al, 20h	; ' '   ; Compare Two Operands
jb	short loc_1826C	; Jump if Below	(CF=1)

test	byte ptr [di+0Ah], 8 ; Logical Compare
jz	short loc_18296	; Jump if Zero (ZF=1)


loc_1826C:		; Compare Two Operands
cmp	byte ptr ds:4738h, 3
jb	short loc_18276	; Jump if Below	(CF=1)

call	sub_180C8	; Call Procedure


loc_18276:		; Logical Exclusive OR
xor	bx, bx
mov	bl, ds:4738h
inc	byte ptr ds:4738h ; Increment by 1
shl	bx, 1		; Shift	Logical	Left
mov	[bx+4718h], di


loc_18286:		; Call Procedure
call	sub_1542F

call	sub_180AC	; Call Procedure

call	loc_1D33A	; Call Procedure

cmp	byte ptr ds:4738h, 3 ; Compare Two Operands
jnb	short loc_18298	; Jump if Not Below (CF=0)


loc_18296:		; Set Carry Flag
stc
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_18298:
mov	ax, 32h	; '2'
call	sub_1E3A0	; Call Procedure


loc_1829E:		; Clear	Carry Flag
clc
retn			; Return Near from Procedure

sub_18256 endp




sub_182A0 proc near
call	sub_1D41B	; Call Procedure

cmp	bp, 212Eh	; Compare Two Operands
jz	short loc_182AD	; Jump if Zero (ZF=1)

cmp	bp, 2136h	; Compare Two Operands


loc_182AD:		; Jump if Not Zero (ZF=0)
jnz	short locret_182B6

mov	al, ds:46EBh
not	al		; One's Complement Negation
test	al, 40h		; Logical Compare


locret_182B6:		; Return Near from Procedure
retn

sub_182A0 endp




sub_182B7 proc near
test	byte ptr ds:46EBh, 40h ; Logical Compare
jz	short locret_182D9 ; Jump if Zero (ZF=1)

call	sub_158FA	; Call Procedure

call	sub_1E270	; Call Procedure

call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

mov	si, 18E9h
call	sub_1C551	; Call Procedure

call	sub_168EB	; Call Procedure

call	sub_17BE0	; Call Procedure

call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

call	sub_1E283	; Call Procedure


locret_182D9:		; Return Near from Procedure
retn

sub_182B7 endp




sub_182DA proc near
push	di
push	si
mov	bp, [si+4]
cmp	si, 8E0h	; Compare Two Operands
jz	short loc_182EB	; Jump if Zero (ZF=1)

mov	al, 10h
cmp	di, bp		; Compare Two Operands
jz	short loc_182FA	; Jump if Zero (ZF=1)


loc_182EB:
push	bp
mov	[si+4],	di
call	sub_131F6	; Call Procedure

call	sub_12E98	; Call Procedure

pop	word ptr [si+4]
mov	al, 0Bh


loc_182FA:		; Call Procedure
call	sub_19F82

call	sub_1A1C4	; Call Procedure

call	loc_17BBE	; Call Procedure

pop	si
pop	di
jmp	sub_1A1E2	; Jump

sub_182DA endp




sub_18308 proc near

; FUNCTION CHUNK AT C653 SIZE 0000000E BYTES

mov	cx, 4
test	byte ptr [si+19h], 40h ; Logical Compare
jz	short loc_18313	; Jump if Zero (ZF=1)

mov	cl, 8


loc_18313:
push	cx
call	sub_18604	; Call Procedure

pop	cx
mov	ax, bx
or	ax, dx		; Logical Inclusive OR
jz	short sub_18357	; Jump if Zero (ZF=1)

add	[si+6],	dx	; Add
add	[si+8],	bx	; Add
loop	loc_18313	; Loop while CX	!= 0

call	sub_1686E	; Call Procedure

jb	short loc_18333	; Jump if Below	(CF=1)

call	sub_16917	; Call Procedure

jnz	short loc_1833C	; Jump if Not Zero (ZF=0)

jmp	loc_1C653	; Jump

; ���������������������������������������������������������������������������

loc_18333:		; Call Procedure
call	sub_16917

jnz	short locret_1833B ; Jump if Not Zero (ZF=0)

jmp	sub_1C58A	; Jump

; ���������������������������������������������������������������������������

locret_1833B:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1833C:		; Call Procedure
call	sub_16827

call	sub_1C5CF	; Call Procedure

mov	si, di
jmp	sub_1C6AD	; Jump

sub_18308 endp




sub_18347 proc near
push	si
push	di
mov	di, 11D3h
lea	si, [di+2]	; Load Effective Address
push	ds
pop	es
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
pop	di
pop	si
retn			; Return Near from Procedure

sub_18347 endp




sub_18357 proc near

; FUNCTION CHUNK AT 841F SIZE 00000035 BYTES

cmp	si, 8E0h	; Compare Two Operands
jnz	short loc_18368	; Jump if Not Zero (ZF=0)

mov	ax, ds:11D3h
cmp	ax, [si+4]	; Compare Two Operands
jnz	short loc_18368	; Jump if Not Zero (ZF=0)

call	sub_18347	; Call Procedure


loc_18368:
mov	al, [si+3]
and	al, 0Fh		; Logical AND
mov	di, [si+4]
mov	dx, [di+2]
mov	bx, [di+4]
mov	[si+6],	dx
mov	[si+8],	bx
test	byte ptr [di+0Ah], 2 ; Logical Compare
jnz	short loc_18387	; Jump if Not Zero (ZF=0)

call	sub_15D36	; Call Procedure

jb	short loc_183A7	; Jump if Below	(CF=1)


loc_18387:
push	ax
call	sub_183BC	; Call Procedure

pop	ax
cmp	al, 5		; Compare Two Operands
jz	short loc_1839A	; Jump if Zero (ZF=1)

mov	al, [si]
cmp	al, [di+9]	; Compare Two Operands
jnz	short sub_183FD	; Jump if Not Zero (ZF=0)

jmp	loc_17429	; Jump

; ���������������������������������������������������������������������������

loc_1839A:		; Logical Compare
test	byte ptr [di+0Ah], 80h
jz	short sub_183FD	; Jump if Zero (ZF=1)

and	byte ptr [di+0Ah], 7Fh ; Logical AND
jmp	loc_15D44	; Jump

; ���������������������������������������������������������������������������

loc_183A7:		; Compare Two Operands
cmp	al, 5
jb	short loc_183B6	; Jump if Below	(CF=1)

cmp	al, 6		; Compare Two Operands
ja	short loc_183B6	; Jump if Above	(CF=0 &	ZF=0)

push	di
call	sub_16AC5	; Call Procedure

pop	di
xor	al, al		; Logical Exclusive OR


loc_183B6:		; Logical AND
and	al, 3
cmp	al, 3		; Compare Two Operands
jz	short loc_1841F	; Jump if Zero (ZF=1)

sub_18357 endp




sub_183BC proc near
call	sub_1851F	; Call Procedure

and	byte ptr [si+3], 0BFh ;	Logical	AND
call	sub_185CC	; Call Procedure

call	sub_17F5F	; Call Procedure

mov	cl, [si+3]
or	cl, cl		; Logical Inclusive OR
js	short locret_183FC ; Jump if Sign (SF=1)

and	cl, 0Fh		; Logical AND
call	sub_16AD4	; Call Procedure

mov	di, [si+4]
cmp	di, ds:114Eh	; Compare Two Operands
jnz	short locret_183FC ; Jump if Not Zero (ZF=0)

call	sub_1D41B	; Call Procedure

cmp	bp, 1F0Eh	; Compare Two Operands
jnz	short locret_183FC ; Jump if Not Zero (ZF=0)

mov	al, 1
cmp	byte ptr ds:2Bh, 1 ; Compare Two Operands
adc	al, 0		; Add with Carry
cmp	ds:0Bh,	al	; Compare Two Operands
jnz	short locret_183FC ; Jump if Not Zero (ZF=0)

or	byte ptr ds:473Bh, 1 ; Logical Inclusive OR


locret_183FC:		; Return Near from Procedure
retn

sub_183BC endp




sub_183FD proc near
mov	bp, offset sub_18403
jmp	sub_1661D	; Jump

sub_183FD endp




sub_18403 proc near
test	byte ptr [si+3], 20h ; Logical Compare
jnz	short locret_1841B ; Jump if Not Zero (ZF=0)

mov	al, [si+3]
and	al, 0Fh		; Logical AND
cmp	al, 1		; Compare Two Operands
jz	short loc_1841C	; Jump if Zero (ZF=1)

cmp	al, 6		; Compare Two Operands
jz	short locret_1841B ; Jump if Zero (ZF=1)

mov	cl, 6
call	loc_16ACB	; Call Procedure


locret_1841B:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1841C:		; Jump
jmp	sub_17085

sub_18403 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_18357

loc_1841F:
mov	di, [si+4]
cmp	di, [si+0Ch]	; Compare Two Operands
jz	short loc_1844D	; Jump if Zero (ZF=1)

push	si
call	sub_17F27	; Call Procedure

pop	si
mov	bx, [si+0Eh]
mov	cx, bx
xor	bh, bh		; Logical Exclusive OR
cmp	byte ptr [bx+46FEh], 0 ; Compare Two Operands
jz	short loc_18442	; Jump if Zero (ZF=1)

dec	byte ptr [bx+di+14h] ; Decrement by 1
or	[si+19h], ch	; Logical Inclusive OR
xor	ch, ch		; Logical Exclusive OR


loc_18442:
mov	[si+0Eh], cx
mov	di, [si+0Ch]
mov	[si+4],	di
jmp	short sub_18461	; Jump

; ���������������������������������������������������������������������������

loc_1844D:		; Logical AND
and	byte ptr [si+3], 0FCh
jmp	sub_183BC	; Jump

; END OF FUNCTION CHUNK	FOR sub_18357
; ���������������������������������������������������������������������������
call	sub_16AC5	; Call Procedure

call	sub_1851F	; Call Procedure

and	byte ptr [si+3], 0BFh ;	Logical	AND
jmp	sub_17F5F	; Jump




sub_18461 proc near
call	sub_16917	; Call Procedure

jz	short loc_18467	; Jump if Zero (ZF=1)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_18467:
push	si
call	sub_1C58A	; Call Procedure

pop	si


loc_1846C:
push	si
test	byte ptr [si+3], 40h ; Logical Compare
jnz	short loc_1847B	; Jump if Not Zero (ZF=0)

mov	di, [si+4]
call	sub_15ED0	; Call Procedure

jnz	short loc_1848B	; Jump if Not Zero (ZF=0)


loc_1847B:
mov	al, [si]
call	sub_16757	; Call Procedure

jb	short loc_1848B	; Jump if Below	(CF=1)

mov	si, di
push	di
call	sub_1C6AD	; Call Procedure

pop	di


loc_18489:
pop	si
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1848B:		; Logical Exclusive OR
xor	di, di
jmp	short loc_18489	; Jump

sub_18461 endp




sub_1848F proc near
mov	di, ds:11D3h
cmp	[si+4],	di	; Compare Two Operands
jnz	short loc_184A3	; Jump if Not Zero (ZF=0)

test	byte ptr [si+3], 40h ; Logical Compare
jnz	short loc_184A3	; Jump if Not Zero (ZF=0)

call	sub_18347	; Call Procedure

jmp	short sub_1848F	; Jump

; ���������������������������������������������������������������������������

loc_184A3:		; Logical Inclusive OR
or	di, di
retn			; Return Near from Procedure

sub_1848F endp




sub_184A6 proc near
cmp	si, 8E0h	; Compare Two Operands
jnz	short loc_184B2	; Jump if Not Zero (ZF=0)

call	sub_1848F	; Call Procedure

jnz	short loc_184B2	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_184B2:		; Logical Compare
test	byte ptr [si+3], 40h
jz	short loc_184CA	; Jump if Zero (ZF=1)

mov	[si+4],	di
mov	al, 3
and	al, [si+3]	; Logical AND
cmp	al, 3		; Compare Two Operands
jnz	short loc_184C8	; Jump if Not Zero (ZF=0)

and	byte ptr [si+3], 0FCh ;	Logical	AND


loc_184C8:		; Jump
jmp	short sub_18461

; ���������������������������������������������������������������������������

loc_184CA:		; Call Procedure
call	sub_16EBF

push	di
call	sub_1858C	; Call Procedure

pop	di
cmp	byte ptr [si+3], 6 ; Compare Two Operands
jnz	short loc_18501	; Jump if Not Zero (ZF=0)

push	di
mov	di, [si+4]
test	byte ptr [di+0Ah], 2 ; Logical Compare
jz	short loc_184EF	; Jump if Zero (ZF=1)

call	sub_15098	; Call Procedure

jcxz	short loc_184EF	; Jump if CX is	0

dec	dx		; Decrement by 1
jg	short loc_184EF	; Jump if Greater (ZF=0	& SF=OF)

push	si
call	sub_174B6	; Call Procedure

pop	si


loc_184EF:
pop	di
cmp	byte ptr [di+8], 28h ; '(' ; Compare Two Operands
jnb	short loc_18501	; Jump if Not Below (CF=0)

test	byte ptr [di+0Ah], 2 ; Logical Compare
jnz	short locret_1851E ; Jump if Not Zero (ZF=0)

mov	al, 3
call	sub_16F93	; Call Procedure


loc_18501:		; Exchange Register/Memory with	Register
xchg	di, [si+4]
or	byte ptr [si+3], 40h ; Logical Inclusive OR
mov	byte ptr [si+2], 0
call	sub_17F75	; Call Procedure

call	sub_18461	; Call Procedure

test	byte ptr [si+10h], 10h ; Logical Compare
jnz	short locret_1851E ; Jump if Not Zero (ZF=0)

mov	cx, 7
jmp	loc_18313	; Jump

; ���������������������������������������������������������������������������

locret_1851E:		; Return Near from Procedure
retn

sub_184A6 endp




sub_1851F proc near
mov	ah, [si]
mov	al, [di+9]
or	al, al		; Logical Inclusive OR
jnz	short loc_18540	; Jump if Not Zero (ZF=0)

mov	[di+9],	ah
mov	cx, 1
mov	[si+2],	cl
test	word ptr [si+10h], 80h ; Logical Compare
jz	short locret_1853F ; Jump if Zero (ZF=1)

add	byte ptr [si+2], 8 ; Add
add	cl, 8		; Add


locret_1853F:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_18540:
push	di
push	ds
pop	es
sub	sp, 1Eh		; Integer Subtraction
mov	di, sp
mov	cx, 1Eh
push	ax
xor	al, al		; Logical Exclusive OR
rep stosb		; Store	String
pop	ax
mov	di, sp
push	si
xor	bx, bx		; Logical Exclusive OR


loc_18556:		; Call Procedure
call	sub_16906

mov	bl, [si+2]
mov	byte ptr [bx+di-1], 0FFh
mov	al, [si+1]
or	al, al		; Logical Inclusive OR
jnz	short loc_18556	; Jump if Not Zero (ZF=0)

mov	[si+1],	ah
mov	cx, 1Eh
pop	si
test	word ptr [si+10h], 80h ; Logical Compare
jz	short loc_1857B	; Jump if Zero (ZF=1)

sub	cx, 8		; Integer Subtraction
add	di, 8		; Add


loc_1857B:		; Logical Exclusive OR
xor	al, al
repne scasb		; Compare String
sub	cx, 1Eh		; Integer Subtraction
neg	cx		; Two's Complement Negation
add	sp, 1Eh		; Add
pop	di
mov	[si+2],	cl
retn			; Return Near from Procedure

sub_1851F endp




sub_1858C proc near
mov	bp, si
mov	al, [si]
mov	di, [si+4]
push	di
test	byte ptr [si+3], 40h ; Logical Compare
jnz	short loc_185BA	; Jump if Not Zero (ZF=0)

cmp	al, [di+9]	; Compare Two Operands
jz	short loc_185C2	; Jump if Zero (ZF=1)

mov	cl, al
mov	al, [di+9]


loc_185A4:		; Call Procedure
call	sub_16906

mov	al, [si+1]
mov	di, si
or	al, al		; Logical Inclusive OR
jz	short loc_185BA	; Jump if Zero (ZF=1)

cmp	al, cl		; Compare Two Operands
jnz	short loc_185A4	; Jump if Not Zero (ZF=0)

mov	ah, [bp+1]
mov	[si+1],	ah


loc_185BA:
mov	si, bp
mov	byte ptr [si+1], 0
pop	di
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_185C2:		; Logical Exclusive OR
xor	ah, ah
xchg	ah, [si+1]	; Exchange Register/Memory with	Register
pop	di
mov	[di+9],	ah
retn			; Return Near from Procedure

sub_1858C endp




sub_185CC proc near
test	word ptr [si+10h], 80h ; Logical Compare
jnz	short locret_18603 ; Jump if Not Zero (ZF=0)

cmp	byte ptr [si+2], 8 ; Compare Two Operands
jbe	short locret_18603 ; Jump if Below or Equal (CF=1 | ZF=1)

call	sub_1858C	; Call Procedure

push	si
mov	al, [di+9]


loc_185E0:		; Logical Inclusive OR
or	al, al
jz	short loc_185FF	; Jump if Zero (ZF=1)

call	sub_16906	; Call Procedure

mov	al, [si+1]
test	byte ptr [si+10h], 80h ; Logical Compare
jnz	short loc_185E0	; Jump if Not Zero (ZF=0)

test	byte ptr [si+3], 20h ; Logical Compare
jz	short loc_185E0	; Jump if Zero (ZF=1)

call	sub_1E270	; Call Procedure

call	sub_166B1	; Call Procedure

call	sub_1E283	; Call Procedure


loc_185FF:
pop	si
call	sub_1851F	; Call Procedure


locret_18603:		; Return Near from Procedure
retn

sub_185CC endp




sub_18604 proc near
push	si
mov	di, [si+4]
mov	dx, [di+2]
mov	bx, [si+8]
mov	bp, bx
shl	bp, 1		; Shift	Logical	Left
jns	short loc_18616	; Jump if Not Sign (SF=0)

neg	bp		; Two's Complement Negation


loc_18616:
mov	bp, [bp+4880h]
sub	bx, [di+4]	; Integer Subtraction
neg	bx		; Two's Complement Negation
mov	di, 1
jns	short loc_18628	; Jump if Not Sign (SF=0)

neg	di		; Two's Complement Negation
neg	bx		; Two's Complement Negation


loc_18628:		; Integer Subtraction
sub	dx, [si+6]
mov	ax, dx
jns	short loc_18631	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_18631:
mov	si, dx
xor	dx, dx		; Logical Exclusive OR
div	bp		; Unsigned Divide
mov	dx, si
xchg	bx, di		; Exchange Register/Memory with	Register
cmp	ax, di		; Compare Two Operands
jb	short loc_18666	; Jump if Below	(CF=1)

cmp	ax, 7		; Compare Two Operands
jb	short loc_18660	; Jump if Below	(CF=1)

or	di, di		; Logical Inclusive OR
jnz	short loc_1864A	; Jump if Not Zero (ZF=0)

xor	bx, bx		; Logical Exclusive OR


loc_1864A:		; Logical Inclusive OR
or	dx, dx
jns	short loc_18650	; Jump if Not Sign (SF=0)

neg	bp		; Two's Complement Negation


loc_18650:		; Shift	Logical	Right
shr	ax, 1
jz	short loc_1865E	; Jump if Zero (ZF=1)

mov	dx, bp
rol	word ptr ds:0, 1 ; Rotate Left
jb	short loc_1865E	; Jump if Below	(CF=1)

xor	bx, bx		; Logical Exclusive OR


loc_1865E:
pop	si
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_18660:		; Logical Exclusive OR
xor	bx, bx
xor	dx, dx		; Logical Exclusive OR
pop	si
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_18666:		; Compare Two Operands
cmp	di, 7
jb	short loc_18660	; Jump if Below	(CF=1)

or	ax, ax		; Logical Inclusive OR
jz	short loc_1865E	; Jump if Zero (ZF=1)

or	dx, dx		; Logical Inclusive OR
jns	short loc_18675	; Jump if Not Sign (SF=0)

neg	bp		; Two's Complement Negation


loc_18675:		; Shift	Logical	Right
shr	di, 1
jz	short loc_1865E	; Jump if Zero (ZF=1)

mov	dx, bp
rol	word ptr ds:0, 1 ; Rotate Left
jb	short loc_1865E	; Jump if Below	(CF=1)

xor	dx, dx		; Logical Exclusive OR
pop	si
retn			; Return Near from Procedure

sub_18604 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_15A03

loc_18685:
mov	byte ptr ds:46D8h, 1
call	sub_169A3	; Call Procedure

call	sub_17B58	; Call Procedure

call	sub_15F79	; Call Procedure

call	sub_179DE	; Call Procedure

call	sub_158FA	; Call Procedure

mov	al, ds:1954h
cmp	al, 43h	; 'C'   ; Compare Two Operands
ja	short locret_186B8 ; Jump if Above (CF=0 & ZF=0)

call	sub_16906	; Call Procedure

jnb	short locret_186B8 ; Jump if Not Below (CF=0)

mov	ds:1955h, al
push	si
call	sub_1697C	; Call Procedure

pop	si
push	si
call	sub_1780A	; Call Procedure

pop	si
mov	di, [si+4]
call	sub_17C02	; Call Procedure


locret_186B8:		; Return Near from Procedure
retn

; END OF FUNCTION CHUNK	FOR sub_15A03
; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_15B1E

loc_186B9:
mov	di, ds:114Eh
mov	al, [di+9]
mov	ds:1954h, al
call	sub_15B5D	; Call Procedure

call	word ptr ds:46EDh ; Indirect Call Near Procedure
jmp	short loc_18685	; Jump

; ���������������������������������������������������������������������������

loc_186CC:		; Call Procedure
call	sub_15BEB

cmp	byte ptr ds:28h, 0 ; Compare Two Operands
jz	short locret_186B8 ; Jump if Zero (ZF=1)

cmp	word ptr ds:1176h, 2 ; Compare Two Operands
jb	short loc_186B9	; Jump if Below	(CF=1)

mov	ax, ds:1954h
or	al, al		; Logical Inclusive OR
jnz	short loc_186FA	; Jump if Not Zero (ZF=0)

mov	al, ah
or	al, al		; Logical Inclusive OR
jz	short loc_186FA	; Jump if Zero (ZF=1)

mov	ds:1954h, al
call	sub_16906	; Call Procedure

call	sub_16917	; Call Procedure

jz	short loc_18685	; Jump if Zero (ZF=1)

mov	byte ptr ds:1954h, 0


loc_186FA:
mov	si, 3CBEh
lodsw			; Load String
mov	cx, ax
jcxz	short locret_186B8 ; Jump if CX	is 0

mov	al, ds:1954h
mov	bh, 0FFh
xor	di, di		; Logical Exclusive OR


loc_18709:
mov	bp, [si+0Ah]
cmp	byte ptr [bp+3], 80h ; '�' ; Compare Two Operands
jnb	short loc_18721	; Jump if Not Below (CF=0)

mov	ah, [bp+0]
sub	ah, al		; Integer Subtraction
jz	short loc_18721	; Jump if Zero (ZF=1)

cmp	ah, bh		; Compare Two Operands
ja	short loc_18721	; Jump if Above	(CF=0 &	ZF=0)

mov	bh, ah
mov	di, si


loc_18721:		; Add
add	si, 11h
loop	loc_18709	; Loop while CX	!= 0

or	di, di		; Logical Inclusive OR
jz	short locret_186B8 ; Jump if Zero (ZF=1)

mov	si, di


loc_1872C:
mov	si, [si+0Ah]
mov	al, [si]
cmp	word ptr ds:1176h, 2 ; Compare Two Operands
jnb	short loc_18741	; Jump if Not Below (CF=0)

mov	di, [si+4]
cmp	di, ds:114Eh	; Compare Two Operands
jnz	short locret_18750 ; Jump if Not Zero (ZF=0)


loc_18741:		; Compare Two Operands
cmp	al, ds:1954h
jz	short loc_1874D	; Jump if Zero (ZF=1)

mov	ds:1954h, al
jmp	loc_18685	; Jump

; ���������������������������������������������������������������������������

loc_1874D:		; Jump
jmp	sub_17C02

; ���������������������������������������������������������������������������

locret_18750:		; Return Near from Procedure
retn

; END OF FUNCTION CHUNK	FOR sub_15B1E



sub_18751 proc near
cmp	byte ptr ds:1954h, 0 ; Compare Two Operands
jz	short locret_1878B ; Jump if Zero (ZF=1)

call	sub_169A3	; Call Procedure

mov	byte ptr ds:1954h, 0
jmp	sub_17B58	; Jump

sub_18751 endp




sub_18763 proc near
cmp	byte ptr ds:46F3h, 0 ; Compare Two Operands
jz	short sub_18770	; Jump if Zero (ZF=1)

call	sub_18770	; Call Procedure

jmp	loc_1186B	; Jump

sub_18763 endp




sub_18770 proc near
cmp	byte ptr ds:1954h, 0 ; Compare Two Operands
jz	short locret_1878B ; Jump if Zero (ZF=1)

call	sub_1E270	; Call Procedure

mov	byte ptr ds:46F3h, 0
call	sub_1878C	; Call Procedure

mov	word ptr ds:1BEAh, 0
call	sub_1E283	; Call Procedure


locret_1878B:		; Return Near from Procedure
retn

sub_18770 endp




sub_1878C proc near
mov	word ptr ds:47BAh, 0
mov	ax, 40A7h
cmp	byte ptr ds:8, 0FFh ; Compare Two Operands
jz	short loc_187C0	; Jump if Zero (ZF=1)

cmp	byte ptr ds:8, 20h ; ' ' ; Compare Two Operands
jb	short loc_187AA	; Jump if Below	(CF=1)

cmp	byte ptr ds:0Bh, 3 ; Compare Two Operands
jnb	short loc_187C0	; Jump if Not Below (CF=0)


loc_187AA:
push	di
mov	di, ds:114Eh
call	sub_17F27	; Call Procedure

pop	di
mov	ax, 0A7h ; '�'
cmp	byte ptr ds:46FFh, 0 ; Compare Two Operands
jnz	short loc_187C0	; Jump if Not Zero (ZF=0)

or	ah, 40h		; Logical Inclusive OR


loc_187C0:
mov	bp, 20F2h
mov	[bp+0Eh], ax
or	byte ptr [bp+0Bh], 40h ; Logical Inclusive OR
mov	word ptr [bp+12h], 0
cmp	byte ptr ds:2Ah, 5 ; Compare Two Operands
jb	short loc_187DF	; Jump if Below	(CF=1)

and	byte ptr [bp+0Bh], 0BFh	; Logical AND
mov	word ptr [bp+12h], 67h ; 'g'


loc_187DF:		; Compare Two Operands
cmp	word ptr ds:1176h, 2
jnb	short loc_18806	; Jump if Not Below (CF=0)

mov	word ptr [bp+6], 4093h
mov	di, ds:114Eh
or	di, di		; Logical Inclusive OR
jz	short loc_18816	; Jump if Zero (ZF=1)

mov	al, [di+9]
or	al, al		; Logical Inclusive OR
jz	short loc_18816	; Jump if Zero (ZF=1)

call	sub_16906	; Call Procedure

jnb	short loc_18816	; Jump if Not Below (CF=0)

and	word ptr [bp+6], 0BFFFh	; Logical AND
jmp	short loc_18816	; Jump

; ���������������������������������������������������������������������������

loc_18806:
mov	ax, 62h	; 'b'
cmp	word ptr ds:3CBEh, 0 ; Compare Two Operands
jnz	short loc_18813	; Jump if Not Zero (ZF=0)

or	ah, 40h		; Logical Inclusive OR


loc_18813:
mov	[bp+6],	ax


loc_18816:
mov	bx, 0F66h
call	sub_1D338	; Call Procedure

jmp	near ptr off_1C13B ; Jump

sub_1878C endp

; ���������������������������������������������������������������������������
mov	si, 146Ah
jmp	short loc_18831	; Jump

; ���������������������������������������������������������������������������
mov	si, 1462h
jmp	short loc_18831	; Jump

; ���������������������������������������������������������������������������
mov	si, 145Eh
jmp	short loc_18831	; Jump

; ���������������������������������������������������������������������������
mov	si, 1466h


loc_18831:		; Logical Compare
test	al, 1
jz	short locret_18857 ; Jump if Zero (ZF=1)

cmp	byte ptr ds:46EBh, 0 ; Compare Two Operands
jns	short loc_18846	; Jump if Not Sign (SF=0)

test	byte ptr ds:46EBh, 40h ; Logical Compare
jnz	short loc_18858	; Jump if Not Zero (ZF=0)

call	sub_15BEB	; Call Procedure


loc_18846:		; Load String
lodsw
add	ds:197Ch, ax	; Add
lodsw			; Load String
add	ds:197Eh, ax	; Add




sub_18850 proc near
call	sub_17B36	; Call Procedure

call	word ptr ds:46EDh ; Indirect Call Near Procedure


locret_18857:		; Return Near from Procedure
retn

sub_18850 endp

; ���������������������������������������������������������������������������

loc_18858:		; Load String
lodsw
add	ds:1980h, ax	; Add
lodsw			; Load String
add	ds:1982h, ax	; Add
jmp	sub_1542F	; Jump




sub_18865 proc near
call	sub_1E270	; Call Procedure

mov	si, ax
mov	ds:0DBE4h, cx
call	sub_1D04E	; Call Procedure

call	sub_1CF70	; Call Procedure

call	sub_188F1	; Call Procedure

mov	di, 0A6B0h
push	di
call	sub_18944	; Call Procedure

pop	si
push	ds
pop	es
call	sub_1D1BB	; Call Procedure

call	sub_1E283	; Call Procedure

retn			; Return Near from Procedure

sub_18865 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_188D2

loc_18888:		; Compare Two Operands
cmp	byte ptr ds:46D9h, 0
jnz	short loc_188E1	; Jump if Not Zero (ZF=0)

mov	word ptr ds:479Eh, 1


loc_18895:
mov	al, ds:0FBh
not	al		; One's Complement Negation
and	al, 80h		; Logical AND
mov	ds:1C06h, al
push	ds
pop	es
mov	di, 1BE2h
xor	ax, ax		; Logical Exclusive OR
stosw			; Store	String
stosw			; Store	String
stosw			; Store	String
stosw			; Store	String
mov	al, 80h	; '�'
stosw			; Store	String
retn			; Return Near from Procedure

; END OF FUNCTION CHUNK	FOR sub_188D2
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_8. PRESS KEYPAD "+" TO EXPAND]



sub_188AF proc near
or	ax, ax		; Logical Inclusive OR
jz	short nullsub_8	; Jump if Zero (ZF=1)

mov	ds:4780h, ax
mov	byte ptr ds:47E0h, 0
test	byte ptr ds:46EBh, 40h ; Logical Compare
jz	short loc_188CA	; Jump if Zero (ZF=1)

and	byte ptr ds:46EBh, 0BFh	; Logical AND
jmp	sub_180DF	; Jump

; ���������������������������������������������������������������������������

loc_188CA:
mov	si, ax
call	sub_1CF70	; Call Procedure

call	sub_188F1	; Call Procedure

sub_188AF endp




sub_188D2 proc near

; FUNCTION CHUNK AT 8888 SIZE 00000026 BYTES

mov	di, 0A6B0h
push	di
call	sub_18944	; Call Procedure

pop	si
cmp	byte ptr ds:28E7h, 2 ; Compare Two Operands
jnb	short loc_18888	; Jump if Not Below (CF=0)


loc_188E1:		; Load String
lodsb
or	al, al		; Logical Inclusive OR
js	short locret_188F0 ; Jump if Sign (SF=1)

dec	si		; Decrement by 1
call	sub_18B11	; Call Procedure

cmp	byte ptr [si], 0FEh ; '�' ; Compare Two Operands
jnb	short locret_188F0 ; Jump if Not Below (CF=0)

nop			; No Operation


locret_188F0:		; Return Near from Procedure
retn

sub_188D2 endp




sub_188F1 proc near
push	ds
push	es
pop	ds
pop	es
mov	di, 0A840h


loc_188F8:		; Load String
lodsb
cmp	al, 0FFh	; Compare Two Operands
jz	short loc_1893D	; Jump if Zero (ZF=1)

cmp	al, 0FEh ; '�'  ; Compare Two Operands
jz	short loc_18905	; Jump if Zero (ZF=1)

cmp	al, 0E0h ; '�'  ; Compare Two Operands
jnb	short loc_18910	; Jump if Not Below (CF=0)


loc_18905:		; Store	String
stosb
mov	al, 0FFh
cmp	di, 0A9CFh	; Compare Two Operands
jnb	short loc_1893D	; Jump if Not Below (CF=0)

jmp	short loc_188F8	; Jump

; ���������������������������������������������������������������������������

loc_18910:		; Logical AND
and	al, 0Fh
mov	ch, al
lodsw			; Load String
mov	cl, ah
and	ax, 3FFFh	; Logical AND
shr	cl, 1		; Shift	Logical	Right
shr	cl, 1		; Shift	Logical	Right
and	cl, 30h		; Logical AND
or	cl, ch		; Logical Inclusive OR
xor	ch, ch		; Logical Exclusive OR
push	si
mov	si, ss:word_23C64
add	si, ax		; Add
rep movsb		; Move Byte(s) from String to String
pop	si
cmp	byte ptr [si], 0FFh ; Compare Two Operands
jz	short loc_1893C	; Jump if Zero (ZF=1)

mov	byte ptr es:[di], 20h ;	' '
inc	di		; Increment by 1
jmp	short loc_188F8	; Jump

; ���������������������������������������������������������������������������

loc_1893C:		; Load String
lodsb


loc_1893D:		; Store	String
stosb
mov	si, 0A840h
push	ss
pop	ds
assume ds:seg001
retn			; Return Near from Procedure

sub_188F1 endp




sub_18944 proc near
sub	sp, 32h		; Integer Subtraction
mov	bp, sp
push	ds
pop	es

assume es:seg001

loc_1894B:		; Compare Two Operands
cmp	byte ptr [si], 20h ; ' '
jnz	short loc_18953	; Jump if Not Zero (ZF=0)

inc	si		; Increment by 1
jmp	short loc_1894B	; Jump

; ���������������������������������������������������������������������������

loc_18953:		; Load String
lodsb
or	al, al		; Logical Inclusive OR
js	short loc_1895B	; Jump if Sign (SF=1)

stosb			; Store	String
jmp	short loc_18953	; Jump

; ���������������������������������������������������������������������������

loc_1895B:
mov	byte ptr unk_23C2F, al
cmp	al, 0F0h ; '�'  ; Compare Two Operands
jnb	short loc_189B0	; Jump if Not Below (CF=0)

cmp	al, 0D0h ; '�'  ; Compare Two Operands
jnb	short loc_1899B	; Jump if Not Below (CF=0)

cmp	al, 0A0h ; '�'  ; Compare Two Operands
jnb	short loc_189AD	; Jump if Not Below (CF=0)

cmp	al, 90h	; '�'   ; Compare Two Operands
jb	short loc_18970	; Jump if Below	(CF=1)

jmp	short loc_189E4	; Jump

; ���������������������������������������������������������������������������

loc_18970:		; Compare Two Operands
cmp	al, 80h	; '�'
jnz	short loc_18979	; Jump if Not Zero (ZF=0)

lodsw			; Load String
xchg	ah, al		; Exchange Register/Memory with	Register
jmp	short loc_18984	; Jump

; ���������������������������������������������������������������������������

loc_18979:		; Logical AND
and	ax, 0Fh
shl	ax, 1		; Shift	Logical	Left
mov	bx, ax
mov	ax, [bx+11EBh]


loc_18984:
mov	[bp+0],	si
mov	word ptr [bp+2], ds
add	bp, 4		; Add
mov	si, ax
call	sub_18A3B	; Call Procedure

push	es
call	sub_1CF70	; Call Procedure

push	es
pop	ds
pop	es
assume es:nothing
jmp	short loc_18953	; Jump

; ���������������������������������������������������������������������������

loc_1899B:		; Store	String
stosb
movsb			; Move Byte(s) from String to String
cmp	al, 0D2h ; '�'  ; Compare Two Operands
jb	short loc_189A3	; Jump if Below	(CF=1)

jmp	short loc_18953	; Jump

; ���������������������������������������������������������������������������

loc_189A3:		; Move Byte(s) from String to String
movsb
cmp	al, 0D0h ; '�'  ; Compare Two Operands
jnz	short loc_189AA	; Jump if Not Zero (ZF=0)

jmp	short loc_18953	; Jump

; ���������������������������������������������������������������������������

loc_189AA:		; Move Byte(s) from String to String
movsw
jmp	short loc_18953	; Jump

; ���������������������������������������������������������������������������

loc_189AD:		; Store	String
stosb
jmp	short loc_18953	; Jump

; ���������������������������������������������������������������������������

loc_189B0:
mov	bx, sp
cmp	bp, bx		; Compare Two Operands
jz	short loc_189C1	; Jump if Zero (ZF=1)

sub	bp, 4		; Integer Subtraction
mov	si, [bp+0]
mov	ds, word ptr [bp+2]
assume ds:nothing
jmp	short loc_18953	; Jump

; ���������������������������������������������������������������������������

loc_189C1:		; Store	String
stosb
cmp	al, 0FFh	; Compare Two Operands
jnz	short loc_189C8	; Jump if Not Zero (ZF=0)

xor	si, si		; Logical Exclusive OR


loc_189C8:
mov	ds:47B6h, si
mov	word ptr ds:47B8h, ds
add	sp, 32h		; Add
test	byte ptr ds:47DEh, 10h ; Logical Compare
jz	short locret_189E3 ; Jump if Zero (ZF=1)

mov	bx, 3
call	sub_1E3B7	; Call Procedure

call	sub_18AC3	; Call Procedure


locret_189E3:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_189E4:
push	bp
mov	bl, al
lodsb			; Load String
xor	ah, ah		; Logical Exclusive OR
mov	bp, ax
mov	ax, [bp+0]
cmp	bl, 92h	; '�'   ; Compare Two Operands
jz	short loc_189F7	; Jump if Zero (ZF=1)

xor	ah, ah		; Logical Exclusive OR


loc_189F7:
push	ax
call	sub_18ACC	; Call Procedure

pop	ax
call	sub_18A23	; Call Procedure

xchg	ax, bx		; Exchange Register/Memory with	Register
mov	cx, 5
jmp	short loc_18A0D	; Jump

; ���������������������������������������������������������������������������

loc_18A05:
mov	al, dh
mov	dh, dl
mov	dl, bh
mov	bh, bl


loc_18A0D:		; Logical Inclusive OR
or	al, al
loope	loc_18A05	; Loop while rCX != 0 and ZF=1

inc	cx		; Increment by 1


loc_18A12:		; Add
add	al, 30h	; '0'
stosb			; Store	String
mov	al, dh
mov	dh, dl
mov	dl, bh
mov	bh, bl
loop	loc_18A12	; Loop while CX	!= 0

pop	bp
jmp	loc_18953	; Jump

sub_18944 endp




sub_18A23 proc near
xor	dx, dx		; Logical Exclusive OR
mov	cx, 2710h
div	cx		; Unsigned Divide
mov	bl, al
mov	cx, 64h	; 'd'
mov	ax, dx
xor	dx, dx		; Logical Exclusive OR
div	cx		; Unsigned Divide
aam			; ASCII	Adjust AX after	Multiply
xchg	ax, dx		; Exchange Register/Memory with	Register
aam			; ASCII	Adjust AX after	Multiply
retn			; Return Near from Procedure

sub_18A23 endp




sub_18A3B proc near
test	byte ptr ds:47DEh, 10h ; Logical Compare
jnz	short loc_18A43	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_18A43:
push	bx
mov	bh, ds:477Fh
cmp	bh, 8Bh	; '�'   ; Compare Two Operands
jnz	short loc_18A52	; Jump if Not Zero (ZF=0)

sub	ax, 108h	; Integer Subtraction
jmp	short loc_18ABE	; Jump

; ���������������������������������������������������������������������������

loc_18A52:		; Compare Two Operands
cmp	bh, 84h	; '�'
jnz	short loc_18A69	; Jump if Not Zero (ZF=0)

sub	ax, 48h	; 'H'   ; Integer Subtraction
jz	short loc_18ABE	; Jump if Zero (ZF=1)

dec	ax		; Decrement by 1
cmp	al, 3		; Compare Two Operands
jb	short loc_18ABE	; Jump if Below	(CF=1)

sub	ax, 0FFCFh	; Integer Subtraction
cmp	ax, 0Ch		; Compare Two Operands
jmp	short loc_18ABC	; Jump

; ���������������������������������������������������������������������������

loc_18A69:		; Compare Two Operands
cmp	bh, 83h	; '�'
jz	short loc_18A71	; Jump if Zero (ZF=1)

cmp	bh, 8Ch	; '�'   ; Compare Two Operands


loc_18A71:		; Jump if Not Zero (ZF=0)
jnz	short loc_18A7A

sub	ax, 0E8h ; '�'  ; Integer Subtraction
cmp	al, 7		; Compare Two Operands
jmp	short loc_18ABC	; Jump

; ���������������������������������������������������������������������������

loc_18A7A:
mov	bl, bh
sub	bl, 86h	; '�'   ; Integer Subtraction
cmp	bl, 3		; Compare Two Operands
jnb	short loc_18A97	; Jump if Not Below (CF=0)

mov	bl, ds:47DEh
and	bl, 0Fh		; Logical AND
cmp	bl, 1		; Compare Two Operands
jnz	short loc_18AC1	; Jump if Not Zero (ZF=0)

sub	ax, 0D1h ; '�'  ; Integer Subtraction
cmp	al, 7		; Compare Two Operands
jmp	short loc_18ABC	; Jump

; ���������������������������������������������������������������������������

loc_18A97:		; Compare Two Operands
cmp	bh, 85h	; '�'
jnz	short loc_18AB2	; Jump if Not Zero (ZF=0)

mov	bl, ds:47DEh
and	bl, 0Fh		; Logical AND
cmp	bl, 1		; Compare Two Operands
jnz	short loc_18AC1	; Jump if Not Zero (ZF=0)

cmp	ax, 74h	; 't'   ; Compare Two Operands
mov	al, 0
jnz	short loc_18ABE	; Jump if Not Zero (ZF=0)

inc	ax		; Increment by 1
jmp	short loc_18ABE	; Jump

; ���������������������������������������������������������������������������

loc_18AB2:		; Compare Two Operands
cmp	bh, 89h	; '�'
jnz	short loc_18AC1	; Jump if Not Zero (ZF=0)

sub	ax, 0DAh ; '�'  ; Integer Subtraction
cmp	al, 8		; Compare Two Operands


loc_18ABC:		; Jump if Not Below (CF=0)
jnb	short loc_18AC1


loc_18ABE:		; Call Procedure
call	sub_18AC3


loc_18AC1:
pop	bx


locret_18AC2:		; Return Near from Procedure
retn

sub_18A3B endp




sub_18AC3 proc near
mov	ds:47E0h, al
and	byte ptr ds:47DEh, 0EFh	; Logical AND
retn			; Return Near from Procedure

sub_18AC3 endp




sub_18ACC proc near
test	byte ptr ss:word_23C8E,	10h ; Logical Compare
jz	short locret_18AC2 ; Jump if Zero (ZF=1)

push	bx
lea	bp, [bp+0]	; Load Effective Address
cmp	bp, 0CFh ; '�'  ; Compare Two Operands
jz	short loc_18AFF	; Jump if Zero (ZF=1)

cmp	bp, 55h	; 'U'   ; Compare Two Operands
jz	short loc_18B07	; Jump if Zero (ZF=1)

cmp	bp, 61h	; 'a'   ; Compare Two Operands
jz	short loc_18B07	; Jump if Zero (ZF=1)

cmp	bp, 44h	; 'D'   ; Compare Two Operands
jnz	short loc_18AC1	; Jump if Not Zero (ZF=0)

mov	bh, byte ptr ss:word_23C8E
and	bh, 0Fh		; Logical AND
cmp	bh, 1		; Compare Two Operands
jnz	short loc_18AC1	; Jump if Not Zero (ZF=0)

dec	ax		; Decrement by 1


loc_18AFF:		; Compare Two Operands
cmp	al, 8
jbe	short loc_18ABE	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	al, 8
jmp	short loc_18ABE	; Jump

; ���������������������������������������������������������������������������

loc_18B07:		; Decrement by 1
dec	ax
cmp	al, 4		; Compare Two Operands
jbe	short loc_18ABE	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	al, 4
jmp	short loc_18ABE	; Jump

sub_18ACC endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_9. PRESS KEYPAD "+" TO EXPAND]



sub_18B11 proc near
push	si
call	sub_18C8A	; Call Procedure

pop	si
call	sub_18CCD	; Call Procedure

jb	short nullsub_9	; Jump if Below	(CF=1)

call	sub_18F28	; Call Procedure

call	sub_18DF0	; Call Procedure

mov	dx, ds:4791h
mov	bx, ds:4793h
call	sub_1D04E	; Call Procedure

mov	bp, 0A9D0h
mov	word ptr ds:479Ah, 0Ah
mov	al, ds:4799h
and	al, 0Ch		; Logical AND
jz	short loc_18B8B	; Jump if Zero (ZF=1)

cmp	al, 8		; Compare Two Operands
jnb	short loc_18B66	; Jump if Not Below (CF=0)

mov	bx, [bp+0]
xor	dx, dx		; Logical Exclusive OR
mov	ax, ds:478Dh
sub	ax, 8		; Integer Subtraction
dec	bx		; Decrement by 1
jz	short loc_18B55	; Jump if Zero (ZF=1)

div	bx		; Unsigned Divide
mov	ds:479Ah, ax
jmp	short loc_18B8B	; Jump

; ���������������������������������������������������������������������������

loc_18B55:		; Shift	Logical	Right
shr	ax, 1
mov	bx, ax
mov	dx, ds:0D82Ch
add	bx, ds:0D82Eh	; Add
call	sub_1D04E	; Call Procedure

jmp	short loc_18B8B	; Jump

; ���������������������������������������������������������������������������

loc_18B66:		; Push Flags Register onto the Stack
pushf
mov	ax, [bp+0]
mov	ah, 0Ah
mul	ah		; Unsigned Multiplication of AL	or AX
mov	bx, ds:478Dh
sub	bx, ax		; Integer Subtraction
jnb	short loc_18B78	; Jump if Not Below (CF=0)

xor	bx, bx		; Logical Exclusive OR


loc_18B78:
mov	ds:478Dh, ax
popf			; Pop Stack into Flags Register
jnz	short loc_18B80	; Jump if Not Zero (ZF=0)

shr	bx, 1		; Shift	Logical	Right


loc_18B80:
mov	dx, ds:0D82Ch
add	bx, ds:0D82Eh	; Add
call	sub_1D04E	; Call Procedure


loc_18B8B:
mov	dx, [bp+0]
add	bp, 2		; Add


loc_18B91:
push	dx
mov	cx, [bp+0]
add	bp, 2		; Add
mov	dx, [bp+0]
mov	bx, [bp+2]
add	bp, 4		; Add
jcxz	short loc_18C0C	; Jump if CX is	0

test	byte ptr ds:4799h, 2 ; Logical Compare
jz	short loc_18BD1	; Jump if Zero (ZF=1)

mov	al, dl
mov	dl, cl
dec	dl		; Decrement by 1
jz	short loc_18BB4	; Jump if Zero (ZF=1)

mul	dl		; Unsigned Multiplication of AL	or AX


loc_18BB4:		; Add
add	al, bl
mov	dl, al
mov	al, cl

loc_18BBA:		; Decrement by 1
dec	al
xor	ah, ah		; Logical Exclusive OR
shl	ax, 1		; Shift	Logical	Left
sub	dx, ax		; Integer Subtraction
shl	ax, 1		; Shift	Logical	Left
sub	dx, ax		; Integer Subtraction
shr	dx, 1		; Shift	Logical	Right
add	ds:0D82Ch, dx	; Add
and	byte ptr ds:4799h, 0FEh	; Logical AND


loc_18BD1:
pop	ax
push	ax
cmp	ax, 1		; Compare Two Operands
jz	short loc_18BDF	; Jump if Zero (ZF=1)

test	byte ptr ds:4799h, 1 ; Logical Compare
jnz	short loc_18BE5	; Jump if Not Zero (ZF=0)


loc_18BDF:
mov	dx, 6
mov	bx, 0


loc_18BE5:
mov	ds:479Ch, bx


loc_18BE9:		; Load String
lodsb
or	al, al		; Logical Inclusive OR
js	short loc_18C26	; Jump if Sign (SF=1)

cmp	al, 20h	; ' '   ; Compare Two Operands
jz	short loc_18C19	; Jump if Zero (ZF=1)

cmp	al, 0Dh		; Compare Two Operands
jz	short loc_18C19	; Jump if Zero (ZF=1)

cmp	al, 6		; Compare Two Operands
jz	short loc_18C0F	; Jump if Zero (ZF=1)

cmp	al, 8		; Compare Two Operands
jz	short loc_18C14	; Jump if Zero (ZF=1)

cmp	al, 1		; Compare Two Operands
jnz	short loc_18C41	; Jump if Not Zero (ZF=0)

mov	ax, ds:0DBE4h
xchg	ah, al		; Exchange Register/Memory with	Register
mov	ds:0DBE4h, ax
jmp	short loc_18BE9	; Jump

; ���������������������������������������������������������������������������

loc_18C0C:		; Jump
jmp	short loc_18C47

; ���������������������������������������������������������������������������
db 90h
; ���������������������������������������������������������������������������

loc_18C0F:		; Call Procedure
call	sub_1D075

jmp	short loc_18BE9	; Jump

; ���������������������������������������������������������������������������

loc_18C14:		; Call Procedure
call	sub_1D068

jmp	short loc_18BE9	; Jump

; ���������������������������������������������������������������������������

loc_18C19:		; Compare Two Operands
cmp	byte ptr [si], 20h ; ' '
jz	short loc_18C23	; Jump if Zero (ZF=1)

cmp	byte ptr [si], 0Dh ; Compare Two Operands
jnz	short loc_18C26	; Jump if Not Zero (ZF=0)


loc_18C23:		; Increment by 1
inc	si
jmp	short loc_18C19	; Jump

; ���������������������������������������������������������������������������

loc_18C26:		; Decrement by 1
dec	cx
jz	short loc_18C47	; Jump if Zero (ZF=1)

push	dx
add	dx, ds:0D82Ch	; Add
cmp	word ptr ds:479Ch, 0 ; Compare Two Operands
jz	short loc_18C3A	; Jump if Zero (ZF=1)

inc	dx		; Increment by 1
dec	word ptr ds:479Ch ; Decrement by 1


loc_18C3A:
mov	ds:0D82Ch, dx
pop	dx
jmp	short loc_18BE9	; Jump

; ���������������������������������������������������������������������������

loc_18C41:		; Indirect Call	Near Procedure
call	word ptr ds:2518h
jmp	short loc_18BE9	; Jump

; ���������������������������������������������������������������������������

loc_18C47:
mov	dx, ds:0D830h
mov	bx, ds:0D832h
mov	ax, ds:479Ah
add	bx, ax		; Add
sub	ds:478Dh, ax	; Integer Subtraction
jnb	short loc_18C60	; Jump if Not Below (CF=0)

mov	word ptr ds:478Dh, 0


loc_18C60:		; Call Procedure
call	sub_1D04E

pop	dx
dec	dx		; Decrement by 1
jz	short loc_18C6A	; Jump if Zero (ZF=1)

jmp	loc_18B91	; Jump

; ���������������������������������������������������������������������������

loc_18C6A:
mov	dx, ds:0D830h
mov	bx, ds:0D832h
mov	ds:4791h, dx
mov	ds:4793h, bx
dec	si		; Decrement by 1
cmp	ds:word_23C4E, offset unk_216EC	; Compare Two Operands
jnz	short locret_18C89 ; Jump if Not Zero (ZF=0)

call	sub_19046	; Call Procedure

jmp	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Jump

; ���������������������������������������������������������������������������

locret_18C89:		; Return Near from Procedure
retn

sub_18B11 endp




sub_18C8A proc near
xor	ax, ax		; Logical Exclusive OR
xchg	ax, ds:479Eh	; Exchange Register/Memory with	Register
cmp	ax, 2		; Compare Two Operands
jb	short locret_18CCC ; Jump if Below (CF=1)

mov	si, 1470h
cmp	byte ptr ds:28E7h, 0 ; Compare Two Operands
jz	short loc_18CB5	; Jump if Zero (ZF=1)

mov	bp, 1BE2h
mov	si, 4C60h
mov	es, ds:_word_2D08E_framebuffer2_seg
call	dword ptr ds:391Dh ; Indirect Call Far Procedure
mov	si, 1BE2h
mov	word ptr [si+8], 0


loc_18CB5:		; Call Procedure
call	sub_1C446

mov	si, ds:47C8h
or	si, si		; Logical Inclusive OR
jz	short loc_18CC9	; Jump if Zero (ZF=1)

mov	word ptr ds:4540h, 0
call	sub_19BAC	; Call Procedure


loc_18CC9:		; Call Procedure
call	sub_1C4DD


locret_18CCC:		; Return Near from Procedure
retn

sub_18C8A endp




sub_18CCD proc near
mov	byte ptr ds:4799h, 9
mov	word ptr ds:0DBE4h, 0F0h ; '�'
cmp	byte ptr ds:46EBh, 0 ; Compare Two Operands
jz	short loc_18CFB	; Jump if Zero (ZF=1)

cmp	word ptr ds:46EFh, 0 ; Compare Two Operands
jnz	short loc_18CF5	; Jump if Not Zero (ZF=0)

call	sub_1E270	; Call Procedure

push	es
mov	si, ds:46F1h
call	sub_179EE	; Call Procedure

pop	es
call	sub_1E283	; Call Procedure


loc_18CF5:
mov	bp, offset unk_216F4
jmp	loc_18DDB	; Jump

; ���������������������������������������������������������������������������

loc_18CFB:		; Compare Two Operands
cmp	word ptr ds:47C4h, 0FFFFh
jnz	short loc_18D1B	; Jump if Not Zero (ZF=0)

mov	ax, 48h	; 'H'
mov	ds:4784h, ax
mov	al, 10h
mov	ds:4786h, ax
mov	al, 8
mov	ds:4788h, ax
mov	ds:478Ah, ax
mov	bp, 224Ch
jmp	loc_18DDB	; Jump

; ���������������������������������������������������������������������������

loc_18D1B:		; Compare Two Operands
cmp	byte ptr ds:0C6h, 0
jz	short loc_18D43	; Jump if Zero (ZF=1)

mov	bp, 2265h
mov	ax, 3Ch	; '<'
mov	ds:4784h, ax
mov	al, 32h	; '2'
mov	ds:4786h, ax
mov	al, 0Ah
mov	ds:4788h, ax
mov	ds:478Ah, ax
mov	byte ptr ds:0DBE4h, 64h	; 'd'
call	sub_1D082	; Call Procedure

jmp	loc_18DDB	; Jump

; ���������������������������������������������������������������������������

loc_18D43:		; Compare Two Operands
cmp	byte ptr ds:227Dh, 0
jz	short loc_18D62	; Jump if Zero (ZF=1)

mov	byte ptr ds:0DBE4h, 6
mov	bp, 2275h
xor	ax, ax		; Logical Exclusive OR
mov	ds:4788h, ax
mov	ds:478Ah, ax
mov	ds:4784h, ax
mov	ds:4786h, ax
jmp	short loc_18DDB	; Jump

; ���������������������������������������������������������������������������

loc_18D62:		; Compare Two Operands
cmp	byte ptr ds:28E7h, 0
jnz	short loc_18D8A	; Jump if Not Zero (ZF=0)

mov	byte ptr ds:4799h, 1
mov	byte ptr ds:0DBE4h, 0Fh
mov	bp, 223Ch
xor	ax, ax		; Logical Exclusive OR
mov	ds:478Ah, ax
inc	ax		; Increment by 1
mov	ds:4788h, ax
mov	ax, 10h
mov	ds:4784h, ax
mov	ds:4786h, ax
jmp	short loc_18DDB	; Jump

; ���������������������������������������������������������������������������

loc_18D8A:
mov	bp, 2224h
mov	cx, 3


loc_18D90:
mov	ax, [bp+4]
sub	ax, ds:4784h	; Integer Subtraction
sub	ax, ds:4786h	; Integer Subtraction
mov	ds:478Fh, ax
push	si
push	cx
call	sub_18E16	; Call Procedure

pop	cx
pop	si
mov	ax, ds:0A9D0h
mov	ah, 0Ah
mul	ah		; Unsigned Multiplication of AL	or AX
add	ax, ds:4788h	; Add
add	ax, ds:478Ah	; Add
cmp	ax, [bp+6]	; Compare Two Operands
jb	short loc_18DCD	; Jump if Below	(CF=1)

add	bp, 8		; Add
loop	loc_18D90	; Loop while CX	!= 0

sub	bp, 8		; Integer Subtraction
xor	ax, ax		; Logical Exclusive OR
mov	ds:4788h, ax
xchg	ax, ds:478Ah	; Exchange Register/Memory with	Register
or	ax, ax		; Logical Inclusive OR
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_18DCD:		; Decrement by 1
dec	cx
jz	short loc_18DEE	; Jump if Zero (ZF=1)

mov	bx, 1
call	sub_1E3B7	; Call Procedure

jz	short loc_18DEE	; Jump if Zero (ZF=1)

add	bp, 8		; Add


loc_18DDB:
mov	ax, [bp+4]
sub	ax, ds:4784h	; Integer Subtraction
sub	ax, ds:4786h	; Integer Subtraction
mov	ds:478Fh, ax
push	si
call	sub_18E16	; Call Procedure

pop	si


loc_18DEE:		; Clear	Carry Flag
clc
retn			; Return Near from Procedure

sub_18CCD endp




sub_18DF0 proc near
test	byte ptr ds:4799h, 1 ; Logical Compare
jz	short locret_18E15 ; Jump if Zero (ZF=1)

push	si
mov	si, 0A9D0h
lodsw			; Load String
mov	cx, ax


loc_18DFE:		; Load String
lodsw
or	ax, ax		; Logical Inclusive OR
jz	short loc_18E08	; Jump if Zero (ZF=1)

cmp	word ptr [si], 1Eh ; Compare Two Operands
jnb	short loc_18E0F	; Jump if Not Below (CF=0)


loc_18E08:		; Add
add	si, 4
loop	loc_18DFE	; Loop while CX	!= 0

pop	si
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_18E0F:		; Logical AND
and	byte ptr ds:4799h, 0FEh
pop	si


locret_18E15:		; Return Near from Procedure
retn

sub_18DF0 endp




sub_18E16 proc near
push	ds
pop	es
mov	byte ptr ds:478Ch, 0
mov	di, 0A9D2h
xor	dh, dh		; Logical Exclusive OR
mov	bx, ds:478Fh
xor	dl, dl		; Logical Exclusive OR


loc_18E28:
mov	al, [si]
or	al, al		; Logical Inclusive OR
js	short loc_18E74	; Jump if Sign (SF=1)

cmp	al, 0Dh		; Compare Two Operands
jz	short loc_18E39	; Jump if Zero (ZF=1)

cmp	al, 20h	; ' '   ; Compare Two Operands
jnz	short loc_18E4B	; Jump if Not Zero (ZF=0)

inc	si		; Increment by 1
jmp	short loc_18E28	; Jump

; ���������������������������������������������������������������������������

loc_18E39:		; Call Procedure
call	sub_18E9E

mov	word ptr [di-4], 6
mov	word ptr [di-2], 0
xor	dl, dl		; Logical Exclusive OR
inc	si		; Increment by 1
jmp	short loc_18E28	; Jump

; ���������������������������������������������������������������������������

loc_18E4B:		; Call Procedure
call	sub_18ED3

or	cx, cx		; Logical Inclusive OR
jz	short loc_18E28	; Jump if Zero (ZF=1)

add	cx, 6		; Add


loc_18E55:		; Integer Subtraction
sub	bx, cx
jb	short loc_18E5D	; Jump if Below	(CF=1)

inc	dl		; Increment by 1
jmp	short loc_18E28	; Jump

; ���������������������������������������������������������������������������

loc_18E5D:		; Add
add	bx, 6
js	short loc_18E69	; Jump if Sign (SF=1)

inc	dl		; Increment by 1
call	sub_18E9E	; Call Procedure

jmp	short loc_18E28	; Jump

; ���������������������������������������������������������������������������

loc_18E69:		; Logical Inclusive OR
or	dl, dl
jz	short loc_18E97	; Jump if Zero (ZF=1)

add	bx, cx		; Add
call	sub_18E9E	; Call Procedure

jmp	short loc_18E55	; Jump

; ���������������������������������������������������������������������������

loc_18E74:		; Logical Inclusive OR
or	dl, dl
jz	short loc_18E7B	; Jump if Zero (ZF=1)

call	sub_18E9E	; Call Procedure


loc_18E7B:
mov	word ptr [di-4], 6
mov	word ptr [di-2], 0
mov	word ptr [di], 0
mov	word ptr [di+2], 0
xor	dl, dl		; Logical Exclusive OR
xchg	dh, dl		; Exchange Register/Memory with	Register
mov	ds:0A9D0h, dx
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_18E97:
mov	word ptr ds:0A9D0h, 0C8h ; '�'
retn			; Return Near from Procedure

sub_18E16 endp




sub_18E9E proc near
mov	ax, dx
xor	ah, ah		; Logical Exclusive OR
stosw			; Store	String
add	ds:478Ch, al	; Add
or	ax, ax		; Logical Inclusive OR
jz	short loc_18ECA	; Jump if Zero (ZF=1)

push	dx
mov	ax, bx
mov	bx, dx
xor	bh, bh		; Logical Exclusive OR
xor	dx, dx		; Logical Exclusive OR
dec	bx		; Decrement by 1
jz	short loc_18EB9	; Jump if Zero (ZF=1)

div	bx		; Unsigned Divide


loc_18EB9:		; Add
add	ax, 6
stosw			; Store	String
mov	ax, dx
stosw			; Store	String
pop	dx
inc	dh		; Increment by 1
xor	dl, dl		; Logical Exclusive OR
mov	bx, ds:478Fh
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_18ECA:		; Store	String
stosw
stosw			; Store	String
inc	dh		; Increment by 1
mov	bx, ds:478Fh
retn			; Return Near from Procedure

sub_18E9E endp




sub_18ED3 proc near
xor	cx, cx		; Logical Exclusive OR
push	bx
mov	bx, ds:47A0h


loc_18EDA:		; Load String
lodsb
cmp	al, 20h	; ' '   ; Compare Two Operands
jz	short loc_18F25	; Jump if Zero (ZF=1)

cmp	al, 0Dh		; Compare Two Operands
jz	short loc_18F25	; Jump if Zero (ZF=1)

or	al, al		; Logical Inclusive OR
jz	short loc_18EED	; Jump if Zero (ZF=1)

cmp	al, 9		; Compare Two Operands
jb	short loc_18F09	; Jump if Below	(CF=1)

js	short loc_18F25	; Jump if Sign (SF=1)


loc_18EED:		; Compare Two Operands
cmp	word ptr ds:2518h, 0D0FFh
jnz	short loc_18F04	; Jump if Not Zero (ZF=0)

cmp	si, 0A6B1h	; Compare Two Operands
jnz	short loc_18F04	; Jump if Not Zero (ZF=0)

call	sub_1D0E3	; Call Procedure

jb	short loc_18F04	; Jump if Below	(CF=1)

add	cl, al		; Add
jmp	short loc_18EDA	; Jump

; ���������������������������������������������������������������������������

loc_18F04:		; Table	Lookup Translation
xlat
add	cl, al		; Add
jmp	short loc_18EDA	; Jump

; ���������������������������������������������������������������������������

loc_18F09:		; Compare Two Operands
cmp	al, 0Dh
jz	short loc_18F25	; Jump if Zero (ZF=1)

cmp	al, 6		; Compare Two Operands
jz	short loc_18F1D	; Jump if Zero (ZF=1)

cmp	al, 8		; Compare Two Operands
jnz	short loc_18EDA	; Jump if Not Zero (ZF=0)

mov	word ptr ds:47A0h, 0CEECh
jmp	short loc_18EDA	; Jump

; ���������������������������������������������������������������������������

loc_18F1D:
mov	word ptr ds:47A0h, 0CF6Ch
jmp	short loc_18EDA	; Jump

; ���������������������������������������������������������������������������

loc_18F25:		; Decrement by 1
dec	si
pop	bx
retn			; Return Near from Procedure

sub_18ED3 endp




sub_18F28 proc near

; FUNCTION CHUNK AT 8FF5 SIZE 00000030 BYTES

mov	ds:word_23C4E, bp
mov	di, offset unk_21092
push	ds
pop	es
mov	ax, [bp+0]
stosw			; Store	String
mov	dx, ax
add	ax, ds:4784h	; Add
mov	ds:4791h, ax
mov	ds:4795h, ax
mov	ax, [bp+2]
stosw			; Store	String
mov	bx, ax
add	ax, ds:4788h	; Add
mov	ds:4793h, ax
mov	ds:4797h, ax
mov	ax, [bp+4]
add	dx, ax		; Add
sub	ax, ds:4784h	; Integer Subtraction
sub	ax, ds:4786h	; Integer Subtraction
mov	ds:478Fh, ax
mov	ax, [bp+6]
add	bx, ax		; Add
sub	ax, ds:4788h	; Integer Subtraction
sub	ax, ds:478Ah	; Integer Subtraction
mov	ds:478Dh, ax
mov	ax, dx
cmp	ax, 320		; Compare Two Operands
jb	short loc_18F7B	; Jump if Below	(CF=1)

mov	ax, 320


loc_18F7B:		; Store	String
stosw
mov	ax, bx
stosw			; Store	String
cmp	byte ptr ds:46EBh, 0 ; Compare Two Operands
jnz	short sub_18FD1	; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:0C6h, 0 ; Compare Two Operands
jnz	short loc_18FF5	; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:227Dh, 0 ; Compare Two Operands
jnz	short locret_18FD0 ; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:46D9h, 0 ; Compare Two Operands
jnz	short locret_18FD0 ; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:28E7h, 0 ; Compare Two Operands
jz	short loc_1900B	; Jump if Zero (ZF=1)

push	si
mov	si, 4C60h
mov	bp, 1BE2h
mov	ax, 80h	; '�'
mov	[bp+8],	ax
mov	ds:1C06h, ax
mov	word ptr [bp+0Ch], 9468h
mov	es, ds:_word_2D08E_framebuffer2_seg
call	ds:_ptr_22D65_gfx_vtable_func_25 ; Indirect Call Far Procedure
call	_sub_1C137_load_icons_sprites ;	Call Procedure

mov	si, 1BE2h
mov	es, word ptr ds:0DBD6h
mov	ax, 1Ch
call	sub_1C370	; Call Procedure

pop	si


locret_18FD0:		; Return Near from Procedure
retn

sub_18F28 endp




sub_18FD1 proc near
push	si
mov	si, 1BE2h
mov	word ptr [si+8], 80h ; '�'
mov	word ptr [si+0Ch], 7BEDh
sub	word ptr [si+2], 2 ; Integer Subtraction
mov	al, ds:18F2h
mov	es, ds:_word_2D08A_framebuffer_active
call	ds:_ptr_22D65_gfx_vtable_func_10 ; Indirect Call Far Procedure
add	ds:word_21094, 2 ; Add
pop	si
retn			; Return Near from Procedure

sub_18FD1 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_18F28

loc_18FF5:
push	si
mov	ax, 32h	; '2'
call	_sub_1C13E_open_sprite_sheet ; RES_BOOK_HSQ

mov	ax, 3
mov	si, 2265h
mov	es, ds:_word_2D086_framebuffer_front
call	sub_1C370	; Call Procedure

pop	si
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1900B:
mov	di, offset RESOURCE_GLOBDATA
mov	cx, offset unk_24E10
push	ds
pop	es
xor	al, al		; Logical Exclusive OR
rep stosb		; Store	String
mov	ax, offset unk_2411F
and	al, 0F0h	; Logical AND
mov	word ptr ds:unk_217AC, ax
call	_sub_1C085_set_backbuffer_as_frame_buffer ; Call Procedure

jmp	loc_18895	; Jump

; END OF FUNCTION CHUNK	FOR sub_18F28



sub_19025 proc near
mov	cx, ds:4793h
mov	bx, 92h	; '�'
sub	bx, cx		; Integer Subtraction
xor	dx, dx		; Logical Exclusive OR
mov	ch, 0FFh
mov	di, 320
mov	si, ds:22FCh
mov	es, ds:_word_2D08A_framebuffer_active
mov	ds:word_23C32, bx
call	ds:_ptr_22D65_gfx_vtable_func_05_blit ;	Indirect Call Far Procedure
retn			; Return Near from Procedure

sub_19025 endp




sub_19046 proc near
push	ds
pop	es
mov	ax, ds:4793h
mul	word ptr ds:2240h ; Unsigned Multiplication of AL or AX
mov	cx, ax
mov	di, ds:22FCh
mov	ax, 0F00Fh
xor	bx, bx		; Logical Exclusive OR
cmp	byte ptr ds:0EAh, 0 ; Compare Two Operands
jle	short loc_19063	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

mov	ah, 8


loc_19063:		; Compare String
repne scasb
jnz	short locret_1908B ; Jump if Not Zero (ZF=0)

cmp	[di-2],	bl	; Compare Two Operands
jnz	short loc_1906F	; Jump if Not Zero (ZF=0)

mov	[di-2],	ah


loc_1906F:		; Compare Two Operands
cmp	[di], bl
jnz	short loc_19075	; Jump if Not Zero (ZF=0)

mov	[di], ah


loc_19075:		; Compare Two Operands
cmp	[di-141h], bl
jnz	short loc_1907F	; Jump if Not Zero (ZF=0)

mov	[di-141h], ah


loc_1907F:		; Compare Two Operands
cmp	[di+13Fh], bl
jnz	short loc_19063	; Jump if Not Zero (ZF=0)

mov	[di+13Fh], ah
jmp	short loc_19063	; Jump

; ���������������������������������������������������������������������������

locret_1908B:		; Return Near from Procedure
retn

sub_19046 endp




sub_1908C proc near
mov	ax, ds:word_2CCEA
cmp	ax, ds:4782h	; Compare Two Operands
jbe	short locret_190BC ; Jump if Below or Equal (CF=1 | ZF=1)

cmp	word ptr ds:479Eh, 223Ch ; Compare Two Operands
jnz	short locret_190BC ; Jump if Not Zero (ZF=0)

mov	cx, ds:4793h
mov	bx, 92h	; '�'
sub	bx, cx		; Integer Subtraction
xor	dx, dx		; Logical Exclusive OR
mov	ch, 0FFh
mov	di, 320
mov	si, ds:22FCh
mov	es, ds:_word_2D08A_framebuffer_active
mov	bp, 0D834h
call	dword ptr ds:38CDh ; Indirect Call Far Procedure


locret_190BC:		; Return Near from Procedure
retn

sub_1908C endp




sub_190BD proc near
mov	al, [si+0Eh]
cmp	al, 0Ch		; Compare Two Operands
jz	short loc_190D9	; Jump if Zero (ZF=1)

test	word ptr ds:12h, 1000h ; Logical Compare
jz	short loc_190D9	; Jump if Zero (ZF=1)

mov	bx, 9Ch	; '�'
mov	dx, 9584h
test	byte ptr ds:10A7h, 10h ; Logical Compare
jz	short loc_19111	; Jump if Zero (ZF=1)


loc_190D9:		; Compare Two Operands
cmp	al, 0Fh
mov	bx, 93h	; '�'
mov	dx, 5A03h
jz	short loc_19111	; Jump if Zero (ZF=1)

cmp	al, 0Eh		; Compare Two Operands
jnz	short loc_190F7	; Jump if Not Zero (ZF=0)

mov	bx, 96h	; '�'
mov	dx, 95C1h
test	byte ptr ds:0Ah, 10h ; Logical Compare
jz	short loc_19111	; Jump if Zero (ZF=1)

inc	bx		; Increment by 1
jmp	short loc_19111	; Jump

; ���������������������������������������������������������������������������

loc_190F7:
mov	cl, [si+0Fh]
mov	bx, 4091h
test	cl, 80h		; Logical Compare
jnz	short loc_19111	; Jump if Not Zero (ZF=0)

and	bh, 0BFh	; Logical AND
mov	dx, 95E2h
test	cl, 40h		; Logical Compare
jz	short loc_19111	; Jump if Zero (ZF=1)

inc	bx		; Increment by 1
mov	dx, 9533h


loc_19111:
mov	bp, 1F7Eh
mov	[bp+6],	bx
mov	[bp+8],	dx
call	sub_1D316	; Call Procedure

mov	bx, 97CFh
jmp	sub_1D338	; Jump

sub_190BD endp




sub_19123 proc near
cmp	al, 11h		; Compare Two Operands
jnb	short loc_1917A	; Jump if Not Below (CF=0)

xor	ah, ah		; Logical Exclusive OR
cmp	al, 0Dh		; Compare Two Operands
jb	short loc_19173	; Jump if Below	(CF=1)

jnz	short loc_1913B	; Jump if Not Zero (ZF=0)

mov	di, ds:114Eh
mov	ah, [di]
shr	ah, 1		; Shift	Logical	Right
inc	ah		; Increment by 1
jmp	short loc_19173	; Jump

; ���������������������������������������������������������������������������

loc_1913B:
mov	si, ds:4756h
cmp	al, 0Eh		; Compare Two Operands
jz	short loc_19155	; Jump if Zero (ZF=1)

cmp	byte ptr ds:2Ah, 0C8h ;	'�' ; Compare Two Operands
jz	short loc_19173	; Jump if Zero (ZF=1)

mov	al, ds:476Ch
shl	ax, 1		; Shift	Logical	Left
mov	si, ax
mov	si, [si+4758h]


loc_19155:
mov	al, [si]
push	dx
mov	dl, 3
div	dl		; Unsigned Divide
mov	dl, 0Fh
or	ah, ah		; Logical Inclusive OR
jz	short loc_19164	; Jump if Zero (ZF=1)

mov	dl, 11h


loc_19164:		; Compare Two Operands
cmp	al, dl
jb	short loc_1916C	; Jump if Below	(CF=1)

sub	al, dl		; Integer Subtraction
jmp	short loc_19164	; Jump

; ���������������������������������������������������������������������������

loc_1916C:
pop	dx
xchg	al, ah		; Exchange Register/Memory with	Register
add	al, 0Eh		; Add


loc_19171:		; Increment by 1
inc	ah


loc_19173:
mov	ds:47D0h, ah
xor	ah, ah		; Logical Exclusive OR
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1917A:
mov	ax, ds:2
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
cmp	ah, 8		; Compare Two Operands
jb	short loc_19188	; Jump if Below	(CF=1)

mov	ah, 8


loc_19188:		; Shift	Logical	Left
shl	ah, 1
cmp	byte ptr ds:0F4h, 10h ;	Compare	Two Operands
cmc			; Complement Carry Flag
adc	ah, 0		; Add with Carry
mov	al, 2Dh	; '-'
jmp	short loc_19171	; Jump

sub_19123 endp




sub_19197 proc near
mov	ax, ds:47C4h
cmp	ax, 0FFFFh	; Compare Two Operands
jnz	short sub_191A0	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

sub_19197 endp




sub_191A0 proc near
mov	word ptr ds:0F0h, 0
cmp	ax, 0Ch		; Compare Two Operands
jnz	short loc_191B8	; Jump if Not Zero (ZF=0)

test	byte ptr ds:10A7h, 10h ; Logical Compare
jz	short loc_191B8	; Jump if Zero (ZF=1)

mov	word ptr ds:0F0h, 0Ah


loc_191B8:		; Call Procedure
call	sub_19123

cmp	ax, ds:22A6h	; Compare Two Operands
jz	short sub_1920F	; Jump if Zero (ZF=1)

push	ax
call	sub_198B2	; Call Procedure

pop	ax
mov	ds:22A6h, ax
mov	si, ax
call	sub_1920F	; Call Procedure

mov	al, [si+22A8h]
xor	ah, ah		; Logical Exclusive OR
mov	ds:2224h, ax
mov	ds:222Ch, ax
mov	ds:2234h, ax
push	ds
push	ds
pop	es
lds	si, ds:0DBB0h	; Load Full Pointer to DS:xx
mov	bx, [si]
add	si, [bx+si-2]	; Add
add	si, 4		; Add
mov	di, 1BF0h
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
mov	ax, si
add	ax, 2		; Add
mov	word ptr ss:unk_23C7C, ax
add	si, [si]	; Add
mov	bx, [si]
mov	di, si
add	di, [bx+si-2]	; Add
pop	ds
mov	ds:47CAh, si
mov	ds:47D2h, di
retn			; Return Near from Procedure

sub_191A0 endp




sub_1920F proc near
add	ax, 2		; Add
jmp	_sub_1C13E_open_sprite_sheet ; Jump

sub_1920F endp




sub_19215 proc near

; FUNCTION CHUNK AT 3F15 SIZE 00000005 BYTES
; FUNCTION CHUNK AT 42E9 SIZE 0000008E BYTES
; FUNCTION CHUNK AT 9381 SIZE 0000005E BYTES
; FUNCTION CHUNK AT 945B SIZE 00000098 BYTES

call	sub_1D41B	; Call Procedure

cmp	bp, 1F0Eh	; Compare Two Operands
jnz	short loc_19248	; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:11C9h, 0 ; Compare Two Operands
jnz	short locret_19281 ; Jump if Not Zero (ZF=0)

call	sub_19285	; Call Procedure

jnb	short loc_19263	; Jump if Not Below (CF=0)

cmp	cl, 2Fh	; '/'   ; Compare Two Operands
jz	short loc_19282	; Jump if Zero (ZF=1)

cmp	cl, 0Fh		; Compare Two Operands
jnb	short loc_19240	; Jump if Not Below (CF=0)


loc_19234:
mov	al, 10h
mul	cl		; Unsigned Multiplication of AL	or AX
add	ax, 0FD8h	; Add
mov	si, ax
jmp	word ptr [si+4]	; Indirect Near	Jump

; ���������������������������������������������������������������������������

loc_19240:		; Integer Subtraction
sub	cl, 0Fh
mov	al, cl
jmp	loc_19381	; Jump

; ���������������������������������������������������������������������������

loc_19248:		; Compare Two Operands
cmp	bp, 1F7Eh
jnz	short locret_19281 ; Jump if Not Zero (ZF=0)

call	sub_192C9	; Call Procedure

jnb	short locret_19281 ; Jump if Not Below (CF=0)

cmp	cx, ds:47C4h	; Compare Two Operands
jnz	short loc_1925C	; Jump if Not Zero (ZF=0)

jmp	loc_1945B	; Jump

; ���������������������������������������������������������������������������

loc_1925C:
push	cx
call	sub_1D2BD	; Call Procedure

pop	cx
jmp	short loc_19234	; Jump

; ���������������������������������������������������������������������������

loc_19263:		; Compare Two Operands
cmp	byte ptr ds:0Bh, 1
jnz	short locret_19281 ; Jump if Not Zero (ZF=0)

cmp	bx, 98h	; '�'   ; Compare Two Operands
jnb	short locret_19281 ; Jump if Not Below (CF=0)

cmp	byte ptr ds:8, 21h ; '!' ; Compare Two Operands
jz	short locret_19281 ; Jump if Zero (ZF=1)

cmp	byte ptr ds:2Bh, 0 ; Compare Two Operands
jnz	short locret_19281 ; Jump if Not Zero (ZF=0)

jmp	loc_13F15	; Jump

; ���������������������������������������������������������������������������

locret_19281:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_19282:		; Jump
jmp	loc_142E9

sub_19215 endp




sub_19285 proc near

; FUNCTION CHUNK AT 92EB SIZE 00000007 BYTES

cmp	bx, 98h	; '�'   ; Compare Two Operands
jnb	short sub_192C9	; Jump if Not Below (CF=0)

mov	si, 47F8h
mov	cx, 17h


loc_19291:		; Load String
lodsw
mov	di, ax
lodsw			; Load String
mov	bp, ax
or	di, di		; Logical Inclusive OR
js	short loc_192A9	; Jump if Sign (SF=1)

sub	di, dx		; Integer Subtraction
cmp	di, 0FFE0h	; Compare Two Operands
jb	short loc_192A9	; Jump if Below	(CF=1)

sub	bp, bx		; Integer Subtraction
cmp	bp, 0FFB0h	; Compare Two Operands
jnb	short loc_192EB	; Jump if Not Below (CF=0)


loc_192A9:		; Loop while CX	!= 0
loop	loc_19291

mov	ax, ds:472Dh
or	ax, ax		; Logical Inclusive OR
jz	short locret_192C8 ; Jump if Zero (ZF=1)

sub	ax, dx		; Integer Subtraction
cmp	ax, 0FFB2h	; Compare Two Operands
cmc			; Complement Carry Flag
jnb	short locret_192C8 ; Jump if Not Below (CF=0)

mov	ax, bx
sub	ax, ds:472Fh	; Integer Subtraction
cmp	ax, 3Ch	; '<'   ; Compare Two Operands
jnb	short locret_192C8 ; Jump if Not Below (CF=0)

mov	cx, 2Fh	; '/'


locret_192C8:		; Return Near from Procedure
retn

sub_19285 endp




sub_192C9 proc near
xor	cx, cx		; Logical Exclusive OR
mov	cl, ds:1152h
cmp	cl, 0FFh	; Compare Two Operands
jz	short locret_19281 ; Jump if Zero (ZF=1)

mov	di, 1C0Ch
call	sub_1D6FE	; Call Procedure

jb	short locret_19281 ; Jump if Below (CF=1)

mov	cl, ds:1153h
cmp	cl, 0FFh	; Compare Two Operands
jz	short locret_19281 ; Jump if Zero (ZF=1)

mov	di, 1C1Ah
jmp	sub_1D6FE	; Jump

sub_192C9 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_19285

loc_192EB:		; Integer Subtraction
sub	cx, 17h
neg	cx		; Two's Complement Negation
stc			; Set Carry Flag
retn			; Return Near from Procedure

; END OF FUNCTION CHUNK	FOR sub_19285
; ���������������������������������������������������������������������������
xor	al, al		; Logical Exclusive OR
jmp	loc_193AA	; Jump

; ���������������������������������������������������������������������������
mov	al, 1
jmp	loc_193AA	; Jump

; ���������������������������������������������������������������������������
mov	al, 2
jmp	loc_193AA	; Jump

; ���������������������������������������������������������������������������
mov	al, 3
jmp	loc_193AA	; Jump

; ���������������������������������������������������������������������������
mov	al, 4
jmp	loc_193AA	; Jump

; ���������������������������������������������������������������������������
mov	al, 5
jmp	loc_193AA	; Jump

; ���������������������������������������������������������������������������
mov	al, 6
jmp	loc_193AA	; Jump

; ���������������������������������������������������������������������������
mov	al, 7
jmp	loc_193AA	; Jump

; ���������������������������������������������������������������������������
mov	al, 8
jmp	loc_193AA	; Jump

; ���������������������������������������������������������������������������
mov	al, 9
jmp	loc_193AA	; Jump

; ���������������������������������������������������������������������������
mov	al, 0Ah
jmp	loc_193AA	; Jump

; ���������������������������������������������������������������������������
mov	al, 0Bh
jmp	short loc_193AA	; Jump

; ���������������������������������������������������������������������������
align 2
mov	si, ds:4768h
call	sub_131F6	; Call Procedure

call	sub_1407E	; Call Procedure

mov	bp, 44h	; 'D'
cmp	word ptr [bp+0], 0 ; Compare Two Operands
jnz	short loc_19356	; Jump if Not Zero (ZF=0)

mov	ax, ds:0E2h
cmp	ax, 1Eh		; Compare Two Operands
jnb	short loc_1936B	; Jump if Not Below (CF=0)

mov	bp, 0E4h ; '�'
mov	si, ds:4768h
mov	ax, [bp+0]
mov	[si+0Ch], ax


loc_19356:
push	word ptr [bp+0]
call	sub_15323	; Call Procedure

pop	di
add	ax, 0DAh ; '�'  ; Add
push	ax
call	sub_1331E	; Call Procedure

call	sub_12E98	; Call Procedure

pop	word ptr ds:11FDh


loc_1936B:
mov	al, 0Ch
jmp	short loc_193AA	; Jump

; ���������������������������������������������������������������������������
mov	al, 0Dh
jmp	short loc_193AA	; Jump

; ���������������������������������������������������������������������������
mov	si, ds:4756h
call	sub_131F6	; Call Procedure

mov	al, 0Eh
jmp	short loc_193AA	; Jump

; ���������������������������������������������������������������������������
sub	ax, 87h	; '�'   ; Integer Subtraction

; START	OF FUNCTION CHUNK FOR sub_19215

loc_19381:		; Compare Two Operands
cmp	al, 9
jb	short loc_19387	; Jump if Below	(CF=1)

xor	ax, ax		; Logical Exclusive OR


loc_19387:		; Compare Two Operands
cmp	al, 8
jnz	short loc_19394	; Jump if Not Zero (ZF=0)

mov	al, ds:476Bh
dec	al		; Decrement by 1
jns	short loc_19394	; Jump if Not Sign (SF=0)

xor	ax, ax		; Logical Exclusive OR


loc_19394:
mov	ds:476Ch, al
mov	si, 4758h
xor	ah, ah		; Logical Exclusive OR
add	ax, ax		; Add
add	si, ax		; Add
mov	si, [si]
call	sub_11EBE	; Call Procedure

call	sub_131F6	; Call Procedure

mov	al, 0Fh


loc_193AA:		; Logical Exclusive OR
xor	ah, ah
mov	word ptr ds:47E1h, 0
push	ax
mov	ds:47C4h, ax
call	sub_191A0	; Call Procedure

call	sub_13AF9	; Call Procedure

call	sub_19197	; Call Procedure

call	sub_19908	; Call Procedure

mov	si, ds:47C8h
mov	word ptr ds:4540h, 0
call	sub_19BAC	; Call Procedure

call	sub_11834	; Call Procedure

call	sub_1C0F4	; Call Procedure

call	sub_1C4DD	; Call Procedure

pop	ax
call	sub_193DF	; Call Procedure

jmp	loc_19472	; Jump

; END OF FUNCTION CHUNK	FOR sub_19215



sub_193DF proc near
mov	cl, al
shl	al, 1		; Shift	Logical	Left
shl	al, 1		; Shift	Logical	Left
shl	al, 1		; Shift	Logical	Left
mov	ds:47BEh, ax
mov	ax, 1
shl	ax, cl		; Shift	Logical	Left
or	ds:0Eh,	ax	; Logical Inclusive OR
or	ds:14h,	ax	; Logical Inclusive OR
mov	al, 10h
mul	cl		; Unsigned Multiplication of AL	or AX
add	ax, 0FD8h	; Add
mov	ds:47A2h, ax
mov	si, ax
mov	word ptr ds:47BAh, 0
call	sub_190BD	; Call Procedure

mov	word ptr ds:47B6h, 0
mov	byte ptr ds:47C2h, 80h ; '�'
mov	byte ptr ds:19h, 0
retn			; Return Near from Procedure

sub_193DF endp

; ���������������������������������������������������������������������������
cmp	byte ptr ds:47A9h, 0 ; Compare Two Operands
jz	short loc_19427	; Jump if Zero (ZF=1)

jmp	sub_12993	; Jump

; ���������������������������������������������������������������������������

loc_19427:		; Call Procedure
call	sub_1D41B

cmp	bp, 20C2h	; Compare Two Operands
jnz	short loc_19436	; Jump if Not Zero (ZF=0)

call	sub_1D2EA	; Call Procedure

jmp	sub_10EB9	; Jump

; ���������������������������������������������������������������������������

loc_19436:		; Logical Compare
test	byte ptr ds:11C9h, 3
jz	short loc_19447	; Jump if Zero (ZF=1)

cmp	byte ptr ds:11CAh, 0 ; Compare Two Operands
jnz	short loc_19447	; Jump if Not Zero (ZF=0)

jmp	sub_14AAD	; Jump

; ���������������������������������������������������������������������������

loc_19447:		; Compare Two Operands
cmp	word ptr ds:479Eh, 0
jnz	short loc_19458	; Jump if Not Zero (ZF=0)

push	bx
push	dx
call	sub_12DB1	; Call Procedure

pop	dx
pop	bx
jmp	sub_19215	; Jump

; ���������������������������������������������������������������������������

loc_19458:		; Jump
jmp	sub_1D2E2

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_19215

loc_1945B:		; Compare Two Operands
cmp	word ptr ds:479Eh, 0
jnz	short loc_19468	; Jump if Not Zero (ZF=0)

mov	ax, ds:47C4h
jmp	loc_193AA	; Jump

; ���������������������������������������������������������������������������

loc_19468:		; Call Procedure
call	sub_1D41B

cmp	bp, 1FFEh	; Compare Two Operands
jnz	short loc_19472	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_19472:		; Call Procedure
call	sub_19F40

mov	byte ptr ds:226Dh, 0Ah
mov	byte ptr ds:1Bh, 0
cmp	word ptr ds:47B6h, 0 ; Compare Two Operands
jnz	short loc_194DD	; Jump if Not Zero (ZF=0)

mov	si, ds:47BAh
or	si, si		; Logical Inclusive OR
jnz	short loc_1949A	; Jump if Not Zero (ZF=0)

mov	si, ds:47BEh


loc_19492:
mov	ax, si
shl	si, 1		; Shift	Logical	Left
mov	si, [si-558Ah]


loc_1949A:		; Compare Two Operands
cmp	si, 0FFFFh
jz	short loc_194B9	; Jump if Zero (ZF=1)

call	sub_19B49	; Call Procedure

call	sub_19F9E	; Call Procedure


loc_194A5:
mov	ds:47BAh, si
jnb	short loc_194DA	; Jump if Not Below (CF=0)

mov	ax, ds:47BEh
inc	ax		; Increment by 1
mov	ds:47BEh, ax
mov	si, ax
and	ax, 3		; Logical AND
jnz	short loc_19492	; Jump if Not Zero (ZF=0)


loc_194B9:		; Compare Two Operands
cmp	word ptr ds:47C4h, 0Dh
jz	short loc_194C3	; Jump if Zero (ZF=1)

jmp	sub_1D2E2	; Jump

; ���������������������������������������������������������������������������

loc_194C3:		; Compare Two Operands
cmp	si, 0FFFFh
jnz	short loc_194CC	; Jump if Not Zero (ZF=0)

mov	si, ds:47BEh


loc_194CC:		; Logical AND
and	si, 0FFF8h
mov	ds:47BEh, si
mov	byte ptr ds:47C2h, 20h ; ' '
jmp	short loc_19492	; Jump

; ���������������������������������������������������������������������������

loc_194DA:		; Jump
jmp	sub_1D280

; ���������������������������������������������������������������������������

loc_194DD:		; Load Full Pointer to DS:xx
lds	si, ds:47B6h
call	sub_188D2	; Call Procedure

mov	si, ds:47BAh
add	word ptr ds:4780h, 1000h ; Add
call	sub_1A03F	; Call Procedure

jmp	short loc_194A5	; Jump

; END OF FUNCTION CHUNK	FOR sub_19215



sub_194F3 proc near
cmp	word ptr ds:47C4h, 10h ; Compare Two Operands
jnb	short locret_19532 ; Jump if Not Below (CF=0)

push	si
mov	si, ds:47A2h
mov	al, [si+0Fh]
mov	ds:18h,	al
test	al, 40h		; Logical Compare
mov	ax, [si+8]
jnz	short loc_1950F	; Jump if Not Zero (ZF=0)

mov	ax, [si+0Ah]


loc_1950F:		; Integer Subtraction
sub	ax, ds:2
neg	ax		; Two's Complement Negation
mov	ds:16h,	ax
pop	si
cmp	byte ptr ds:2Ah, 64h ; 'd' ; Compare Two Operands
jnb	short locret_19532 ; Jump if Not Below (CF=0)

cmp	word ptr ds:47C4h, 9 ; Compare Two Operands
jnb	short locret_19532 ; Jump if Not Below (CF=0)

mov	di, ds:11DBh
or	di, di		; Logical Inclusive OR
jz	short locret_19532 ; Jump if Zero (ZF=1)

call	sub_12E98	; Call Procedure


locret_19532:		; Return Near from Procedure
retn

sub_194F3 endp

; ���������������������������������������������������������������������������
call	sub_1A1C4	; Call Procedure

mov	ax, 6
call	sub_19F31	; Call Procedure

call	sub_19F8B	; Call Procedure

inc	byte ptr ds:1Bh	; Increment by 1
call	sub_1A1E2	; Call Procedure

jnz	short locret_1956C ; Jump if Not Zero (ZF=0)

mov	si, ds:47A2h
call	sub_11E01	; Call Procedure

jnb	short sub_19556	; Jump if Not Below (CF=0)

add	byte ptr ds:0F9h, 10h ;	Add




sub_19556 proc near
and	byte ptr [si+0Fh], 0BFh	; Logical AND
mov	bx, 2
call	sub_1956D	; Call Procedure

mov	cl, [si+0Eh]
mov	ax, 0FFFEh
rol	ax, cl		; Rotate Left
and	ds:10h,	ax	; Logical AND


locret_1956C:		; Return Near from Procedure
retn

sub_19556 endp




sub_1956D proc near
mov	bp, bx
xor	bp, 2		; Logical Exclusive OR
mov	ax, ds:2
sub	ax, [bp+si+8]	; Integer Subtraction
cmp	ax, 2		; Compare Two Operands
jb	short locret_19583 ; Jump if Below (CF=1)

mov	ax, ds:2
mov	[bx+si+8], ax


locret_19583:		; Return Near from Procedure
retn

sub_1956D endp

; ���������������������������������������������������������������������������
mov	si, ds:47A2h
mov	cl, [si+0Eh]
mov	ax, 1
shl	ax, cl		; Shift	Logical	Left
test	ds:0EEh, ax	; Logical Compare
jnz	short loc_195B4	; Jump if Not Zero (ZF=0)

or	ds:0EEh, ax	; Logical Inclusive OR
mov	si, ds:4768h
mov	al, 20h	; ' '
sub	byte ptr [si+15h], 29h ; ')' ; Integer Subtraction
sub	byte ptr ds:0EDh, 29h ;	')' ; Integer Subtraction
jns	short loc_195B4	; Jump if Not Sign (SF=0)

or	byte ptr [si+3], 10h ; Logical Inclusive OR
or	byte ptr ds:10A7h, 10h ; Logical Inclusive OR


loc_195B4:
mov	ax, 85h	; '�'
inc	byte ptr ds:47DCh ; Increment by 1
call	loc_1970B	; Call Procedure

jmp	loc_196EB	; Jump

; ���������������������������������������������������������������������������
mov	ax, 64h	; 'd'
cmp	word ptr ds:0ACh, 3E8h ; Compare Two Operands
jb	short loc_195DE	; Jump if Below	(CF=1)

sub	al, ds:29h	; Integer Subtraction
jb	short loc_195DE	; Jump if Below	(CF=1)

shr	al, 1		; Shift	Logical	Right
shr	al, 1		; Shift	Logical	Right
cmp	al, ds:36h	; Compare Two Operands
jbe	short loc_195DE	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	ah, 2


loc_195DE:
mov	ds:23h,	ah
call	sub_1A1C4	; Call Procedure

mov	ax, 5
call	sub_19F31	; Call Procedure

call	sub_19F8B	; Call Procedure

inc	byte ptr ds:1Bh	; Increment by 1
mov	byte ptr ds:23h, 0
call	sub_1A1E2	; Call Procedure

jnz	short nullsub_10 ; Jump	if Not Zero (ZF=0)

mov	si, ds:47A2h
mov	cl, [si+0Eh]
cmp	cl, 0Eh		; Compare Two Operands
jz	short loc_1961B	; Jump if Zero (ZF=1)

or	byte ptr [si+0Fh], 40h ; Logical Inclusive OR
xor	bx, bx		; Logical Exclusive OR
call	sub_1956D	; Call Procedure

mov	ax, 1
shl	ax, cl		; Shift	Logical	Left
or	ds:10h,	ax	; Logical Inclusive OR

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_10. PRESS	KEYPAD "+" TO EXPAND]
; ���������������������������������������������������������������������������

loc_1961B:
mov	si, ds:4756h
push	si
call	sub_166CE	; Call Procedure

call	sub_12EFB	; Call Procedure

call	loc_13093	; Call Procedure

pop	si
cmp	si, 8E0h	; Compare Two Operands
jnz	short loc_19639	; Jump if Not Zero (ZF=0)

add	byte ptr [si+15h], 18h ; Add
add	byte ptr ds:36h, 18h ; Add


loc_19639:
mov	ax, si
mov	cx, 8
push	ds
pop	es
mov	di, 4758h
repne scasw		; Compare String
mov	al, 7
sub	al, cl		; Integer Subtraction
mov	ds:476Ch, al
mov	si, 10C8h
call	sub_190BD	; Call Procedure

jmp	sub_1D280	; Jump




sub_19655 proc near
mov	cl, [si+0Eh]
mov	di, 1153h
mov	al, 0FFh
cmp	[di], cl	; Compare Two Operands
jz	short loc_19669	; Jump if Zero (ZF=1)

dec	di		; Decrement by 1
cmp	[di], cl	; Compare Two Operands
jnz	short nullsub_10 ; Jump	if Not Zero (ZF=0)

xchg	al, [di+1]	; Exchange Register/Memory with	Register


loc_19669:
mov	[di], al
mov	byte ptr [di+10D0h], 0
jmp	sub_1D763	; Jump

sub_19655 endp




sub_19673 proc near
mov	cl, [si+0Eh]
mov	di, 1152h
cmp	[di], cl	; Compare Two Operands
jz	short nullsub_10 ; Jump	if Zero	(ZF=1)

cmp	byte ptr [di], 0FFh ; Compare Two Operands
jz	short loc_196AB	; Jump if Zero (ZF=1)

inc	di		; Increment by 1
cmp	[di], cl	; Compare Two Operands
jz	short nullsub_10 ; Jump	if Zero	(ZF=1)

cmp	byte ptr [di], 0FFh ; Compare Two Operands
jz	short loc_196AB	; Jump if Zero (ZF=1)

dec	di		; Decrement by 1
push	cx
mov	cl, [di]
mov	al, 10h
mul	cl		; Unsigned Multiplication of AL	or AX
add	ax, 0FD8h	; Add
mov	si, ax
mov	al, [si+0Eh]
add	al, 64h	; 'd'   ; Add
mov	ds:23h,	al
call	sub_19556	; Call Procedure

pop	cx
inc	di		; Increment by 1
mov	al, [di]
mov	[di-1],	al


loc_196AB:
mov	[di], cl
mov	byte ptr [di+10D0h], 10h
jmp	sub_1D763	; Jump

sub_19673 endp




sub_196B5 proc near
push	ds:word_23C74
push	ds:word_23C72
mov	ds:word_23C74, 10h
mov	byte ptr ds:word_23C72,	80h ; '�'
mov	si, ds:word_2A034
call	sub_19F9E	; Call Procedure

pop	ds:word_23C72
pop	ds:word_23C74
retn			; Return Near from Procedure

sub_196B5 endp




sub_196D8 proc near
mov	ds:47C4h, ax
inc	byte ptr ds:47DCh ; Increment by 1
mov	ax, 10h
call	sub_19702	; Call Procedure

mov	word ptr ds:1BEAh, 0


loc_196EB:
mov	byte ptr ds:47DCh, 0
retn			; Return Near from Procedure

sub_196D8 endp




sub_196F1 proc near
mov	ds:47C4h, ax
cmp	al, 0Eh		; Compare Two Operands
jnz	short sub_19702	; Jump if Not Zero (ZF=0)

mov	si, ds:4756h
call	sub_131F6	; Call Procedure

mov	ax, 0Eh

sub_196F1 endp




sub_19702 proc near
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
or	ax, 4		; Logical Inclusive OR


loc_1970B:
mov	si, ax
shl	si, 1		; Shift	Logical	Left
mov	si, [si-558Ah]
call	sub_19F40	; Call Procedure

jmp	sub_19F8B	; Jump

sub_19702 endp




sub_19719 proc near
cmp	byte ptr ds:4Ch, 0 ; Compare Two Operands
js	short loc_1972C	; Jump if Sign (SF=1)

mov	si, ds:46EFh
mov	di, [si+4]
mov	al, 0Fh
call	sub_12A51	; Call Procedure


loc_1972C:		; Call Procedure
call	sub_19F82

mov	word ptr ds:47C4h, 0Fh
mov	word ptr ds:47A2h, 10C8h
call	sub_1A1C4	; Call Procedure

mov	si, ds:47BAh
inc	si		; Increment by 1
jz	short loc_19748	; Jump if Zero (ZF=1)

dec	si		; Decrement by 1
jnz	short loc_1974C	; Jump if Not Zero (ZF=0)


loc_19748:
mov	si, ds:0AB6Ah


loc_1974C:
mov	byte ptr ds:47C2h, 20h ; ' '
call	sub_19F9E	; Call Procedure

mov	ds:47BAh, si
jnb	short locret_19760 ; Jump if Not Below (CF=0)

mov	word ptr ds:47BAh, 0


locret_19760:		; Return Near from Procedure
retn

sub_19719 endp




sub_19761 proc near
mov	ds:47C4h, ax
cmp	al, 0Eh		; Compare Two Operands
jnz	short loc_19772	; Jump if Not Zero (ZF=0)

mov	si, ds:4756h
call	sub_131F6	; Call Procedure

mov	ax, 0Eh


loc_19772:		; Shift	Logical	Left
shl	ax, 1
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
or	ax, 7		; Logical Inclusive OR
mov	si, ax
shl	si, 1		; Shift	Logical	Left
mov	si, [si-558Ah]
call	sub_19F40	; Call Procedure

mov	byte ptr ds:47C2h, 80h ; '�'
jmp	sub_19F9E	; Jump

sub_19761 endp




sub_1978E proc near
call	sub_14ACA	; Call Procedure

mov	ax, ds:47C4h
cmp	ax, 0FFFFh	; Compare Two Operands
jz	short locret_197CE ; Jump if Zero (ZF=1)

call	sub_191A0	; Call Procedure

call	sub_19908	; Call Procedure

cmp	word ptr ds:479Eh, 0 ; Compare Two Operands
jz	short loc_197AC	; Jump if Zero (ZF=1)

mov	si, 1BE2h
call	_sub_1C477_gfx_copy_rect_at_si ; Call Procedure


loc_197AC:
mov	si, ds:47C8h
or	si, si		; Logical Inclusive OR
jz	short loc_197C8	; Jump if Zero (ZF=1)

mov	word ptr ds:4540h, 0
call	sub_19BAC	; Call Procedure

cmp	word ptr ds:479Eh, 223Ch ; Compare Two Operands
jnz	short loc_197C8	; Jump if Not Zero (ZF=0)

call	sub_19025	; Call Procedure


loc_197C8:		; Call Procedure
call	sub_1C0F4

jmp	sub_1C4DD	; Jump

; ���������������������������������������������������������������������������

locret_197CE:		; Return Near from Procedure
retn

sub_1978E endp




sub_197CF proc near
call	sub_1A7A5	; Call Procedure

cmp	word ptr ds:47C4h, 0FFFFh ; Compare Two	Operands
jz	short locret_197CE ; Jump if Zero (ZF=1)

mov	si, ds:47A2h
or	byte ptr [si+0Fh], 20h ; Logical Inclusive OR
and	byte ptr [si+0Fh], 0FBh	; Logical AND
mov	word ptr ds:47E1h, 0
cmp	byte ptr ds:11C9h, 0 ; Compare Two Operands
jz	short loc_1980C	; Jump if Zero (ZF=1)

call	sub_18C8A	; Call Procedure

mov	bp, 98B2h
call	sub_1C097	; Call Procedure

xor	al, al		; Logical Exclusive OR
xchg	al, ds:11CAh	; Exchange Register/Memory with	Register
push	ax
call	sub_12FFB	; Call Procedure

pop	ax
mov	ds:11CAh, al
jmp	sub_14ABE	; Jump

; ���������������������������������������������������������������������������

loc_1980C:		; Call Procedure
call	sub_18C8A

cmp	byte ptr ds:47A4h, 0 ; Compare Two Operands
mov	si, ds:47A2h
js	short loc_19849	; Jump if Sign (SF=1)

cmp	byte ptr ds:2Bh, 0 ; Compare Two Operands
jz	short loc_19825	; Jump if Zero (ZF=1)

mov	ax, 9840h
push	ax


loc_19825:		; Logical Compare
test	byte ptr [si+0Fh], 40h
jz	short loc_1982E	; Jump if Zero (ZF=1)

jmp	sub_19673	; Jump

; ���������������������������������������������������������������������������

loc_1982E:		; Call Procedure
call	sub_19655

cmp	byte ptr ds:2Bh, 0 ; Compare Two Operands
jnz	short locret_1983F ; Jump if Not Zero (ZF=0)

test	byte ptr ds:47A4h, 1 ; Logical Compare
jz	short loc_19879	; Jump if Zero (ZF=1)


locret_1983F:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������
call	sub_19B8B	; Call Procedure

call	sub_1C43E	; Call Procedure

jmp	sub_1C4DD	; Jump

; ���������������������������������������������������������������������������

loc_19849:
mov	word ptr ds:1C06h, 0
test	byte ptr [si+0Fh], 40h ; Logical Compare
jz	short loc_19858	; Jump if Zero (ZF=1)

call	sub_19673	; Call Procedure


loc_19858:		; Logical Exclusive OR
xor	ax, ax
mov	ds:4540h, ax
mov	ds:479Eh, ax
and	byte ptr ds:47D1h, 3Fh ; Logical AND
mov	ds:47C8h, ax
and	byte ptr ds:47A4h, 7Fh ; Logical AND
call	sub_19B8B	; Call Procedure

mov	al, ds:23h
sub	al, 64h	; 'd'   ; Integer Subtraction
cmp	al, 10h		; Compare Two Operands
jb	short loc_19898	; Jump if Below	(CF=1)


loc_19879:		; Call Procedure
call	sub_12EFB

cmp	byte ptr ds:11C9h, 0 ; Compare Two Operands
jnz	short loc_19886	; Jump if Not Zero (ZF=0)

call	sub_13090	; Call Procedure


loc_19886:		; Call Procedure
call	sub_137B2

call	sub_1C412	; Call Procedure

call	sub_1C0F4	; Call Procedure

call	sub_11834	; Call Procedure

call	sub_1C4DD	; Call Procedure

jmp	sub_117E6	; Jump

; ���������������������������������������������������������������������������

loc_19898:
mov	bp, 37B2h
call	sub_1C097	; Call Procedure

call	sub_136D3	; Call Procedure

mov	ax, 0C8h ; '�'
call	sub_1E3A0	; Call Procedure

mov	word ptr ds:1C06h, 0
jmp	short loc_19858	; Jump

sub_197CF endp




sub_198AF proc near
call	sub_18C8A	; Call Procedure

sub_198AF endp




sub_198B2 proc near
cmp	byte ptr ds:47C3h, 0 ; Compare Two Operands
jnz	short locret_198E5 ; Jump if Not Zero (ZF=0)

xor	ax, ax		; Logical Exclusive OR
mov	ds:4540h, ax
and	byte ptr ds:47D1h, 3Fh ; Logical AND
xchg	ax, ds:47C8h	; Exchange Register/Memory with	Register
or	ax, ax		; Logical Inclusive OR
jz	short locret_198E5 ; Jump if Zero (ZF=1)

mov	si, 1BF0h
mov	word ptr [si+8], 0
mov	word ptr ds:1C06h, 0
call	sub_1C446	; Call Procedure

mov	si, 1BF0h
call	_sub_1C4F0_rect_at_si_to_regs ;	Call Procedure

jmp	sub_19B8B	; Jump

; ���������������������������������������������������������������������������

locret_198E5:		; Return Near from Procedure
retn

sub_198B2 endp




sub_198E6 proc near
call	sub_198F5	; Call Procedure

mov	ds:word_23C78, ax
mov	ds:word_23C5A, ax
mov	ds:word_23C4E, ax
jmp	sub_19B8B	; Jump

sub_198E6 endp




sub_198F5 proc near
xor	ax, ax		; Logical Exclusive OR
mov	ds:word_210B6, ax
mov	ds:word_210A8, ax
mov	ds:word_2109A, ax
retn			; Return Near from Procedure

sub_198F5 endp




sub_19901 proc near
mov	word ptr ds:479Eh, 0
retn			; Return Near from Procedure

sub_19901 endp




sub_19908 proc near
mov	si, ds:47CAh
mov	es, word ptr ds:0DBB2h
call	sub_1994F	; Call Procedure

mov	byte ptr ds:47D1h, 0C0h	; '�'
mov	al, ds:478Ch
xor	ah, ah		; Logical Exclusive OR
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
mov	ds:47CEh, ax
add	si, es:[bp+si]	; Add
call	sub_1996C	; Call Procedure

mov	ds:47C8h, si
xchg	si, ds:47C6h	; Exchange Register/Memory with	Register
or	si, si		; Logical Inclusive OR
jnz	short locret_1994E ; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:0EAh, 0 ; Compare Two Operands
jg	short locret_1994E ; Jump if Greater (ZF=0 & SF=OF)

mov	ax, ds:47C4h
call	sub_1127C	; Call Procedure

jb	short locret_1994E ; Jump if Below (CF=1)

sub_19908 endp




sub_19945 proc near
mov	si, 99BEh
mov	bp, 10h
call	sub_1DA25	; Call Procedure


locret_1994E:		; Return Near from Procedure
retn

sub_19945 endp




sub_1994F proc near
mov	al, ds:47D0h
or	al, al		; Logical Inclusive OR
jnz	short loc_19963	; Jump if Not Zero (ZF=0)

mov	bx, 6
call	sub_1E3B7	; Call Procedure

mov	bp, ax
add	bp, ds:0F0h	; Add
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_19963:		; Decrement by 1
dec	al
xor	ah, ah		; Logical Exclusive OR
shl	ax, 1		; Shift	Logical	Left
mov	bp, ax
retn			; Return Near from Procedure

sub_1994F endp




sub_1996C proc near
cmp	byte ptr ds:47D0h, 0 ; Compare Two Operands
jz	short locret_19981 ; Jump if Zero (ZF=1)

mov	cx, 20h	; ' '
push	es
pop	ds


loc_19978:		; Load String
lodsb
or	al, al		; Logical Inclusive OR
jnz	short loc_19978	; Jump if Not Zero (ZF=0)

loop	loc_19978	; Loop while CX	!= 0

push	ss
pop	ds

assume ds:seg001

locret_19981:		; Return Near from Procedure
retn

sub_1996C endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_19985

loc_19982:		; Call Procedure
call	sub_199BE

; END OF FUNCTION CHUNK	FOR sub_19985



sub_19985 proc near

; FUNCTION CHUNK AT 9982 SIZE 00000003 BYTES

test	word ptr unk_23C7E, 7 ;	Logical	Compare
jnz	short loc_19982	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

sub_19985 endp




sub_1998E proc near
mov	di, 4C60h
mov	si, 1BF0h
mov	cx, 4
call	sub_199B2	; Call Procedure

mov	si, offset word_21756
mov	cx, 1
call	sub_199B2	; Call Procedure

mov	si, 4540h
mov	cx, 0C9h ; '�'
call	sub_199B2	; Call Procedure

mov	si, 47C4h
mov	cx, 7

sub_1998E endp




sub_199B2 proc near
lodsw			; Load String
xchg	ax, [di]	; Exchange Register/Memory with	Register
mov	[si-2],	ax
add	di, 2		; Add
loop	sub_199B2	; Loop while CX	!= 0

retn			; Return Near from Procedure

sub_199B2 endp




sub_199BE proc near
cmp	byte ptr word_23C72+1, 0 ; Compare Two Operands
jz	short sub_199DA	; Jump if Zero (ZF=1)

call	sub_1998E	; Call Procedure

mov	ax, 7
call	sub_1920F	; Call Procedure

call	sub_199DA	; Call Procedure

call	sub_1998E	; Call Procedure

mov	ax, 2Dh	; '-'
call	sub_1920F	; Call Procedure

sub_199BE endp




sub_199DA proc near
call	sub_19197	; Call Procedure

mov	al, byte ptr unk_23C81
or	al, al		; Logical Inclusive OR
jns	short locret_19A1C ; Jump if Not Sign (SF=0)

test	al, 10h		; Logical Compare
jnz	short loc_19A40	; Jump if Not Zero (ZF=0)

mov	si, word ptr unk_23C76
mov	es, word ptr _dword_2D060_sprite_sheet_resource_ptr+2


loc_199F0:		; Compare Two Operands
cmp	byte ptr es:[si], 0FFh
jz	short loc_19A1D	; Jump if Zero (ZF=1)


loc_199F6:		; Decrement by 1
dec	word ptr unk_23C7E
mov	word_23C78, si
call	sub_19BB1	; Call Procedure

mov	word ptr unk_23C76, si
cmp	word ptr unk_2CCE4, 13Fh ; Compare Two Operands
jz	short locret_19A1C ; Jump if Zero (ZF=1)

call	sub_1908C	; Call Procedure

mov	si, offset unk_2CCE4
call	sub_1DB74	; Call Procedure

call	_sub_1C4F0_rect_at_si_to_regs ;	Call Procedure

jmp	sub_1DB67	; Jump

; ���������������������������������������������������������������������������

locret_19A1C:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_19A1D:		; Compare Two Operands
cmp	word ptr unk_23C7E, 0
js	short loc_19A3B	; Jump if Sign (SF=1)

mov	si, word ptr unk_23C7A
mov	es, word ptr _dword_2D060_sprite_sheet_resource_ptr+2
call	sub_1994F	; Call Procedure

add	si, es:[bp+si]	; Add
call	sub_1996C	; Call Procedure

mov	word ptr unk_23C76, si
jmp	short loc_199F0	; Jump

; ���������������������������������������������������������������������������

loc_19A3B:		; Logical Inclusive OR
or	byte ptr unk_23C81, 10h


loc_19A40:
mov	si, word ptr unk_23C76
mov	es, word ptr _dword_2D060_sprite_sheet_resource_ptr+2
cmp	word ptr unk_23C7E, 0 ;	Compare	Two Operands
jg	short loc_199F6	; Jump if Greater (ZF=0	& SF=OF)

call	sub_19AB4	; Call Procedure

jb	short loc_199F6	; Jump if Below	(CF=1)

call	sub_19A7B	; Call Procedure

or	ah, ah		; Logical Inclusive OR
jnz	short locret_19A1C ; Jump if Not Zero (ZF=0)

call	sub_19A60	; Call Procedure

jmp	short loc_199F6	; Jump

sub_199DA endp




sub_19A60 proc near
or	al, al		; Logical Inclusive OR
jz	short loc_19A74	; Jump if Zero (ZF=1)

mov	bx, ax
xor	al, al		; Logical Exclusive OR
mov	cx, 0FFFFh
mov	di, si


loc_19A6D:		; Compare String
repne scasb
dec	bx		; Decrement by 1
jnz	short loc_19A6D	; Jump if Not Zero (ZF=0)

mov	si, di


loc_19A74:
mov	word ptr unk_23C7E, 8
retn			; Return Near from Procedure

sub_19A60 endp




sub_19A7B proc near
mov	al, byte ptr unk_23C80
mov	bx, 0F18h
or	al, al		; Logical Inclusive OR
jnz	short loc_19A9A	; Jump if Not Zero (ZF=0)

mov	al, 5
mov	bx, offset unk_203E8
cmp	word_23C74, 7	; Compare Two Operands
jnz	short loc_19A9A	; Jump if Not Zero (ZF=0)

cmp	byte_1F4DA, 0C8h ; '�' ; Compare Two Operands
jb	short loc_19A9A	; Jump if Below	(CF=1)

inc	al		; Increment by 1


loc_19A9A:		; Decrement by 1
dec	al
xor	ah, ah		; Logical Exclusive OR
shl	ax, 1		; Shift	Logical	Left
mov	bp, ax
add	bp, word ptr unk_1F5A0 ; Add
mov	si, word ptr unk_23C7A
mov	es, word ptr _dword_2D060_sprite_sheet_resource_ptr+2
add	si, es:[bp+si]	; Add
jmp	sub_1E3B7	; Jump

sub_19A7B endp




sub_19AB4 proc near
mov	al, byte ptr unk_23C91
or	al, al		; Logical Inclusive OR
jz	short locret_19B08 ; Jump if Zero (ZF=1)

js	short loc_19ADB	; Jump if Sign (SF=1)

or	byte ptr unk_23C91, 80h	; Logical Inclusive OR
call	sub_19B09	; Call Procedure

mov	al, byte ptr unk_23C92
xor	ah, ah		; Logical Exclusive OR
mov	bp, ax
mov	si, word ptr unk_23C7A
add	si, es:[bp+si]	; Add
mov	word ptr unk_23C7E, 14h
stc			; Set Carry Flag
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_19ADB:		; Shift	Logical	Right
shr	al, 1
jnb	short locret_19B08 ; Jump if Not Below (CF=0)

mov	byte ptr unk_23C91, 80h	; '�'
call	sub_1D075	; Call Procedure

mov	si, word ptr unk_23C94
cmp	word ptr [si], 38h ; '8' ; Compare Two Operands
jnb	short locret_19B08 ; Jump if Not Below (CF=0)

lodsw			; Load String
mov	cx, ax
lodsw			; Load String
mov	dx, ax
lodsw			; Load String
mov	bx, ax
lodsw			; Load String
xchg	ax, cx		; Exchange Register/Memory with	Register
call	sub_18865	; Call Procedure

call	sub_1D068	; Call Procedure

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	sub_1C4DD	; Call Procedure

clc			; Clear	Carry Flag


locret_19B08:		; Return Near from Procedure
retn

sub_19AB4 endp




sub_19B09 proc near
mov	si, word ptr unk_23C94
cmp	word ptr [si], 38h ; '8' ; Compare Two Operands
jb	short locret_19B48 ; Jump if Below (CF=1)

mov	ax, word ptr unk_1F4D0
jz	short loc_19B1C	; Jump if Zero (ZF=1)

mov	al, byte ptr unk_1F54D
xor	ah, ah		; Logical Exclusive OR


loc_19B1C:		; Call Procedure
call	sub_18A23

mov	cx, ax
les	si, _dword_2D060_sprite_sheet_resource_ptr ; Load Full Pointer to ES:xx
mov	di, si
mov	bp, 5


loc_19B2A:		; Logical AND
and	bx, 0Fh
jz	short loc_19B32	; Jump if Zero (ZF=1)

mov	bp, 6


loc_19B32:		; Add
add	bx, bp
shl	bx, 1		; Shift	Logical	Left
mov	ax, es:[bx+si]
stosw			; Store	String
mov	bl, dh
mov	dh, dl
mov	dl, ch
mov	ch, cl
mov	cl, 0FFh
cmp	bl, cl		; Compare Two Operands
jnz	short loc_19B2A	; Jump if Not Zero (ZF=0)


locret_19B48:		; Return Near from Procedure
retn

sub_19B09 endp




sub_19B49 proc near
mov	ax, word ptr unk_23C91
cmp	al, 80h	; '�'   ; Compare Two Operands
jnz	short loc_19B84	; Jump if Not Zero (ZF=0)

push	si
push	ax
call	sub_19197	; Call Procedure

pop	ax
mov	al, ah
xor	ah, ah		; Logical Exclusive OR
inc	ax		; Increment by 1
inc	ax		; Increment by 1
mov	bp, ax
mov	si, word ptr unk_23C7A
mov	es, word ptr _dword_2D060_sprite_sheet_resource_ptr+2
add	si, es:[bp+si]	; Add
mov	byte ptr unk_23C91, 81h	; '�'


loc_19B6E:
push	es
mov	bp, 99F6h
mov	ax, 0Ch
call	sub_1E353	; Call Procedure

pop	es
mov	si, word ptr unk_23C76
cmp	byte ptr es:[si], 0FFh ; Compare Two Operands
jnz	short loc_19B6E	; Jump if Not Zero (ZF=0)

pop	si


loc_19B84:
mov	word ptr unk_23C91, 0
retn			; Return Near from Procedure

sub_19B49 endp




sub_19B8B proc near
call	sub_1A7A5	; Call Procedure

xor	ax, ax		; Logical Exclusive OR
mov	byte ptr word_23C72+1, 0
mov	word ptr unk_23C7E, ax
and	byte ptr unk_23C81, 7Fh	; Logical AND
xchg	ax, word ptr unk_23C76 ; Exchange Register/Memory with Register
or	ax, ax		; Logical Inclusive OR
jz	short locret_19BAB ; Jump if Zero (ZF=1)

mov	si, offset unk_28E6E
jmp	sub_1DA5F	; Jump

; ���������������������������������������������������������������������������

locret_19BAB:		; Return Near from Procedure
retn

sub_19B8B endp




sub_19BAC proc near
push	si
call	sub_19197	; Call Procedure

pop	si

sub_19BAC endp




sub_19BB1 proc near
call	sub_19BEE	; Call Procedure

push	si
cmp	word ptr unk_239F0, 0 ;	Compare	Two Operands
jnz	short loc_19BCC	; Jump if Not Zero (ZF=0)

mov	si, 1BF0h
mov	di, 0D834h
call	sub_15B99	; Call Procedure

mov	word ptr [si], 80h ; '�'
jmp	short loc_19BD7	; Jump

; ���������������������������������������������������������������������������
align 2

loc_19BCC:		; Call Procedure
call	sub_19C2D

cmp	word ptr unk_2CCE4, 13Fh ; Compare Two Operands
jz	short loc_19BEC	; Jump if Zero (ZF=1)


loc_19BD7:
mov	si, 0D834h
cmp	word ptr [si+6], 98h ; '�' ; Compare Two Operands
jb	short loc_19BE6	; Jump if Below	(CF=1)

mov	word ptr [si+6], 98h ; '�'


loc_19BE6:		; Call Procedure
call	sub_1C446

call	sub_19D16	; Call Procedure


loc_19BEC:
pop	si
retn			; Return Near from Procedure

sub_19BB1 endp ; sp =  2




sub_19BEE proc near
xor	cx, cx		; Logical Exclusive OR
push	ds
pop	es
assume es:seg001
mov	ds, word ptr ss:_dword_2D060_sprite_sheet_resource_ptr+2
assume ds:nothing
mov	di, 460Ah


loc_19BFA:		; Load String
lodsb
xor	ah, ah		; Logical Exclusive OR
or	al, al		; Logical Inclusive OR
jz	short loc_19C25	; Jump if Zero (ZF=1)

cmp	al, 1		; Compare Two Operands
jnz	short loc_19C08	; Jump if Not Zero (ZF=0)

mov	ah, al
lodsb			; Load String


loc_19C08:
push	si
sub	ax, 2		; Integer Subtraction
shl	ax, 1		; Shift	Logical	Left
mov	bp, ax
mov	si, word ptr ss:unk_23C7C
add	si, ds:[bp+si]	; Add


loc_19C18:		; Load String
lodsb
or	al, al		; Logical Inclusive OR
jz	short loc_19C22	; Jump if Zero (ZF=1)

stosb			; Store	String
movsw			; Move Byte(s) from String to String
inc	cx		; Increment by 1
jmp	short loc_19C18	; Jump

; ���������������������������������������������������������������������������

loc_19C22:
pop	si
jmp	short loc_19BFA	; Jump

; ���������������������������������������������������������������������������

loc_19C25:
mov	word ptr ss:unk_23AB8, cx
push	ss
pop	ds
assume ds:seg001
retn			; Return Near from Procedure

sub_19BEE endp




sub_19C2D proc near
mov	word ptr unk_2CCE4, 13Fh
mov	word ptr unk_2CCE6, 0C7h ; '�'
xor	ax, ax		; Logical Exclusive OR
mov	word ptr unk_2CCE8, ax
mov	word_2CCEA, ax
mov	ax, ds
mov	es, ax
mov	si, 4540h
mov	di, 4608h
call	sub_19C54	; Call Procedure

mov	si, 4608h
mov	di, 4540h

sub_19C2D endp




sub_19C54 proc near
lodsw			; Load String
mov	cx, ax


loc_19C57:
push	cx
push	di
mov	cx, [di]
add	di, 2		; Add


loc_19C5E:		; Compare Strings
cmpsw
lahf			; Load Flags into AH Register
cmpsb			; Compare Strings
mov	al, ah
lahf			; Load Flags into AH Register
and	al, ah		; Logical AND
test	al, 40h		; Logical Compare
jnz	short loc_19C75	; Jump if Not Zero (ZF=0)

sub	si, 3		; Integer Subtraction
loop	loc_19C5E	; Loop while CX	!= 0

call	sub_19CC6	; Call Procedure

add	si, 3		; Add


loc_19C75:
pop	di
pop	cx
loop	loc_19C57	; Loop while CX	!= 0

cmp	byte ptr unk_23C91, 81h	; '�' ; Compare Two Operands
jz	short loc_19CA6	; Jump if Zero (ZF=1)

call	sub_1ABCC	; Call Procedure

jz	short loc_19CA6	; Jump if Zero (ZF=1)

mov	ax, word_23C74
cmp	al, 9		; Compare Two Operands
jz	short locret_19CC5 ; Jump if Zero (ZF=1)

cmp	al, 0Ch		; Compare Two Operands
jz	short locret_19CC5 ; Jump if Zero (ZF=1)

mov	si, word_2D0D8
mov	ax, [si+2]
cmp	ax, word_2CCEA	; Compare Two Operands
jnb	short loc_19CA6	; Jump if Not Below (CF=0)

mov	word_2CCEA, ax
cmp	ax, word ptr unk_2CCE6 ; Compare Two Operands
jle	short loc_19CBF	; Jump if Less or Equal	(ZF=1 |	SF!=OF)


loc_19CA6:		; Compare Two Operands
cmp	byte ptr unk_23C91, 80h	; '�'
jnz	short locret_19CC5 ; Jump if Not Zero (ZF=0)

mov	ax, 4Ch	; 'L'
cmp	ax, word_2CCEA	; Compare Two Operands
jnb	short locret_19CC5 ; Jump if Not Below (CF=0)

mov	word_2CCEA, ax
cmp	ax, word ptr unk_2CCE6 ; Compare Two Operands
jg	short locret_19CC5 ; Jump if Greater (ZF=0 & SF=OF)


loc_19CBF:
mov	word ptr unk_2CCE4, 13Fh


locret_19CC5:		; Return Near from Procedure
retn

sub_19C54 endp




sub_19CC6 proc near
push	si
push	ds
xor	ah, ah		; Logical Exclusive OR
lodsb			; Load String
mov	bp, ax
dec	bp		; Decrement by 1
lodsb			; Load String
mov	dx, ax
add	dx, word ptr unk_210A0 ; Add
lodsb			; Load String
mov	bx, ax
add	bx, word ptr unk_210A2 ; Add
lds	si, _dword_2D060_sprite_sheet_resource_ptr ; Load Full Pointer to DS:xx
assume ds:nothing
shl	bp, 1		; Shift	Logical	Left
add	si, ds:[bp+si]	; Add
mov	bp, 0D834h
cmp	[bp+0],	dx	; Compare Two Operands
jb	short loc_19CF0	; Jump if Below	(CF=1)

mov	[bp+0],	dx


loc_19CF0:		; Compare Two Operands
cmp	[bp+2],	bx
jb	short loc_19CF8	; Jump if Below	(CF=1)

mov	[bp+2],	bx


loc_19CF8:		; Load String
lodsw
and	ax, 1FFh	; Logical AND
add	dx, ax		; Add
lodsw			; Load String
xor	ah, ah		; Logical Exclusive OR
add	bx, ax		; Add
cmp	[bp+4],	dx	; Compare Two Operands
jnb	short loc_19D0B	; Jump if Not Below (CF=0)

mov	[bp+4],	dx


loc_19D0B:		; Compare Two Operands
cmp	[bp+6],	bx
jnb	short loc_19D13	; Jump if Not Below (CF=0)

mov	[bp+6],	bx


loc_19D13:
pop	ds
pop	si
retn			; Return Near from Procedure

sub_19CC6 endp




sub_19D16 proc near
push	ds
pop	es
assume es:nothing
mov	di, 4540h
mov	si, offset unk_23AB8
mov	cx, [si]
push	si
mov	ax, cx
shl	cx, 1		; Shift	Logical	Left
add	cx, ax		; Add
add	cx, 2		; Add
rep movsb		; Move Byte(s) from String to String
pop	si

sub_19D16 endp




sub_19D2D proc near
lodsw			; Load String
mov	cx, ax


loc_19D30:
push	cx
lodsb			; Load String
xor	ah, ah		; Logical Exclusive OR
mov	bp, ax
lodsb			; Load String
mov	dx, ax
lodsb			; Load String
mov	bx, ax
add	dx, ds:1BF0h	; Add
add	bx, ds:1BF2h	; Add
push	si
dec	bp		; Decrement by 1
mov	es, ds:_word_2D08A_framebuffer_active
lds	si, ds:0DBB0h	; Load Full Pointer to DS:xx
shl	bp, 1		; Shift	Logical	Left
add	si, ds:[bp+si]	; Add
lodsw			; Load String
mov	di, ax
lodsw			; Load String
xor	ah, ah		; Logical Exclusive OR
mov	cx, ax
mov	bp, 0D834h
call	ss:_ptr_22D65_gfx_vtable_func_06 ; Indirect Call Far Procedure
push	ss
pop	ds
assume ds:seg001
pop	si
pop	cx
loop	loc_19D30	; Loop while CX	!= 0

retn			; Return Near from Procedure

sub_19D2D endp ; sp =  2




sub_19D6A proc near
mov	es, ss:_word_2D088_vga_base_a000


loc_19D6F:		; Load String
lodsb
xor	ah, ah		; Logical Exclusive OR
or	al, al		; Logical Inclusive OR
jz	short locret_19D93 ; Jump if Zero (ZF=1)

cmp	al, 1		; Compare Two Operands
jnz	short loc_19D7D	; Jump if Not Zero (ZF=0)

mov	ah, al
lodsb			; Load String


loc_19D7D:
push	si
sub	ax, 2		; Integer Subtraction
shl	ax, 1		; Shift	Logical	Left
mov	bp, ax
mov	si, word ptr ss:unk_23C7C
add	si, ds:[bp+si]	; Add
call	sub_19D94	; Call Procedure

pop	si
jmp	short loc_19D6F	; Jump

; ���������������������������������������������������������������������������

locret_19D93:		; Return Near from Procedure
retn

sub_19D6A endp




sub_19D94 proc near
lodsb			; Load String
and	ax, 0FFh	; Logical AND
jz	short locret_19D93 ; Jump if Zero (ZF=1)

xor	ah, ah		; Logical Exclusive OR
mov	bp, ax
lodsb			; Load String
mov	dx, ax
lodsb			; Load String
mov	bx, ax
add	dx, word ptr ss:unk_210A0 ; Add
add	bx, word ptr ss:unk_210A2 ; Add
sub	dx, word ptr ss:unk_23B82 ; Integer Subtraction
sub	bx, word ptr ss:unk_23B84 ; Integer Subtraction
add	dx, word ptr ss:unk_23C84 ; Add
add	bx, word ptr ss:unk_23C86 ; Add
push	si
push	ds
dec	bp		; Decrement by 1
lds	si, ss:_dword_2D060_sprite_sheet_resource_ptr ;	Load Full Pointer to DS:xx
assume ds:nothing
shl	bp, 1		; Shift	Logical	Left
add	si, ds:[bp+si]	; Add
lodsw			; Load String
mov	di, ax
lodsw			; Load String
xor	ah, ah		; Logical Exclusive OR
mov	cx, ax
mov	bp, offset unk_23C84
call	ss:_ptr_22D65_gfx_vtable_func_06 ; Indirect Call Far Procedure
pop	ds
pop	si
jmp	short sub_19D94	; Jump

sub_19D94 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_1A82E

loc_19DE3:		; Compare Two Operands
cmp	ds:word_23C74, 10h
jnb	short locret_19D93 ; Jump if Not Below (CF=0)

push	ax
push	si
call	sub_19197	; Call Procedure

pop	si
pop	ax
cmp	byte ptr ds:46EBh, 0 ; Compare Two Operands
js	short loc_19E75	; Jump if Sign (SF=1)

mov	di, 0D834h
call	sub_15B99	; Call Procedure

mov	dx, ds:1BF0h
mov	bx, ds:1BF2h
add	[di-8],	dx	; Add
add	[di-6],	bx	; Add
add	[di-4],	dx	; Add
add	[di-2],	bx	; Add
mov	si, ds:word_23C82
mov	ah, ds:47D0h
dec	ah		; Decrement by 1
js	short loc_19E2D	; Jump if Sign (SF=1)

cmp	ds:word_21756, 0Dh ; Compare Two Operands
jnz	short loc_19E27	; Jump if Not Zero (ZF=0)

add	al, ah		; Add


loc_19E27:		; Shift	Logical	Left
shl	ah, 1
shl	ah, 1		; Shift	Logical	Left
add	al, ah		; Add


loc_19E2D:		; Logical Exclusive OR
xor	ah, ah
shl	ax, 1		; Shift	Logical	Left
add	si, ax		; Add
call	sub_19BEE	; Call Procedure

mov	si, offset unk_23AB8
cmp	byte ptr ds:0EAh, 0 ; Compare Two Operands
jg	short locret_19E74 ; Jump if Greater (ZF=0 & SF=OF)

cmp	word ptr [si], 2 ; Compare Two Operands
jb	short loc_19E57	; Jump if Below	(CF=1)

call	sub_19D2D	; Call Procedure

call	sub_1908C	; Call Procedure

mov	si, 0D834h
call	sub_1DB74	; Call Procedure

call	_sub_1C4F0_rect_at_si_to_regs ;	Call Procedure

jmp	sub_1DB67	; Jump

; ���������������������������������������������������������������������������

loc_19E57:
mov	si, 0D834h
call	sub_1DB74	; Call Procedure

push	ds:_word_2D08A_framebuffer_active
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

mov	si, offset unk_23AB8
call	sub_19D2D	; Call Procedure

call	sub_1908C	; Call Procedure

pop	ds:_word_2D08A_framebuffer_active
jmp	sub_1DB67	; Jump

; ���������������������������������������������������������������������������

locret_19E74:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_19E75:
mov	si, ds:47D2h
cmp	word ptr ds:47C4h, 0Ch ; Compare Two Operands
jz	short loc_19E8C	; Jump if Zero (ZF=1)

mov	ah, ds:47D0h
dec	ah		; Decrement by 1
shl	ah, 1		; Shift	Logical	Left
shl	ah, 1		; Shift	Logical	Left
add	al, ah		; Add


loc_19E8C:		; Logical Exclusive OR
xor	ah, ah
shl	ax, 1		; Shift	Logical	Left
add	si, ax		; Add
push	si
mov	si, offset unk_23C84
call	sub_1DB74	; Call Procedure

pop	si
push	ds
mov	ds, word ptr ss:_dword_2D060_sprite_sheet_resource_ptr+2
lodsb			; Load String
xor	ah, ah		; Logical Exclusive OR
sub	al, 2		; Integer Subtraction
shl	ax, 1		; Shift	Logical	Left
mov	bp, ax
mov	si, word ptr ss:unk_23C7C
add	si, ds:[bp+si]	; Add
cmp	byte ptr [si+3], 0 ; Compare Two Operands
jz	short loc_19EC9	; Jump if Zero (ZF=1)

mov	es, ss:_word_2D086_framebuffer_front
call	sub_19D94	; Call Procedure

pop	ds
mov	si, 47D4h
call	_sub_1C4F0_rect_at_si_to_regs ;	Call Procedure

jmp	sub_1DB67	; Jump

; ���������������������������������������������������������������������������

loc_19EC9:
mov	es, ss:_word_2D088_vga_base_a000
call	sub_19D94	; Call Procedure

pop	ds
jmp	sub_1DB67	; Jump

; END OF FUNCTION CHUNK	FOR sub_1A82E
; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_11707

loc_19ED5:		; Compare Two Operands
cmp	word ptr ds:47C4h, 10h
jnb	short loc_19EEB	; Jump if Not Below (CF=0)

call	sub_19985	; Call Procedure

cmp	byte ptr ds:47E1h, 81h ; '�' ; Compare Two Operands
jnz	short loc_19EEB	; Jump if Not Zero (ZF=0)

mov	byte ptr ds:47E1h, 1


loc_19EEB:		; Call Procedure
call	sub_1C85B

mov	al, ds:47DDh

; END OF FUNCTION CHUNK	FOR sub_11707



sub_19EF1 proc near
mov	ds:47DCh, al
call	sub_19EFD	; Call Procedure

mov	byte ptr ds:47DCh, 0


locret_19EFC:		; Return Near from Procedure
retn

sub_19EF1 endp




sub_19EFD proc near

; FUNCTION CHUNK AT A75C SIZE 0000002D BYTES

mov	al, ds:47DCh
mov	ds:47DDh, al
mov	ax, ds:4780h
mov	bx, ds:47C4h
call	sub_1A6CC	; Call Procedure

jnb	short locret_19EFC ; Jump if Not Below (CF=0)

cmp	word ptr ds:47C4h, 10h ; Compare Two Operands
jnb	short loc_19F19	; Jump if Not Below (CF=0)

call	sub_19F1C	; Call Procedure


loc_19F19:		; Jump
jmp	loc_1A75C

sub_19EFD endp




sub_19F1C proc near
call	sub_19197	; Call Procedure

or	byte ptr ds:47D1h, 10h ; Logical Inclusive OR
call	sub_19A7B	; Call Procedure

xor	ah, ah		; Logical Exclusive OR
call	sub_19A60	; Call Procedure

mov	ds:47C6h, si
retn			; Return Near from Procedure

sub_19F1C endp




sub_19F31 proc near
mov	si, ds:47BEh
and	si, 0FFF8h	; Logical AND
add	si, ax		; Add
shl	si, 1		; Shift	Logical	Left
mov	si, [si-558Ah]

sub_19F31 endp




sub_19F40 proc near
mov	ax, ds:47C4h
cmp	ax, 2		; Compare Two Operands
jnz	short loc_19F56	; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:0C2h, 4 ; Compare Two Operands
jnz	short loc_19F56	; Jump if Not Zero (ZF=0)

push	ax
push	si
call	sub_11243	; Call Procedure

pop	si
pop	ax


loc_19F56:
mov	cl, 10h
mul	cl		; Unsigned Multiplication of AL	or AX
add	ax, 0FD8h	; Add
mov	ds:47A2h, ax
cmp	byte ptr ds:46EBh, 0 ; Compare Two Operands
jnz	short sub_19F82	; Jump if Not Zero (ZF=0)

call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

mov	word ptr ds:4784h, 28h ; '('
mov	word ptr ds:4786h, 10h
mov	word ptr ds:4788h, 10h
mov	word ptr ds:478Ah, 10h

sub_19F40 endp




sub_19F82 proc near
mov	word ptr ds:0DBE4h, 0F0h ; '�'
jmp	sub_1D068	; Jump

sub_19F82 endp




sub_19F8B proc near
push	word ptr ds:47C2h
mov	byte ptr ds:47C2h, 20h ; ' '
call	sub_19F9E	; Call Procedure

pop	word ptr ds:47C2h
retn			; Return Near from Procedure

sub_19F8B endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_19F9E

loc_19F9C:		; Set Carry Flag
stc
retn			; Return Near from Procedure

; END OF FUNCTION CHUNK	FOR sub_19F9E



sub_19F9E proc near

; FUNCTION CHUNK AT 9F9C SIZE 00000002 BYTES

mov	ds:word_23C2C, si
call	sub_194F3	; Call Procedure

mov	ds:word_23C6C, offset unk_29B60


loc_19FAB:
mov	ax, [si]
cmp	ax, 0FFFFh	; Compare Two Operands
jz	short loc_19F9C	; Jump if Zero (ZF=1)

test	al, 80h		; Logical Compare
jz	short loc_19FC0	; Jump if Zero (ZF=1)

test	al, 40h		; Logical Compare
jnz	short loc_19FC0	; Jump if Not Zero (ZF=0)

and	al, ds:47C2h	; Logical AND
jnz	short loc_19FD3	; Jump if Not Zero (ZF=0)


loc_19FC0:
push	si
mov	al, ah
mov	ah, [si+2]
rol	ah, 1		; Rotate Left
rol	ah, 1		; Rotate Left
and	ah, 3		; Logical AND
call	sub_1A396	; Call Procedure

pop	si
jnz	short loc_19FD8	; Jump if Not Zero (ZF=0)


loc_19FD3:		; Add
add	si, 4
jmp	short loc_19FAB	; Jump

; ���������������������������������������������������������������������������

loc_19FD8:		; Compare Two Operands
cmp	byte ptr ds:46EBh, 0
jnz	short loc_19FF7	; Jump if Not Zero (ZF=0)

mov	ax, ds:47C4h
cmp	ax, 10h		; Compare Two Operands
jnb	short loc_19FF7	; Jump if Not Below (CF=0)

push	si
push	ax
call	sub_1A0F1	; Call Procedure

call	sub_11803	; Call Procedure

call	sub_13AF9	; Call Procedure

pop	ax
call	sub_191A0	; Call Procedure

pop	si


loc_19FF7:
push	si
lodsw			; Load String
mov	ds:word_23C8E, ax
lodsw			; Load String
xchg	ah, al		; Exchange Register/Memory with	Register
and	ax, 3FFh	; Logical AND
or	ax, 800h	; Logical Inclusive OR
mov	di, ds:47BCh
cmp	di, 0A6B0h	; Compare Two Operands
jz	short loc_1A034	; Jump if Zero (ZF=1)

mov	si, ax
call	sub_1CF70	; Call Procedure

cmp	byte ptr es:[si], 80h ;	'�' ; Compare Two Operands
jb	short loc_1A026	; Jump if Below	(CF=1)

pop	ax
sub	ax, 4		; Integer Subtraction
push	ax
mov	byte ptr [di-1], 0FFh
jmp	short loc_1A02C	; Jump

; ���������������������������������������������������������������������������
align 2

loc_1A026:		; Call Procedure
call	sub_188F1

call	sub_18944	; Call Procedure


loc_1A02C:
mov	si, 0A6B0h
call	sub_18B11	; Call Procedure

jmp	short loc_1A03E	; Jump

; ���������������������������������������������������������������������������

loc_1A034:		; Compare Two Operands
cmp	byte ptr ds:0C6h, 0
jnz	short loc_1A03E	; Jump if Not Zero (ZF=0)

call	sub_188AF	; Call Procedure


loc_1A03E:
pop	si

sub_19F9E endp




sub_1A03F proc near
call	sub_1C85B	; Call Procedure

cmp	word ptr ds:47B6h, 0 ; Compare Two Operands
jnz	short loc_1A0AA	; Jump if Not Zero (ZF=0)

mov	al, [si]
and	al, 0Fh		; Logical AND
jz	short loc_1A05E	; Jump if Zero (ZF=1)

xor	ah, ah		; Logical Exclusive OR
push	si
dec	ax		; Decrement by 1
shl	ax, 1		; Shift	Logical	Left
mov	bx, 0A107h
add	bx, ax		; Add
call	word ptr cs:[bx] ; Indirect Call Near Procedure
pop	si


loc_1A05E:
mov	al, [si+2]
and	al, 0Ch		; Logical AND
jz	short loc_1A092	; Jump if Zero (ZF=1)

test	byte ptr [si], 80h ; Logical Compare
jnz	short loc_1A092	; Jump if Not Zero (ZF=0)

mov	ax, si
sub	ax, 0AA78h	; Integer Subtraction
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
mov	bl, ds:47C4h
shl	bl, 1		; Shift	Logical	Left
shl	bl, 1		; Shift	Logical	Left
shl	bl, 1		; Shift	Logical	Left
or	ah, bl		; Logical Inclusive OR
mov	bp, ds:11BDh
mov	cs:[bp+0], ax
mov	word ptr cs:[bp+2], 0
add	word ptr ds:11BDh, 2 ; Add


loc_1A092:
mov	byte ptr ds:19h, 0FFh
or	byte ptr [si], 80h ; Logical Inclusive OR
add	si, 4		; Add
xor	al, al		; Logical Exclusive OR
xchg	al, ds:47A8h	; Exchange Register/Memory with	Register
or	al, al		; Logical Inclusive OR
jz	short loc_1A0AA	; Jump if Zero (ZF=1)

mov	si, 0FFFFh


loc_1A0AA:		; Compare Two Operands
cmp	byte ptr ds:46EBh, 0
jnz	short loc_1A0E2	; Jump if Not Zero (ZF=0)

cmp	word ptr ds:47C4h, 10h ; Compare Two Operands
jnb	short loc_1A0E2	; Jump if Not Below (CF=0)

push	si
call	sub_1978E	; Call Procedure

pop	si
cmp	byte ptr ds:4774h, 0 ; Compare Two Operands
jz	short loc_1A0C9	; Jump if Zero (ZF=1)

push	si
call	sub_12EBF	; Call Procedure

pop	si


loc_1A0C9:		; Compare Two Operands
cmp	byte ptr ds:0EAh, 0
jg	short loc_1A0E2	; Jump if Greater (ZF=0	& SF=OF)

call	sub_1E270	; Call Procedure

call	sub_19EFD	; Call Procedure

mov	ax, 0F66h
xchg	ax, ds:227Eh	; Exchange Register/Memory with	Register
call	ax		; Indirect Call	Near Procedure
call	sub_1E283	; Call Procedure


loc_1A0E2:		; Compare Two Operands
cmp	byte ptr ds:0FBh, 0
js	short loc_1A0EF	; Jump if Sign (SF=1)

mov	al, ds:28E8h
mov	ds:28E7h, al


loc_1A0EF:		; Clear	Carry Flag
clc
retn			; Return Near from Procedure

sub_1A03F endp ; sp =  2




sub_1A0F1 proc near
cmp	ds:byte_21D97, 2 ; Compare Two Operands
jnz	short locret_1A103 ; Jump if Not Zero (ZF=0)

test	byte ptr [si+2], 10h ; Logical Compare
jz	short loc_1A104	; Jump if Zero (ZF=1)

mov	ds:byte_21D97, 1


locret_1A103:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1A104:		; Jump
jmp	sub_18C8A

sub_1A0F1 endp

; ���������������������������������������������������������������������������
db 0D0h, 0A1h, 0D6h, 0A1h, 0F7h, 0A1h, 44h
db 0A2h, 48h, 0A2h, 0E8h, 0A1h,	0DCh, 0A1h
db 25h,	0A1h, 57h, 0A1h, 5Bh, 0A2h, 19h
db 0A2h, 35h, 0A2h, 8Eh, 0A2h, 0EDh, 0A1h
db 72h,	2 dup(0A1h), 0C4h, 47h,	3Dh, 1,	0
db 74h,	59h, 3Dh, 3, 0,	75h, 3,	0E9h, 4
db 81h,	3Dh, 5,	0, 75h,	7, 0C7h, 6, 7Eh
db 22h,	0CFh, 2Ch, 0C3h, 3Dh, 0Ch, 0, 75h
db 8, 8Bh, 3Eh,	0CEh, 11h, 80h,	65h, 0Ah
db 7Fh,	3Dh, 0Dh, 0, 75h, 3, 0E9h, 32h,	82h
db 0C3h, 0A1h, 0C4h, 47h, 3Dh, 3, 0, 75h
db 3, 0E9h, 8Ch, 83h, 3Dh, 5, 0, 75h, 3
db 0E9h, 0C2h, 8Bh, 3Dh, 0Dh, 0, 75h, 0E7h
db 0E9h, 0A7h, 82h, 0A1h, 0C4h,	47h, 3Dh
db 1, 0, 75h, 4, 0FEh, 6, 0F5h,	0, 3Dh,	3
db 0, 75h, 0D3h, 0E9h, 1Dh, 83h, 0F6h, 6
db 0Ah,	0, 2, 74h, 0Ah,	0B0h, 28h, 0E8h
db 0E6h, 0CDh, 0B8h, 0CEh, 0FFh, 0EBh, 13h
db 0A1h, 76h, 11h, 3Dh,	1, 0, 75h, 0Bh,	5
db 0Ah,	0, 0B0h, 0Ah, 0E8h, 0D1h, 0CDh,	0B8h
db 0Ah,	0, 5, 14h, 0, 0A3h, 76h, 11h, 32h
db 0DBh, 3Dh, 64h, 0, 73h, 8, 0B3h, 6, 0F6h
db 0F3h, 0B3h, 80h, 2Ah, 0D8h, 88h, 1Eh
db 0D5h, 0, 0C3h



sub_1A1C4 proc near
mov	byte ptr ds:47A5h, 0FFh
retn			; Return Near from Procedure

sub_1A1C4 endp

; ���������������������������������������������������������������������������
mov	byte ptr ds:47A5h, 0
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������
mov	byte ptr ds:47A5h, 0FFh
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������
mov	byte ptr ds:47A5h, 0
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������
mov	byte ptr ds:47A5h, 80h ; '�'
retn			; Return Near from Procedure




sub_1A1E2 proc near
cmp	byte ptr ds:47A5h, 0FFh	; Compare Two Operands
retn			; Return Near from Procedure

sub_1A1E2 endp




sub_1A1E8 proc near
inc	byte ptr ds:47A8h ; Increment by 1
retn			; Return Near from Procedure

sub_1A1E8 endp

; ���������������������������������������������������������������������������
test	byte ptr [si], 80h ; Logical Compare
jnz	short locret_1A234 ; Jump if Not Zero (ZF=0)

inc	byte ptr ds:0C2h ; Increment by	1
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������
mov	bl, ds:2Ah
mov	ax, 12F8h
cmp	bl, 14h		; Compare Two Operands
jb	short loc_1A216	; Jump if Below	(CF=1)

mov	ax, 134Fh
cmp	bl, 18h		; Compare Two Operands
jb	short loc_1A216	; Jump if Below	(CF=1)

mov	ax, 1370h
cmp	bl, 30h	; '0'   ; Compare Two Operands
jb	short loc_1A216	; Jump if Below	(CF=1)

mov	ax, 12DBh


loc_1A216:		; Jump
jmp	sub_11771

; ���������������������������������������������������������������������������
test	byte ptr [si], 80h ; Logical Compare
jnz	short locret_1A234 ; Jump if Not Zero (ZF=0)

inc	byte ptr ds:2Ah	; Increment by 1
mov	byte ptr ds:0FFh, 0
call	sub_1B17A	; Call Procedure

cmp	byte ptr ds:2Ah, 1 ; Compare Two Operands
jnz	short locret_1A234 ; Jump if Not Zero (ZF=0)

call	sub_1100B	; Call Procedure


locret_1A234:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������
test	byte ptr [si], 80h ; Logical Compare
jnz	short locret_1A234 ; Jump if Not Zero (ZF=0)

mov	al, ds:2Ah
and	al, 0FCh	; Logical AND
add	al, 4		; Add
jmp	sub_1121F	; Jump

; ���������������������������������������������������������������������������
xor	al, al		; Logical Exclusive OR
jmp	short loc_1A24A	; Jump

; ���������������������������������������������������������������������������
mov	al, 1


loc_1A24A:
mov	ds:476Dh, al
mov	byte ptr ds:9Fh, 0
mov	bp, 1FFEh
mov	bx, 0F66h
call	sub_1D323	; Call Procedure

push	si
push	ds
pop	es
mov	ax, ds:4780h
mov	bx, 0A01h
mov	di, 197Ch


loc_1A267:		; Add
add	di, 8
scasw			; Compare String
ja	short loc_1A267	; Jump if Above	(CF=0 &	ZF=0)

jnz	short loc_1A28C	; Jump if Not Zero (ZF=0)

cmp	word ptr [di], 38h ; '8' ; Compare Two Operands
jnz	short loc_1A276	; Jump if Not Zero (ZF=0)

mov	bh, 10h


loc_1A276:
mov	al, ds:47D0h
dec	al		; Decrement by 1
js	short loc_1A284	; Jump if Sign (SF=1)

shl	al, 1		; Shift	Logical	Left
inc	ax		; Increment by 1
shl	al, 1		; Shift	Logical	Left
add	bh, al		; Add


loc_1A284:
mov	ds:47E1h, bx
mov	ds:47E4h, di

; START	OF FUNCTION CHUNK FOR sub_1A28E

loc_1A28C:
pop	si
retn			; Return Near from Procedure

; END OF FUNCTION CHUNK	FOR sub_1A28E



sub_1A28E proc near

; FUNCTION CHUNK AT A28C SIZE 00000002 BYTES

push	si
cmp	ds:word_23C74, 0Eh ; Compare Two Operands
jb	short loc_1A2A0	; Jump if Below	(CF=1)

mov	di, ds:word_23C96
call	sub_1456C	; Call Procedure

mov	ds:word_2D0E0, ax


loc_1A2A0:		; Compare Two Operands
cmp	ds:byte_21D97, 1
jz	short loc_1A28C	; Jump if Zero (ZF=1)

mov	ax, ds:word_23C96
cmp	ax, ds:word_205FE ; Compare Two	Operands
jz	short loc_1A28C	; Jump if Zero (ZF=1)

mov	ds:byte_23C54, 0
mov	ax, 21h	; '!'
call	_sub_1C13E_open_sprite_sheet ; RES_PALPLAN_HSQ

mov	si, offset unk_21794
call	sub_1C21B	; Call Procedure

mov	si, word ptr ds:unk_217AC
mov	cx, 2A80h
add	si, cx		; Add
mov	di, offset unk_29A6F
push	ds
pop	es
std			; Set Direction	Flag
rep movsb		; Move Byte(s) from String to String
cld			; Clear	Direction Flag
inc	di		; Increment by 1
mov	word ptr ds:unk_217AC, di
mov	di, ds:word_23C96
push	di
call	sub_15B55	; Call Procedure

mov	ds:byte_23B9B, 1
mov	si, offset unk_217A4
mov	di, offset word_23B93
call	sub_15B99	; Call Procedure

call	sub_15B93	; Call Procedure

call	_sub_1B6C3_map_func ; Call Procedure

call	_sub_1C137_load_icons_sprites ;	Call Procedure

call	sub_15DCE	; Call Procedure

pop	si
call	loc_162FE	; Call Procedure

mov	byte ptr ds:46EBh, 0
mov	si, 22ECh
call	_sub_1C477_gfx_copy_rect_at_si ; Call Procedure

pop	si
retn			; Return Near from Procedure

sub_1A28E endp ; sp =  2




sub_1A30B proc near
lods	byte ptr es:[si] ; Load	String
cmp	al, 80h	; '�'   ; Compare Two Operands
jnb	short loc_1A32A	; Jump if Not Below (CF=0)

push	bx
mov	bl, es:[si]
inc	si		; Increment by 1
xor	bh, bh		; Logical Exclusive OR
cmp	al, 1		; Compare Two Operands
jz	short loc_1A322	; Jump if Zero (ZF=1)

mov	ax, [bx+0]
pop	bx
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1A322:
mov	al, [bx+0]
xor	ah, ah		; Logical Exclusive OR
pop	bx
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1A32A:		; Jump if Not Zero (ZF=0)
jnz	short loc_1A331

lods	byte ptr es:[si] ; Load	String
xor	ah, ah		; Logical Exclusive OR
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1A331:		; Load String
lods	word ptr es:[si]
retn			; Return Near from Procedure

sub_1A30B endp




sub_1A334 proc near
and	bx, 1Fh		; Logical AND
jmp	cs:off_1A376[bx] ; Indirect Near Jump


loc_1A33C:		; Add
add	dx, ax
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1A33F:		; Integer Subtraction
sub	dx, ax
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1A342:		; Logical AND
and	dx, ax
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1A345:		; Logical Inclusive OR
or	dx, ax
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1A348:		; Compare Two Operands
cmp	dx, ax
jz	short loc_1A372	; Jump if Zero (ZF=1)

xor	dx, dx		; Logical Exclusive OR
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1A34F:		; Compare Two Operands
cmp	dx, ax
jb	short loc_1A372	; Jump if Below	(CF=1)

xor	dx, dx		; Logical Exclusive OR
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1A356:		; Compare Two Operands
cmp	dx, ax
ja	short loc_1A372	; Jump if Above	(CF=0 &	ZF=0)

xor	dx, dx		; Logical Exclusive OR
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1A35D:		; Compare Two Operands
cmp	dx, ax
jnz	short loc_1A372	; Jump if Not Zero (ZF=0)

xor	dx, dx		; Logical Exclusive OR
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1A364:		; Compare Two Operands
cmp	dx, ax
jle	short loc_1A372	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

xor	dx, dx		; Logical Exclusive OR
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1A36B:		; Compare Two Operands
cmp	dx, ax
jge	short loc_1A372	; Jump if Greater or Equal (SF=OF)


loc_1A36F:		; Logical Exclusive OR
xor	dx, dx
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1A372:
mov	dx, 0FFFFh
retn			; Return Near from Procedure

sub_1A334 endp

; ���������������������������������������������������������������������������
off_1A376 dw offset loc_1A348
dw offset loc_1A34F
dw offset loc_1A356
dw offset loc_1A35D
dw offset loc_1A364
dw offset loc_1A36B
dw offset loc_1A33C
dw offset loc_1A33F
dw offset loc_1A342
dw offset loc_1A345
dw offset loc_1A36F
dw offset loc_1A36F
dw offset loc_1A36F
dw offset loc_1A36F
dw offset loc_1A36F
dw offset loc_1A36F



sub_1A396 proc near
sub	sp, 32h		; Integer Subtraction
mov	bp, sp
shl	ax, 1		; Shift	Logical	Left
les	si, dword ptr ds:_word_29F22_res_condit_ofs ; Load Full	Pointer	to ES:xx
add	si, ax		; Add
mov	si, es:[si-2]


loc_1A3A7:		; Call Procedure
call	sub_1A30B

mov	dx, ax


loc_1A3AC:		; Load String
lods	byte ptr es:[si]
cmp	al, 0FFh	; Compare Two Operands
jz	short loc_1A3CB	; Jump if Zero (ZF=1)

test	al, 80h		; Logical Compare
jnz	short loc_1A3C0	; Jump if Not Zero (ZF=0)

mov	bl, al
call	sub_1A30B	; Call Procedure

call	sub_1A334	; Call Procedure

jmp	short loc_1A3AC	; Jump

; ���������������������������������������������������������������������������

loc_1A3C0:
mov	[bp+0],	dx
mov	[bp+2],	ax
add	bp, 4		; Add
jmp	short loc_1A3A7	; Jump

; ���������������������������������������������������������������������������

loc_1A3CB:
mov	si, sp
cmp	si, bp		; Compare Two Operands
jz	short loc_1A3E2	; Jump if Zero (ZF=1)

mov	[bp+0],	dx
lodsw			; Load String
mov	dx, ax


loc_1A3D7:		; Load String
lodsw
mov	bx, ax
lodsw			; Load String
call	sub_1A334	; Call Procedure

cmp	si, bp		; Compare Two Operands
jb	short loc_1A3D7	; Jump if Below	(CF=1)


loc_1A3E2:		; Add
add	sp, 32h
or	dx, dx		; Logical Inclusive OR
retn			; Return Near from Procedure

sub_1A396 endp

; ���������������������������������������������������������������������������
align 10h
mov	ax, 1AD6h
call	sub_1D95E	; Call Procedure

call	sub_1D2BD	; Call Procedure

; START	OF FUNCTION CHUNK FOR sub_1A576

loc_1A3F9:
push	ds:_word_2D08A_framebuffer_active
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

mov	ax, 55h	; 'U'
call	_sub_1C13E_open_sprite_sheet ; RES_MIXR_HSQ

xor	ax, ax		; Logical Exclusive OR
mov	dx, ds:word_21D36
mov	bx, ds:word_21D38
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

pop	ds:_word_2D08A_framebuffer_active
call	sub_1A4C6	; Call Procedure

call	sub_1A47D	; Call Procedure

call	sub_1A42C	; Call Procedure

call	sub_1A44C	; Call Procedure

call	sub_1AC3A	; Call Procedure

mov	bx, 0A541h
jmp	loc_1D32F	; Jump

; END OF FUNCTION CHUNK	FOR sub_1A576



sub_1A42C proc near
mov	ax, 55h	; 'U'
call	_sub_1C13E_open_sprite_sheet ; RES_MIXR_HSQ

mov	al, ds:_byte_2C39B_language_setting


loc_1A435:
push	ds:_word_2D08A_framebuffer_active
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

cbw			; AL ->	AX (with sign)
call	sub_1A465	; Call Procedure

shl	ax, 1		; Shift	Logical	Left
add	al, 1Ch		; Add
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

pop	ds:_word_2D08A_framebuffer_active
retn			; Return Near from Procedure

sub_1A42C endp




sub_1A44C proc near
mov	al, ds:28E7h
add	al, 8		; Add
jmp	short loc_1A435	; Jump

sub_1A44C endp




sub_1A453 proc near
sub	dx, ds:2886h	; Integer Subtraction
sub	bx, ds:2888h	; Integer Subtraction
retn			; Return Near from Procedure

sub_1A453 endp




sub_1A45C proc near
add	dx, ds:2886h	; Add
add	bx, ds:2888h	; Add
retn			; Return Near from Procedure

sub_1A45C endp




sub_1A465 proc near
push	ax
mov	dx, ds:28C7h
mov	bx, 28DCh
xlat			; Table	Lookup Translation
mov	bl, 7
mul	bl		; Unsigned Multiplication of AL	or AX
mov	bx, ax
add	bx, ds:28C9h	; Add
call	sub_1A45C	; Call Procedure

pop	ax
retn			; Return Near from Procedure

sub_1A465 endp




sub_1A47D proc near
test	ds:word_2D078, 8 ; Logical Compare
jz	short loc_1A48B	; Jump if Zero (ZF=1)

mov	si, 28A6h
call	sub_1A49C	; Call Procedure


loc_1A48B:		; Logical Compare
test	ds:word_2D078, 800h
jz	short locret_1A4C5 ; Jump if Zero (ZF=1)

mov	si, 28AEh
call	sub_1A49C	; Call Procedure

mov	si, 28B6h

sub_1A47D endp




sub_1A49C proc near
push	ds:_word_2D08A_framebuffer_active
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

mov	ax, 55h	; 'U'
call	_sub_1C13E_open_sprite_sheet ; RES_MIXR_HSQ

lodsb			; Load String
aam			; ASCII	Adjust AX after	Multiply
mov	al, ah
xor	ah, ah		; Logical Exclusive OR
add	al, 3		; Add
mov	byte ptr [si], 1
inc	si		; Increment by 1
mov	dx, [si]
mov	bx, [si+2]
call	sub_1A45C	; Call Procedure

call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

pop	ds:_word_2D08A_framebuffer_active


locret_1A4C5:		; Return Near from Procedure
retn

sub_1A49C endp




sub_1A4C6 proc near
call	_sub_1AE2F_check_pcm_enabled ; Call Procedure

jz	short loc_1A4DE	; Jump if Zero (ZF=1)

mov	si, offset unk_21D3E
call	sub_1A502	; Call Procedure

test	word ptr ds:0DBC8h, 4 ;	Logical	Compare
jnz	short loc_1A4DE	; Jump if Not Zero (ZF=0)

mov	byte ptr ds:288Fh, 0


loc_1A4DE:		; Call Procedure
call	sub_1AE28

jz	short locret_1A540 ; Jump if Zero (ZF=1)

mov	si, offset byte_21D46
call	sub_1A502	; Call Procedure

mov	si, offset byte_21D4E
call	sub_1A502	; Call Procedure

test	ds:word_2D078, 400h ; Logical Compare
jnz	short locret_1A540 ; Jump if Not Zero (ZF=0)

mov	byte ptr ds:2897h, 0
mov	byte ptr ds:289Fh, 0
retn			; Return Near from Procedure

sub_1A4C6 endp




sub_1A502 proc near
push	ds:_word_2D08A_framebuffer_active
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

push	si
mov	ax, 55h	; 'U'
call	_sub_1C13E_open_sprite_sheet ; RES_MIXR_HSQ

mov	dx, [si+2]
mov	bx, 22h	; '"'
call	sub_1A45C	; Call Procedure

mov	ax, 1
call	sub_1C2FD	; Call Procedure

pop	si
lodsb			; Load String
mov	byte ptr [si], 1
not	ax		; One's Complement Negation
shr	al, 1		; Shift	Logical	Right
shr	al, 1		; Shift	Logical	Right
cbw			; AL ->	AX (with sign)
add	ax, bx		; Add
mov	bx, ax
sub	ax, ds:2888h	; Integer Subtraction
mov	[si+3],	ax
mov	ax, 2
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

pop	ds:_word_2D08A_framebuffer_active


locret_1A540:		; Return Near from Procedure
retn

sub_1A502 endp




sub_1A541 proc near
mov	al, ds:28E7h
mov	ds:28E8h, al
call	sub_1DAA3	; Call Procedure

call	sub_1D95B	; Call Procedure

mov	si, 2886h
jmp	_sub_1C4F0_rect_at_si_to_regs ;	Jump

sub_1A541 endp




sub_1A553 proc near
call	_sub_1AE2F_check_pcm_enabled ; Call Procedure

jz	short locret_1A540 ; Jump if Zero (ZF=1)

mov	ax, 4
mov	bx, 5
call	sub_1A8BC	; Call Procedure

call	sub_1A83F	; Call Procedure

call	sub_1ADE0	; Call Procedure

mov	ds:byte_2D0DB, 1
mov	si, offset _dword_22CC1_pcm_voc_resource_offset
call	ds:pcm_audio_vtable_func_3 ; Indirect Call Far Procedure
jmp	sub_1ABA9	; Jump

sub_1A553 endp




sub_1A576 proc near

; FUNCTION CHUNK AT A3F9 SIZE 00000033 BYTES
; FUNCTION CHUNK AT A5B0 SIZE 0000002F BYTES

mov	di, 2886h
call	sub_1D6FE	; Call Procedure

jb	short loc_1A581	; Jump if Below	(CF=1)

jmp	sub_1D2E2	; Jump

; ���������������������������������������������������������������������������

loc_1A581:		; Call Procedure
call	sub_1A453

mov	di, 28BFh
call	sub_1D6FE	; Call Procedure

jb	short sub_1A553	; Jump if Below	(CF=1)

mov	di, 28C7h
call	sub_1D6FE	; Call Procedure

jb	short loc_1A5B0	; Jump if Below	(CF=1)

sub_1A576 endp




sub_1A594 proc near
call	sub_1A672	; Call Procedure

jnb	short loc_1A59F	; Jump if Not Below (CF=0)

mov	byte ptr ds:28BEh, 1
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1A59F:		; Call Procedure
call	sub_1A69F

jnb	short loc_1A5AA	; Jump if Not Below (CF=0)

mov	byte ptr ds:28BEh, 2
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1A5AA:
mov	byte ptr ds:28BEh, 0
retn			; Return Near from Procedure

sub_1A594 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_1A576

loc_1A5B0:		; Integer Subtraction
sub	bx, [di+2]
mov	ax, bx
mov	bl, 7
div	bl		; Unsigned Divide
mov	bx, 28CFh
xlat			; Table	Lookup Translation
cmp	al, 7		; Compare Two Operands

loc_1A5BF:		; Jump if Below	(CF=1)
jb	short loc_1A5CA

jz	short locret_1A5DE ; Jump if Zero (ZF=1)

sub	al, 8		; Integer Subtraction
mov	ds:28E7h, al
jmp	short loc_1A5DB	; Jump

; ���������������������������������������������������������������������������

loc_1A5CA:		; Compare Two Operands
cmp	al, ds:_byte_2C39B_language_setting
jz	short locret_1A5DE ; Jump if Zero (ZF=1)

and	byte ptr ds:28E7h, 0FDh	; Logical AND
mov	ds:_byte_2C39B_language_setting, al
call	loc_1CFE4	; Call Procedure


loc_1A5DB:		; Jump
jmp	loc_1A3F9

; ���������������������������������������������������������������������������

locret_1A5DE:		; Return Near from Procedure
retn

; END OF FUNCTION CHUNK	FOR sub_1A576
; ���������������������������������������������������������������������������
call	sub_1A453	; Call Procedure

sub	bx, cx		; Integer Subtraction
call	sub_1A594	; Call Procedure

cmp	byte ptr ds:28BEh, 1 ; Compare Two Operands
jz	short loc_1A61A	; Jump if Zero (ZF=1)

cmp	byte ptr ds:28BEh, 2 ; Compare Two Operands
jnz	short locret_1A619 ; Jump if Not Zero (ZF=0)

cmp	ax, 6		; Compare Two Operands
jnb	short loc_1A5FC	; Jump if Not Below (CF=0)

neg	cx		; Two's Complement Negation


loc_1A5FC:		; Compare Two Operands
cmp	bp, 5
jb	short loc_1A603	; Jump if Below	(CF=1)

neg	di		; Two's Complement Negation


loc_1A603:
mov	al, 0Ah
add	cx, di		; Add
jns	short loc_1A60B	; Jump if Not Sign (SF=0)

neg	al		; Two's Complement Negation


loc_1A60B:		; Add
add	al, [si]
cmp	al, 0F1h ; '�'  ; Compare Two Operands
jnb	short locret_1A619 ; Jump if Not Below (CF=0)

mov	[si], al
push	word ptr [si+6]
jmp	sub_1A49C	; Jump

; ���������������������������������������������������������������������������

locret_1A619:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1A61A:		; Jump if CX is	0
jcxz	short locret_1A619

mov	ax, [si+4]
add	ax, cx		; Add
sub	ax, 22h	; '"'   ; Integer Subtraction
cmp	ax, 40h	; '@'   ; Compare Two Operands
jnb	short locret_1A619 ; Jump if Not Below (CF=0)

shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
not	ax		; One's Complement Negation
mov	[si], al
push	word ptr [si+6]
jmp	sub_1A502	; Jump




sub_1A637 proc near
test	word ptr ds:0DBC8h, 4 ;	Logical	Compare
jnz	short loc_1A644	; Jump if Not Zero (ZF=0)

mov	byte ptr ds:288Eh, 0FFh


loc_1A644:
mov	al, ds:288Eh
mov	ah, ds:28A6h
call	dword ptr ds:39A5h ; Indirect Call Far Procedure
retn			; Return Near from Procedure

sub_1A637 endp




sub_1A650 proc near
test	word ptr ds:0DBC8h, 400h ; Logical Compare
jnz	short loc_1A660	; Jump if Not Zero (ZF=0)

mov	al, 0FFh
mov	ds:2896h, al
mov	ds:289Eh, al


loc_1A660:
mov	ah, ds:28AEh
mov	al, ds:2896h
cmp	al, 4		; Compare Two Operands
jnb	short loc_1A66D	; Jump if Not Below (CF=0)

mov	al, 4


loc_1A66D:		; Indirect Call	Far Procedure
call	dword ptr ds:3985h
retn			; Return Near from Procedure

sub_1A650 endp




sub_1A672 proc near
mov	si, 288Eh
call	sub_1A685	; Call Procedure

jb	short locret_1A69E ; Jump if Below (CF=1)

mov	si, 2896h
call	sub_1A685	; Call Procedure

jb	short locret_1A69E ; Jump if Below (CF=1)

mov	si, 289Eh

sub_1A672 endp




sub_1A685 proc near
cmp	byte ptr [si+1], 1 ; Compare Two Operands
cmc			; Complement Carry Flag
jnb	short locret_1A69E ; Jump if Not Below (CF=0)

mov	ax, dx
sub	ax, [si+2]	; Integer Subtraction
mov	bp, bx
sub	bp, [si+4]	; Integer Subtraction
cmp	ax, 16h		; Compare Two Operands
jnb	short locret_1A69E ; Jump if Not Below (CF=0)

cmp	bp, 5		; Compare Two Operands


locret_1A69E:		; Return Near from Procedure
retn

sub_1A685 endp




sub_1A69F proc near
mov	si, 28A6h
call	sub_1A6B2	; Call Procedure

jb	short locret_1A6CB ; Jump if Below (CF=1)

mov	si, 28AEh
call	sub_1A6B2	; Call Procedure

jb	short locret_1A6CB ; Jump if Below (CF=1)


loc_1A6AF:
mov	si, 28B6h

sub_1A69F endp




sub_1A6B2 proc near
cmp	byte ptr [si+1], 1 ; Compare Two Operands
cmc			; Complement Carry Flag
jnb	short locret_1A6CB ; Jump if Not Below (CF=0)

mov	ax, dx
sub	ax, [si+2]	; Integer Subtraction
mov	bp, bx
sub	bp, [si+4]	; Integer Subtraction
cmp	ax, 0Dh		; Compare Two Operands
jnb	short locret_1A6CB ; Jump if Not Below (CF=0)

cmp	bp, 0Bh		; Compare Two Operands


locret_1A6CB:		; Return Near from Procedure
retn

sub_1A6B2 endp




sub_1A6CC proc near
cmp	bx, 0FFFFh	; Compare Two Operands
jnz	short loc_1A6E6	; Jump if Not Zero (ZF=0)


loc_1A6D1:
mov	ax, 0FFFh
xor	byte ptr cs:loc_1A6D1+2, 10h ; Logical Exclusive OR
mov	bx, ds:word_21756
call	sub_1A8BC	; Call Procedure

call	sub_1A7A5	; Call Procedure

jmp	short loc_1A740	; Jump

; ���������������������������������������������������������������������������

loc_1A6E6:
push	bx
cmp	bl, 0Eh		; Compare Two Operands
jb	short loc_1A6EE	; Jump if Below	(CF=1)

mov	bl, 0Eh


loc_1A6EE:		; Logical AND
and	ah, 0F3h
cmp	ds:byte_23C8C, 0 ; Compare Two Operands
jz	short loc_1A701	; Jump if Zero (ZF=1)

sub	ax, ds:word_2CCC4 ; Integer Subtraction
add	ax, 3E7h	; Add
jmp	short loc_1A710	; Jump

; ���������������������������������������������������������������������������

loc_1A701:		; Compare Two Operands
cmp	byte ptr ds:227Dh, 0
jnz	short loc_1A710	; Jump if Not Zero (ZF=0)

shl	bx, 1		; Shift	Logical	Left
sub	ax, [bx-280Ch]	; Integer Subtraction
shr	bx, 1		; Shift	Logical	Right


loc_1A710:		; Compare Two Operands
cmp	bl, 0Eh
jnz	short loc_1A727	; Jump if Not Zero (ZF=0)

mov	cx, ax
and	cl, 0FEh	; Logical AND
cmp	cl, 2Ch	; ','   ; Compare Two Operands
jnz	short loc_1A727	; Jump if Not Zero (ZF=0)

pop	cx
mov	cl, 0Ch
mov	ds:word_23C74, cx
push	cx


loc_1A727:		; Call Procedure
call	sub_1A8BC

call	sub_1A7A5	; Call Procedure

pop	ax
call	sub_19123	; Call Procedure

shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
add	ax, 27FAh	; Add
mov	si, ax
mov	ds:word_2D0D8, si


loc_1A740:
mov	ds:byte_2D0DA, 0FFh
call	sub_1A83F	; Call Procedure

jb	short loc_1A754	; Jump if Below	(CF=1)

xor	byte ptr ds:aPfPf001i_voc+8, 6 ; Logical Exclusive OR
call	sub_1A83F	; Call Procedure

jnb	short locret_1A75B ; Jump if Not Below (CF=0)


loc_1A754:		; Call Procedure
call	sub_1ADE0

call	sub_1D617	; Call Procedure

stc			; Set Carry Flag


locret_1A75B:		; Return Near from Procedure
retn

sub_1A6CC endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_19EFD

loc_1A75C:		; Call Procedure
call	sub_19197

mov	bp, 0
mov	si, 0A7C2h
call	sub_1DA25	; Call Procedure

mov	byte ptr ds:0DC2Bh, 1
mov	si, offset _dword_22CC1_pcm_voc_resource_offset
call	ds:pcm_audio_vtable_func_3 ; Indirect Call Far Procedure
mov	ax, ds:_word_2C32A_time_passed
mov	ds:word_2D0DC, ax
mov	ds:word_2D0DE, 8000h
call	sub_1A814	; Call Procedure

jnb	short locret_1A788 ; Jump if Not Below (CF=0)

call	sub_1A82E	; Call Procedure


locret_1A788:		; Return Near from Procedure
retn

; END OF FUNCTION CHUNK	FOR sub_19EFD
; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_1A7C2

loc_1A789:		; Logical Exclusive OR
xor	ax, ax
xchg	ax, ds:0DC30h	; Exchange Register/Memory with	Register
or	ax, ax		; Logical Inclusive OR
jz	short sub_1A7A5	; Jump if Zero (ZF=1)

push	ax
call	sub_1A7A5	; Call Procedure

pop	ax
add	ax, ds:0D810h	; Add
mov	bl, 0Eh
call	sub_1A6CC	; Call Procedure

jnb	short locret_1A788 ; Jump if Not Below (CF=0)

jmp	short loc_1A75C	; Jump

; END OF FUNCTION CHUNK	FOR sub_1A7C2



sub_1A7A5 proc near
mov	si, offset unk_29C72
call	sub_1DA5F	; Call Procedure

mov	ds:_word_2D0D6_pcm_voc_lipsync_data, 0
call	sub_1D61D	; Call Procedure

call	sub_1ABCC	; Call Procedure

jz	short locret_1A788 ; Jump if Zero (ZF=1)

call	sub_1ABC6	; Call Procedure

call	_sub_1A9A1_close_res_file_handle ; Call	Procedure

jmp	sub_1ADED	; Jump

sub_1A7A5 endp




sub_1A7C2 proc near

; FUNCTION CHUNK AT A789 SIZE 0000001C BYTES

call	sub_1ABCC	; Call Procedure

jz	short locret_1A788 ; Jump if Zero (ZF=1)

cmp	word ptr ds:0DC26h, 0 ;	Compare	Two Operands
jnz	short loc_1A7D5	; Jump if Not Zero (ZF=0)

call	_sub_1A9E7_pcm_test_audio_done ; Call Procedure

jnz	short loc_1A789	; Jump if Not Zero (ZF=0)

jmp	short loc_1A811	; Jump

; ���������������������������������������������������������������������������

loc_1A7D5:
mov	dx, ds:_word_2C32A_time_passed
xor	di, di		; Logical Exclusive OR
mov	bx, ds:word_2D0DC
mov	bp, ds:word_2D0DE
mov	cx, ds:_word_21D32_audio_time_to_play_28224_samples_hi
mov	si, ds:_word_21D34_audio_time_to_play_28224_samples_lo
add	bp, si		; Add
adc	bx, cx		; Add with Carry
sub	dx, bx		; Integer Subtraction
js	short loc_1A811	; Jump if Sign (SF=1)


loc_1A7F3:
push	di
call	sub_1A814	; Call Procedure

pop	di
jnb	short loc_1A789	; Jump if Not Below (CF=0)

sub	di, si		; Integer Subtraction
sbb	dx, cx		; Integer Subtraction with Borrow
jb	short loc_1A806	; Jump if Below	(CF=1)

add	bp, si		; Add
adc	bx, cx		; Add with Carry
jmp	short loc_1A7F3	; Jump

; ���������������������������������������������������������������������������

loc_1A806:
mov	ds:word_2D0DC, bx
mov	ds:word_2D0DE, bp
call	sub_1A82E	; Call Procedure


loc_1A811:		; Jump
jmp	sub_1A9B9

sub_1A7C2 endp




sub_1A814 proc near
mov	di, ds:_word_2D0D6_pcm_voc_lipsync_data
or	di, di		; Logical Inclusive OR
jz	short locret_1A82D ; Jump if Zero (ZF=1)

mov	es, word ptr ds:_dword_22CC1_pcm_voc_resource_offset+2
mov	al, es:[di]
cmp	al, 0FFh	; Compare Two Operands
jnb	short locret_1A82D ; Jump if Not Below (CF=0)

inc	di		; Increment by 1
mov	ds:_word_2D0D6_pcm_voc_lipsync_data, di
stc			; Set Carry Flag


locret_1A82D:		; Return Near from Procedure
retn

sub_1A814 endp




sub_1A82E proc near

; FUNCTION CHUNK AT 9DE3 SIZE 000000F2 BYTES

cmp	al, ds:byte_2D0DA ; Compare Two	Operands
jz	short locret_1A83E ; Jump if Zero (ZF=1)

mov	ds:byte_2D0DA, al
mov	si, ds:word_2D0D8
jmp	loc_19DE3	; Jump

; ���������������������������������������������������������������������������

locret_1A83E:		; Return Near from Procedure
retn

sub_1A82E endp




sub_1A83F proc near
mov	ds:_word_2D0D6_pcm_voc_lipsync_data, 0
call	_sub_1AE2F_check_pcm_enabled ; Call Procedure

jz	short locret_1A87D ; Jump if Zero (ZF=1)

call	_sub_1AC14_pcm_stop_voc_q ; Call Procedure

call	_sub_1A90B_open_res_file ; Call	Procedure

cmc			; Complement Carry Flag
jnb	short locret_1A87D ; Jump if Not Below (CF=0)

les	di, ds:_dword_22CC1_pcm_voc_resource_offset ; Load Full	Pointer	to ES:xx
add	di, 1Ah		; Creative Voice File header size
cmp	byte ptr es:[di], 5 ; Check for	comment	block
jnz	short loc_1A871	; Jump if Not Zero (ZF=0)

mov	cx, es:[di+1]
add	di, 4		; Add
mov	ax, di
add	ax, 2		; Add
mov	ds:_word_2D0D6_pcm_voc_lipsync_data, ax
add	di, cx		; Add


loc_1A871:
mov	word ptr ds:_dword_22CC1_pcm_voc_resource_offset, di
sub	ds:_word_22CC5_res_remaining, di ; Integer Subtraction
call	sub_1A9B9	; Call Procedure

stc			; Set Carry Flag


locret_1A87D:		; Return Near from Procedure
retn

sub_1A83F endp




_sub_1A87E_audio_test_frequency	proc near
pushf			; Push Flags Register onto the Stack
sti			; Set Interrupt	Flag
call	_sub_1AE2F_check_pcm_enabled ; Call Procedure

jz	short loc_1A8AF	; Jump if Zero (ZF=1)

call	_sub_1AC14_pcm_stop_voc_q ; Call Procedure

mov	al, 0Bh
call	_sub_1ABE9_open_voc_resource ; Load FREQ.HSQ - Sample test to calc freq

mov	si, offset _dword_22CC1_pcm_voc_resource_offset
call	ds:pcm_audio_vtable_func_3 ; Indirect Call Far Procedure
push	ds:_word_2C32A_time_passed


loc_1A898:		; Call Procedure
call	_sub_1A9E7_pcm_test_audio_done

jz	short loc_1A898	; Jump if Zero (ZF=1)

mov	ax, ds:_word_2C32A_time_passed
pop	bx
sub	ax, bx		; Integer Subtraction
mov	cx, 2048
mul	cx		; Unsigned Multiplication of AL	or AX
mov	ds:_word_21D32_audio_time_to_play_28224_samples_hi, dx
mov	ds:_word_21D34_audio_time_to_play_28224_samples_lo, ax


loc_1A8AF:		; Pop Stack into Flags Register
popf
retn			; Return Near from Procedure

_sub_1A87E_audio_test_frequency	endp




sub_1A8B1 proc near
and	al, 0Fh		; Logical AND
add	al, 30h	; '0'   ; Add
cmp	al, 39h	; '9'   ; Compare Two Operands
jbe	short locret_1A8BB ; Jump if Below or Equal (CF=1 | ZF=1)

add	al, 7		; Add


locret_1A8BB:		; Return Near from Procedure
retn

sub_1A8B1 endp




sub_1A8BC proc near
mov	di, (offset aPfPf001i_voc+1)
push	ds
pop	es
push	ax
mov	al, bl
add	al, 41h	; 'A'   ; Add
stosb			; Store	String
inc	di		; Increment by 1
inc	di		; Increment by 1
stosb			; Store	String
pop	bx
mov	cl, 4
mov	al, bh
call	sub_1A8B1	; Call Procedure

stosb			; Store	String
mov	al, bl
shr	al, cl		; Shift	Logical	Right
call	sub_1A8B1	; Call Procedure

stosb			; Store	String
mov	al, bl
call	sub_1A8B1	; Call Procedure

stosb			; Store	String
mov	al, 4Fh	; 'O'
cmp	byte ptr ds:0EAh, 0 ; Compare Two Operands
jg	short loc_1A8FA	; Jump if Greater (ZF=0	& SF=OF)

cmp	byte ptr ds:6, 80h ; '�' ; Compare Two Operands
jnz	short loc_1A8FA	; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:4, 1 ; Compare Two Operands
jz	short loc_1A8FA	; Jump if Zero (ZF=1)

mov	al, 49h	; 'I'


loc_1A8FA:		; Store	String
stosb
mov	al, 20h	; ' '
shr	bh, cl		; Shift	Logical	Right
or	bh, ds:byte_23C90 ; Logical Inclusive OR
jz	short loc_1A909	; Jump if Zero (ZF=1)

mov	al, bh
add	al, 41h	; 'A'   ; Add


loc_1A909:		; Store	String
stosb


locret_1A90A:		; Return Near from Procedure
retn

sub_1A8BC endp




_sub_1A90B_open_res_file proc near
mov	dx, offset aPfPf001i_voc ; "PF\\PF001I .VOC"
xor	ax, ax		; Logical Exclusive OR
mov	word ptr ds:_dword_22CC1_pcm_voc_resource_offset, ax
mov	ds:_word_22CC7_pcm_callback_flag_q, ax
mov	ds:_word_22CCF_pcm_callback_flag_qq, ax
mov	ds:byte_22CD3, al
call	_sub_1F1FB_open_res_or_file_to_dx_size_ax ; Call Procedure

jb	short locret_1A90A ; Jump if Below (CF=1)

mov	ds:_word_22CD1_res_file_handle,	bx
sub	cx, 1		; Integer Subtraction
sbb	bp, 0		; Integer Subtraction with Borrow
mov	ds:word_2D074, cx
mov	ds:word_2D076, bp
mov	ds:word_2D070, ax
mov	ds:word_2D072, dx
mov	si, offset _dword_22CC1_pcm_voc_resource_offset
les	dx, [si]	; Load Full Pointer to ES:xx

_sub_1A90B_open_res_file endp




_sub_1A93F_read_audio_file proc	near
push	dx
mov	dx, ds:word_2D070
mov	cx, ds:word_2D072
mov	ax, 4200h
int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
			; AL = method: offset from beginning of	file
pop	dx
push	si
push	ds
mov	cx, 2000h
mov	ax, ds:word_2D074
sub	ds:word_2D074, cx ; Integer Subtraction
sbb	ds:word_2D076, 0 ; Integer Subtraction with Borrow
jnb	short loc_1A964	; Jump if Not Below (CF=0)

mov	cx, ax
inc	cx		; Increment by 1


loc_1A964:
push	es
pop	ds
mov	ah, 3Fh
int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
			; BX = file handle, CX = number	of bytes to read
			; DS:DX	-> buffer
pop	ds
pop	si
mov	[si+4],	ax
jb	short locret_1A9B8 ; Jump if Below (CF=1)

add	ds:word_2D070, ax ; Add
adc	ds:word_2D072, 0 ; Add with Carry
mov	ds:_byte_22C1A_audio_current_sfx_id, 0FFh
mov	byte ptr [si+6], 1
mov	bl, ds:byte_22CD3
cmp	bl, 3Fh	; '?'   ; Compare Two Operands
jnb	short loc_1A992	; Jump if Not Below (CF=0)

inc	ds:byte_22CD3	; Increment by 1
inc	bl		; Increment by 1


loc_1A992:
mov	[si+7],	bl
cmp	ds:word_2D076, 0 ; Compare Two Operands
clc			; Clear	Carry Flag
jns	short locret_1A9B8 ; Jump if Not Sign (SF=0)

or	byte ptr [si+7], 80h ; Logical Inclusive OR

_sub_1A93F_read_audio_file endp




_sub_1A9A1_close_res_file_handle proc near
xor	bx, bx		; Logical Exclusive OR
xchg	bx, ds:_word_22CD1_res_file_handle ; Exchange Register/Memory with Register
or	bx, bx		; Logical Inclusive OR
jz	short loc_1A9B7	; Jump if Zero (ZF=1)

cmp	bx, ds:_2D06A_dune_dat_file_handle ; Compare Two Operands
jz	short loc_1A9B7	; Jump if Zero (ZF=1)

push	ax
mov	ah, 3Eh
int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
			; BX = file handle
pop	ax


loc_1A9B7:		; Clear	Carry Flag
clc


locret_1A9B8:		; Return Near from Procedure
retn

_sub_1A9A1_close_res_file_handle endp




sub_1A9B9 proc near
call	_sub_1ABA3_check_res_file_open ; Call Procedure

jz	short locret_1A9E6 ; Jump if Zero (ZF=1)

mov	si, offset _dword_22CC1_pcm_voc_resource_offset
cmp	byte ptr ds:_word_22CC7_pcm_callback_flag_q, 0 ; Compare Two Operands
jz	short loc_1A9D2	; Jump if Zero (ZF=1)

cmp	byte ptr ds:_word_22CCF_pcm_callback_flag_qq, 0	; Compare Two Operands
jnz	short locret_1A9E6 ; Jump if Not Zero (ZF=0)

mov	si, offset dword_22CC9


loc_1A9D2:
mov	bx, ds:_word_22CD1_res_file_handle
les	dx, [si]	; Load Full Pointer to ES:xx
add	dx, 6		; Add
push	si
call	_sub_1A93F_read_audio_file ; Call Procedure

pop	si
jb	short locret_1A9E6 ; Jump if Below (CF=1)

call	ds:pcm_audio_vtable_func_7 ; Indirect Call Far Procedure


locret_1A9E6:		; Return Near from Procedure
retn

sub_1A9B9 endp




_sub_1A9E7_pcm_test_audio_done proc near
cmp	byte ptr ds:_word_22CC7_pcm_callback_flag_q, 3 ; Compare Two Operands
jz	short locret_1A9F3 ; Jump if Zero (ZF=1)

cmp	byte ptr ds:_word_22CCF_pcm_callback_flag_qq, 3	; Compare Two Operands


locret_1A9F3:		; Return Near from Procedure
retn

_sub_1A9E7_pcm_test_audio_done endp




sub_1A9F4 proc near
mov	si, ds:word_22CD4
les	di, [si]	; Load Full Pointer to ES:xx
add	di, 6		; Add
call	_sub_1AA70_transfer_sd_block_qq	; Call Procedure

call	ds:pcm_audio_vtable_func_7 ; Indirect Call Far Procedure
mov	ax, offset _dword_22CC1_pcm_voc_resource_offset
xor	ax, offset dword_22CC9 ; Logical Exclusive OR
xor	ds:word_22CD4, ax ; Logical Exclusive OR


locret_1AA0E:		; Return Near from Procedure
retn

sub_1A9F4 endp




_sub_1AA0F_decode_sd_block proc	near
mov	ax, ds:_word_2D0CC_hnm_sd_block_ofs
inc	ax		; Increment by 1
jz	short locret_1AA0E ; Jump if Zero (ZF=1)

mov	ds:_byte_22C1A_audio_current_sfx_id, 0FFh
call	_sub_1AC14_pcm_stop_voc_q ; Call Procedure

xor	ax, ax		; Logical Exclusive OR
mov	word ptr ds:_dword_22CC1_pcm_voc_resource_offset, ax
mov	ds:_word_22CC7_pcm_callback_flag_q, ax
mov	ds:_word_22CCF_pcm_callback_flag_qq, ax
mov	si, offset _dword_22CC1_pcm_voc_resource_offset
les	di, [si]	; Load Full Pointer to ES:xx
call	_sub_1AA70_transfer_sd_block_qq	; Call Procedure

sub	ds:_word_22CC5_res_remaining, 20h ; ' ' ; Integer Subtraction
mov	cx, ds:_word_22CC5_res_remaining
mov	ds:word_22CCD, cx
add	cx, 6		; Add
mov	si, 1Ah
xor	di, di		; Logical Exclusive OR
rep movs byte ptr es:[di], byte	ptr es:[si] ; Move Byte(s) from	String to String
les	di, ds:dword_22CC9 ; Load Full Pointer to ES:xx
mov	cx, ds:_word_22CC5_res_remaining
push	ds
lds	si, ds:_dword_22CC1_pcm_voc_resource_offset ; Load Full	Pointer	to DS:xx
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
mov	al, 80h	; '�'
rep stosb		; Store	String
pop	ds
mov	si, offset dword_22CC9
mov	ds:word_22CD4, si

loc_1AA64:		; Indirect Call	Far Procedure
call	ds:pcm_audio_vtable_func_3
mov	si, offset _dword_22CC1_pcm_voc_resource_offset

loc_1AA6B:		; Indirect Call	Far Procedure
call	ds:pcm_audio_vtable_func_7
retn			; Return Near from Procedure

_sub_1AA0F_decode_sd_block endp




_sub_1AA70_transfer_sd_block_qq	proc near
push	si
push	ds

loc_1AA72:
mov	si, ds:_word_2D0CC_hnm_sd_block_ofs

loc_1AA76:
mov	ds, ds:_word_2D08E_framebuffer2_seg
lodsw			; Load String
sub	ax, 4		; Integer Subtraction
mov	cx, ax
shr	cx, 1		; Shift	Logical	Right
rep movsw		; Move Byte(s) from String to String
adc	cl, cl		; Add with Carry
rep movsb		; Move Byte(s) from String to String
pop	ds
pop	si
mov	[si+4],	ax
mov	byte ptr [si+6], 1
mov	byte ptr [si+7], 41h ; 'A'
retn			; Return Near from Procedure

_sub_1AA70_transfer_sd_block_qq	endp




sub_1AA96 proc near
xor	ax, ax		; Logical Exclusive OR
cmp	ds:byte_23C24, ah ; Compare Two	Operands
jz	short loc_1AAA7	; Jump if Zero (ZF=1)

cmp	byte ptr ds:2Ah, 48h ; 'H' ; Compare Two Operands
jnz	short locret_1AB14 ; Jump if Not Zero (ZF=0)

jmp	short loc_1AB12	; Jump

; ���������������������������������������������������������������������������

loc_1AAA7:
mov	al, 0Dh
cmp	ds:46D9h, ah	; Compare Two Operands
jnz	short locret_1AB14 ; Jump if Not Zero (ZF=0)

mov	al, 1
cmp	ds:0DD03h, ah	; Compare Two Operands
jnz	short locret_1AB14 ; Jump if Not Zero (ZF=0)

inc	ax		; Increment by 1
cmp	ds:0FBh, ah	; Compare Two Operands
js	short locret_1AB14 ; Jump if Sign (SF=1)

inc	ax		; Increment by 1
cmp	ds:0C6h, ah	; Compare Two Operands
jnz	short locret_1AB14 ; Jump if Not Zero (ZF=0)

inc	ax		; Increment by 1
cmp	ds:0EAh, ah	; Compare Two Operands
jg	short locret_1AB14 ; Jump if Greater (ZF=0 & SF=OF)

inc	ax		; Increment by 1
mov	dx, ds:4
mov	bx, ds:6
cmp	bl, 80h	; '�'   ; Compare Two Operands
jnz	short loc_1AADF	; Jump if Not Zero (ZF=0)

cmp	dl, 1		; Compare Two Operands
jnz	short loc_1AAEF	; Jump if Not Zero (ZF=0)


loc_1AADF:
mov	bl, ds:11C9h
and	bl, 3		; Logical AND
jz	short locret_1AB14 ; Jump if Zero (ZF=1)

inc	ax		; Increment by 1
dec	bl		; Decrement by 1
jz	short locret_1AB14 ; Jump if Zero (ZF=1)

inc	ax		; Increment by 1
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1AAEF:		; Compare Two Operands
cmp	dh, 20h	; ' '
jnb	short loc_1AB08	; Jump if Not Below (CF=0)

mov	al, 9
cmp	dh, 7		; Compare Two Operands
sbb	al, 0		; Integer Subtraction with Borrow
cmp	byte ptr ds:2Ah, 48h ; 'H' ; Compare Two Operands
jb	short locret_1AB14 ; Jump if Below (CF=1)

shr	bl, 1		; Shift	Logical	Right
jb	short locret_1AB14 ; Jump if Below (CF=1)

jmp	short loc_1AB12	; Jump

; ���������������������������������������������������������������������������

loc_1AB08:
mov	al, 0Ch
jnz	short locret_1AB14 ; Jump if Not Zero (ZF=0)

dec	ax		; Decrement by 1
cmp	dl, 3		; Compare Two Operands
jnz	short locret_1AB14 ; Jump if Not Zero (ZF=0)


loc_1AB12:
mov	al, 0Ah


locret_1AB14:		; Return Near from Procedure
retn

sub_1AA96 endp




_sub_1AB15_audio_start_voc proc	near
call	sub_1ABCC	; Call Procedure

jnz	short locret_1AB44 ; Jump if Not Zero (ZF=0)

call	_sub_1AE2F_check_pcm_enabled ; Call Procedure

jz	short locret_1AB44 ; Jump if Zero (ZF=1)

push	es
call	sub_1E270	; Call Procedure

cmp	al, ds:_byte_22C1A_audio_current_sfx_id	; Compare Two Operands
jz	short loc_1AB35	; Jump if Zero (ZF=1)

call	_sub_1AC14_pcm_stop_voc_q ; Call Procedure

or	al, al		; Logical Inclusive OR
jz	short loc_1AB40	; Jump if Zero (ZF=1)

call	_sub_1ABE9_open_voc_resource ; Call Procedure

jmp	short loc_1AB39	; Jump

; ���������������������������������������������������������������������������

loc_1AB35:		; Load Full Pointer to ES:xx
les	di, ds:_dword_22CC1_pcm_voc_resource_offset


loc_1AB39:
mov	si, offset _dword_22CC1_pcm_voc_resource_offset
call	ds:pcm_audio_vtable_func_3 ; Indirect Call Far Procedure


loc_1AB40:		; Call Procedure
call	sub_1E283

pop	es


locret_1AB44:		; Return Near from Procedure
retn

_sub_1AB15_audio_start_voc endp




sub_1AB45 proc near
call	_sub_1AE2F_check_pcm_enabled ; Call Procedure

jz	short locret_1AB44 ; Jump if Zero (ZF=1)

push	ax
call	sub_1ADE0	; Call Procedure

pop	ax

sub_1AB45 endp




sub_1AB4F proc near
mov	ds:byte_23C90, 0
mov	bx, 19h
call	sub_1A8BC	; Call Procedure

mov	byte ptr ds:aPfPf001i_voc+8, 'I'
call	sub_1ABCC	; Call Procedure

jnz	short locret_1AB44 ; Jump if Not Zero (ZF=0)

call	_sub_1AE2F_check_pcm_enabled ; Call Procedure

jz	short locret_1AB44 ; Jump if Zero (ZF=1)

push	es
call	sub_1E270	; Call Procedure

call	_sub_1AC14_pcm_stop_voc_q ; Call Procedure

call	_sub_1A90B_open_res_file ; Call	Procedure

jb	short loc_1AB8D	; Jump if Below	(CF=1)

add	word ptr ds:_dword_22CC1_pcm_voc_resource_offset, 1Ah ;	Add
call	sub_1A9B9	; Call Procedure

mov	si, 0AB92h
mov	bp, 1

loc_1AB83:		; Call Procedure
call	sub_1DA25

mov	si, offset _dword_22CC1_pcm_voc_resource_offset
call	ds:pcm_audio_vtable_func_3 ; Indirect Call Far Procedure


loc_1AB8D:		; Call Procedure
call	sub_1E283

pop	es
retn			; Return Near from Procedure

sub_1AB4F endp ; sp =  2




sub_1AB92 proc near
call	sub_1A9B9	; Call Procedure

call	_sub_1ABA3_check_res_file_open ; Call Procedure

jnz	short locret_1AB44 ; Jump if Not Zero (ZF=0)

call	sub_1ADED	; Call Procedure

mov	si, offset sub_1AB92
jmp	sub_1DA5F	; Jump

sub_1AB92 endp




_sub_1ABA3_check_res_file_open proc near
cmp	ds:_word_22CD1_res_file_handle,	0 ; Compare Two	Operands
retn			; Return Near from Procedure

_sub_1ABA3_check_res_file_open endp




sub_1ABA9 proc near
call	_sub_1AE2F_check_pcm_enabled ; Call Procedure

jz	short locret_1AB44 ; Jump if Zero (ZF=1)

mov	bx, ds:_word_2C32A_time_passed


loc_1ABB2:
push	bx
call	sub_1AB92	; Call Procedure

call	_sub_1ABA3_check_res_file_open ; Call Procedure

pop	bx
jz	short sub_1ABC6	; Jump if Zero (ZF=1)

mov	ax, ds:_word_2C32A_time_passed
sub	ax, bx		; Integer Subtraction
cmp	ax, 1000	; Compare Two Operands
jb	short loc_1ABB2	; Jump if Below	(CF=1)

sub_1ABA9 endp




sub_1ABC6 proc near
mov	ds:byte_2D0DB, 0
retn			; Return Near from Procedure

sub_1ABC6 endp




sub_1ABCC proc near
cmp	ds:byte_2D0DB, 0 ; Compare Two Operands
retn			; Return Near from Procedure

sub_1ABCC endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_1ABD5

loc_1ABD2:		; Call Procedure
call	sub_1A7C2

; END OF FUNCTION CHUNK	FOR sub_1ABD5



sub_1ABD5 proc near

; FUNCTION CHUNK AT ABD2 SIZE 00000003 BYTES

call	sub_1ABCC	; Call Procedure

jnz	short loc_1ABD2	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

sub_1ABD5 endp




sub_1ABDB proc near
call	sub_1AEC6	; Call Procedure

jb	short locret_1AC13 ; Jump if Below (CF=1)

call	_sub_1AE2F_check_pcm_enabled ; Call Procedure

stc			; Set Carry Flag
jz	short locret_1AC13 ; Jump if Zero (ZF=1)

call	_sub_1A9A1_close_res_file_handle ; Call	Procedure

sub_1ABDB endp




_sub_1ABE9_open_voc_resource proc near
mov	word ptr ds:_dword_22CC1_pcm_voc_resource_offset, 0
les	di, ds:_dword_22CC1_pcm_voc_resource_offset ; Load Full	Pointer	to ES:xx
add	word ptr ds:_dword_22CC1_pcm_voc_resource_offset, 1Ah ;	Add
xor	ah, ah		; Logical Exclusive OR
mov	si, ax
add	si, 0AEh ; '�'  ; Add
mov	ds:_byte_22C1A_audio_current_sfx_id, al
call	_sub_1F0B9_open_resource_by_index_si ; reads and decompresses to es:di

sub	cx, 1Ah		; Integer Subtraction
mov	ds:_word_22CC5_res_remaining, cx
mov	ds:_word_22CC7_pcm_callback_flag_q, 33025


locret_1AC13:		; Return Near from Procedure
retn

_sub_1ABE9_open_voc_resource endp




_sub_1AC14_pcm_stop_voc_q proc near
push	ax
push	bx
push	cx
push	si
push	di
push	bp
push	es
mov	si, offset unk_2A042
call	sub_1DA5F	; Call Procedure

call	_sub_1A9A1_close_res_file_handle ; Call	Procedure

call	ds:pcm_audio_vtable_func_4 ; Indirect Call Far Procedure
pop	es
pop	bp
pop	di
pop	si
pop	cx
pop	bx
pop	ax
retn			; Return Near from Procedure

_sub_1AC14_pcm_stop_voc_q endp




_sub_1AC30_call_pcm_audio_vtable_func_5	proc near
call	ds:pcm_audio_vtable_func_5 ; Indirect Call Far Procedure
retn			; Return Near from Procedure

_sub_1AC30_call_pcm_audio_vtable_func_5	endp




sub_1AC35 proc near
call	ds:pcm_audio_vtable_func_6 ; Indirect Call Far Procedure
retn			; Return Near from Procedure

sub_1AC35 endp




sub_1AC3A proc near
mov	bp, 201Ah
or	byte ptr [bp+3], 40h ; Logical Inclusive OR
or	byte ptr [bp+7], 40h ; Logical Inclusive OR
or	byte ptr [bp+0Bh], 40h ; Logical Inclusive OR
mov	cl, 0FFh
call	sub_1AE28	; Call Procedure

jz	short locret_1AC6D ; Jump if Zero (ZF=1)

and	byte ptr [bp+3], 0BFh ;	Logical	AND
and	byte ptr [bp+7], 0BFh ;	Logical	AND
and	byte ptr [bp+0Bh], 0BFh	; Logical AND
xor	cx, cx		; Logical Exclusive OR
test	ds:_byte_21DF3_cmd_args_memory,	10h ; Logical Compare
jnz	short locret_1AC6D ; Jump if Not Zero (ZF=0)

mov	cl, ds:3810h
and	cl, 1		; Logical AND
inc	cx		; Increment by 1


locret_1AC6D:		; Return Near from Procedure
retn

sub_1AC3A endp




sub_1AC6E proc near
and	ds:_byte_21DF3_cmd_args_memory,	0EFh ; Logical AND
mov	ds:byte_22CC0, 0
call	sub_1D2E2	; Call Procedure

jmp	sub_1AD5E	; Jump

sub_1AC6E endp




sub_1AC7E proc near

; FUNCTION CHUNK AT D32F SIZE 00000009 BYTES

mov	bp, offset unk_2151A
mov	bx, offset unk_2CDC7
mov	cl, ds:byte_22CC0
and	cx, 2		; Logical AND
shr	cl, 1		; Shift	Logical	Right
jmp	loc_1D32F	; Jump

sub_1AC7E endp




sub_1AC90 proc near
or	ds:byte_22CC0, 3 ; Logical Inclusive OR
jmp	short loc_1ACAE	; Jump

; ���������������������������������������������������������������������������
or	ds:byte_22CC0, 1 ; Logical Inclusive OR
and	ds:byte_22CC0, 0FDh ; Logical AND
push	ds
pop	es
mov	si, offset byte_22CB4
mov	di, offset byte_22CAA
mov	cx, 9
rep movsb		; Move Byte(s) from String to String


loc_1ACAE:		; Call Procedure
call	_sub_1AEB7_midi_func_3_0

call	loc_1D2FD	; Call Procedure

call	sub_1D2E2	; Call Procedure

and	ds:_byte_21DF3_cmd_args_memory,	0EFh ; Logical AND
jmp	short loc_1AD21	; Jump

sub_1AC90 endp

; ���������������������������������������������������������������������������
db 90h



sub_1ACBF proc near
mov	bp, offset byte_22CAA
mov	cx, 12h


loc_1ACC5:
mov	bx, 8
call	sub_1E3DF	; Call Procedure

mov	si, ax
mov	ax, ds:_word_2C32A_time_passed
xor	ax, cx		; Logical Exclusive OR
add	ds:_unk_2CCD8_bios_timer_count_3, ax ; Add
call	sub_1E3DF	; Call Procedure

mov	di, ax
mov	al, [bp+si]
xchg	al, [bp+di]	; Exchange Register/Memory with	Register
mov	[bp+si], al
loop	loc_1ACC5	; Loop while CX	!= 0

mov	si, bp
retn			; Return Near from Procedure

sub_1ACBF endp




sub_1ACE6 proc near
call	sub_1ABCC	; Call Procedure

jnz	short locret_1AD36 ; Jump if Not Zero (ZF=0)

test	ds:byte_22CC0, 1 ; Logical Compare
jz	short loc_1AD37	; Jump if Zero (ZF=1)

cmp	ds:byte_2172D, 0 ; Compare Two Operands
jnz	short locret_1AD36 ; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:unk_2D07D, 0 ; Compare Two Operands
js	short locret_1AD36 ; Jump if Sign (SF=1)

mov	ax, ds:word_2D082
or	ax, ax		; Logical Inclusive OR
jnz	short loc_1AD0D	; Jump if Not Zero (ZF=0)

mov	ax, ds:_word_2C32A_time_passed
mov	ds:word_2D082, ax


loc_1AD0D:		; Integer Subtraction
sub	ax, ds:_word_2C32A_time_passed
neg	ax		; Two's Complement Negation
cmp	ax, 200		; Compare Two Operands
jb	short locret_1AD36 ; Jump if Below (CF=1)


loc_1AD18:
mov	si, ds:word_22CBE
lodsb			; Load String
or	al, al		; Logical Inclusive OR
jns	short loc_1AD30	; Jump if Not Sign (SF=0)


loc_1AD21:
mov	si, offset byte_22CAA
lodsb			; Load String
test	ds:byte_22CC0, 2 ; Logical Compare
jz	short loc_1AD30	; Jump if Zero (ZF=1)

call	sub_1ACBF	; Call Procedure

lodsb			; Load String


loc_1AD30:
mov	ds:word_22CBE, si
jmp	short _loc_1AD95_play_music ; Jump

; ���������������������������������������������������������������������������

locret_1AD36:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1AD37:		; Call Procedure
call	sub_1AEC6

jb	short locret_1AD36 ; Jump if Below (CF=1)

cmp	byte ptr ds:unk_2D07D, 0 ; Compare Two Operands
js	short locret_1AD36 ; Jump if Sign (SF=1)

sub_1ACE6 endp




sub_1AD43 proc near
mov	al, byte ptr ds:unk_2D07C
mov	byte ptr ds:unk_2D07B, 0
or	al, al		; Logical Inclusive OR
jnz	short _loc_1AD95_play_music ; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

sub_1AD43 endp




sub_1AD50 proc near
call	_sub_1AEB7_midi_func_3_0 ; Call	Procedure

mov	al, 3
jmp	short _loc_1AD95_play_music ; Jump

sub_1AD50 endp




_sub_1AD57_play_music_MORNING_HSQ proc near
call	_sub_1AEB7_midi_func_3_0 ; Call	Procedure

mov	al, 6
jmp	short _loc_1AD95_play_music ; MORNING.HSQ

_sub_1AD57_play_music_MORNING_HSQ endp




sub_1AD5E proc near
call	sub_1AEC6	; Call Procedure

jb	short locret_1AD74 ; Jump if Below (CF=1)

call	sub_1AA96	; Call Procedure

cmp	ds:byte_22CC0, 0 ; Compare Two Operands
jz	short loc_1AD75	; Jump if Zero (ZF=1)

cmp	byte ptr ds:unk_2D07D, 0 ; Compare Two Operands
jns	short loc_1AD18	; Jump if Not Sign (SF=0)


locret_1AD74:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1AD75:
mov	bx, offset unk_22C0C
xlat			; Table	Lookup Translation
or	al, al		; Logical Inclusive OR
jz	short locret_1ADBD ; Jump if Zero (ZF=1)

or	al, al		; Logical Inclusive OR
js	short loc_1AD89	; Jump if Sign (SF=1)

mov	byte ptr ds:unk_2D07C, al
call	ds:midi_vtable_func_4 ;	Indirect Call Far Procedure
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1AD89:		; Logical AND
and	al, 3Fh
mov	byte ptr ds:unk_2D07C, al
cmp	al, byte ptr ds:unk_2D07B ; Compare Two	Operands
jnz	short sub_1ADBE	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

_loc_1AD95_play_music:	; Logical Exclusive OR
xor	ah, ah
call	sub_1AEC6	; Call Procedure

jb	short locret_1ADBD ; Jump if Below (CF=1)

cmp	al, byte ptr ds:unk_2D07B ; Compare Two	Operands
jz	short locret_1ADBD ; Jump if Zero (ZF=1)

call	_sub_1AE62_load_music ;	Call Procedure

mov	byte ptr ds:unk_2D07B, al
les	si, ds:dword_2D066 ; Load Full Pointer to ES:xx
mov	al, ds:byte_22CC0
and	al, 1		; Logical AND
call	ds:midi_vtable_func_2 ;	Indirect Call Far Procedure
mov	byte ptr ds:unk_2D07D, al
xor	ax, ax		; Logical Exclusive OR
mov	ds:word_2D082, ax


locret_1ADBD:		; Return Near from Procedure
retn

sub_1AD5E endp




sub_1ADBE proc near
call	sub_1AEC6	; Call Procedure

jb	short locret_1ADBD ; Jump if Below (CF=1)

test	ds:byte_22CC0, 1 ; Logical Compare
jnz	short locret_1ADBD ; Jump if Not Zero (ZF=0)

test	byte ptr ds:unk_2D07D, 40h ; Logical Compare
jnz	short locret_1ADBD ; Jump if Not Zero (ZF=0)

push	bx
mov	ax, 12Ch
xor	bx, bx		; Logical Exclusive OR
call	ds:midi_vtable_func_5 ;	Indirect Call Far Procedure
mov	byte ptr ds:unk_2D07D, al
pop	bx
retn			; Return Near from Procedure

sub_1ADBE endp




sub_1ADE0 proc near
mov	ax, 64h	; 'd'
mov	bl, ds:byte_21D4E
mov	bh, ds:byte_21D66
jmp	short loc_1ADF8	; Jump

sub_1ADE0 endp




sub_1ADED proc near
mov	ax, 400
mov	bl, ds:byte_21D46
mov	bh, ds:byte_21D5E


loc_1ADF8:		; Compare Two Operands
cmp	bl, 4
jnb	short loc_1ADFF	; Jump if Not Below (CF=0)

mov	bl, 4


loc_1ADFF:		; Indirect Call	Far Procedure
call	ds:midi_vtable_func_5
retn			; Return Near from Procedure

sub_1ADED endp




sub_1AE04 proc near
call	sub_1AEC6	; Call Procedure

jb	short locret_1ADBD ; Jump if Below (CF=1)

test	byte ptr ds:3810h, 1 ; Logical Compare
jnz	short locret_1ADBD ; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:0DBCDh, 0 ;	Compare	Two Operands
jns	short loc_1AE1E	; Jump if Not Sign (SF=0)

test	byte ptr ds:0DBCDh, 40h	; Logical Compare
jz	short locret_1ADBD ; Jump if Zero (ZF=1)


loc_1AE1E:		; Call Procedure
call	sub_1E270

call	sub_1AD43	; Call Procedure

call	sub_1E283	; Call Procedure

retn			; Return Near from Procedure

sub_1AE04 endp




sub_1AE28 proc near
test	ds:word_2D078, 100h ; Logical Compare
retn			; Return Near from Procedure

sub_1AE28 endp




_sub_1AE2F_check_pcm_enabled proc near
push	ax
push	ds
mov	ax, seg	seg001
mov	ds, ax
assume ds:seg001
test	word_2D078, 1	; Logical Compare
pop	ds
assume ds:nothing
pop	ax


locret_1AE3E:		; Return Near from Procedure
retn

_sub_1AE2F_check_pcm_enabled endp




sub_1AE3F proc near
call	sub_1AE28	; Call Procedure

jz	short locret_1AE3E ; Jump if Zero (ZF=1)

mov	di, offset dword_2D066
mov	ax, [di]
or	ax, [di+2]	; Logical Inclusive OR
jnz	short locret_1AE3E ; Jump if Not Zero (ZF=0)

mov	cx, 9C40h
jmp	_sub_1F0F6_bump_alloc_get_addr_in_di ; Jump

sub_1AE3F endp




sub_1AE54 proc near
call	_sub_1AE2F_check_pcm_enabled ; Call Procedure

jz	short locret_1AE3E ; Jump if Zero (ZF=1)

mov	di, offset _dword_22CC1_pcm_voc_resource_offset
mov	cx, offset unk_242D0
jmp	_sub_1F0F6_bump_alloc_get_addr_in_di ; Jump

sub_1AE54 endp




_sub_1AE62_load_music proc near
cmp	al, ds:byte_2D07A ; Compare Two	Operands
jz	short locret_1AE84 ; Jump if Zero (ZF=1)

call	_sub_1AEB7_midi_func_3_0 ; Call	Procedure

mov	ds:byte_2D07A, al
push	ax
add	ax, 0A4h ; '�'  ; Add
mov	si, ax
les	di, ds:dword_2D066 ; Load Full Pointer to ES:xx
mov	ax, es
cmp	ax, ds:_word_2C318_allocator_last_free_seg ; Compare Two Operands
jnb	short loc_1AE85	; Jump if Not Below (CF=0)

call	_sub_1F0B9_open_resource_by_index_si ; reads and decompresses to es:di

pop	ax


locret_1AE84:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1AE85:
push	ds:_word_21C34_resource_id
push	si
mov	cx, 687
call	_sub_1F11C_alloc_cx_pages_to_di	; Call Procedure

pop	si
inc	ds:_byte_2C321_disable_hsq ; Increment by 1
call	_sub_1F0B9_open_resource_by_index_si ; reads and decompresses to es:di

dec	ds:_byte_2C321_disable_hsq ; Decrement by 1
push	ds
push	di
push	es
les	di, ds:dword_2D066 ; Load Full Pointer to ES:xx
pop	ds
pop	si
call	_sub_1F403_hsq_decomp_skip_header_dssi_to_esdi ; Call Procedure

pop	ds
pop	ax
call	_sub_1C13E_open_sprite_sheet ; Call Procedure

pop	ax
retn			; Return Near from Procedure

_sub_1AE62_load_music endp

; ���������������������������������������������������������������������������
or	ds:_byte_21DF3_cmd_args_memory,	10h ; Logical Inclusive	OR
call	sub_1D2E2	; Call Procedure




_sub_1AEB7_midi_func_3_0 proc near
push	ax
mov	byte ptr ds:unk_2D07B, 0
call	ds:midi_vtable_func_3 ;	Indirect Call Far Procedure
mov	byte ptr ds:unk_2D07D, al
pop	ax
retn			; Return Near from Procedure

_sub_1AEB7_midi_func_3_0 endp




sub_1AEC6 proc near
test	ds:_byte_21DF3_cmd_args_memory,	10h ; Logical Compare
jnz	short loc_1AED4	; Jump if Not Zero (ZF=0)

call	sub_1AE28	; Call Procedure

jz	short loc_1AED4	; Jump if Zero (ZF=1)

clc			; Clear	Carry Flag
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1AED4:		; Set Carry Flag
stc
retn			; Return Near from Procedure

sub_1AEC6 endp




sub_1AED6 proc near
cmp	ds:byte_20679, 0 ; Compare Two Operands
jz	short loc_1AEDE	; Jump if Zero (ZF=1)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1AEDE:		; Call Procedure
call	sub_118BA

call	sub_1181E	; Call Procedure

call	sub_1DAA3	; Call Procedure

mov	byte ptr ds:0C6h, 1
call	sub_1B2B9	; Call Procedure

call	sub_1D95B	; Call Procedure

call	sub_1AD5E	; Call Procedure

mov	al, 34h	; '4'
mov	bp, offset sub_1AF26
call	_sub_1C108_transition ;	Call Procedure

jmp	sub_1AE04	; Jump

sub_1AED6 endp




sub_1AF00 proc near
mov	bh, 4


loc_1AF02:
mov	bl, 1Ch
call	sub_1B147	; Call Procedure

mov	ax, 4000h
jz	short loc_1AF0E	; Jump if Zero (ZF=1)

xor	ah, ah		; Logical Exclusive OR


loc_1AF0E:		; Logical Exclusive OR
xor	cx, cx
mov	cl, bh
mov	si, offset unk_214E4
add	si, cx		; Add
and	word ptr [si], 0BFFFh ;	Logical	AND
or	[si], ax	; Logical Inclusive OR
add	bh, 4		; Add
cmp	bh, 0Ch		; Compare Two Operands
jbe	short loc_1AF02	; Jump if Below	or Equal (CF=1 | ZF=1)

retn			; Return Near from Procedure

sub_1AF00 endp




sub_1AF26 proc near
call	sub_1D7AD	; Call Procedure

mov	si, offset unk_212CA
call	sub_1D72B	; Call Procedure

call	sub_1AF00	; Call Procedure

mov	ds:word_218B6, 0
mov	bp, offset unk_214E2
mov	bx, 0D917h
xor	cx, cx		; Logical Exclusive OR
call	loc_1D33A	; Call Procedure

or	ds:byte_1F576, 2 ; Logical Inclusive OR
call	sub_1C432	; Call Procedure

mov	al, 32h	; '2'
call	sub_1C2F2	; Call Procedure

mov	ds:byte_210E0, 0
jmp	sub_11797	; Jump

sub_1AF26 endp




sub_1AF58 proc near
mov	bx, 0
mov	bp, 0
jmp	short loc_1AF76	; Jump

; ���������������������������������������������������������������������������
mov	bx, 41Ch
mov	bp, 4
jmp	short loc_1AF76	; Jump

; ���������������������������������������������������������������������������
mov	bx, 81Ch
mov	bp, 8
jmp	short loc_1AF76	; Jump

; ���������������������������������������������������������������������������
mov	bx, 0C1Ch
mov	bp, 0Ch


loc_1AF76:
push	bp
test	byte ptr ds:0C6h, 2 ; Logical Compare
jnz	short loc_1AF86	; Jump if Not Zero (ZF=0)

push	bx
call	sub_10A3E	; Call Procedure

call	sub_1B024	; Call Procedure

pop	bx


loc_1AF86:		; Call Procedure
call	sub_1B147

pop	bp
jz	short locret_1AFC6 ; Jump if Zero (ZF=1)

mov	ds:word_218B6, bx
mov	ax, 0A8h ; '�'
test	byte ptr ds:0C6h, 2 ; Logical Compare
jz	short loc_1AF9D	; Jump if Zero (ZF=1)

add	ax, 2		; Add


loc_1AF9D:
mov	ds:11BFh, ax
mov	si, 2034h
mov	cx, 4
push	si


loc_1AFA7:		; Logical AND
and	word ptr [si], 7FFFh
add	si, 4		; Add
loop	loc_1AFA7	; Loop while CX	!= 0

pop	si
or	word ptr [bp+si], 8000h	; Logical Inclusive OR
mov	cx, 1
mov	dx, 2
test	byte ptr ds:0C6h, 2 ; Logical Compare
jz	short loc_1AFE6	; Jump if Zero (ZF=1)

xor	dx, dx		; Logical Exclusive OR
jmp	short loc_1AFE6	; Jump

; ���������������������������������������������������������������������������

locret_1AFC6:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������
test	byte ptr ds:0C6h, 2 ; Logical Compare
jnz	short locret_1AFC6 ; Jump if Not Zero (ZF=0)

test	byte ptr ds:0C6h, 4 ; Logical Compare
jz	short loc_1AFE0	; Jump if Zero (ZF=1)

add	word ptr ds:11BFh, 2 ; Add
call	sub_10A3E	; Call Procedure

call	sub_1AD5E	; Call Procedure


loc_1AFE0:
mov	cx, 1
mov	dx, 0FFFEh


loc_1AFE6:
mov	bx, ds:2406h
mov	si, ds:11BFh
call	loc_1B150	; Call Procedure

jz	short loc_1B006	; Jump if Zero (ZF=1)

mov	ds:11BFh, di
call	sub_1B1AF	; Call Procedure

mov	bp, offset sub_1B039
call	sub_1B02C	; Call Procedure

call	sub_19901	; Call Procedure

jmp	sub_1D397	; Jump

; ���������������������������������������������������������������������������

loc_1B006:		; Logical Inclusive OR
or	dx, dx
js	short sub_1B024	; Jump if Sign (SF=1)

test	byte ptr ds:0C6h, 4 ; Logical Compare
jnz	short locret_1AFC6 ; Jump if Not Zero (ZF=0)

or	byte ptr ds:0C6h, 4 ; Logical Inclusive	OR
call	sub_109F5	; Call Procedure

xor	dx, dx		; Logical Exclusive OR
call	sub_1B1AF	; Call Procedure

mov	bp, offset sub_11797
jmp	short sub_1B02C	; Jump

sub_1AF58 endp

; ���������������������������������������������������������������������������
align 2



sub_1B024 proc near
mov	dh, 0FFh
call	sub_1B1AF	; Call Procedure

mov	bp, 0AF43h

sub_1B024 endp




sub_1B02C proc near
call	_sub_1AC14_pcm_stop_voc_q ; Call Procedure

mov	al, 2
call	_sub_1AB15_audio_start_voc ; Play SN2.VOC - Papers ruffle

mov	al, 0Eh
jmp	_sub_1C108_transition ;	Jump

sub_1B02C endp




sub_1B039 proc near
and	byte ptr ds:0C6h, 0F9h ; Logical AND
mov	si, 0A6B0h
mov	ds:47BCh, si
push	si
mov	si, ds:11BFh
mov	si, cs:[si]
mov	ax, si
call	sub_1B254	; Call Procedure

shr	ah, 1		; Shift	Logical	Right
shr	ah, 1		; Shift	Logical	Right
shr	ah, 1		; Shift	Logical	Right
mov	al, ah
xor	ah, ah		; Logical Exclusive OR
add	ax, 0F3h ; '�'  ; Add
call	sub_1B126	; Call Procedure

and	si, 7FFh	; Logical AND
shl	si, 1		; Shift	Logical	Left
shl	si, 1		; Shift	Logical	Left
add	si, 0AA7Ah	; Add
mov	ds:477Ch, si
lodsw			; Load String
pop	si
push	ax
xchg	al, ah		; Exchange Register/Memory with	Register
and	ah, 3		; Logical AND
or	ah, 8		; Logical Inclusive OR
call	sub_1B126	; Call Procedure

mov	di, ds:47BCh
mov	byte ptr [di-1], 0FFh
call	loc_188E1	; Call Procedure

mov	si, 2408h
call	sub_1C551	; Call Procedure

call	sub_11797	; Call Procedure

mov	ax, ds:0D82Eh
mov	bx, 8Ch	; '�'
sub	bx, ax		; Integer Subtraction
shr	bx, 1		; Shift	Logical	Right
add	bx, ax		; Add
cmp	bx, 8Ah	; '�'   ; Compare Two Operands
jnb	short loc_1B0B5	; Jump if Not Below (CF=0)

mov	dx, 93h	; '�'
mov	ax, 32h	; '2'
call	_sub_1C13E_open_sprite_sheet ; RES_BOOK_HSQ

mov	ax, 4
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9


loc_1B0B5:
pop	ax
cmp	word ptr ds:11BFh, 0AAh	; '�' ; Compare Two Operands
jz	short loc_1B0D4	; Jump if Zero (ZF=1)

and	ax, 0Ch		; Logical AND
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
add	ax, 103h	; Add
mov	bx, 8Bh	; '�'
mov	dx, 0FAh ; '�'
mov	cx, 64h	; 'd'
call	sub_1D194	; Call Procedure


loc_1B0D4:
mov	bx, 3
mov	dx, 132h
call	sub_1D04E	; Call Procedure

mov	word ptr ds:0DBE4h, 53h	; 'S'
mov	ax, ds:11BFh
sub	ax, 0AAh ; '�'  ; Integer Subtraction
shr	ax, 1		; Shift	Logical	Right
inc	ax		; Increment by 1
aam			; ASCII	Adjust AX after	Multiply
add	ax, 3030h	; Add
xchg	al, ah		; Exchange Register/Memory with	Register
cmp	al, 30h	; '0'   ; Compare Two Operands
jnz	short loc_1B0F9	; Jump if Not Zero (ZF=0)

mov	al, 20h	; ' '


loc_1B0F9:
push	ax
call	sub_1D12F	; Call Procedure

pop	ax
mov	al, ah
call	sub_1D12F	; Call Procedure

mov	byte ptr ds:1C30h, 0
mov	ax, ds:243Eh
or	ax, ax		; Logical Inclusive OR
jz	short locret_1B125 ; Jump if Zero (ZF=1)

mov	byte ptr ds:1C30h, 80h ; '�'
mov	si, 2412h
add	ax, 0FFF5h	; Add
mov	[si], ax
mov	[si+6],	ax
mov	[si+0Ch], ax
call	sub_1C21B	; Call Procedure


locret_1B125:		; Return Near from Procedure
retn

sub_1B039 endp




sub_1B126 proc near
push	si
mov	si, ax
call	sub_1CF70	; Call Procedure

mov	di, ds:47BCh
push	di
call	sub_188F1	; Call Procedure

pop	di
cmp	byte ptr [si], 20h ; ' ' ; Compare Two Operands
jz	short loc_1B141	; Jump if Zero (ZF=1)

call	sub_18944	; Call Procedure

dec	di		; Decrement by 1
mov	al, 20h	; ' '
stosb			; Store	String


loc_1B141:
mov	ds:47BCh, di
pop	si
retn			; Return Near from Procedure

sub_1B126 endp




sub_1B147 proc near
mov	si, 0A8h ; '�'
mov	dx, 2
mov	cx, 1


loc_1B150:		; Logical Exclusive OR
xor	di, di


loc_1B152:		; Add
add	si, dx
or	dx, 2		; Logical Inclusive OR
mov	bp, cs:[si]
and	bp, 7FFh	; Logical AND
jz	short loc_1B177	; Jump if Zero (ZF=1)

shl	bp, 1		; Shift	Logical	Left
shl	bp, 1		; Shift	Logical	Left
add	bp, 0AA78h	; Add
mov	al, [bp+2]
and	al, bl		; Logical AND
jz	short loc_1B173	; Jump if Zero (ZF=1)

cmp	al, bh		; Compare Two Operands
jnz	short loc_1B152	; Jump if Not Zero (ZF=0)


loc_1B173:
mov	di, si
loop	loc_1B152	; Loop while CX	!= 0


loc_1B177:		; Logical Inclusive OR
or	di, di
retn			; Return Near from Procedure

sub_1B147 endp




sub_1B17A proc near
mov	al, ds:byte_1F576
push	ax
or	al, 80h		; Logical Inclusive OR
mov	ds:byte_1F576, al
call	sub_196B5	; Call Procedure

pop	ax
mov	ds:byte_1F576, al
retn			; Return Near from Procedure

sub_1B17A endp




sub_1B18B proc near
call	sub_1ADBE	; Call Procedure

mov	byte ptr ds:2788h, 0
mov	byte ptr ds:0C6h, 0
mov	byte ptr ds:1C30h, 0
call	_sub_1CA01_hnm_close_resource ;	Call Procedure

call	sub_10A3E	; Call Procedure

call	sub_19901	; Call Procedure

mov	ax, 26h	; '&'
call	_sub_1C13E_open_sprite_sheet ; RES_PERS_HSQ

jmp	loc_11877	; Jump

sub_1B18B endp




sub_1B1AF proc near
push	dx
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

call	_sub_1C137_load_icons_sprites ;	Call Procedure

mov	ax, 0Bh
or	dx, dx		; Logical Inclusive OR
js	short loc_1B1BE	; Jump if Sign (SF=1)

dec	ax		; Decrement by 1


loc_1B1BE:
mov	bx, 9Eh	; '�'
mov	dx, 1Bh
push	ax
call	sub_1C2FD	; Call Procedure

mov	ax, 0Ah
call	sub_1E387	; Call Procedure

pop	ax
inc	ax		; Increment by 1
cmp	ax, 0Bh		; Compare Two Operands
jz	short loc_1B1D8	; Jump if Zero (ZF=1)

sub	ax, 2		; Integer Subtraction


loc_1B1D8:		; dx = sprite x
call	_sub_1C22F_draw_sprite ; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

mov	ax, 0Ah
call	sub_1E387	; Call Procedure

mov	si, 1AF4h
mov	cx, 1
call	sub_1D1F2	; Call Procedure

pop	dx
jmp	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Jump

sub_1B1AF endp




sub_1B1EE proc near
call	ds:_ptr_22D65_gfx_vtable_func_41_copy_pal2_to_pal1 ; Indirect Call Far Procedure
call	_sub_1AEB7_midi_func_3_0 ; Call	Procedure

mov	ds:byte_2D0DB, 1
mov	al, 34h	; '4'
mov	bp, offset sub_1B236
call	_sub_1C108_transition ;	Call Procedure

call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

mov	ds:byte_2C330, 0
call	sub_1DE4E	; Call Procedure


loc_1B20D:		; Call Procedure
call	_sub_1C9E8_hnm_do_frame_skippable

jb	short loc_1B217	; Jump if Below	(CF=1)

call	_sub_1CC85_check_if_hnm_complete ; Call	Procedure

jz	short loc_1B20D	; Jump if Zero (ZF=1)


loc_1B217:		; Call Procedure
call	_sub_1CA01_hnm_close_resource

inc	ds:byte_2C330	; Increment by 1
call	_sub_1AC14_pcm_stop_voc_q ; Call Procedure

call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

call	ds:_ptr_22D65_gfx_vtable_func_45 ; Indirect Call Far Procedure
mov	al, 34h	; '4'
mov	bp, offset sub_1B23F
call	_sub_1C108_transition ;	Call Procedure

call	sub_1C412	; Call Procedure

jmp	sub_1ABC6	; Jump

sub_1B1EE endp




sub_1B236 proc near
call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

mov	ax, ds:word_218EE
jmp	_sub_1CA1B_hnm_load ; Jump

sub_1B236 endp




sub_1B23F proc near
call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

mov	cx, 12h
mov	si, offset unk_20F96
call	sub_1D1F2	; Call Procedure

call	sub_1D397	; Call Procedure

call	sub_1B039	; Call Procedure

jmp	sub_19901	; Jump

sub_1B23F endp




sub_1B254 proc near
push	ax
push	si
push	ds
pop	es
mov	di, offset unk_218D6
mov	cx, 0Ch
repne scasw		; Compare String
mov	ax, 0
jnz	short loc_1B26A	; Jump if Not Zero (ZF=0)

mov	ax, 24h	; '$'
sub	ax, cx		; Integer Subtraction


loc_1B26A:
mov	ds:word_218EE, ax
pop	si
pop	ax
retn			; Return Near from Procedure

sub_1B254 endp




sub_1B270 proc near
mov	si, offset unk_218DA
mov	di, ds:11BDh
push	cs
pop	es
assume es:seg000
mov	cx, 0Ah
rep movsw		; Move Byte(s) from String to String
mov	ds:word_2066D, di
xor	ax, ax		; Logical Exclusive OR
stosw			; Store	String
mov	byte ptr cs:sub_1B270, 0C3h ; '�'
retn			; Return Near from Procedure

sub_1B270 endp

; ���������������������������������������������������������������������������
mov	bp, 207Ah
call	sub_1B2AA	; Call Procedure

mov	cx, 8000h
mov	si, 207Ch
call	sub_1B30F	; Call Procedure

jmp	sub_1D397	; Jump

; ���������������������������������������������������������������������������
mov	cx, 4000h
mov	si, 208Ch
call	sub_1B30F	; Call Procedure

mov	bp, 208Ah




sub_1B2AA proc near
call	sub_1B2B9	; Call Procedure

mov	bx, 0B2B3h
jmp	sub_1D323	; Jump

sub_1B2AA endp




sub_1B2B3 proc near
dec	byte ptr ds:2788h ; Decrement by 1
jns	short locret_1B2BD ; Jump if Not Sign (SF=0)

sub_1B2B3 endp




sub_1B2B9 proc near
inc	byte ptr ds:2788h ; Increment by 1


locret_1B2BD:		; Return Near from Procedure
retn

sub_1B2B9 endp




sub_1B2BE proc near
mov	ds:byte_21C38, 0
retn			; Return Near from Procedure

sub_1B2BE endp




sub_1B2C4 proc near
cmp	byte ptr ds:38AFh, 32h ; '2' ; Compare Two Operands
ja	short locret_1B30E ; Jump if Above (CF=0 & ZF=0)

mov	ax, [si]


loc_1B2CD:		; Call Procedure
call	sub_1E270

push	es
and	ax, 0FFFh	; Logical AND
mov	si, ax
call	sub_1CF70	; Call Procedure

call	sub_1D03C	; Call Procedure

call	sub_1D03C	; Call Procedure

mov	ax, ds:0D816h
push	ax
add	ax, 3		; Add
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
inc	ax		; Increment by 1
call	sub_1E2E3	; Call Procedure

lea	di, [si+3]	; Load Effective Address
mov	si, 117h
call	sub_1CF70	; Call Procedure

pop	ax
and	al, 0Fh		; Logical AND
mov	ah, 0Ah
mul	ah		; Unsigned Multiplication of AL	or AX
add	si, ax		; Add
mov	cx, 0Ah
rep movs byte ptr es:[di], byte	ptr es:[si] ; Move Byte(s) from	String to String
pop	es
assume es:nothing
call	sub_1E283	; Call Procedure


locret_1B30E:		; Return Near from Procedure
retn

sub_1B2C4 endp




sub_1B30F proc near
mov	di, 38A8h
mov	byte ptr [di+7], 31h ; '1'


loc_1B316:
mov	dx, di
call	_sub_1F2FC_strcpy_to_filename_buf ; Call Procedure

mov	ax, 3D00h
int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
			; DS:DX	-> ASCIZ filename
			; AL = access mode
			; 0 - read
jb	short loc_1B33C	; Jump if Below	(CF=1)

mov	bx, ax
mov	dx, 0D816h
push	cx
mov	cx, 2
mov	ah, 3Fh
int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
			; BX = file handle, CX = number	of bytes to read
			; DS:DX	-> buffer
cmp	ax, cx		; Compare Two Operands
pop	cx
jb	short loc_1B33C	; Jump if Below	(CF=1)

mov	ah, 3Eh
int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
			; BX = file handle
call	sub_1B2C4	; Call Procedure

clc			; Clear	Carry Flag


loc_1B33C:		; Integer Subtraction with Borrow
sbb	ax, ax
cmp	ch, 80h	; '�'   ; Compare Two Operands
jnz	short loc_1B345	; Jump if Not Zero (ZF=0)

not	ax		; One's Complement Negation


loc_1B345:		; Logical AND
and	ax, cx
and	word ptr [si], 3FFFh ; Logical AND
or	[si], ax	; Logical Inclusive OR
add	si, 4		; Add
inc	byte ptr [di+7]	; Increment by 1
cmp	word ptr [si], 0A3h ; '�' ; Compare Two Operands
jnz	short loc_1B316	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

sub_1B30F endp

; ���������������������������������������������������������������������������
mov	bx, ds:2
mov	ds:_unk_2CCC6_sav_file_first_word, bx
call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	loc_1B2CD	; Call Procedure

push	cx
call	sub_1D48A	; Call Procedure

pop	cx
call	_sub_1B389_open_sav_cl ; Call Procedure

pushf			; Push Flags Register onto the Stack
mov	ax, 113h
adc	al, 0		; Add with Carry
mov	cx, 4
call	sub_1D48A	; Call Procedure

mov	ax, 12Ch
call	sub_1DDB0	; Call Procedure

popf			; Pop Stack into Flags Register
jb	short locret_1B388 ; Jump if Below (CF=1)

jmp	sub_1D2E2	; Jump

; ���������������������������������������������������������������������������

locret_1B388:		; Return Near from Procedure
retn




_sub_1B389_open_sav_cl proc near

; FUNCTION CHUNK AT F27C SIZE 0000001F BYTES

add	cl, 31h	; '1'   ; Add
mov	byte ptr ds:aDune37s0_sav+7, cl
call	_sub_1B427_map_func ; Call Procedure

mov	ax, ds:2
push	ds
push	es
pop	ds
mov	si, di
xor	di, di		; Logical Exclusive OR
stosw			; Store	String
call	sub_1B4EA	; Call Procedure

pop	ds
mov	dx, offset aDune37s0_sav ; "dune37s0.sav"
call	_sub_1F2FC_strcpy_to_filename_buf ; Call Procedure

xor	di, di		; Logical Exclusive OR
add	cx, 2		; Add
jmp	_loc_1F27C_create_and_write_file ; Jump

_sub_1B389_open_sav_cl endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_10E47

loc_1B3B0:		; Compare Two Operands
cmp	ds:byte_23B89, 0
jz	short loc_1B3BA	; Jump if Zero (ZF=1)

jmp	loc_10E49	; Jump

; ���������������������������������������������������������������������������

loc_1B3BA:		; Add
add	cl, 31h	; '1'
mov	byte ptr ds:aDune37s0_sav+7, cl
mov	cx, 1400
call	_sub_1F11C_alloc_cx_pages_to_di	; Call Procedure

mov	dx, offset aDune37s0_sav ; "dune37s0.sav"
call	_sub_1F255_open_nonres_file ; Call Procedure

mov	al, ds:0FBh
push	ax
push	ds
push	es
pop	ds
mov	si, di
add	si, cx		; Add
dec	si		; Decrement by 1
mov	di, offset unk_24C29
sub	cx, 2		; Integer Subtraction
std			; Set Direction	Flag
rep movsb		; Move Byte(s) from String to String
cld			; Clear	Direction Flag
lea	si, [di+1]	; Load Effective Address
xor	di, di		; Logical Exclusive OR
call	sub_1B4BB	; Call Procedure

mov	si, di
call	sub_1B473	; Call Procedure

pop	ds
call	sub_13AE9	; Call Procedure

call	sub_1DA53	; Call Procedure

mov	word ptr ds:22A6h, 0FFFFh
call	sub_1B2BE	; Call Procedure

pop	ax
mov	ds:0FBh, al
or	al, al		; Logical Inclusive OR
jns	short loc_1B41B	; Jump if Not Sign (SF=0)

cmp	byte ptr ds:0DD02h, 0 ;	Compare	Two Operands
jz	short loc_1B412	; Jump if Zero (ZF=1)

call	sub_1B915	; Call Procedure


loc_1B412:		; Call Procedure
call	sub_1B96B

call	sub_1B8EA	; Call Procedure

jmp	sub_1BA9E	; Jump

; ���������������������������������������������������������������������������

loc_1B41B:		; Call Procedure
call	sub_1D2BD

call	sub_11A0F	; Call Procedure

call	sub_1ADBE	; Call Procedure

jmp	sub_12DB1	; Jump

; END OF FUNCTION CHUNK	FOR sub_10E47



_sub_1B427_map_func proc near
mov	cx, 1400
call	_sub_1F11C_alloc_cx_pages_to_di	; Call Procedure

mov	di, 100h
push	di
push	es
push	ds
lds	si, ds:_unk_2D1AE_res_map ; Load Full Pointer to DS:xx
xor	si, si		; Logical Exclusive OR
mov	cx, 50684
shr	cx, 1		; Shift	Logical	Right
shr	cx, 1		; Shift	Logical	Right


loc_1B440:
mov	ah, 3


loc_1B442:		; Load String
lodsb
shl	al, 1		; Shift	Logical	Left
shl	al, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
jnb	short loc_1B442	; Jump if Not Below (CF=0)

mov	al, ah
stosb			; Store	String
loop	loc_1B440	; Loop while CX	!= 0

push	cs
pop	ds
assume ds:seg000
mov	si, 0AAh ; '�'
mov	cx, 0A2h ; '�'
rep movsb		; Move Byte(s) from String to String
pop	ds
assume ds:nothing
mov	si, 0AA76h
mov	cx, 4600
rep movsb		; Move Byte(s) from String to String
mov	si, 0
mov	cx, 4705
rep movsb		; Move Byte(s) from String to String
pop	es
pop	di
mov	cx, 567Ah
retn			; Return Near from Procedure

_sub_1B427_map_func endp




sub_1B473 proc near
mov	es, word ptr ss:_unk_2D1AE_res_map+2
xor	di, di		; Logical Exclusive OR
mov	bx, 0C5FCh
shr	bx, 1		; Shift	Logical	Right
shr	bx, 1		; Shift	Logical	Right


loc_1B481:		; Load String
lodsb
mov	cx, 4
mov	ah, al
ror	ah, 1		; Rotate Right
ror	ah, 1		; Rotate Right


loc_1B48B:
mov	al, es:[di]
xor	al, ah		; Logical Exclusive OR
and	al, 0CFh	; Logical AND
xor	al, ah		; Logical Exclusive OR
stosb			; Store	String
rol	ah, 1		; Rotate Left
rol	ah, 1		; Rotate Left
loop	loc_1B48B	; Loop while CX	!= 0

dec	bx		; Decrement by 1
jnz	short loc_1B481	; Jump if Not Zero (ZF=0)

push	cs
pop	es
assume es:seg000
mov	di, offset unk_1F55A
mov	cx, 162
rep movsb		; Move Byte(s) from String to String
push	ss
pop	es
assume es:seg001
mov	di, offset _word_29F26_res_dialogue_ofs
mov	cx, 4600
rep movsb		; Move Byte(s) from String to String
mov	di, 0
mov	cx, 4705
rep movsb		; Move Byte(s) from String to String
retn			; Return Near from Procedure

sub_1B473 endp




sub_1B4BB proc near
lodsw			; Load String
mov	bl, al
lodsw			; Load String
mov	cx, ax
sub	cx, 4		; Integer Subtraction
push	di


loc_1B4C5:		; Load String
lodsb
cmp	al, bl		; Compare Two Operands
jz	short loc_1B4D3	; Jump if Zero (ZF=1)

stosb			; Store	String
loop	loc_1B4C5	; Loop while CX	!= 0


loc_1B4CD:
pop	cx
sub	di, cx		; Integer Subtraction
xchg	cx, di		; Exchange Register/Memory with	Register
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1B4D3:		; Load String
lodsb
mov	dx, cx
mov	cl, al
xor	ch, ch		; Logical Exclusive OR
lodsb			; Load String
rep stosb		; Store	String
mov	cx, dx
sub	cx, 2		; Integer Subtraction
jcxz	short loc_1B4CD	; Jump if CX is	0

jb	short loc_1B4CD	; Jump if Below	(CF=1)

loop	loc_1B4C5	; Loop while CX	!= 0

jmp	short loc_1B4CD	; Jump

sub_1B4BB endp




sub_1B4EA proc near
mov	dl, 0F7h ; '�'
push	di
add	di, 4		; Add


loc_1B4F0:		; Logical Exclusive OR
xor	dh, dh


loc_1B4F2:		; Load String
lodsb
inc	dh		; Increment by 1
cmp	al, [si]	; Compare Two Operands
jnz	short loc_1B504	; Jump if Not Zero (ZF=0)

cmp	dh, 0FFh	; Compare Two Operands
jz	short loc_1B504	; Jump if Zero (ZF=1)

dec	cx		; Decrement by 1
or	cx, cx		; Logical Inclusive OR
jnz	short loc_1B4F2	; Jump if Not Zero (ZF=0)

inc	cx		; Increment by 1


loc_1B504:		; Compare Two Operands
cmp	al, dl
jz	short loc_1B512	; Jump if Zero (ZF=1)

cmp	dh, 1		; Compare Two Operands
jz	short loc_1B51C	; Jump if Zero (ZF=1)

cmp	dh, 2		; Compare Two Operands
jz	short loc_1B52F	; Jump if Zero (ZF=1)


loc_1B512:
mov	ah, al
mov	al, dl
stosb			; Store	String
mov	al, dh
stosb			; Store	String
mov	al, ah


loc_1B51C:		; Store	String
stosb
loop	loc_1B4F0	; Loop while CX	!= 0

mov	cx, di
xor	ax, ax		; Logical Exclusive OR
stosw			; Store	String
pop	di
sub	cx, di		; Integer Subtraction
mov	es:[di], dx
mov	es:[di+2], cx
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1B52F:		; Store	String
stosb
jmp	short loc_1B51C	; Jump

sub_1B4EA endp




sub_1B532 proc near
push	dx
call	_sub_1B58B_map_func ; Call Procedure

pop	dx
mov	al, es:[di]
retn			; Return Near from Procedure

sub_1B532 endp




sub_1B53B proc near
push	bx
push	cx
push	dx
push	ax
call	_sub_1B58B_map_func ; Call Procedure

pop	ax
mov	cx, ax
shr	ax, 1		; Shift	Logical	Right
sub	di, ax		; Integer Subtraction
sub	dx, ax		; Integer Subtraction
jnb	short loc_1B551	; Jump if Not Below (CF=0)

add	dx, bp		; Add
add	di, bp		; Add


loc_1B551:
mov	al, es:[di]
mov	[si], al
mov	[si+1],	di
add	si, 3		; Add
inc	di		; Increment by 1
inc	dx		; Increment by 1
cmp	dx, bp		; Compare Two Operands
jb	short loc_1B566	; Jump if Below	(CF=1)

sub	dx, bp		; Integer Subtraction
sub	di, bp		; Integer Subtraction


loc_1B566:		; Loop while CX	!= 0
loop	loc_1B551

pop	dx
pop	cx
pop	bx
retn			; Return Near from Procedure

sub_1B53B endp




sub_1B56C proc near
push	cx
mov	si, cx
shr	si, 1		; Shift	Logical	Right
sub	bx, si		; Integer Subtraction
cmp	bx, 0FF9Eh	; Compare Two Operands
jge	short loc_1B57B	; Jump if Greater or Equal (SF=OF)

mov	bx, 0FF9Eh


loc_1B57B:
mov	si, 9E68h


loc_1B57E:
push	ax
call	sub_1B53B	; Call Procedure

pop	ax
inc	bx		; Increment by 1
loop	loc_1B57E	; Loop while CX	!= 0

mov	si, 9E68h
pop	cx
retn			; Return Near from Procedure

sub_1B56C endp




_sub_1B58B_map_func proc near
call	sub_1B5A0	; Call Procedure

les	di, ds:_unk_2D1AE_res_map ; Load Full Pointer to ES:xx
assume es:nothing
add	di, ax		; Add
mov	ax, bp
mul	dx		; Unsigned Multiplication of AL	or AX
shl	ax, 1		; Shift	Logical	Left
adc	dx, 0		; Add with Carry
add	di, dx		; Add
retn			; Return Near from Procedure

_sub_1B58B_map_func endp




sub_1B5A0 proc near
push	bx
shl	bx, 1		; Shift	Logical	Left
shl	bx, 1		; Shift	Logical	Left
shl	bx, 1		; Shift	Logical	Left
jns	short loc_1B5B9	; Jump if Not Sign (SF=0)

neg	bx		; Two's Complement Negation
mov	ax, ds:RESOURCE_TABLAT[bx]
neg	ax		; Two's Complement Negation
mov	bp, ds:word_23DFA[bx]
shl	bp, 1		; Shift	Logical	Left
pop	bx
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1B5B9:
mov	ax, ds:RESOURCE_TABLAT[bx]
mov	bp, ds:word_23DFA[bx]
shl	bp, 1		; Shift	Logical	Left
pop	bx
retn			; Return Near from Procedure

sub_1B5A0 endp




sub_1B5C5 proc near
call	_sub_1B58B_map_func ; Call Procedure

xor	ax, ax		; Logical Exclusive OR
div	bp		; Unsigned Divide
mov	dx, ax
retn			; Return Near from Procedure

sub_1B5C5 endp




sub_1B5CF proc near
or	ah, ah		; Logical Inclusive OR
jz	short loc_1B5F5	; Jump if Zero (ZF=1)

js	short loc_1B5E6	; Jump if Sign (SF=1)

add	bh, ah		; Add
jnb	short loc_1B5F5	; Jump if Not Below (CF=0)

inc	bl		; Increment by 1
cmp	bl, 62h	; 'b'   ; Compare Two Operands
jl	short loc_1B5F5	; Jump if Less (SF!=OF)

dec	bl		; Decrement by 1
sub	bh, ah		; Integer Subtraction
jmp	short loc_1B5F5	; Jump

; ���������������������������������������������������������������������������

loc_1B5E6:		; Add
add	bh, ah
jb	short loc_1B5F5	; Jump if Below	(CF=1)

dec	bl		; Decrement by 1
cmp	bl, 9Eh	; '�'   ; Compare Two Operands
jg	short loc_1B5F5	; Jump if Greater (ZF=0	& SF=OF)

inc	bl		; Increment by 1
sub	bh, ah		; Integer Subtraction


loc_1B5F5:		; AL ->	AX (with sign)
cbw
add	dx, ax		; Add
retn			; Return Near from Procedure

sub_1B5CF endp




sub_1B5F9 proc near
sub	dx, ds:word_2D1A6 ; Integer Subtraction
sub	bx, ds:word_2D1A8 ; Integer Subtraction
xor	cx, cx		; Logical Exclusive OR
test	ds:byte_23B9B, 80h ; Logical Compare
jz	short loc_1B60C	; Jump if Zero (ZF=1)

mov	cl, 2


loc_1B60C:		; Shift	Arithmetic Right
sar	bx, cl
add	bx, ds:word_20E2E ; Add
mov	ax, bx
jns	short loc_1B618	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_1B618:		; Shift	Logical	Left
shl	ax, 1
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
mov	si, offset RESOURCE_TABLAT
add	si, ax		; Add
jcxz	short loc_1B62C	; Jump if CX is	0

sar	dx, cl		; Shift	Arithmetic Right
add	dx, [si+4]	; Add
jmp	short loc_1B63E	; Jump

; ���������������������������������������������������������������������������

loc_1B62C:		; Add
add	dx, [si+6]
mov	cx, [si+2]
shl	cx, 1		; Shift	Logical	Left
cmp	dx, cx		; Compare Two Operands
jb	short loc_1B640	; Jump if Below	(CF=1)

js	short loc_1B63E	; Jump if Sign (SF=1)

sub	dx, cx		; Integer Subtraction
jmp	short loc_1B640	; Jump

; ���������������������������������������������������������������������������

loc_1B63E:		; Add
add	dx, cx


loc_1B640:		; Logical Exclusive OR
xor	ax, ax
div	cx		; Unsigned Divide
mov	dx, ax
retn			; Return Near from Procedure

sub_1B5F9 endp




sub_1B647 proc near
xor	cx, cx		; Logical Exclusive OR
test	ds:byte_23B9B, 80h ; Logical Compare
jz	short loc_1B652	; Jump if Zero (ZF=1)

mov	cl, 2


loc_1B652:
mov	bp, bx
sub	bx, ds:word_20E2E ; Integer Subtraction
shl	bx, cl		; Shift	Logical	Left
add	bx, ds:word_2D1A8 ; Add
shl	bp, 1		; Shift	Logical	Left
shl	bp, 1		; Shift	Logical	Left
shl	bp, 1		; Shift	Logical	Left
jns	short loc_1B668	; Jump if Not Sign (SF=0)

neg	bp		; Two's Complement Negation


loc_1B668:
mov	bp, word_23DFA[bp]
add	bp, bp		; Add
sub	dx, ds:word_20E2C ; Integer Subtraction
mov	ax, dx
imul	bp		; Signed Multiply
jcxz	short loc_1B67E	; Jump if CX is	0


loc_1B678:		; Shift	Logical	Left
shl	ax, 1
rcl	dx, 1		; Rotate Through Carry Left
loop	loc_1B678	; Loop while CX	!= 0


loc_1B67E:		; Add
add	dx, ds:word_2D1A6
retn			; Return Near from Procedure

sub_1B647 endp




sub_1B683 proc near
js	short loc_1B68B	; Jump if Sign (SF=1)

sub	bp, dx		; Integer Subtraction
neg	bp		; Two's Complement Negation
jmp	short loc_1B68F	; Jump

; ���������������������������������������������������������������������������

loc_1B68B:		; Exchange Register/Memory with	Register
xchg	dx, bp
add	dx, bp		; Add


loc_1B68F:
mov	cx, bp
neg	cx		; Two's Complement Negation
cmp	cx, dx		; Compare Two Operands
jnb	short locret_1B699 ; Jump if Not Below (CF=0)

mov	dx, bp


locret_1B699:		; Return Near from Procedure
retn

sub_1B683 endp




sub_1B69A proc near
mov	ax, ds:word_20E2C
xchg	ax, word ptr ds:loc_11980 ; Exchange Register/Memory with Register
mov	ds:word_20E2C, ax
mov	ax, ds:word_20E2E
xchg	ax, ds:word_20E32 ; Exchange Register/Memory with Register
mov	ds:word_20E2E, ax
mov	ax, ds:word_2D1A6
xchg	ax, ds:word_2D1AA ; Exchange Register/Memory with Register
mov	ds:word_2D1A6, ax
mov	ax, ds:word_2D1A8
xchg	ax, ds:word_2D1AC ; Exchange Register/Memory with Register
mov	ds:word_2D1A8, ax
retn			; Return Near from Procedure

sub_1B69A endp




_sub_1B6C3_map_func proc near
test	ds:byte_23B9B, 80h ; Logical Compare
jz	short loc_1B714	; Jump if Zero (ZF=1)

push	ds
pop	es
mov	ds:word_2D1A6, 0A0h ; '�'
mov	ds:word_2D1A8, 4Ch ; 'L'
mov	cx, 12h
mov	bx, 4Bh	; 'K'
mov	ax, ds:word_20E2E
or	ax, ax		; Logical Inclusive OR
mov	dx, ax
jns	short loc_1B6E9	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_1B6E9:		; Compare Two Operands
cmp	ax, bx
jb	short loc_1B6F8	; Jump if Below	(CF=1)

mov	ax, bx
or	dx, dx		; Logical Inclusive OR
jns	short loc_1B6F5	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_1B6F5:
mov	ds:word_20E2E, ax


loc_1B6F8:
mov	bp, offset RESOURCE_TABLAT
mov	dx, ds:word_20E2C
mov	ax, ds:word_20E2E
sub	ax, cx		; Integer Subtraction
les	di, ds:_unk_2D1AE_res_map ; Load Full Pointer to ES:xx
mov	si, offset RESOURCE_GLOBDATA
mov	bx, ds:_word_2D08A_framebuffer_active
call	ds:_ptr_22D65_gfx_vtable_func_29 ; Indirect Call Far Procedure
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1B714:
mov	di, offset RESOURCE_GLOBDATA
mov	ax, ds:word_23B97
sub	ax, ds:word_23B93 ; Integer Subtraction
mov	dx, ax
shr	dx, 1		; Shift	Logical	Right
add	dx, ds:word_23B93 ; Add
mov	ds:word_2D1A6, dx
mov	ds:word_2D1A2, ax
mov	ax, ds:word_23B99
sub	ax, ds:word_23B95 ; Integer Subtraction
dec	ax		; Decrement by 1
mov	bx, ax
shr	bx, 1		; Shift	Logical	Right
add	bx, ds:word_23B95 ; Add
mov	ds:word_2D1A8, bx
inc	ax		; Increment by 1
mov	ds:word_2D1A4, ax
dec	ax		; Decrement by 1
shr	ax, 1		; Shift	Logical	Right
mov	cx, ax
mov	bx, 56h	; 'V'
sub	bx, ax		; Integer Subtraction
mov	ax, ds:word_20E2E
or	ax, ax		; Logical Inclusive OR
mov	dx, ax
jns	short loc_1B75A	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_1B75A:		; Compare Two Operands
cmp	ax, bx
jb	short loc_1B769	; Jump if Below	(CF=1)

mov	ax, bx
or	dx, dx		; Logical Inclusive OR
jns	short loc_1B766	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_1B766:
mov	ds:word_20E2E, ax


loc_1B769:
mov	bp, offset RESOURCE_TABLAT
mov	dx, ds:word_20E2C
mov	ax, ds:word_20E2E
sub	ax, cx		; Integer Subtraction
push	ax
mov	cx, ds:word_2D1A4
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
jns	short loc_1B79C	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation
add	bp, ax		; Add


loc_1B786:
push	cx
mov	cx, [bp+0]
mov	bx, [bp+2]
neg	cx		; Two's Complement Negation
jz	short loc_1B7A5	; Jump if Zero (ZF=1)

call	sub_1B7D2	; Call Procedure

sub	bp, 8		; Integer Subtraction
pop	cx
loop	loc_1B786	; Loop while CX	!= 0

jmp	short loc_1B7AE	; Jump

; ���������������������������������������������������������������������������

loc_1B79C:		; Add
add	bp, ax


loc_1B79E:
push	cx
mov	cx, [bp+0]
mov	bx, [bp+2]


loc_1B7A5:		; Call Procedure
call	sub_1B7D2

add	bp, 8		; Add
pop	cx
loop	loc_1B79E	; Loop while CX	!= 0


loc_1B7AE:
mov	es, ds:_word_2D08A_framebuffer_active
mov	di, ds:word_2D1A2
mov	cx, ds:word_2D1A4
mov	dx, ds:word_23B93
mov	bx, ds:word_23B95
mov	si, 4C60h
pop	ax
test	ds:byte_23B9B, 40h ; Logical Compare
jnz	short locret_1B7D1 ; Jump if Not Zero (ZF=0)

call	ds:_ptr_22D65_gfx_vtable_func_22 ; Indirect Call Far Procedure


locret_1B7D1:		; Return Near from Procedure
retn

_sub_1B6C3_map_func endp




sub_1B7D2 proc near
push	dx
push	di
push	ds
lds	si, ds:_unk_2D1AE_res_map ; Load Full Pointer to DS:xx
push	ss
pop	es
assume es:seg001
add	si, cx		; Add
add	bx, bx		; Add
mov	ax, dx
mul	bx		; Unsigned Multiplication of AL	or AX
mov	[bp+6],	dx
mov	ax, dx
mov	dx, ss:word_2D1A2
cmp	bx, dx		; Compare Two Operands
jnb	short loc_1B7FB	; Jump if Not Below (CF=0)

mov	cx, dx
sub	cx, bx		; Integer Subtraction
shr	cx, 1		; Shift	Logical	Right
add	di, cx		; Add
mov	dx, bx


loc_1B7FB:
mov	cx, dx
shr	cx, 1		; Shift	Logical	Right
sub	ax, cx		; Integer Subtraction
jns	short loc_1B805	; Jump if Not Sign (SF=0)

add	ax, bx		; Add


loc_1B805:
mov	cx, dx
sub	bx, ax		; Integer Subtraction
sub	cx, bx		; Integer Subtraction
jns	short loc_1B813	; Jump if Not Sign (SF=0)

add	cx, bx		; Add
add	si, ax		; Add
jmp	short loc_1B81D	; Jump

; ���������������������������������������������������������������������������

loc_1B813:		; Exchange Register/Memory with	Register
xchg	bx, cx
push	si
add	si, ax		; Add
rep movsb		; Move Byte(s) from String to String
pop	si
xchg	bx, cx		; Exchange Register/Memory with	Register


loc_1B81D:		; Move Byte(s) from String to String
rep movsb
pop	ds
pop	di
pop	dx
add	di, 0C8h ; '�'  ; Add
retn			; Return Near from Procedure

sub_1B7D2 endp




sub_1B827 proc near
mov	ds:byte_2D1B2, 0
call	sub_1B84A	; Call Procedure

mov	ds:word_2D1BF, 0
call	sub_1B87E	; Call Procedure

call	sub_11797	; Call Procedure

call	sub_1B941	; Call Procedure

call	sub_1D7B2	; Call Procedure

mov	si, offset unk_21276
call	sub_1D72B	; Call Procedure

jmp	sub_1AD5E	; Jump

sub_1B827 endp




sub_1B84A proc near
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

mov	es, ds:_word_2D08A_framebuffer_active
assume es:nothing
mov	si, 1470h
mov	al, 0F0h ; '�'
call	ds:_ptr_22D65_gfx_vtable_func_10 ; Indirect Call Far Procedure

sub_1B84A endp




sub_1B85A proc near
mov	ax, 1
call	_sub_1C13E_open_sprite_sheet ; RES_FRESK_HSQ

mov	dx, 5Bh	; '['
mov	bx, 14h
mov	ax, 2
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

mov	si, 2448h
call	sub_1DAAA	; Call Procedure

mov	si, 2440h
mov	di, 0D834h
call	sub_15B99	; Call Procedure

jmp	_sub_1B977_map_func_gfx	; Jump

sub_1B85A endp




sub_1B87E proc near
call	sub_15BA8	; Call Procedure

mov	ax, 1
call	_sub_1C13E_open_sprite_sheet ; RES_FRESK_HSQ

mov	dx, ds:word_2D1BF
xor	bx, bx		; Logical Exclusive OR
xor	ax, ax		; Logical Exclusive OR
call	sub_1C305	; Call Procedure

sub	dx, 0D6h ; '�'  ; Integer Subtraction
neg	dx		; Two's Complement Negation
mov	ax, 1
call	sub_1C30D	; Call Procedure

mov	si, 2440h
mov	di, offset unk_2CCE4
jmp	sub_15B99	; Jump

sub_1B87E endp




sub_1B8A7 proc near
push	ds
pop	es
mov	di, offset RESOURCE_GLOBDATA
mov	si, 92h	; '�'   ; GLOBDATA.HSQ
call	_sub_1F0B9_open_resource_by_index_si ; reads and decompresses to es:di

mov	dx, ds:197Ch
mov	bx, ds:197Eh
call	sub_1BA75	; Call Procedure

mov	ax, 1
call	_sub_1C13E_open_sprite_sheet ; RES_FRESK_HSQ

jmp	sub_1C0F4	; Jump

sub_1B8A7 endp




sub_1B8C6 proc near
call	sub_1D2BD	; Call Procedure

call	sub_15ADF	; Call Procedure

call	sub_1B8A7	; Call Procedure

inc	byte ptr ds:0DD03h ; Increment by 1
xor	al, al		; Logical Exclusive OR
mov	dx, 0FFFFh
mov	bp, offset sub_1B827
call	_sub_1C108_transition ;	Call Procedure

call	sub_1AE04	; Call Procedure

mov	ax, 2562h
call	sub_1D95E	; Call Procedure

call	sub_117E6	; Call Procedure

sub_1B8C6 endp




sub_1B8EA proc near
mov	si, 0B9AEh
mov	bp, 1
jmp	sub_1DA25	; Jump

sub_1B8EA endp




sub_1B8F3 proc near
call	sub_1B84A	; Call Procedure

mov	bp, 0BE1Dh
call	sub_1C097	; Call Procedure

call	sub_1C474	; Call Procedure


loc_1B8FF:		; Call Procedure
call	sub_1C43E

call	sub_1B87E	; Call Procedure

call	sub_1C4DD	; Call Procedure

sub	word ptr ds:0DD0Fh, 10h	; Integer Subtraction
cmp	word ptr ds:0DD0Fh, 0FF96h ; Compare Two Operands
jg	short loc_1B8FF	; Jump if Greater (ZF=0	& SF=OF)

retn			; Return Near from Procedure

sub_1B8F3 endp




sub_1B915 proc near
call	loc_1B93B	; Call Procedure

call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure


loc_1B91B:		; Add
add	word ptr ds:0DD0Fh, 10h
call	sub_1B87E	; Call Procedure

cmp	word ptr ds:0DD0Fh, 0 ;	Compare	Two Operands
jnz	short loc_1B91B	; Jump if Not Zero (ZF=0)

call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

jmp	sub_1B87E	; Jump

sub_1B915 endp




sub_1B930 proc near
mov	ds:byte_2D1B3, 0
mov	si, offset unk_2AE5E
call	sub_1DA5F	; Call Procedure


loc_1B93B:
mov	si, offset unk_2B307
jmp	sub_1DA5F	; Jump

sub_1B930 endp




sub_1B941 proc near
mov	bp, 204Ah
mov	ax, 0B1h ; '�'
mov	bx, 0B96Bh
cmp	byte ptr ds:0DD02h, 0 ;	Compare	Two Operands
jz	short loc_1B955	; Jump if Zero (ZF=1)

inc	ax		; Increment by 1
mov	bx, 0B961h


loc_1B955:
mov	[bp+6],	ax
mov	[bp+8],	bx
mov	bx, 0D917h
jmp	sub_1D338	; Jump

sub_1B941 endp

; ���������������������������������������������������������������������������
call	sub_1B915	; Call Procedure

mov	byte ptr ds:0DD02h, 0
jmp	short loc_1B972	; Jump




sub_1B96B proc near
call	sub_1B8F3	; Call Procedure

dec	byte ptr ds:0DD02h ; Decrement by 1


loc_1B972:		; Call Procedure
call	sub_1B98B

jmp	short sub_1B941	; Jump

sub_1B96B endp




_sub_1B977_map_func_gfx	proc near
mov	bp, offset RESOURCE_TABLAT
mov	es, ds:_word_2D086_framebuffer_front
mov	al, ds:byte_2D1B2
lds	si, ds:_unk_2D1AE_res_map ; Load Full Pointer to DS:xx
call	ss:_ptr_22D65_gfx_vtable_func_23 ; Indirect Call Far Procedure
retn			; Return Near from Procedure

_sub_1B977_map_func_gfx	endp




sub_1B98B proc near
call	_sub_1B977_map_func_gfx	; Call Procedure


loc_1B98E:		; Call Procedure
call	sub_1BAF2

push	bx
push	dx
mov	si, offset unk_2CCE4
call	sub_1DB74	; Call Procedure

call	sub_1C4ED	; Call Procedure

pop	dx
pop	bx
or	dx, dx		; Logical Inclusive OR
jz	short loc_1B9A5	; Jump if Zero (ZF=1)

call	sub_1BC0C	; Call Procedure


loc_1B9A5:		; Call Procedure
call	sub_1DB67

mov	ax, 1
jmp	short sub_1B9E0	; Jump

sub_1B98B endp

; ���������������������������������������������������������������������������
align 2
mov	es, word ptr ds:0DBD6h
call	dword ptr ds:3915h ; Indirect Call Far Procedure
jb	short loc_1B98E	; Jump if Below	(CF=1)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������
shr	ax, 1		; Shift	Logical	Right
mov	ax, 8
jmp	short loc_1B9C5	; Jump

; ���������������������������������������������������������������������������
shr	ax, 1		; Shift	Logical	Right
mov	ax, 0FFF8h


loc_1B9C5:		; Jump if Not Below (CF=0)
jnb	short locret_1B9DF

call	sub_1BA15	; Call Procedure

jmp	short sub_1B98B	; Jump

; ���������������������������������������������������������������������������
shr	ax, 1		; Shift	Logical	Right
mov	ax, 0FFE0h
jmp	short loc_1B9D8	; Jump

; ���������������������������������������������������������������������������
shr	ax, 1		; Shift	Logical	Right
mov	ax, 20h	; ' '


loc_1B9D8:		; Jump if Not Below (CF=0)
jnb	short locret_1B9DF

call	sub_1B9E0	; Call Procedure

jmp	short sub_1B98B	; Jump

; ���������������������������������������������������������������������������

locret_1B9DF:		; Return Near from Procedure
retn




sub_1B9E0 proc near
mov	si, offset word_23DFC
mov	dx, [si]
mov	cx, 18Eh
add	dx, ax		; Add
jns	short loc_1B9EE	; Jump if Not Sign (SF=0)

add	dx, cx		; Add


loc_1B9EE:		; Compare Two Operands
cmp	dx, cx
js	short loc_1B9F4	; Jump if Sign (SF=1)

sub	dx, cx		; Integer Subtraction


loc_1B9F4:
mov	[si], dx

sub_1B9E0 endp




sub_1B9F6 proc near
mov	ax, 8000h
mov	cx, 18Eh
div	cx		; Unsigned Divide
mov	cx, 62h	; 'b'
mov	bx, ax


loc_1BA03:		; Add
add	si, 6
lodsw			; Load String
mul	bx		; Unsigned Multiplication of AL	or AX
add	ax, ax		; Add
adc	dx, dx		; Add with Carry
mov	[si], dx
mov	[si+2],	ax
loop	loc_1BA03	; Loop while CX	!= 0

retn			; Return Near from Procedure

sub_1B9F6 endp




sub_1BA15 proc near
add	ax, ds:word_21910 ; Add
mov	cx, 62h	; 'b'
cmp	ax, cx		; Compare Two Operands
jl	short loc_1BA22	; Jump if Less (SF!=OF)

mov	ax, cx


loc_1BA22:		; Two's Complement Negation
neg	cx
cmp	ax, cx		; Compare Two Operands
jg	short loc_1BA2A	; Jump if Greater (ZF=0	& SF=OF)

mov	ax, cx


loc_1BA2A:
mov	ds:2460h, ax

sub_1BA15 endp

; START	OF FUNCTION CHUNK FOR sub_1BA75

loc_1BA2D:
push	ds
pop	es
mov	di, 8B77h
mov	bx, 62h	; 'b'
mov	cx, 0C4h ; '�'
mov	ax, ds:2460h
add	ax, bx		; Add
cmp	ax, bx		; Compare Two Operands
jle	short loc_1BA55	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

neg	bx		; Two's Complement Negation
add	al, bl		; Add
add	al, bl		; Add


loc_1BA47:		; Decrement by 1
dec	al
stosw			; Store	String
cmp	al, bl		; Compare Two Operands
jle	short loc_1BA50	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

loop	loc_1BA47	; Loop while CX	!= 0


loc_1BA50:		; Two's Complement Negation
neg	bx
mov	ax, bx
dec	cx		; Decrement by 1


loc_1BA55:		; Store	String
stosw
dec	al		; Decrement by 1
js	short loc_1BA5C	; Jump if Sign (SF=1)

loop	loc_1BA55	; Loop while CX	!= 0


loc_1BA5C:		; Decrement by 1
dec	cx
jle	short locret_1BA74 ; Jump if Less or Equal (ZF=1 | SF!=OF)

neg	ax		; Two's Complement Negation


loc_1BA61:		; Store	String
stosw
inc	al		; Increment by 1
cmp	al, bl		; Compare Two Operands
jg	short loc_1BA6A	; Jump if Greater (ZF=0	& SF=OF)

loop	loc_1BA61	; Loop while CX	!= 0


loc_1BA6A:		; Decrement by 1
dec	cx
jle	short locret_1BA74 ; Jump if Less or Equal (ZF=1 | SF!=OF)

neg	al		; Two's Complement Negation


loc_1BA6F:		; Increment by 1
inc	al
stosw			; Store	String
loop	loc_1BA6F	; Loop while CX	!= 0


locret_1BA74:		; Return Near from Procedure
retn

; END OF FUNCTION CHUNK	FOR sub_1BA75



sub_1BA75 proc near

; FUNCTION CHUNK AT BA2D SIZE 00000048 BYTES

mov	si, 494Ch
mov	ax, 18Eh
mul	dx		; Unsigned Multiplication of AL	or AX
mov	[si], dx
mov	word ptr [si+2], 0
mov	ax, bx
cmp	ax, 20h	; ' '   ; Compare Two Operands
jnb	short loc_1BA8E	; Jump if Not Below (CF=0)

mov	ax, 20h	; ' '


loc_1BA8E:		; Compare Two Operands
cmp	ax, 0FFE0h
jb	short loc_1BA96	; Jump if Below	(CF=1)

mov	ax, 0FFE0h


loc_1BA96:
mov	ds:2460h, ax
call	sub_1B9F6	; Call Procedure

jmp	short loc_1BA2D	; Jump

sub_1BA75 endp




sub_1BA9E proc near
call	sub_1407E	; Call Procedure

mov	ax, 18Eh
mul	dx		; Unsigned Multiplication of AL	or AX
mov	bp, ds:494Ah
add	bp, bp		; Add
sub	dx, ds:494Ch	; Integer Subtraction
call	sub_1B683	; Call Procedure

mov	cx, 1
mov	ax, 20h	; ' '
cmp	dx, ax		; Compare Two Operands
jl	short loc_1BAC0	; Jump if Less (SF!=OF)

mov	dx, ax
inc	cx		; Increment by 1


loc_1BAC0:		; Two's Complement Negation
neg	ax
cmp	dx, ax		; Compare Two Operands
jg	short loc_1BAC9	; Jump if Greater (ZF=0	& SF=OF)

mov	dx, ax
inc	cx		; Increment by 1


loc_1BAC9:		; Integer Subtraction
sub	bx, ds:2460h
mov	ax, 18h
cmp	bx, ax		; Compare Two Operands
jl	short loc_1BAD7	; Jump if Less (SF!=OF)

mov	bx, ax
inc	cx		; Increment by 1


loc_1BAD7:		; Two's Complement Negation
neg	ax
cmp	bx, ax		; Compare Two Operands
jg	short loc_1BAE0	; Jump if Greater (ZF=0	& SF=OF)

mov	bx, ax
inc	cx		; Increment by 1


loc_1BAE0:
mov	ax, dx
push	cx
push	bx
call	sub_1B9E0	; Call Procedure

pop	ax
call	sub_1BA15	; Call Procedure

call	sub_1B98B	; Call Procedure

pop	cx
loop	sub_1BA9E	; Loop while CX	!= 0

sub_1BA9E endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_13. PRESS	KEYPAD "+" TO EXPAND]



sub_1BAF2 proc near
xor	dx, dx		; Logical Exclusive OR
cmp	ds:byte_2172D, 0 ; Compare Two Operands
jnz	short nullsub_13 ; Jump	if Not Zero (ZF=0)

call	sub_1407E	; Call Procedure

sub	sp, 0Ah		; Integer Subtraction
mov	bp, sp
mov	word ptr [bp+0], 0
shl	bx, 1		; Shift	Logical	Left
shl	bx, 1		; Shift	Logical	Left
shl	bx, 1		; Shift	Logical	Left
jns	short loc_1BB16	; Jump if Not Sign (SF=0)

mov	byte ptr [bp+1], 0FFh
neg	bx		; Two's Complement Negation


loc_1BB16:
mov	cx, ds:word_23DFA[bx]
mov	ax, cx
add	ax, ax		; Add
mul	dx		; Unsigned Multiplication of AL	or AX
add	ax, ax		; Add
adc	dx, 0		; Add with Carry
xor	ax, ax		; Logical Exclusive OR
sub	dx, ds:word_23DFC[bx] ;	Integer	Subtraction
jns	short loc_1BB31	; Jump if Not Sign (SF=0)

neg	dx		; Two's Complement Negation
not	ax		; One's Complement Negation


loc_1BB31:		; Compare Two Operands
cmp	dx, cx
jb	short loc_1BB3D	; Jump if Below	(CF=1)

sub	dx, cx		; Integer Subtraction
sub	dx, cx		; Integer Subtraction
neg	dx		; Two's Complement Negation
not	ax		; One's Complement Negation


loc_1BB3D:		; Shift	Logical	Right
shr	cx, 1
cmp	dx, cx		; Compare Two Operands
jb	short loc_1BB4D	; Jump if Below	(CF=1)

mov	byte ptr [bp+0], 80h ; '�'
sub	dx, cx		; Integer Subtraction
sub	dx, cx		; Integer Subtraction
neg	dx		; Two's Complement Negation


loc_1BB4D:
mov	[bp+4],	al
shr	bx, 1		; Shift	Logical	Right
shr	bx, 1		; Shift	Logical	Right
push	ds
pop	es
mov	di, offset unk_24DEA
mov	ax, bx
mov	cx, 64h	; 'd'
xor	bx, bx		; Logical Exclusive OR


loc_1BB60:		; Compare String
repne scasb
jnz	short loc_1BB7A	; Jump if Not Zero (ZF=0)

inc	cx		; Increment by 1
cmp	dl, [di+63h]	; Compare Two Operands
jbe	short loc_1BB7D	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	[bp+2],	cx
inc	bx		; Increment by 1
add	di, 0C7h ; '�'  ; Add
cmp	di, 8B3Bh	; Compare Two Operands
jb	short loc_1BB60	; Jump if Below	(CF=1)

jmp	short loc_1BBE6	; Jump

; ���������������������������������������������������������������������������

loc_1BB7A:
mov	cx, [bp+2]


loc_1BB7D:
mov	ax, 64h	; 'd'
sub	ax, cx		; Integer Subtraction
mov	[bp+2],	bx
mov	cx, [bp+0]
mov	ah, ch
or	cl, cl		; Logical Inclusive OR
jns	short loc_1BB90	; Jump if Not Sign (SF=0)

neg	al		; Two's Complement Negation


loc_1BB90:
mov	di, offset unk_2806B
mov	cx, 80h	; '�'
repne scasw		; Compare String
jnz	short loc_1BBE6	; Jump if Not Zero (ZF=0)

xor	al, al		; Logical Exclusive OR
sub	di, 8C3Dh	; Integer Subtraction
jns	short loc_1BBA6	; Jump if Not Sign (SF=0)

neg	di		; Two's Complement Negation
not	al		; One's Complement Negation


loc_1BBA6:
mov	[bp+5],	al
mov	bx, 36h	; '6'
mov	ax, di
shr	ax, 1		; Shift	Logical	Right
mov	si, 4C60h
mov	dx, [bp+2]
mov	cl, al
mov	ch, 0FFh
xor	ax, ax		; Logical Exclusive OR


loc_1BBBC:		; Load String
lodsb
inc	al		; Increment by 1
jz	short loc_1BBE1	; Jump if Zero (ZF=1)

neg	al		; Two's Complement Negation
cmp	al, dl		; Compare Two Operands
jbe	short loc_1BBE1	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	di, si
add	si, ax		; Add
add	di, dx		; Add
mov	al, [di]
sub	al, cl		; Integer Subtraction
cmp	al, ch		; Compare Two Operands
jnb	short loc_1BBDE	; Jump if Not Below (CF=0)

mov	ch, al
mov	[bp+6],	bx
or	al, al		; Logical Inclusive OR
jz	short loc_1BBEC	; Jump if Zero (ZF=1)


loc_1BBDE:		; Decrement by 1
dec	bx
jnz	short loc_1BBBC	; Jump if Not Zero (ZF=0)


loc_1BBE1:		; Compare Two Operands
cmp	ch, 2
jbe	short loc_1BBEC	; Jump if Below	or Equal (CF=1 | ZF=1)


loc_1BBE6:		; Add
add	sp, 0Ah
xor	dx, dx		; Logical Exclusive OR
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1BBEC:
mov	ax, [bp+4]
mov	bx, [bp+6]
sub	bx, 36h	; '6'   ; Integer Subtraction
or	ah, ah		; Logical Inclusive OR
jz	short loc_1BBFB	; Jump if Zero (ZF=1)

neg	bx		; Two's Complement Negation


loc_1BBFB:		; Add
add	bx, 4Fh	; 'O'
or	al, al		; Logical Inclusive OR
jz	short loc_1BC04	; Jump if Zero (ZF=1)

neg	dx		; Two's Complement Negation


loc_1BC04:		; Add
add	dx, 0A0h ; '�'
add	sp, 0Ah		; Add
retn			; Return Near from Procedure

sub_1BAF2 endp




sub_1BC0C proc near
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

call	_sub_1C137_load_icons_sprites ;	Call Procedure

mov	ax, 36h	; '6'
call	sub_1C1F4	; Call Procedure

sub	bl, es:[si+2]	; Integer Subtraction
jmp	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

sub_1BC0C endp

; ���������������������������������������������������������������������������
call	sub_1D41B	; Call Procedure

cmp	bp, 204Ah	; Compare Two Operands
jz	short loc_1BC2C	; Jump if Zero (ZF=1)

cmp	bp, 2062h	; Compare Two Operands


loc_1BC2C:		; Jump if Not Zero (ZF=0)
jnz	short locret_1BC4D

call	sub_1BC4E	; Call Procedure

jb	short loc_1BC3C	; Jump if Below	(CF=1)

cmp	bp, 204Ah	; Compare Two Operands
jz	short locret_1BC4D ; Jump if Zero (ZF=1)

jmp	sub_1B941	; Jump

; ���������������������������������������������������������������������������

loc_1BC3C:		; Compare Two Operands
cmp	bp, 2062h
jz	short locret_1BC4D ; Jump if Zero (ZF=1)

mov	bp, 2062h
mov	bx, 0D917h
xor	cx, cx		; Logical Exclusive OR
jmp	loc_1D33A	; Jump

; ���������������������������������������������������������������������������

locret_1BC4D:		; Return Near from Procedure
retn




sub_1BC4E proc near
sub	dx, 60h	; '`'   ; Integer Subtraction
cmc			; Complement Carry Flag
jnb	short locret_1BC63 ; Jump if Not Below (CF=0)

cmp	dx, 80h	; '�'   ; Compare Two Operands
jnb	short locret_1BC63 ; Jump if Not Below (CF=0)

sub	bx, 19h		; Integer Subtraction
cmc			; Complement Carry Flag
jnb	short locret_1BC63 ; Jump if Not Below (CF=0)

cmp	bx, 6Dh	; 'm'   ; Compare Two Operands


locret_1BC63:		; Return Near from Procedure
retn

sub_1BC4E endp

; ���������������������������������������������������������������������������
push	bx
push	dx
call	sub_1BC4E	; Call Procedure

jnb	short loc_1BC7E	; Jump if Not Below (CF=0)

call	sub_1BD25	; Call Procedure


loc_1BC6E:		; Jump if Not Below (CF=0)
jnb	short loc_1BC7E

mov	ds:197Ch, ax
mov	ds:197Eh, bx
call	sub_1B98B	; Call Procedure

pop	dx
pop	bx
jmp	short loc_1BC8D	; Jump

; ���������������������������������������������������������������������������

loc_1BC7E:
pop	dx
pop	bx
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������
call	sub_1BA9E	; Call Procedure

call	sub_15B5D	; Call Procedure

mov	dx, 0A0h ; '�'
mov	bx, 4Fh	; 'O'


loc_1BC8D:		; Call Procedure
call	_sub_1DBB2_call_restore_cursor

call	sub_1BC99	; Call Procedure

call	sub_1ADBE	; Call Procedure

jmp	sub_15A3D	; Jump




sub_1BC99 proc near
mov	si, offset unk_2D1B6
mov	[si], dx
mov	[si+2],	bx
inc	dx		; Increment by 1
inc	dx		; Increment by 1
inc	bx		; Increment by 1
mov	[si+4],	dx
mov	[si+6],	bx
mov	byte ptr [si+8], 7
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

mov	cx, 8


loc_1BCB4:
push	cx
mov	si, offset unk_2D1B6
mov	di, offset unk_218F0
mov	cx, 2
mov	dx, 0FFFCh


loc_1BCC1:
mov	ax, [si]
add	ax, dx		; Add
cmp	ax, [di]	; Compare Two Operands
jnb	short loc_1BCCB	; Jump if Not Below (CF=0)

mov	ax, [di]


loc_1BCCB:
mov	[si], ax
add	di, 2		; Add
add	si, 2		; Add
sar	dx, 1		; Shift	Arithmetic Right
loop	loc_1BCC1	; Loop while CX	!= 0

mov	cx, 2
mov	dx, 4


loc_1BCDD:
mov	ax, [si]
add	ax, dx		; Add
cmp	ax, [di]	; Compare Two Operands
jb	short loc_1BCE7	; Jump if Below	(CF=1)

mov	ax, [di]


loc_1BCE7:
mov	[si], ax
add	di, 2		; Add
add	si, 2		; Add
sar	dx, 1		; Shift	Arithmetic Right
loop	loc_1BCDD	; Loop while CX	!= 0

mov	si, 0DD06h
call	sub_1C551	; Call Procedure

call	sub_1BD00	; Call Procedure

pop	cx
loop	loc_1BCB4	; Loop while CX	!= 0

retn			; Return Near from Procedure

sub_1BC99 endp




sub_1BD00 proc near
xor	ax, ax		; Logical Exclusive OR
mov	cx, 0Ah
mov	si, 0DD06h
inc	word ptr [si]	; Increment by 1
inc	word ptr [si+2]	; Increment by 1
dec	word ptr [si+4]	; Decrement by 1
dec	word ptr [si+6]	; Decrement by 1
call	sub_1C0D5	; Call Procedure

mov	si, 0DD06h
dec	word ptr [si]	; Decrement by 1
dec	word ptr [si+2]	; Decrement by 1
inc	word ptr [si+4]	; Increment by 1
inc	word ptr [si+6]	; Increment by 1
retn			; Return Near from Procedure

sub_1BD00 endp




sub_1BD25 proc near
sub	bx, 36h	; '6'   ; Integer Subtraction
mov	cx, bx
jns	short loc_1BD2E	; Jump if Not Sign (SF=0)

neg	cx		; Two's Complement Negation


loc_1BD2E:
push	ds
pop	es
mov	si, 4C60h
inc	cx		; Increment by 1
xor	ax, ax		; Logical Exclusive OR


loc_1BD36:		; Add
add	si, ax
lodsb			; Load String
inc	al		; Increment by 1
neg	al		; Two's Complement Negation
loopne	loc_1BD36	; Loop while rCX != 0 and ZF=0

mov	di, si
add	di, ax		; Add
sub	dx, 40h	; '@'   ; Integer Subtraction
mov	ax, dx
jns	short loc_1BD4C	; Jump if Not Sign (SF=0)

neg	dx		; Two's Complement Negation


loc_1BD4C:		; Add
add	si, dx
cmp	si, di		; Compare Two Operands
jnb	short locret_1BDBA ; Jump if Not Below (CF=0)

push	ax
lodsb			; Load String
xor	ah, ah		; Logical Exclusive OR
or	bx, bx		; Logical Inclusive OR
js	short loc_1BD5C	; Jump if Sign (SF=1)

neg	ax		; Two's Complement Negation


loc_1BD5C:
mov	si, 8C3Bh
add	si, ax		; Add
add	si, ax		; Add
lodsw			; Load String
push	ax
mov	si, 593Ah
cbw			; AL ->	AX (with sign)
mov	bp, ax
or	ax, ax		; Logical Inclusive OR
jns	short loc_1BD71	; Jump if Not Sign (SF=0)

neg	bp		; Two's Complement Negation


loc_1BD71:
mov	ax, 0C8h ; '�'
mul	dx		; Unsigned Multiplication of AL	or AX
add	si, ax		; Add
mov	bl, [bp+si]
mov	al, [bp+si+64h]
xor	ah, ah		; Logical Exclusive OR
xor	bh, bh		; Logical Exclusive OR
mov	di, bx
add	di, di		; Add
add	di, di		; Add
mov	cx, [di+494Ah]
pop	dx
or	dh, dh		; Logical Inclusive OR
jns	short loc_1BD92	; Jump if Not Sign (SF=0)

neg	bx		; Two's Complement Negation


loc_1BD92:		; Logical Inclusive OR
or	dl, dl
jns	short loc_1BD9A	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation
add	ax, cx		; Add


loc_1BD9A:		; Add
add	cx, cx
mov	dx, [di+494Ch]
pop	di
or	di, di		; Logical Inclusive OR
jns	short loc_1BDA7	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_1BDA7:		; Add
add	dx, ax
jns	short loc_1BDAD	; Jump if Not Sign (SF=0)

add	dx, cx		; Add


loc_1BDAD:		; Compare Two Operands
cmp	dx, cx
jb	short loc_1BDB3	; Jump if Below	(CF=1)

sub	dx, cx		; Integer Subtraction


loc_1BDB3:		; Logical Exclusive OR
xor	ax, ax
div	cx		; Unsigned Divide
sar	bx, 1		; Shift	Arithmetic Right
stc			; Set Carry Flag


locret_1BDBA:		; Return Near from Procedure
retn

sub_1BD25 endp




sub_1BDBB proc near
cmp	word ptr ds:0DD0Fh, 0 ;	Compare	Two Operands
jz	short locret_1BDF9 ; Jump if Zero (ZF=1)

call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	sub_1BDFA	; Call Procedure

call	sub_1BED7	; Call Procedure

mov	ax, ds:2
and	ax, 0FFF0h	; Logical AND
mov	ds:115Ch, ax
call	sub_1D075	; Call Procedure

mov	si, 2494h
call	sub_1D1A6	; Call Procedure

mov	si, 0DD11h
mov	di, 0DD17h
push	ds
pop	es
mov	cx, 6


loc_1BDEB:		; Compare Strings
cmpsb
loopne	loc_1BDEB	; Loop while rCX != 0 and ZF=0

jnz	short locret_1BDF9 ; Jump if Not Zero (ZF=0)

dec	byte ptr [di-1]	; Decrement by 1
inc	cx		; Increment by 1
loop	loc_1BDEB	; Loop while CX	!= 0

call	_sub_1DBEC_draw_mouse ;	Call Procedure


locret_1BDF9:		; Return Near from Procedure
retn

sub_1BDBB endp




sub_1BDFA proc near
mov	si, 0C2h ; '�'
call	sub_11AD1	; Call Procedure

inc	ax		; Increment by 1
call	sub_1E2DB	; Call Procedure

call	sub_1BFA7	; Call Procedure

mov	al, ds:29h
xor	ah, ah		; Logical Exclusive OR
shr	ax, 1		; Shift	Logical	Right
mov	si, 0C3h ; '�'
call	sub_1E2DB	; Call Procedure

call	sub_1D068	; Call Procedure

mov	si, 2482h
jmp	sub_1D1A6	; Jump

sub_1BDFA endp




sub_1BE1D proc near
mov	ax, 1
call	_sub_1C13E_open_sprite_sheet ; RES_FRESK_HSQ

mov	si, offset unk_219B6
call	sub_1C21B	; Call Procedure

call	sub_1BED7	; Call Procedure

call	sub_1BDFA	; Call Procedure

mov	si, 0DD17h
xor	ax, ax		; Logical Exclusive OR
mov	[si], ax
mov	[si+2],	ax
mov	[si+4],	ax
mov	ax, ds:2
and	ax, 0FFF0h	; Logical AND
mov	ds:115Ch, ax
call	sub_1D075	; Call Procedure

mov	si, 2494h
call	sub_1D1A6	; Call Procedure

mov	si, 0BE57h
mov	bp, 0Ch
call	sub_1DA25	; Call Procedure

call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

mov	si, 1470h
call	sub_1DB74	; Call Procedure

call	_sub_1C137_load_icons_sprites ;	Call Procedure

mov	si, 0DD11h
xor	bp, bp		; Logical Exclusive OR


loc_1BE68:
mov	cl, [si]
sub	cl, [si+6]	; Integer Subtraction
jz	short loc_1BECD	; Jump if Zero (ZF=1)

mov	al, 1
jnb	short loc_1BE75	; Jump if Not Below (CF=0)

neg	al		; Two's Complement Negation


loc_1BE75:		; Add
add	[si+6],	al
mov	al, [si+6]
cmp	al, 1Eh		; Compare Two Operands
jb	short loc_1BE81	; Jump if Below	(CF=1)

mov	al, 1Eh


loc_1BE81:
mov	bx, bp
shl	bx, 1		; Shift	Logical	Left
shl	bx, 1		; Shift	Logical	Left
mov	dx, [bx+24EEh]
mov	bx, [bx+24F0h]
xor	ah, ah		; Logical Exclusive OR
sub	bx, ax		; Integer Subtraction
push	si
push	bp
mov	ax, 37h	; '7'
shr	bp, 1		; Shift	Logical	Right
adc	ax, 0		; Add with Carry
call	sub_1C2FD	; Call Procedure

sub	bx, 0Ah		; Integer Subtraction
mov	ax, 39h	; '9'
call	sub_1C2FD	; Call Procedure

pop	bp
pop	si
mov	al, [si]
cmp	al, [si+6]	; Compare Two Operands
jnz	short loc_1BECD	; Jump if Not Zero (ZF=0)

test	bp, 1		; Logical Compare
mov	ax, 3Fh	; '?'
jz	short loc_1BEBD	; Jump if Zero (ZF=1)

mov	al, 25h	; '%'


loc_1BEBD:
mov	ds:0DBE4h, ax
add	dx, 4		; Add
call	sub_1D04E	; Call Procedure

mov	al, [bp+116Ah]
call	sub_1D12F	; Call Procedure


loc_1BECD:		; Increment by 1
inc	si
inc	bp		; Increment by 1
cmp	bp, 6		; Compare Two Operands
jb	short loc_1BE68	; Jump if Below	(CF=1)

jmp	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Jump

sub_1BE1D endp




sub_1BED7 proc near
mov	ax, ds:2
and	ax, 0FFF0h	; Logical AND
mov	ds:115Ch, ax
call	sub_1C02E	; Call Procedure

call	sub_1BF26	; Call Procedure

push	ds
pop	es
mov	di, 0DD11h
mov	ax, ds:0A4h
shr	ax, 1		; Shift	Logical	Right
inc	ax		; Increment by 1
stosb			; Store	String
mov	ax, ds:0A2h
shr	ax, 1		; Shift	Logical	Right
inc	ax		; Increment by 1
stosb			; Store	String
mov	ax, ds:0A8h
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
inc	al		; Increment by 1
stosb			; Store	String
mov	ax, ds:0A6h
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
inc	al		; Increment by 1
stosb			; Store	String
mov	ax, ds:0ACh
mov	al, ah
inc	al		; Increment by 1
stosb			; Store	String
mov	ax, ds:0AAh
mov	al, ah
inc	al		; Increment by 1
stosb			; Store	String
retn			; Return Near from Procedure

sub_1BED7 endp




sub_1BF26 proc near
mov	di, 115Eh
mov	bp, 116Ah
mov	si, 0C4h ; '�'
call	sub_1CF70	; Call Procedure

mov	ax, ds:0A4h
call	sub_1BF73	; Call Procedure

mov	ax, ds:0A2h
call	sub_1BF73	; Call Procedure

mov	ax, ds:0A8h
call	sub_1BF61	; Call Procedure

mov	ax, ds:0A6h
call	sub_1BF61	; Call Procedure

mov	ax, ds:0ACh
call	sub_1BF61	; Call Procedure

mov	ax, ds:0AAh
jmp	short sub_1BF61	; Jump

sub_1BF26 endp

; ���������������������������������������������������������������������������
push	di
push	ax
call	sub_1D03C	; Call Procedure

pop	ax
push	ax
call	sub_1E31C	; Call Procedure

jmp	short loc_1BF7D	; Jump




sub_1BF61 proc near
push	di
push	ax
call	sub_1D03C	; Call Procedure

dec	si		; Decrement by 1
mov	byte ptr es:[si], 30h ;	'0'
pop	ax
push	ax
call	sub_1E31C	; Call Procedure

inc	si		; Increment by 1
jmp	short loc_1BF7D	; Jump

sub_1BF61 endp




sub_1BF73 proc near
push	di
push	ax
call	sub_1D03C	; Call Procedure

pop	ax
push	ax
call	sub_1E2E3	; Call Procedure


loc_1BF7D:
pop	ax
pop	di
mov	dx, ax
xchg	ax, [di]	; Exchange Register/Memory with	Register
cmp	dx, ax		; Compare Two Operands
mov	al, 3
jnz	short loc_1BF99	; Jump if Not Zero (ZF=0)

mov	ax, ds:2
and	ax, 0FFF0h	; Logical AND
cmp	ds:115Ch, ax	; Compare Two Operands
jz	short loc_1BFA2	; Jump if Zero (ZF=1)

mov	al, 3
jmp	short loc_1BF9F	; Jump

; ���������������������������������������������������������������������������

loc_1BF99:
mov	al, 2
jb	short loc_1BF9F	; Jump if Below	(CF=1)

dec	al		; Decrement by 1


loc_1BF9F:
mov	[bp+0],	al


loc_1BFA2:		; Add
add	di, 2
inc	bp		; Increment by 1
retn			; Return Near from Procedure

sub_1BF73 endp




sub_1BFA7 proc near
mov	bl, ds:_byte_2C39B_language_setting
xor	bh, bh		; Logical Exclusive OR
shl	bx, 1		; Shift	Logical	Left
shl	bx, 1		; Shift	Logical	Left
shl	bx, 1		; Shift	Logical	Left
add	bx, 251Ah	; Add
mov	ax, es:[si-2]
xchg	al, ah		; Exchange Register/Memory with	Register
and	al, 0Fh		; Logical AND
cmp	ah, 31h	; '1'   ; Compare Two Operands
jz	short loc_1BFDD	; Jump if Zero (ZF=1)

cmp	al, 4		; Compare Two Operands
jnb	short loc_1BFDD	; Jump if Not Below (CF=0)

cmp	al, 1		; Compare Two Operands
jnz	short loc_1BFD7	; Jump if Not Zero (ZF=0)

cmp	bx, 2522h	; Compare Two Operands
jnz	short loc_1BFD7	; Jump if Not Zero (ZF=0)

cmp	ah, 20h	; ' '   ; Compare Two Operands
jnz	short loc_1BFDD	; Jump if Not Zero (ZF=0)


loc_1BFD7:		; Logical Exclusive OR
xor	ah, ah
shl	ax, 1		; Shift	Logical	Left
add	bx, ax		; Add


loc_1BFDD:
mov	ax, [bx]
mov	es:[si], ax
retn			; Return Near from Procedure

sub_1BFA7 endp




_sub_1BFE3_map_func proc near
push	ds
xor	bx, bx		; Logical Exclusive OR
xor	dx, dx		; Logical Exclusive OR
mov	cx, RES_MAP_SIZE
xor	si, si		; Logical Exclusive OR
mov	ds, word ptr ds:0DD00h


loc_1BFF1:		; Load String
lodsb
and	al, 30h		; Logical AND
jz	short loc_1BFFC	; Jump if Zero (ZF=1)

inc	dx		; Increment by 1
cmp	al, 30h	; '0'   ; Compare Two Operands
jz	short loc_1BFFC	; Jump if Zero (ZF=1)

inc	bx		; Increment by 1


loc_1BFFC:		; Loop while CX	!= 0
loop	loc_1BFF1


loc_1BFFE:		; Integer Subtraction
sub	dx, bx
xor	ax, ax		; Logical Exclusive OR
sub	si, 188h	; Integer Subtraction
inc	si		; Increment by 1
div	si		; Unsigned Divide
mov	dx, 64h	; 'd'
mul	dx		; Unsigned Multiplication of AL	or AX
add	ax, ax		; Add
adc	dx, 0		; Add with Carry
xchg	dx, bx		; Exchange Register/Memory with	Register
xor	ax, ax		; Logical Exclusive OR
div	si		; Unsigned Divide
mov	dx, 64h	; 'd'
mul	dx		; Unsigned Multiplication of AL	or AX
add	ax, ax		; Add
adc	dx, 0		; Add with Carry
inc	dx		; Increment by 1
pop	ds
mov	ds:0A2h, dx
mov	ds:0A4h, bx
retn			; Return Near from Procedure

_sub_1BFE3_map_func endp




sub_1C02E proc near
call	_sub_1BFE3_map_func ; Call Procedure

mov	ax, ds:0A0h
add	ax, ds:1172h	; Add
sub	ax, ds:1170h	; Integer Subtraction
jnb	short loc_1C040	; Jump if Not Below (CF=0)

xor	ax, ax		; Logical Exclusive OR


loc_1C040:		; Compare Two Operands
cmp	ax, ds:0A6h
jb	short loc_1C049	; Jump if Below	(CF=1)

mov	ds:0A6h, ax


loc_1C049:		; Logical Exclusive OR
xor	ax, ax
mov	ds:0AAh, ax
mov	ds:0ACh, ax
mov	si, 8AAh


loc_1C054:
mov	al, [si+1Ah]
test	byte ptr [si+3], 20h ; Logical Compare
jnz	short loc_1C073	; Jump if Not Zero (ZF=0)

test	byte ptr [si+10h], 80h ; Logical Compare
jz	short loc_1C069	; Jump if Zero (ZF=1)

add	ds:0ACh, ax	; Add
jmp	short loc_1C073	; Jump

; ���������������������������������������������������������������������������

loc_1C069:		; Logical Compare
test	byte ptr [si+3], 80h
jnz	short loc_1C073	; Jump if Not Zero (ZF=0)

add	ds:0AAh, ax	; Add


loc_1C073:		; Add
add	si, 1Bh
cmp	byte ptr [si], 0 ; Compare Two Operands
jnz	short loc_1C054	; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

sub_1C02E endp




_sub_1C07C_set_frontbuffer_as_active_framebuffer proc near
push	ds:_word_2D086_framebuffer_front
pop	ds:_word_2D08A_framebuffer_active
retn			; Return Near from Procedure

_sub_1C07C_set_frontbuffer_as_active_framebuffer endp




_sub_1C085_set_backbuffer_as_frame_buffer proc near
push	ds:_word_2D0E2_framebuffer_back
pop	ds:_word_2D08A_framebuffer_active
retn			; Return Near from Procedure

_sub_1C085_set_backbuffer_as_frame_buffer endp




_sub_1C08E_set_screen_as_active_framebuffer proc near
push	ds:_word_2D088_vga_base_a000
pop	ds:_word_2D08A_framebuffer_active
retn			; Return Near from Procedure

_sub_1C08E_set_screen_as_active_framebuffer endp




sub_1C097 proc near
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

push	ds:_word_2D088_vga_base_a000
push	ds:_word_2D086_framebuffer_front
pop	ds:_word_2D088_vga_base_a000
call	bp		; Indirect Call	Near Procedure
pop	ds:_word_2D088_vga_base_a000
retn			; Return Near from Procedure

sub_1C097 endp




_sub_1C0AD_gfx_clear_frame_buffer proc near
mov	es, ds:_word_2D08A_framebuffer_active
call	ds:_ptr_22D65_gfx_vtable_func_08 ; Indirect Call Far Procedure
retn			; Return Near from Procedure

_sub_1C0AD_gfx_clear_frame_buffer endp




sub_1C0B6 proc near
call	sub_1D41B	; Call Procedure

cmp	bp, 2012h	; Compare Two Operands
jz	short locret_1C0D4 ; Jump if Zero (ZF=1)

cmp	bp, 201Ah	; Compare Two Operands
jz	short locret_1C0D4 ; Jump if Zero (ZF=1)

mov	al, 0Ch
call	sub_1C0D5	; Call Procedure

cmp	cx, 18h		; Compare Two Operands
jnz	short locret_1C0D4 ; Jump if Not Zero (ZF=0)

mov	al, 4
jmp	_sub_1AB15_audio_start_voc ; Play SN4.VOC

; ���������������������������������������������������������������������������

locret_1C0D4:		; Return Near from Procedure
retn

sub_1C0B6 endp




sub_1C0D5 proc near
push	ds
mov	es, ds:_word_2D088_vga_base_a000
mov	ds, ds:_word_2D086_framebuffer_front
mov	bp, offset _word_2C32A_time_passed
call	ss:_ptr_22D65_gfx_vtable_func_30 ; Indirect Call Far Procedure
pop	ds
retn			; Return Near from Procedure

sub_1C0D5 endp




sub_1C0E8 proc near
mov	es, ds:_word_2D088_vga_base_a000
mov	bp, offset _word_2C32A_time_passed
call	ds:_ptr_22D65_gfx_vtable_func_30 ; Indirect Call Far Procedure
retn			; Return Near from Procedure

sub_1C0E8 endp




sub_1C0F4 proc near
mov	ax, ds:_word_2D086_framebuffer_front
cmp	ax, ds:_word_2D088_vga_base_a000 ; Compare Two Operands
jz	short locret_1C101 ; Jump if Zero (ZF=1)

call	ds:_ptr_22D65_gfx_vtable_func_32 ; Indirect Call Far Procedure


locret_1C101:		; Return Near from Procedure
retn

sub_1C0F4 endp




sub_1C102 proc near
call	ds:_ptr_22D65_gfx_vtable_func_41_copy_pal2_to_pal1 ; Indirect Call Far Procedure
mov	al, offset _1003A_exit_with_error

sub_1C102 endp




_sub_1C108_transition proc near
mov	ds:_byte_2D196_in_transition?, 80h ; '�'
push	ax
push	dx
call	sub_1C097	; Call Procedure

pop	dx
pop	ax
push	ds
mov	si, ds:_word_2D08E_framebuffer2_seg
mov	es, ds:_word_2D088_vga_base_a000
mov	ds, ds:_word_2D086_framebuffer_front
mov	bp, offset _word_2C32A_time_passed
call	ss:_ptr_22D65_gfx_vtable_func_27 ; Indirect Call Far Procedure
pop	ds
call	_sub_1C4CD_gfx_copy_framebuf_to_screen ; Call Procedure

call	ds:_ptr_22D65_gfx_vtable_func_32 ; Indirect Call Far Procedure
mov	ds:_byte_2D196_in_transition?, 0
retn			; Return Near from Procedure

_sub_1C108_transition endp




_sub_1C137_load_icons_sprites proc near
xor	ax, ax		; Logical Exclusive OR
jmp	short _sub_1C13E_open_sprite_sheet ; RES_ICONES_HSQ

_sub_1C137_load_icons_sprites endp

; ���������������������������������������������������������������������������
off_1C13B dw offset loc_125B6+2
align 2



_sub_1C13E_open_sprite_sheet proc near
or	ax, ax		; Logical Inclusive OR
js	short locret_1C1A9 ; Jump if Sign (SF=1)

push	bx
mov	bx, ax
xchg	bx, ds:_word_21C34_resource_id ; Exchange Register/Memory with Register
cmp	ax, bx		; Compare Two Operands
jz	short loc_1C1A8	; Jump if Zero (ZF=1)

push	si
push	di
shl	bx, 1		; Shift	Logical	Left
js	short loc_1C15B	; test previous	resource id, -1	if none

mov	si, ds:_word_2C32A_time_passed+1
mov	ds:_word_2CF3C_open_res_info[bx], si


loc_1C15B:
mov	si, ax
shl	si, 1		; Shift	Logical	Left
shl	si, 1		; Shift	Logical	Left
add	si, offset unk_2CCF4 ; Add
les	di, [si]	; Load Full Pointer to ES:xx
mov	bx, es
or	bx, bx		; Logical Inclusive OR
jz	short loc_1C177	; Jump if Zero (ZF=1)

cmp	di, 2		; Compare Two Operands
jbe	short loc_1C19E	; Jump if Below	or Equal (CF=1 | ZF=1)

call	sub_1C1AA	; Call Procedure

jmp	short loc_1C19E	; Jump

; ���������������������������������������������������������������������������

loc_1C177:
push	cx
push	dx
push	bp
push	si
mov	si, ax
call	_sub_1F0B9_open_resource_by_index_si ; reads and decompresses to es:di

cmp	word ptr es:[di], 2 ; test first word of file
jbe	short loc_1C189	; Jump if Below	or Equal (CF=1 | ZF=1)

call	sub_1C1AA	; Call Procedure


loc_1C189:
pop	si
mov	di, es:[di]
sub	cx, di		; Integer Subtraction
mov	[si], di
mov	word ptr [si+2], es
mov	ax, ds:_word_21C34_resource_id
call	ds:_ptr_22D65_gfx_vtable_func_20 ; Indirect Call Far Procedure
pop	bp
pop	dx
pop	cx


loc_1C19E:
mov	word ptr ds:_dword_2D060_sprite_sheet_resource_ptr, di
mov	word ptr ds:_dword_2D060_sprite_sheet_resource_ptr+2, es
pop	di
pop	si


loc_1C1A8:
pop	bx


locret_1C1A9:		; Return Near from Procedure
retn

_sub_1C13E_open_sprite_sheet endp




sub_1C1AA proc near
mov	ax, ds:_word_21C34_resource_id
mov	ah, al
xchg	al, ds:byte_2D064 ; Exchange Register/Memory with Register
cmp	al, ah		; Compare Two Operands
jz	short locret_1C1A9 ; Jump if Zero (ZF=1)

mov	si, 2

sub_1C1AA endp




_sub_1C1BA_hnm_apply_palette proc near
push	cx
push	dx
push	di


loc_1C1BD:		; Load String
lods	word ptr es:[si]
cmp	ax, 256		; Compare Two Operands
jnz	short loc_1C1C9	; Jump if Not Zero (ZF=0)

add	si, 3		; Add
jmp	short loc_1C1BD	; Jump

; ���������������������������������������������������������������������������

loc_1C1C9:
mov	bx, ax
inc	ax		; Increment by 1
jz	short loc_1C1F0	; Jump if Zero (ZF=1)

mov	cl, bh
xor	bh, bh		; Logical Exclusive OR
and	cx, 0FFh	; Logical AND
jnz	short loc_1C1DA	; Jump if Not Zero (ZF=0)

inc	ch		; Increment by 1


loc_1C1DA:
mov	ax, bx
add	bx, bx		; Add
add	bx, ax		; Add
mov	ax, cx
add	cx, cx		; Add
add	cx, ax		; Add
mov	dx, si
add	si, cx		; Add
call	ds:_ptr_22D65_gfx_vtable_func_02 ; Indirect Call Far Procedure
jmp	short loc_1C1BD	; Jump

; ���������������������������������������������������������������������������

loc_1C1F0:
pop	di
pop	dx
pop	cx
retn			; Return Near from Procedure

_sub_1C1BA_hnm_apply_palette endp




sub_1C1F4 proc near
push	bx
les	si, ds:_dword_2D060_sprite_sheet_resource_ptr ;	Load Full Pointer to ES:xx
mov	bx, ax
shl	bx, 1		; Shift	Logical	Left
add	si, es:[bx+si]	; Add
pop	bx
retn			; Return Near from Procedure

sub_1C1F4 endp




sub_1C202 proc near
push	ax
push	si
call	sub_1C1F4	; Call Procedure

lods	word ptr es:[si] ; Load	String
and	ah, 0Fh		; Logical AND
shr	ax, 1		; Shift	Logical	Right
sub	dx, ax		; Integer Subtraction
lods	byte ptr es:[si] ; Load	String
shr	al, 1		; Shift	Logical	Right
cbw			; AL ->	AX (with sign)
sub	bx, ax		; Integer Subtraction
pop	si
pop	ax
retn			; Return Near from Procedure

sub_1C202 endp

; ���������������������������������������������������������������������������
_byte_1C21A_pal_offset db 0



sub_1C21B proc near
lodsw			; Load String
cmp	ax, 0FFFFh	; Compare Two Operands
jz	short locret_1C26A ; Jump if Zero (ZF=1)

mov	bx, ax
lodsw			; Load String
mov	dx, ax
lodsw			; Load String
xchg	ax, bx		; Exchange Register/Memory with	Register
push	si
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

pop	si
jmp	short sub_1C21B	; Jump

sub_1C21B endp



; dx = sprite x
; bx = sprite y
; cs:_byte_1C21A_pal_offset
; ax = flags:7 | sprite_index:9

_sub_1C22F_draw_sprite proc near
mov	es, ds:_word_2D08A_framebuffer_active
lds	si, ds:_dword_2D060_sprite_sheet_resource_ptr ;	Load Full Pointer to DS:xx
mov	bp, ax
and	bp, 1FFh	; Logical AND
shl	bp, 1		; Shift	Logical	Left
add	si, ds:[bp+si]	; ds:si	points to sprite
mov	cx, ax
push	ax
lodsw			; Load String
and	ch, 60h		; Logical AND
or	ah, ch		; Logical Inclusive OR
mov	di, ax
lodsw			; Load String
mov	cx, ax
cmp	cs:_byte_1C21A_pal_offset, 0 ; Compare Two Operands
jz	short loc_1C25D	; Jump if Zero (ZF=1)

mov	ch, cs:_byte_1C21A_pal_offset


loc_1C25D:
pop	ax
and	ax, 1C00h	; Logical AND
jnz	short loc_1C26B	; Jump if Not Zero (ZF=0)

call	ss:_ptr_22D65_gfx_vtable_func_05_blit ;	Indirect Call Far Procedure
push	ss
pop	ds

assume ds:seg001

locret_1C26A:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1C26B:		; Exchange Register/Memory with	Register
xchg	ah, al
mov	bp, ax
shr	bp, 1		; Shift	Logical	Right
mov	bp, word_21C24[bp]
mov	ax, di
and	ax, 1FFh	; Logical AND
push	dx
xchg	ah, al		; Exchange Register/Memory with	Register
xor	dx, dx		; Logical Exclusive OR
div	bp		; Unsigned Divide
pop	dx
push	ax
mov	ax, cx
xor	ah, ah		; Logical Exclusive OR
push	dx
xchg	ah, al		; Exchange Register/Memory with	Register
xor	dx, dx		; Logical Exclusive OR
div	bp		; Unsigned Divide
pop	dx
mov	cl, al
pop	ax
or	di, di		; Logical Inclusive OR
jns	short loc_1C299	; Jump if Not Sign (SF=0)

call	sub_1C2A1	; Call Procedure


loc_1C299:		; Indirect Call	Far Procedure
call	ss:_ptr_22D65_gfx_vtable_func_35
push	ss
pop	ds
retn			; Return Near from Procedure

_sub_1C22F_draw_sprite endp




sub_1C2A1 proc near
push	ax
push	bx
push	cx
push	di
push	es
push	bp
push	ss
pop	es
assume es:seg001
mov	bp, di
mov	di, offset RESOURCE_GLOBDATA
and	bp, 1FFh	; Logical AND
add	bp, 3		; Add
shr	bp, 1		; Shift	Logical	Right
shr	bp, 1		; Shift	Logical	Right
shl	bp, 1		; Shift	Logical	Left
mov	cx, [si-2]
xor	ch, ch		; Logical Exclusive OR


loc_1C2C0:
push	cx
mov	bx, bp


loc_1C2C3:		; Load String
lodsb
test	al, 80h		; Logical Compare
jnz	short loc_1C2D6	; Jump if Not Zero (ZF=0)

mov	cl, 1
add	cl, al		; Add
xor	ch, ch		; Logical Exclusive OR
sub	bx, cx		; Integer Subtraction
rep movsb		; Move Byte(s) from String to String
jnz	short loc_1C2C3	; Jump if Not Zero (ZF=0)

jmp	short loc_1C2E3	; Jump

; ���������������������������������������������������������������������������

loc_1C2D6:
mov	cl, 1
sub	cl, al		; Integer Subtraction
xor	ch, ch		; Logical Exclusive OR
sub	bx, cx		; Integer Subtraction
lodsb			; Load String
rep stosb		; Store	String
jnz	short loc_1C2C3	; Jump if Not Zero (ZF=0)


loc_1C2E3:
pop	cx
loop	loc_1C2C0	; Loop while CX	!= 0

mov	si, offset RESOURCE_GLOBDATA
push	ss
pop	ds
pop	bp
pop	es
assume es:nothing
pop	di
pop	cx
pop	bx
pop	ax
retn			; Return Near from Procedure

sub_1C2A1 endp




sub_1C2F2 proc near
xor	ah, ah		; Logical Exclusive OR
call	_sub_1C13E_open_sprite_sheet ; Call Procedure

xor	ax, ax		; Logical Exclusive OR
xor	bx, bx		; Logical Exclusive OR
xor	dx, dx		; Logical Exclusive OR

sub_1C2F2 endp




sub_1C2FD proc near
push	bx
push	dx
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

pop	dx
pop	bx
retn			; Return Near from Procedure

sub_1C2FD endp




sub_1C305 proc near
push	bx
push	dx
call	sub_1C30D	; Call Procedure

pop	dx
pop	bx
retn			; Return Near from Procedure

sub_1C305 endp




sub_1C30D proc near
mov	es, _word_2D08A_framebuffer_active
lds	si, _dword_2D060_sprite_sheet_resource_ptr ; Load Full Pointer to DS:xx
assume ds:nothing
mov	bp, ax
shl	bp, 1		; Shift	Logical	Left
add	si, ds:[bp+si]	; Add
lodsw			; Load String
mov	di, ax
lodsw			; Load String
xor	ah, ah		; Logical Exclusive OR
mov	cx, ax
mov	bp, 0D834h
call	ss:_ptr_22D65_gfx_vtable_func_06 ; Indirect Call Far Procedure
push	ss
pop	ds

assume ds:seg001

locret_1C32E:		; Return Near from Procedure
retn

sub_1C30D endp




sub_1C32F proc near
lodsw			; Load String
cmp	ax, 0FFFFh	; Compare Two Operands
jz	short locret_1C32E ; Jump if Zero (ZF=1)

mov	bx, ax
lodsw			; Load String
mov	dx, ax
lodsw			; Load String
xchg	ax, bx		; Exchange Register/Memory with	Register
push	si
call	sub_1C30D	; Call Procedure

pop	si
jmp	short sub_1C32F	; Jump

sub_1C32F endp




sub_1C343 proc near
mov	es, _word_2D08A_framebuffer_active
lds	si, _dword_2D060_sprite_sheet_resource_ptr ; Load Full Pointer to DS:xx
assume ds:nothing
mov	bp, ax
shl	bp, 1		; Shift	Logical	Left
add	si, ds:[bp+si]	; Add
lodsw			; Load String
mov	di, ax
and	ah, 0Fh		; Logical AND
shr	ax, 1		; Shift	Logical	Right
sub	dx, ax		; Integer Subtraction
lodsw			; Load String
xor	ah, ah		; Logical Exclusive OR
mov	cx, ax
shr	ax, 1		; Shift	Logical	Right
sub	bx, ax		; Integer Subtraction
mov	bp, 0D834h
call	ss:_ptr_22D65_gfx_vtable_func_06 ; Indirect Call Far Procedure
push	ss
pop	ds
assume ds:seg001
retn			; Return Near from Procedure

sub_1C343 endp




sub_1C370 proc near
push	ds
push	ds
push	ax
push	si
call	_ptr_22D65_gfx_vtable_func_09 ;	Indirect Call Far Procedure
pop	si
pop	ax
pop	ds
assume ds:nothing
mov	dx, [si]
push	dx
mov	bx, [si+2]
push	bx
mov	cx, [si+4]
sub	cx, dx		; Integer Subtraction
push	cx
mov	cx, [si+6]
sub	cx, bx		; Integer Subtraction
push	cx
lds	si, ds:0DBB0h	; Load Full Pointer to DS:xx
mov	bp, ax
shl	bp, 1		; Shift	Logical	Left
add	si, ds:[bp+si]	; Add
lodsw			; Load String
mov	di, ax
and	ax, 1FFh	; Logical AND
push	ax
lodsw			; Load String
mov	cx, ax
xor	ah, ah		; Logical Exclusive OR
push	ax
call	ss:_ptr_22D65_gfx_vtable_func_05_blit ;	Indirect Call Far Procedure
push	es
pop	ds
mov	bp, sp
mov	dx, [bp+0Ah]
mov	bx, [bp+8]
push	bx
push	dx
push	word ptr [bp+0]
push	word ptr [bp+2]
push	bx
push	dx
mov	bp, sp
mov	dx, [bp+12h]
sub	dx, [bp+4]	; Integer Subtraction


loc_1C3C7:
mov	ax, [bp+4]
add	[bp+8],	ax	; Add
sub	dx, ax		; Integer Subtraction
jnb	short loc_1C3D4	; Jump if Not Below (CF=0)

add	[bp+4],	dx	; Add


loc_1C3D4:
push	dx
call	ss:_ptr_22D65_gfx_vtable_func_31 ; Indirect Call Far Procedure
pop	dx
cmp	dx, 0		; Compare Two Operands
jg	short loc_1C3C7	; Jump if Greater (ZF=0	& SF=OF)

mov	ax, [bp+12h]
mov	[bp+4],	ax
mov	ax, [bp+0]
mov	[bp+8],	ax
mov	bx, [bp+10h]
sub	bx, [bp+6]	; Integer Subtraction
jz	short loc_1C40D	; Jump if Zero (ZF=1)


loc_1C3F4:
mov	ax, [bp+6]
add	[bp+0Ah], ax	; Add
sub	bx, ax		; Integer Subtraction
jnb	short loc_1C401	; Jump if Not Below (CF=0)

add	[bp+6],	bx	; Add


loc_1C401:
push	bx
call	ss:_ptr_22D65_gfx_vtable_func_31 ; Indirect Call Far Procedure
pop	bx
cmp	bx, 0		; Compare Two Operands
jg	short loc_1C3F4	; Jump if Greater (ZF=0	& SF=OF)


loc_1C40D:		; Add
add	sp, 18h
pop	ds
retn			; Return Near from Procedure

sub_1C370 endp




sub_1C412 proc near
push	ds
mov	es, ds:_word_2D08E_framebuffer2_seg
mov	ds, ds:_word_2D08A_framebuffer_active
call	ss:_ptr_22D65_gfx_vtable_func_11_copy_framebuf ; Indirect Call Far Procedure
pop	ds
retn			; Return Near from Procedure

sub_1C412 endp




sub_1C422 proc near
mov	es, ds:_word_2D08A_framebuffer_active
push	ds
mov	ds, ds:_word_2D08E_framebuffer2_seg
call	ss:_ptr_22D65_gfx_vtable_func_13_copy_framebuf ; Indirect Call Far Procedure
pop	ds
retn			; Return Near from Procedure

sub_1C422 endp




sub_1C432 proc near
mov	si, 1470h
mov	es, ds:_word_2D08A_framebuffer_active
call	dword ptr ds:38D9h ; Indirect Call Far Procedure
retn			; Return Near from Procedure

sub_1C432 endp




sub_1C43E proc near
mov	si, 1470h
jmp	short sub_1C446	; Jump

sub_1C43E endp




sub_1C443 proc near
mov	si, offset unk_2CCE4

sub_1C443 endp




sub_1C446 proc near
mov	ax, ds:_word_2D08E_framebuffer2_seg


loc_1C449:
push	cx
mov	cx, ax
mov	dx, [si]
mov	bx, [si+2]
mov	bp, [si+4]
mov	ax, [si+6]
sub	bp, dx		; Integer Subtraction
jbe	short loc_1C46D	; Jump if Below	or Equal (CF=1 | ZF=1)

sub	ax, bx		; Integer Subtraction
jbe	short loc_1C46D	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	es, ds:_word_2D086_framebuffer_front
push	si
push	ds
mov	si, cx
call	ds:_ptr_22D65_gfx_vtable_func_14 ; Indirect Call Far Procedure
pop	ds
pop	si


loc_1C46D:
pop	cx
retn			; Return Near from Procedure

sub_1C446 endp




sub_1C46F proc near
mov	ax, ds:_word_2D0E2_framebuffer_back
jmp	short loc_1C449	; Jump

sub_1C46F endp




sub_1C474 proc near
mov	si, offset unk_20920

sub_1C474 endp




_sub_1C477_gfx_copy_rect_at_si proc near
mov	dx, [si]
mov	bx, [si+2]
mov	bp, [si+4]
mov	ax, [si+6]
sub	bp, dx		; Integer Subtraction
jbe	short locret_1C499 ; Jump if Below or Equal (CF=1 | ZF=1)

sub	ax, bx		; Integer Subtraction
jbe	short locret_1C499 ; Jump if Below or Equal (CF=1 | ZF=1)

mov	es, ds:_word_2D08E_framebuffer2_seg
push	ds
mov	ds, ds:_word_2D086_framebuffer_front
call	ss:_ptr_22D65_gfx_vtable_func_12_copy_rect ; Indirect Call Far Procedure
pop	ds


locret_1C499:		; Return Near from Procedure
retn

_sub_1C477_gfx_copy_rect_at_si endp




_sub_1C49A_gfx_copy_framebuffer_to_screen proc near
push	ds
mov	es, ds:_word_2D086_framebuffer_front
mov	ds, ds:_word_2D088_vga_base_a000
call	ss:_ptr_22D65_gfx_vtable_func_15_copy_framebuf ; Indirect Call Far Procedure
pop	ds
retn			; Return Near from Procedure

_sub_1C49A_gfx_copy_framebuffer_to_screen endp




_sub_1C4AA_gfx_copy_rect_to_screen proc	near
mov	dx, [si]
mov	bx, [si+2]
mov	bp, [si+4]
mov	ax, [si+6]
sub	bp, dx		; Integer Subtraction
jbe	short locret_1C4CC ; Jump if Below or Equal (CF=1 | ZF=1)

sub	ax, bx		; Integer Subtraction
jbe	short locret_1C4CC ; Jump if Below or Equal (CF=1 | ZF=1)

push	ds
mov	es, ds:_word_2D086_framebuffer_front
mov	ds, ds:_word_2D088_vga_base_a000
call	ss:_ptr_22D65_gfx_vtable_func_16 ; Indirect Call Far Procedure
pop	ds


locret_1C4CC:		; Return Near from Procedure
retn

_sub_1C4AA_gfx_copy_rect_to_screen endp




_sub_1C4CD_gfx_copy_framebuf_to_screen proc near
push	ds
mov	es, ds:_word_2D088_vga_base_a000
mov	ds, ds:_word_2D086_framebuffer_front
call	ss:_ptr_22D65_gfx_vtable_func_15_copy_framebuf ; Indirect Call Far Procedure
pop	ds
retn			; Return Near from Procedure

_sub_1C4CD_gfx_copy_framebuf_to_screen endp




sub_1C4DD proc near
mov	ax, ds:_word_2D0E8_mouse_pos_x
cmp	ax, 98h	; '�'   ; Compare Two Operands
jnb	short loc_1C4E8	; Jump if Not Below (CF=0)

call	_sub_1DBB2_call_restore_cursor ; Call Procedure


loc_1C4E8:
mov	si, 1470h
jmp	short _sub_1C4F0_rect_at_si_to_regs ; Jump

sub_1C4DD endp




sub_1C4ED proc near
mov	si, 0D834h

sub_1C4ED endp




_sub_1C4F0_rect_at_si_to_regs proc near
mov	dx, [si]
mov	bx, [si+2]
mov	bp, [si+4]
mov	ax, [si+6]

_sub_1C4F0_rect_at_si_to_regs endp




sub_1C4FB proc near
cmp	byte ptr ds:227Dh, 0 ; Compare Two Operands
jnz	short sub_1C51E	; Jump if Not Zero (ZF=0)

cmp	ax, 89h	; '�'   ; Compare Two Operands
jl	short sub_1C51E	; Jump if Less (SF!=OF)

cmp	bp, 7Eh	; '~'   ; Compare Two Operands
jl	short sub_1C51E	; Jump if Less (SF!=OF)

cmp	dx, 0C2h ; '�'  ; Compare Two Operands
jge	short sub_1C51E	; Jump if Greater or Equal (SF=OF)

push	ax
push	bx
push	dx
push	bp
call	sub_11797	; Call Procedure

pop	bp
pop	dx
pop	bx
pop	ax

sub_1C4FB endp




sub_1C51E proc near
sub	bp, dx		; Integer Subtraction
jbe	short locret_1C53D ; Jump if Below or Equal (CF=1 | ZF=1)

sub	ax, bx		; Integer Subtraction
jbe	short locret_1C53D ; Jump if Below or Equal (CF=1 | ZF=1)


loc_1C526:		; Compare Two Operands
cmp	word ptr ds:2570h, 1AD6h
jz	short locret_1C53D ; Jump if Zero (ZF=1)

push	ds
mov	es, word ptr ds:0DBD8h
mov	ds, word ptr ds:0DBD6h
call	ss:_ptr_22D65_gfx_vtable_func_16 ; Indirect Call Far Procedure
pop	ds


locret_1C53D:		; Return Near from Procedure
retn

sub_1C51E endp ; sp =  2




sub_1C53E proc near
mov	si, 276Ah
mov	bp, ds:2772h
mov	al, ds:0DBE4h
mov	es, ds:_word_2D08A_framebuffer_active
call	dword ptr ds:3901h ; Indirect Call Far Procedure
retn			; Return Near from Procedure

sub_1C53E endp




sub_1C551 proc near
lodsw			; Load String
mov	dx, ax
lodsw			; Load String
mov	bx, ax
lodsw			; Load String
mov	di, ax
dec	di		; Decrement by 1
lodsw			; Load String
mov	cx, ax
dec	cx		; Decrement by 1
lodsb			; Load String

sub_1C551 endp



; Attributes: bp-based frame

sub_1C560 proc near

arg_2= word ptr	 4
arg_4= word ptr	 6

mov	ds:0DBE4h, al
push	bx
push	cx
push	dx
push	di
mov	cx, bx
call	sub_1C53E	; Call Procedure

mov	bp, sp
mov	cx, [bp+arg_2]
mov	bx, cx
call	sub_1C53E	; Call Procedure

mov	bp, sp
mov	di, dx
mov	bx, [bp+arg_4]
call	sub_1C53E	; Call Procedure

pop	di
mov	dx, di
call	sub_1C53E	; Call Procedure

pop	dx
pop	cx
pop	bx
retn			; Return Near from Procedure

sub_1C560 endp




sub_1C58A proc near
call	near ptr off_1C13B ; Call Procedure

mov	si, 3CBEh
lodsw			; Load String
or	ax, ax		; Logical Inclusive OR
jz	short locret_1C5CE ; Jump if Zero (ZF=1)

mov	ah, 11h
mul	ah		; Unsigned Multiplication of AL	or AX
add	si, ax		; Add
cmp	di, si		; Compare Two Operands
jnb	short locret_1C5CE ; Jump if Not Below (CF=0)

or	byte ptr [di+0Ch], 80h ; Logical Inclusive OR
push	si
push	di
mov	si, di
call	sub_1C6AD	; Call Procedure

pop	di
pop	cx
push	di
lea	si, [di+11h]	; Load Effective Address
sub	cx, si		; Integer Subtraction
jz	short loc_1C5B8	; Jump if Zero (ZF=1)

push	ds
pop	es
rep movsb		; Move Byte(s) from String to String


loc_1C5B8:		; Decrement by 1
dec	word ptr ds:3CBEh
pop	di
mov	si, 4752h
mov	cx, 2


loc_1C5C3:		; Load String
lodsw
cmp	ax, di		; Compare Two Operands
jb	short loc_1C5CC	; Jump if Below	(CF=1)

sub	word ptr [si-2], 11h ; Integer Subtraction


loc_1C5CC:		; Loop while CX	!= 0
loop	loc_1C5C3


locret_1C5CE:		; Return Near from Procedure
retn

sub_1C58A endp




sub_1C5CF proc near
xor	ah, ah		; Logical Exclusive OR
mov	al, [bp+0]
cmp	byte ptr [bp+3], 0 ; Compare Two Operands
jz	short sub_1C60B	; Jump if Zero (ZF=1)

push	bp
call	sub_1C60B	; Call Procedure

pop	bp
mov	[di+0Fh], bp
push	si
mov	si, bp
mov	bx, 0FFFFh


loc_1C5E8:		; Increment by 1
inc	bx
js	short loc_1C609	; Jump if Sign (SF=1)

add	si, 3		; Add
cmp	byte ptr [si], 0 ; Compare Two Operands
jnz	short loc_1C5E8	; Jump if Not Zero (ZF=0)

or	bx, bx		; Logical Inclusive OR
jz	short loc_1C609	; Jump if Zero (ZF=1)


loc_1C5F7:		; Call Procedure
call	sub_1E3DF

mov	bx, ax

loc_1C5FC:		; Shift	Logical	Left
shl	ax, 1
add	ax, bx		; Add
add	bp, ax		; Add
mov	[di+0Dh], bp
or	byte ptr [di+0Ch], 1 ; Logical Inclusive OR


loc_1C609:
pop	si
retn			; Return Near from Procedure

sub_1C5CF endp




sub_1C60B proc near
push	ax
call	near ptr off_1C13B ; Call Procedure

pop	ax
call	sub_1C202	; Call Procedure


loc_1C613:
push	si
mov	di, 3CBEh
mov	bp, ax
mov	ax, [di]
inc	word ptr [di]	; Increment by 1
mov	ah, 11h
mul	ah		; Unsigned Multiplication of AL	or AX
xchg	ax, bp		; Exchange Register/Memory with	Register
lea	di, [bp+di+2]	; Load Effective Address
mov	[di], dx
mov	[di+2],	bx
mov	[di+8],	ax
mov	[di+0Ah], si
mov	byte ptr [di+0Ch], 0
call	sub_1C1F4	; Call Procedure

lods	word ptr es:[si] ; Load	String
and	ah, 0Fh		; Logical AND
add	dx, ax		; Add
add	bl, es:[si]	; Add
adc	bh, 0		; Add with Carry
mov	[di+4],	dx
mov	[di+6],	bx
pop	si
retn			; Return Near from Procedure

sub_1C60B endp

; ���������������������������������������������������������������������������
call	loc_1C613	; Call Procedure

mov	si, di
jmp	short sub_1C6AD	; Jump

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_18308

loc_1C653:		; Call Procedure
call	near ptr off_1C13B

mov	ax, [di+8]
call	sub_1C202	; Call Procedure

sub	dx, [di]	; Integer Subtraction
sub	bx, [di+2]	; Integer Subtraction

; END OF FUNCTION CHUNK	FOR sub_18308



sub_1C661 proc near
call	near ptr off_1C13B ; Call Procedure

mov	si, di
sub	sp, 8		; Integer Subtraction
mov	di, sp
push	ds
pop	es
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
sub	si, 8		; Integer Subtraction
sub	di, 8		; Integer Subtraction
add	[si], dx	; Add
add	[si+2],	bx	; Add
add	[si+4],	dx	; Add
add	[si+6],	bx	; Add
or	dx, dx		; Logical Inclusive OR
js	short loc_1C68E	; Jump if Sign (SF=1)

mov	ax, [si+4]
mov	[di+4],	ax
jmp	short loc_1C692	; Jump

; ���������������������������������������������������������������������������

loc_1C68E:
mov	ax, [si]
mov	[di], ax


loc_1C692:		; Logical Inclusive OR
or	bx, bx
js	short loc_1C69E	; Jump if Sign (SF=1)

mov	ax, [si+6]
mov	[di+6],	ax
jmp	short loc_1C6A4	; Jump

; ���������������������������������������������������������������������������

loc_1C69E:
mov	ax, [si+2]
mov	[di+2],	ax


loc_1C6A4:
mov	si, di
call	sub_1C6AD	; Call Procedure

add	sp, 8		; Add


locret_1C6AC:		; Return Near from Procedure
retn

sub_1C661 endp




sub_1C6AD proc near
call	near ptr off_1C13B ; Call Procedure

cmp	byte ptr ds:0DC46h, 0 ;	Compare	Two Operands
js	short loc_1C6E4	; Jump if Sign (SF=1)

mov	ax, ds:0DC44h
cmp	ax, [si+6]	; Compare Two Operands
jge	short loc_1C6E4	; Jump if Greater or Equal (SF=OF)

add	ax, 10h		; Add
cmp	ax, [si+2]	; Compare Two Operands
jle	short loc_1C6E4	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

mov	ax, ds:0DC42h
cmp	ax, [si+4]	; Compare Two Operands
jge	short loc_1C6E4	; Jump if Greater or Equal (SF=OF)

add	ax, 10h		; Add
mov	bx, [si]
and	bh, 0Fh		; Logical AND
cmp	ax, bx		; Compare Two Operands
jle	short loc_1C6E4	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

mov	ax, 0DBECh
push	ax
push	si
call	_sub_1DBB2_call_restore_cursor ; Call Procedure

pop	si


loc_1C6E4:
mov	ax, ds
mov	es, ax
mov	di, 0D834h
mov	bx, 8
lodsw			; Load String
cmp	ax, [bx+di]	; Compare Two Operands
jge	short loc_1C6F5	; Jump if Greater or Equal (SF=OF)

mov	ax, [bx+di]


loc_1C6F5:		; Store	String
stosw
lodsw			; Load String
cmp	ax, [bx+di]	; Compare Two Operands
jge	short loc_1C6FD	; Jump if Greater or Equal (SF=OF)

mov	ax, [bx+di]


loc_1C6FD:		; Store	String
stosw
lodsw			; Load String
cmp	ax, [bx+di]	; Compare Two Operands
jle	short loc_1C705	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

mov	ax, [bx+di]


loc_1C705:		; Compare Two Operands
cmp	ax, [di-4]
jle	short locret_1C6AC ; Jump if Less or Equal (ZF=1 | SF!=OF)

stosw			; Store	String
lodsw			; Load String
cmp	ax, [bx+di]	; Compare Two Operands
jle	short loc_1C712	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

mov	ax, [bx+di]


loc_1C712:		; Compare Two Operands
cmp	ax, [di-4]
jle	short locret_1C6AC ; Jump if Less or Equal (ZF=1 | SF!=OF)

stosw			; Store	String
call	sub_1C443	; Call Procedure

sub	sp, 200h	; Integer Subtraction
mov	di, sp
mov	cx, ds:3CBEh
jcxz	short loc_1C780	; Jump if CX is	0

mov	si, 0D834h
lodsw			; Load String
mov	dx, ax
lodsw			; Load String
mov	bx, ax
lodsw			; Load String
mov	bp, ax
mov	ax, [si]
mov	si, 3CC0h


loc_1C738:		; Compare Two Operands
cmp	byte ptr [si+0Ch], 0
js	short loc_1C756	; Jump if Sign (SF=1)

cmp	[si], bp	; Compare Two Operands
jge	short loc_1C756	; Jump if Greater or Equal (SF=OF)

cmp	[si+2],	ax	; Compare Two Operands
jge	short loc_1C756	; Jump if Greater or Equal (SF=OF)

cmp	[si+4],	dx	; Compare Two Operands
jle	short loc_1C756	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

cmp	[si+6],	bx	; Compare Two Operands
jle	short loc_1C756	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

mov	[di], si
add	di, 2		; Add


loc_1C756:		; Add
add	si, 11h
loop	loc_1C738	; Loop while CX	!= 0

mov	cx, di
sub	cx, sp		; Integer Subtraction
shr	cx, 1		; Shift	Logical	Right
jz	short loc_1C780	; Jump if Zero (ZF=1)


loc_1C763:
mov	si, sp
push	cx
call	word ptr ds:2786h ; Indirect Call Near Procedure
js	short loc_1C77F	; Jump if Sign (SF=1)

xor	si, si		; Logical Exclusive OR
xchg	si, [bx-2]	; Exchange Register/Memory with	Register
mov	ax, [si+8]
mov	dx, [si]
mov	bx, [si+2]
call	sub_1C30D	; Call Procedure

pop	cx
jmp	short loc_1C763	; Jump

; ���������������������������������������������������������������������������

loc_1C77F:
pop	cx


loc_1C780:		; Compare Two Operands
cmp	byte ptr ds:227Dh, 0
jnz	short loc_1C7A2	; Jump if Not Zero (ZF=0)

cmp	word ptr ds:0D83Ah, 89h	; '�' ; Compare Two Operands
jl	short loc_1C7A2	; Jump if Less (SF!=OF)

cmp	word ptr ds:0D838h, 7Eh	; '~' ; Compare Two Operands
jl	short loc_1C7A2	; Jump if Less (SF!=OF)

cmp	word ptr ds:0D834h, 0C2h ; '�' ; Compare Two Operands
jge	short loc_1C7A2	; Jump if Greater or Equal (SF=OF)

call	sub_11797	; Call Procedure


loc_1C7A2:
mov	si, ds:0DBE0h
or	si, si		; Logical Inclusive OR
jz	short loc_1C7BE	; Jump if Zero (ZF=1)

mov	di, 0D834h
call	sub_1C7D4	; Call Procedure

mov	si, ds:0DBE2h
or	si, si		; Logical Inclusive OR
jz	short loc_1C7BE	; Jump if Zero (ZF=1)

mov	di, 0D834h
call	sub_1C7D4	; Call Procedure


loc_1C7BE:
mov	si, 0D834h
mov	dx, [si]
mov	bx, [si+2]
mov	bp, [si+4]
mov	ax, [si+6]
call	sub_1C51E	; Call Procedure

add	sp, 200h	; Add
retn			; Return Near from Procedure

sub_1C6AD endp ; sp = -2




sub_1C7D4 proc near
lodsw			; Load String
cmp	ax, [di+4]	; Compare Two Operands
jge	short locret_1C826 ; Jump if Greater or	Equal (SF=OF)

mov	dx, ax
lodsw			; Load String
cmp	ax, [di+6]	; Compare Two Operands
jge	short locret_1C826 ; Jump if Greater or	Equal (SF=OF)

mov	bx, ax
lodsw			; Load String
cmp	ax, [di]	; Compare Two Operands
jle	short locret_1C826 ; Jump if Less or Equal (ZF=1 | SF!=OF)

mov	bp, ax
lodsw			; Load String
cmp	ax, [di+2]	; Compare Two Operands
jle	short locret_1C826 ; Jump if Less or Equal (ZF=1 | SF!=OF)

cmp	dx, [di]	; Compare Two Operands
jnb	short loc_1C7F7	; Jump if Not Below (CF=0)

mov	dx, [di]


loc_1C7F7:		; Compare Two Operands
cmp	bp, [di+4]
jb	short loc_1C7FF	; Jump if Below	(CF=1)

mov	bp, [di+4]


loc_1C7FF:		; Compare Two Operands
cmp	bx, [di+2]
jnb	short loc_1C807	; Jump if Not Below (CF=0)

mov	bx, [di+2]


loc_1C807:		; Compare Two Operands
cmp	ax, [di+6]
jb	short loc_1C80F	; Jump if Below	(CF=1)

mov	ax, [di+6]


loc_1C80F:		; Integer Subtraction
sub	bp, dx
jbe	short locret_1C826 ; Jump if Below or Equal (CF=1 | ZF=1)

sub	ax, bx		; Integer Subtraction
jbe	short locret_1C826 ; Jump if Below or Equal (CF=1 | ZF=1)

mov	es, word ptr ds:0DBD6h
mov	ds, word ptr ds:0DBD8h
call	ss:_ptr_22D65_gfx_vtable_func_16 ; Indirect Call Far Procedure
push	ss
pop	ds

assume ds:seg001

locret_1C826:		; Return Near from Procedure
retn

sub_1C7D4 endp




sub_1C827 proc near
lodsw			; Load String
or	ax, ax		; Logical Inclusive OR
loope	sub_1C827	; Loop while rCX != 0 and ZF=1

jz	short loc_1C833	; Jump if Zero (ZF=1)

mov	bx, si
mov	ax, 1


loc_1C833:		; Decrement by 1
dec	ax
retn			; Return Near from Procedure

sub_1C827 endp




sub_1C835 proc near
mov	dx, 0FFFFh


loc_1C838:		; Load String
lodsw
or	ax, ax		; Logical Inclusive OR
jz	short loc_1C856	; Jump if Zero (ZF=1)

mov	di, ax
mov	ax, [di+4]
add	ax, [di+6]	; Add
test	byte ptr [di+0Ch], 40h ; Logical Compare
jz	short loc_1C84E	; Jump if Zero (ZF=1)

mov	ax, 7FFFh


loc_1C84E:		; Compare Two Operands
cmp	ax, dx
ja	short loc_1C856	; Jump if Above	(CF=0 &	ZF=0)

mov	dx, ax
mov	bx, si


loc_1C856:		; Loop while CX	!= 0
loop	loc_1C838

or	dx, dx		; Logical Inclusive OR
retn			; Return Near from Procedure

sub_1C835 endp




sub_1C85B proc near
mov	ax, _word_2C32A_time_passed
mov	word_23C1E, ax
mov	word_23C22, 1770h
retn			; Return Near from Procedure

sub_1C85B endp




sub_1C868 proc near
call	sub_1ABCC	; Call Procedure

jnz	short locret_1C8C0 ; Jump if Not Zero (ZF=0)

mov	si, word_21756
cmp	si, 11h		; Compare Two Operands
jnb	short locret_1C8C0 ; Jump if Not Below (CF=0)

shl	si, 1		; Shift	Logical	Left
shl	si, 1		; Shift	Logical	Left
mov	dx, [si+27B6h]
mov	bx, [si+27B8h]
mov	ax, bx
or	ax, dx		; Logical Inclusive OR
jz	short locret_1C8C0 ; Jump if Zero (ZF=1)

mov	si, 2792h
cmp	byte_2172D, 0	; Compare Two Operands
jnz	short loc_1C8A3	; Jump if Not Zero (ZF=0)

push	bx
mov	bx, 1
call	sub_1E3B7	; Call Procedure

pop	bx
mov	si, 2789h
jz	short loc_1C8A3	; Jump if Zero (ZF=1)

mov	si, 278Eh


loc_1C8A3:		; Load String
lodsb
or	al, al		; Logical Inclusive OR
jz	short loc_1C8BD	; Jump if Zero (ZF=1)

jns	short loc_1C8B2	; Jump if Not Sign (SF=0)

mov	ax, 12Ch
call	sub_1E387	; Call Procedure

jmp	short loc_1C8A3	; Jump

; ���������������������������������������������������������������������������

loc_1C8B2:
push	si
xor	ah, ah		; Logical Exclusive OR
mov	bp, ax
call	sub_1C8C1	; Call Procedure

pop	si
jmp	short loc_1C8A3	; Jump

; ���������������������������������������������������������������������������

loc_1C8BD:		; Call Procedure
call	sub_1C4DD


locret_1C8C0:		; Return Near from Procedure
retn

sub_1C868 endp




sub_1C8C1 proc near
push	bx
push	dx
push	_word_2C32A_time_passed
mov	si, bp
shl	si, 1		; Shift	Logical	Left
shl	si, 1		; Shift	Logical	Left
sub	dx, word_21C46[si] ; Integer Subtraction
jnb	short loc_1C8D5	; Jump if Not Below (CF=0)

xor	dx, dx		; Logical Exclusive OR


loc_1C8D5:		; Integer Subtraction
sub	bx, word_21C48[si]
jnb	short loc_1C8DD	; Jump if Not Below (CF=0)

xor	bx, bx		; Logical Exclusive OR


loc_1C8DD:
push	ds
mov	es, _word_2D088_vga_base_a000
mov	ds, _word_2D086_framebuffer_front
assume ds:nothing
call	ss:_ptr_22D65_gfx_vtable_func_37 ; Indirect Call Far Procedure
pop	ds
pop	bx


loc_1C8ED:
mov	ax, ds:_word_2C32A_time_passed
sub	ax, bx		; Integer Subtraction
cmp	al, ds:byte_2D096 ; Compare Two	Operands
jb	short loc_1C8ED	; Jump if Below	(CF=1)

pop	dx
pop	bx
retn			; Return Near from Procedure

sub_1C8C1 endp




sub_1C8FB proc near
call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

push	bp
call	_sub_1CA1B_hnm_load ; Call Procedure

call	sub_1C4DD	; Call Procedure

call	sub_1C0F4	; Call Procedure

pop	bp
call	bp		; Indirect Call	Near Procedure


loc_1C90B:		; Call Procedure
call	_sub_1C9F4_do_frame_and_check_if_frame_advanced

jz	short loc_1C90B	; Jump if Zero (ZF=1)

call	sub_1C4DD	; Call Procedure

call	sub_1ACE6	; Call Procedure

call	_sub_1CC85_check_if_hnm_complete ; Call	Procedure

jz	short loc_1C90B	; Jump if Zero (ZF=1)

call	sub_1C412	; Call Procedure

jmp	_sub_1CA01_hnm_close_resource ;	Jump

sub_1C8FB endp




_sub_1C921_get_hnm_resource_flag_name_ptr_by_index_ax_to_bx proc near
mov	bx, offset RESOURCE_LIST_HNM
add	bx, ax		; Add
add	bx, ax		; Add
mov	bx, [bx]
retn			; Return Near from Procedure

_sub_1C921_get_hnm_resource_flag_name_ptr_by_index_ax_to_bx endp




_sub_1C92B_hnm_reset_and_read_header proc near
mov	ds:_word_2D0B0_hnm_video_id, ax
call	_sub_1CA01_hnm_close_resource ;	Call Procedure

call	_sub_1CE1A_hnm_reset ; Call Procedure

mov	ds:_byte_2D097_hnm_finished_flag, 0
call	sub_1CE01	; Call Procedure

_sub_1C92B_hnm_reset_and_read_header endp




_sub_1C93C_hnm_read_header proc	near
mov	ax, ds:_word_2D0B0_hnm_video_id
mov	ds:_word_2D0B2_hnm_active_video_id, ax
call	_sub_1C921_get_hnm_resource_flag_name_ptr_by_index_ax_to_bx ; Call Procedure

mov	ax, [bx]	; Resource flag	word
mov	ds:_word_2D0AE_current_hnm_resource_flag, ax
lea	dx, [bx+2]	; Resource file	name
call	_sub_1F229_open_res_or_file_or_die ; Call Procedure

mov	ds:_word_22A56_hnm_file_handle,	bx
mov	ds:_word_2D0B4_hnm_file_offset_lo, ax
mov	ds:_word_2D0B6_hnm_file_offset_hi, dx
mov	ds:_word_2D0B8_hnm_file_remain_lo, cx
mov	ds:_word_2D0BA_hnm_file_remain_hi, bp
push	ds:word_2D0CA
push	word ptr ds:_dword_2D0BC_hnm_file_read_buf_seg
call	_sub_1CD8F_hnm_read_header_size	; header size -> ax

jb	short loc_1C988	; Jump if Below	(CF=1)

add	si, ax		; Add
jb	short loc_1C97A	; Jump if Below	(CF=1)

cmp	si, ds:_unk_2C324_vga_framebuffer_size_64000 ; Compare Two Operands
jbe	short loc_1C980	; Jump if Below	or Equal (CF=1 | ZF=1)


loc_1C97A:
mov	word ptr ds:_dword_2D0BC_hnm_file_read_buf_seg,	0


loc_1C980:		; Integer Subtraction
sub	ax, 2
mov	cx, ax
call	_sub_1CDBF_hnm_read_from_file_handle ; cx = bytes to read


loc_1C988:
pop	word ptr ds:_dword_2D0BC_hnm_file_read_buf_seg
pop	ds:word_2D0CA
jb	short locret_1C9E7 ; Jump if Below (CF=1)

les	si, ds:_dword_2D0BC_hnm_file_read_buf_seg ; Load Full Pointer to ES:xx
lods	word ptr es:[si] ; Load	String
add	ax, si		; Add
jb	short loc_1C9A2	; Jump if Below	(CF=1)

cmp	ax, ds:_unk_2C324_vga_framebuffer_size_64000 ; Compare Two Operands
jbe	short loc_1C9A4	; Jump if Below	or Equal (CF=1 | ZF=1)


loc_1C9A2:		; Logical Exclusive OR
xor	si, si


loc_1C9A4:
mov	ds:byte_2D064, 0FFh
call	_sub_1C1BA_hnm_apply_palette ; Call Procedure

dec	si		; Decrement by 1


loc_1C9AD:		; Increment by 1
inc	si
cmp	byte ptr es:[si], 0FFh ; Compare Two Operands
jz	short loc_1C9AD	; Jump if Zero (ZF=1)

xor	bx, bx		; Logical Exclusive OR
test	byte ptr ds:_word_2D0AE_current_hnm_resource_flag, 4 ; Logical Compare
jz	short loc_1C9BF	; Jump if Zero (ZF=1)

mov	bl, 10h


loc_1C9BF:
mov	cx, es:[bx+si]
mov	bx, es:[bx+si+2]
mov	ax, ds:_word_2D0B4_hnm_file_offset_lo
add	ax, cx		; Add
mov	ds:word_2D0A6, ax
mov	ax, ds:_word_2D0B6_hnm_file_offset_hi
adc	ax, bx		; Add with Carry
mov	ds:word_2D0A8, ax
mov	ax, ds:_word_2D0B8_hnm_file_remain_lo
sub	ax, cx		; Integer Subtraction
mov	ds:word_2D0AA, ax
mov	ax, ds:_word_2D0BA_hnm_file_remain_hi
sbb	ax, bx		; Integer Subtraction with Borrow
mov	ds:word_2D0AC, ax
clc			; Clear	Carry Flag


locret_1C9E7:		; Return Near from Procedure
retn

_sub_1C93C_hnm_read_header endp




_sub_1C9E8_hnm_do_frame_skippable proc near
call	_sub_1CA60_hnm_do_frame	; Call Procedure

call	_sub_1DD63_stc_on_user_input ; Call Procedure

jb	short loc_1C9F1	; Jump if Below	(CF=1)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1C9F1:		; Jump
jmp	sub_1DE4E

_sub_1C9E8_hnm_do_frame_skippable endp




_sub_1C9F4_do_frame_and_check_if_frame_advanced	proc near
push	ds:_word_2D098_hnm_frame_counter
call	_sub_1CA60_hnm_do_frame	; Call Procedure

pop	ax
cmp	ax, ds:_word_2D098_hnm_frame_counter ; Compare Two Operands
retn			; Return Near from Procedure

_sub_1C9F4_do_frame_and_check_if_frame_advanced	endp




_sub_1CA01_hnm_close_resource proc near
xor	bx, bx		; Logical Exclusive OR
xchg	bx, ds:_word_22A56_hnm_file_handle ; Exchange Register/Memory with Register
or	bx, bx		; Logical Inclusive OR
jz	short loc_1CA18	; Jump if Zero (ZF=1)

call	sub_1CE01	; Call Procedure

cmp	bx, ds:_2D06A_dune_dat_file_handle ; Compare Two Operands
jz	short loc_1CA18	; Jump if Zero (ZF=1)

mov	ah, 3Eh
int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
			; BX = file handle


loc_1CA18:		; Logical Exclusive OR
xor	cx, cx
retn			; Return Near from Procedure

_sub_1CA01_hnm_close_resource endp




_sub_1CA1B_hnm_load proc near
call	_sub_1C92B_hnm_reset_and_read_header ; Call Procedure

jb	short _sub_1CA01_hnm_close_resource ; Jump if Below (CF=1)

call	_sub_1CDA0_hnm_prepare_header_read ; header bytes -> cx

jb	short _sub_1CA01_hnm_close_resource ; Jump if Below (CF=1)

mov	ds:_byte_2D196_in_transition?, 0
les	si, ds:_dword_2D0C0_hnm_file_read_buf_ofs ; Load Full Pointer to ES:xx
lods	word ptr es:[si] ; Load	String
mov	bp, ds:_word_2D08E_framebuffer2_seg
call	_loc_1CCF4_hnm_decode_typed_chunk_video_to_bp ;	Call Procedure

call	_sub_1AA0F_decode_sd_block ; Call Procedure

call	_sub_1CC96_hnm_decode_video_frame ; Call Procedure

call	_sub_1CE1A_hnm_reset ; Call Procedure

inc	ds:_word_2D098_hnm_frame_counter ; Increment by	1
inc	ds:_word_2D09A_hnm_counter_2 ; Increment by 1
test	byte ptr ds:_word_2D0AE_current_hnm_resource_flag, 40h ; Logical Compare
jnz	short sub_1CA59	; Jump if Not Zero (ZF=0)

mov	cx, 50


loc_1CA52:
push	cx
call	sub_1CB1A	; Call Procedure

pop	cx
loop	loc_1CA52	; Loop while CX	!= 0

_sub_1CA1B_hnm_load endp




sub_1CA59 proc near
mov	ax, ds:_word_2C32A_time_passed
mov	ds:word_2D0D2, ax
retn			; Return Near from Procedure

sub_1CA59 endp




_sub_1CA60_hnm_do_frame	proc near
cmp	ds:_word_22A56_hnm_file_handle,	0 ; Compare Two	Operands
jz	short sub_1CA9A	; Jump if Zero (ZF=1)

cmp	byte ptr ds:_word_2D0AE_current_hnm_resource_flag, 0 ; Compare Two Operands
jns	short loc_1CA71	; Jump if Not Sign (SF=0)

call	sub_1CA8F	; Call Procedure


loc_1CA71:		; Call Procedure
call	sub_1CAA0

jnb	short loc_1CA7B	; Jump if Not Below (CF=0)

call	sub_1CB1A	; Call Procedure

jmp	short _sub_1CA60_hnm_do_frame ;	Jump

; ���������������������������������������������������������������������������

loc_1CA7B:		; Call Procedure
call	sub_1CAD4

jb	short sub_1CA8F	; Jump if Below	(CF=1)

mov	ax, ds:_word_2D0CE_hnm_pl_block_ofs
inc	ax		; Increment by 1
jz	short loc_1CA89	; Jump if Zero (ZF=1)

call	_sub_1CE3B_hnm_handle_pal_chunk	; Call Procedure


loc_1CA89:		; Call Procedure
call	_sub_1CC96_hnm_decode_video_frame

call	sub_1CC4E	; Call Procedure

_sub_1CA60_hnm_do_frame	endp




sub_1CA8F proc near
mov	al, byte ptr ds:_word_2D0AE_current_hnm_resource_flag
and	al, 80h	; '�'   ; Logical AND
mov	ds:_byte_2D065_hnm_flag_msb, al
call	sub_1CB1A	; Call Procedure

sub_1CA8F endp




sub_1CA9A proc near
mov	ds:_byte_2D065_hnm_flag_msb, 0
retn			; Return Near from Procedure

sub_1CA9A endp




sub_1CAA0 proc near
cmp	ds:_word_2D0C6_video_decode_buf_seg, 0 ; Compare Two Operands
ja	short locret_1CAD3 ; Jump if Above (CF=0 & ZF=0)

mov	cx, ds:word_2D0CA
stc			; Set Carry Flag
jcxz	short locret_1CAD3 ; Jump if CX	is 0

les	si, ds:_dword_2D0C0_hnm_file_read_buf_ofs ; Load Full Pointer to ES:xx
lods	word ptr es:[si] ; Load	String
cmp	word ptr es:[si], 'mm' ; Compare Two Operands
jz	short loc_1CABF	; Jump if Zero (ZF=1)

cmp	cx, ax		; Compare Two Operands
jb	short locret_1CAD3 ; Jump if Below (CF=1)


loc_1CABF:
mov	bp, ds:_word_2D086_framebuffer_front
test	byte ptr ds:_word_2D0AE_current_hnm_resource_flag, 40h ; Logical Compare
jz	short loc_1CACE	; Jump if Zero (ZF=1)

mov	bp, ds:_word_2D0E2_framebuffer_back


loc_1CACE:		; Call Procedure
call	_loc_1CCF4_hnm_decode_typed_chunk_video_to_bp

xor	ax, ax		; Logical Exclusive OR


locret_1CAD3:		; Return Near from Procedure
retn

sub_1CAA0 endp




sub_1CAD4 proc near
mov	ax, ds:_word_2D0CC_hnm_sd_block_ofs
inc	ax		; Increment by 1
jnz	short loc_1CAF0	; Jump if Not Zero (ZF=0)

mov	ax, ds:_word_2C32A_time_passed
sub	ax, ds:word_2D0D2 ; Integer Subtraction
or	ah, ah		; Logical Inclusive OR
jnz	short loc_1CAEB	; Jump if Not Zero (ZF=0)

cmp	al, byte ptr ds:_word_2D0AE_current_hnm_resource_flag+1	; Compare Two Operands
jb	short locret_1CAEF ; Jump if Below (CF=1)


loc_1CAEB:		; Call Procedure
call	sub_1CA59

clc			; Clear	Carry Flag


locret_1CAEF:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1CAF0:
mov	si, ds:word_22CD4
cmp	byte ptr [si+6], 1 ; Compare Two Operands
cmc			; Complement Carry Flag
jb	short locret_1CAEF ; Jump if Below (CF=1)

call	sub_1A9F4	; Call Procedure

clc			; Clear	Carry Flag
retn			; Return Near from Procedure

sub_1CAD4 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_1CB1A

loc_1CB00:
mov	ax, ds:0DBEAh
cmp	ax, ds:0DBEEh	; Compare Two Operands
jz	short loc_1CB61	; Jump if Zero (ZF=1)

mov	ax, ds:0DC08h
or	ax, ds:0DC0Ah	; Logical Inclusive OR
jz	short loc_1CB61	; Jump if Zero (ZF=1)

call	_sub_1CD8F_hnm_read_header_size	; header size -> ax

jb	short locret_1CB44 ; Jump if Below (CF=1)

call	sub_1CC0C	; Call Procedure

; END OF FUNCTION CHUNK	FOR sub_1CB1A



sub_1CB1A proc near

; FUNCTION CHUNK AT CB00 SIZE 0000001A BYTES
; FUNCTION CHUNK AT CB45 SIZE 000000C7 BYTES

mov	cx, ds:word_2D0D0
jcxz	short loc_1CB00	; Jump if CX is	0

cmp	byte ptr ds:_word_2D0AE_current_hnm_resource_flag, 0 ; Compare Two Operands
js	short loc_1CB38	; Jump if Sign (SF=1)

mov	ax, ds:_word_2D0B4_hnm_file_offset_lo
neg	ax		; Two's Complement Negation
and	ax, 7FFh	; Logical AND
add	ah, 8		; Add
cmp	ax, cx		; Compare Two Operands
jnb	short loc_1CB38	; Jump if Not Below (CF=0)

mov	cx, ax


loc_1CB38:		; Call Procedure
call	sub_1CC2B

jb	short locret_1CB44 ; Jump if Below (CF=1)

sub	ds:word_2D0D0, cx ; Integer Subtraction
jmp	_sub_1CDBF_hnm_read_from_file_handle ; cx = bytes to read

; ���������������������������������������������������������������������������

locret_1CB44:		; Return Near from Procedure
retn

sub_1CB1A endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_1CB1A

loc_1CB45:
mov	ds:_word_2D0B0_hnm_video_id, ax
call	_sub_1C93C_hnm_read_header ; Call Procedure

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1CB4C:		; Logical Inclusive OR
or	ds:_byte_2D097_hnm_finished_flag, 1
cmp	ds:word_2D0CA, 0 ; Compare Two Operands
jnz	short locret_1CB60 ; Jump if Not Zero (ZF=0)

or	ds:_byte_2D097_hnm_finished_flag, 2 ; Logical Inclusive	OR
call	_sub_1CA01_hnm_close_resource ;	Call Procedure


locret_1CB60:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1CB61:		; Logical Compare
test	byte ptr ds:_word_2D0AE_current_hnm_resource_flag, 1
jz	short loc_1CB4C	; Jump if Zero (ZF=1)

mov	cx, 1000h
call	sub_1CC2B	; Call Procedure

jb	short locret_1CB44 ; Jump if Below (CF=1)

mov	ax, ds:_word_2D09A_hnm_counter_2
call	sub_1CE07	; Call Procedure

mov	word ptr ds:_sub_1DBEC_draw_mouse, ax
call	sub_1CA9A	; Call Procedure

mov	ax, ds:_word_2D0B2_hnm_active_video_id
cmp	ax, ds:_word_2D0B0_hnm_video_id	; Compare Two Operands
jz	short loc_1CBA0	; Jump if Zero (ZF=1)

call	_sub_1C921_get_hnm_resource_flag_name_ptr_by_index_ax_to_bx ; Call Procedure

test	byte ptr [bx], 8 ; Logical Compare
jz	short loc_1CB45	; Jump if Zero (ZF=1)

cmp	word ptr [bx-6], 0 ; Compare Two Operands
jz	short loc_1CB45	; Jump if Zero (ZF=1)

mov	ds:_word_2D0B0_hnm_video_id, ax
lea	si, [bx-8]	; Load Effective Address
mov	di, offset word_2D0A6
call	sub_15B99	; Call Procedure

movsb			; Move Byte(s) from String to String


loc_1CBA0:
mov	ax, ds:word_2D0AA
mov	ds:_word_2D0B8_hnm_file_remain_lo, ax
mov	ax, ds:word_2D0AC
mov	ds:_word_2D0BA_hnm_file_remain_hi, ax
mov	ax, ds:word_2D0A6
mov	ds:_word_2D0B4_hnm_file_offset_lo, ax
mov	ax, ds:word_2D0A8
mov	ds:_word_2D0B6_hnm_file_offset_hi, ax
test	byte ptr ds:_word_2D0AE_current_hnm_resource_flag, 4 ; Logical Compare
jz	short loc_1CC09	; Jump if Zero (ZF=1)

mov	ax, ds:_word_2D0B0_hnm_video_id
add	ax, 61h	; 'a'   ; Add
call	_sub_1C13E_open_sprite_sheet ; Call Procedure

mov	bp, word ptr ds:_dword_2D060_sprite_sheet_resource_ptr
mov	cx, 4


loc_1CBCF:		; Load Full Pointer to ES:xx
les	di, ds:_dword_2D0BC_hnm_file_read_buf_seg
mov	ax, 2
call	sub_1CDF7	; Call Procedure

mov	ax, 0Ah
stosw			; Store	String
mov	si, di
call	sub_1CC0C	; Call Procedure

mov	es, word ptr ds:_dword_2D060_sprite_sheet_resource_ptr+2
push	word ptr es:[bp+0]
push	es
les	di, ds:_dword_2D0BC_hnm_file_read_buf_seg ; Load Full Pointer to ES:xx
mov	ax, 6D6Dh
stosw			; Store	String
mov	ax, bp
stosw			; Store	String
pop	ax
stosw			; Store	String
pop	ax
stosw			; Store	String
add	bp, ax		; Add
mov	ax, 8
call	sub_1CDF7	; Call Procedure

loop	loc_1CBCF	; Loop while CX	!= 0

mov	ds:_byte_2D065_hnm_flag_msb, 80h ; '�'


loc_1CC09:		; Jump
jmp	loc_1CB00

; END OF FUNCTION CHUNK	FOR sub_1CB1A



sub_1CC0C proc near
add	si, ax		; Add
jb	short loc_1CC16	; Jump if Below	(CF=1)

cmp	si, ds:_unk_2C324_vga_framebuffer_size_64000 ; Compare Two Operands
jbe	short loc_1CC20	; Jump if Below	or Equal (CF=1 | ZF=1)


loc_1CC16:		; Logical Exclusive OR
xor	cx, cx
xchg	cx, word ptr ds:_dword_2D0BC_hnm_file_read_buf_seg ; Exchange Register/Memory with Register
mov	ds:word_2D0C8, cx


loc_1CC20:		; Integer Subtraction
sub	ax, 2
mov	ds:word_2D0D0, ax
inc	ds:_word_2D09A_hnm_counter_2 ; Increment by 1
retn			; Return Near from Procedure

sub_1CC0C endp




sub_1CC2B proc near
mov	ax, word ptr ds:_dword_2D0BC_hnm_file_read_buf_seg
mov	bx, word ptr ds:_dword_2D0C0_hnm_file_read_buf_ofs
cmp	ax, bx		; Compare Two Operands
jnb	short loc_1CC3F	; Jump if Not Below (CF=0)

add	ax, cx		; Add
add	ax, 18		; Add
cmp	bx, ax		; Compare Two Operands
jb	short locret_1CC4D ; Jump if Below (CF=1)


loc_1CC3F:
mov	ax, ds:word_2D0CA
add	ax, 10		; Add
add	ax, cx		; Add
jb	short locret_1CC4D ; Jump if Below (CF=1)

cmp	ds:word_2D0C8, ax ; Compare Two	Operands


locret_1CC4D:		; Return Near from Procedure
retn

sub_1CC2B endp




sub_1CC4E proc near
les	si, ds:_dword_2D0C0_hnm_file_read_buf_ofs ; Load Full Pointer to ES:xx
lods	word ptr es:[si] ; Load	String
sub	ds:word_2D0CA, ax ; Integer Subtraction
add	si, ax		; Add
jb	short loc_1CC62	; Jump if Below	(CF=1)

cmp	si, ds:_unk_2C324_vga_framebuffer_size_64000 ; Compare Two Operands
jbe	short loc_1CC6A	; Jump if Below	or Equal (CF=1 | ZF=1)


loc_1CC62:		; Integer Subtraction
sub	ax, 2
mov	word ptr ds:_dword_2D0C0_hnm_file_read_buf_ofs,	ax
xor	ax, ax		; Logical Exclusive OR


loc_1CC6A:		; Add
add	word ptr ds:_dword_2D0C0_hnm_file_read_buf_ofs,	ax
mov	ax, ds:_word_2D098_hnm_frame_counter
inc	ax		; Increment by 1
cmp	ax, ds:word_2D09C ; Compare Two	Operands
jbe	short loc_1CC81	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	ax, 1
mov	ds:word_2D09C, 0FFFFh


loc_1CC81:
mov	ds:_word_2D098_hnm_frame_counter, ax
retn			; Return Near from Procedure

sub_1CC4E endp




_sub_1CC85_check_if_hnm_complete proc near
cmp	ds:_byte_2D097_hnm_finished_flag, 0 ; Compare Two Operands
jz	short locret_1CC91 ; Jump if Zero (ZF=1)

cmp	ds:_byte_2D097_hnm_finished_flag, 1 ; Compare Two Operands


locret_1CC91:		; Return Near from Procedure
retn

_sub_1CC85_check_if_hnm_complete endp

; ���������������������������������������������������������������������������
word_1CC92 dw 133h
_word_1CC94_bltfunc dw 0



_sub_1CC96_hnm_decode_video_frame proc near

; FUNCTION CHUNK AT 4AFD SIZE 00000019 BYTES
; FUNCTION CHUNK AT DBE3 SIZE 00000009 BYTES

mov	ax, word ptr ds:_ptr_22D65_gfx_vtable_func_17_copy_fbuf_explode_and_center+2
mov	cs:_word_1CC94_bltfunc,	ax
xor	bp, bp		; Logical Exclusive OR
xchg	bp, ds:_word_2D0C6_video_decode_buf_seg	; Exchange Register/Memory with	Register
or	bp, bp		; Logical Inclusive OR
jz	short locret_1CC4D ; Jump if Zero (ZF=1)

mov	si, ds:_word_2D0C4_video_decode_buf_ofs
mov	al, byte ptr ds:_word_2D0AE_current_hnm_resource_flag
test	al, 30h		; Logical Compare
jnz	short loc_1CCEA	; Jump if Not Zero (ZF=0)

push	ds
test	ds:_word_2D0D4_video_chunk_tag,	400h ; Logical Compare
jnz	short loc_1CCE1	; Jump if Not Zero (ZF=0)

mov	es, ds:_word_2D08A_framebuffer_active
mov	bx, ds:_word_2D0B0_hnm_video_id
mov	ds, bp
lodsw			; Load String
and	ah, 11111001b	; Logical AND
mov	di, ax
lodsw			; Load String
mov	cx, ax
or	cl, cl		; Logical Inclusive OR
jz	short loc_1CCE1	; Jump if Zero (ZF=1)

lodsw			; Load String
mov	dx, ax
lodsw			; Load String
xchg	ax, bx		; Exchange Register/Memory with	Register
cmp	ax, 25		; Compare Two Operands
jnb	short loc_1CCE3	; Jump if Not Below (CF=0)

call	ss:_ptr_22D65_gfx_vtable_func_05_blit ;
			; ax = video id
			; di = tag - flag1|flag2
			; cl = height
			; ch = mode
			; dx = x offset
			; bx = y offset


loc_1CCE1:
pop	ds
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1CCE3:		; Indirect Call	Far Procedure
call	dword ptr cs:word_1CC92
pop	ds
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1CCEA:		; Logical Compare
test	al, 20h
jnz	short loc_1CCF1	; Jump if Not Zero (ZF=0)

jmp	loc_14AFD	; Jump

; ���������������������������������������������������������������������������

loc_1CCF1:		; Jump
jmp	sub_14AEB

_sub_1CC96_hnm_decode_video_frame endp




_loc_1CCF4_hnm_decode_typed_chunk_video_to_bp proc near
mov	ds:_word_2D0CC_hnm_sd_block_ofs, 0FFFFh
mov	ds:_word_2D0CE_hnm_pl_block_ofs, 0FFFFh
add	ax, si		; Add
jb	short loc_1CD0A	; Jump if Below	(CF=1)

cmp	ax, ds:_unk_2C324_vga_framebuffer_size_64000 ; Compare Two Operands
jbe	short loc_1CD0C	; Jump if Below	or Equal (CF=1 | ZF=1)


loc_1CD0A:		; Logical Exclusive OR
xor	si, si


loc_1CD0C:		; load tag
lods	word ptr es:[si]
cmp	ax, 'ds'        ; Compare Two Operands
jnz	short loc_1CD25	; Jump if Not Zero (ZF=0)

call	_sub_1AE2F_check_pcm_enabled ; Call Procedure

jz	short loc_1CD1C	; Jump if Zero (ZF=1)

mov	ds:_word_2D0CC_hnm_sd_block_ofs, si


loc_1CD1C:		; load chunk size
lods	word ptr es:[si]
sub	ax, 4		; Integer Subtraction
add	si, ax		; skip chunk
lods	word ptr es:[si] ; load	next tag


loc_1CD25:		; Compare Two Operands
cmp	ax, 'lp'
jnz	short loc_1CD37	; Jump if Not Zero (ZF=0)

lods	word ptr es:[si] ; load	chunk size
mov	ds:_word_2D0CE_hnm_pl_block_ofs, si
sub	ax, 4		; Integer Subtraction
add	si, ax		; skip chunk
jmp	short loc_1CD0C	; Jump

; ���������������������������������������������������������������������������

loc_1CD37:		; Compare Two Operands
cmp	ax, 'mm'
jnz	short loc_1CD4E	; Jump if Not Zero (ZF=0)

mov	bx, es:[si+4]
les	si, es:[si]	; Load Full Pointer to ES:xx
lods	word ptr es:[si] ; Load	String
cmp	ax, bx		; Compare Two Operands
lods	word ptr es:[si] ; Load	String
jz	short loc_1CD4E	; Jump if Zero (ZF=1)

jmp	sub_1CC4E	; Jump

; ���������������������������������������������������������������������������

loc_1CD4E:		; video	chunk
push	ds
push	es
mov	es, bp		; destination =	bp
xor	di, di		; Logical Exclusive OR
test	ah, 4		; test flag 1
jz	short loc_1CD5D	; Jump if Zero (ZF=1)

mov	es, ds:_word_2D08A_framebuffer_active ;	destination = framebuffer_b


loc_1CD5D:
mov	ds:_word_2D0C6_video_decode_buf_seg, es
mov	ds:_word_2D0C4_video_decode_buf_ofs, di
mov	ds:_word_2D0D4_video_chunk_tag,	ax
pop	ds		; ds has input segment
mov	cx, ax		; ax = tag, cx = tag
lodsw			; ax = height|mode
xchg	ax, cx		; ax = tag, cx = height|mode
test	ah, 4		; test flag 1
jnz	short loc_1CD7C	; Jump if Not Zero (ZF=0)

stosw			; write	tag to decode buffer
xchg	ax, cx		; Exchange Register/Memory with	Register
stosw			; write	height|mode to decode buffer
jcxz	short loc_1CD7F	; skip hsq decompression if dimensions|mode zero

test	ch, 2		; Logical Compare
jz	short loc_1CD81	; Jump if Zero (ZF=1)


loc_1CD7C:		; Call Procedure
call	_sub_1F403_hsq_decomp_skip_header_dssi_to_esdi


loc_1CD7F:
pop	ds
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1CD81:		; Integer Subtraction
sub	si, 4
mov	ax, ds
pop	ds
mov	ds:_word_2D0C4_video_decode_buf_ofs, si
mov	ds:_word_2D0C6_video_decode_buf_seg, ax
retn			; Return Near from Procedure

_loc_1CCF4_hnm_decode_typed_chunk_video_to_bp endp



; header size -> ax

_sub_1CD8F_hnm_read_header_size	proc near
mov	cx, 2
call	_sub_1CDBF_hnm_read_from_file_handle ; cx = bytes to read

jb	short locret_1CD9F ; Jump if Below (CF=1)

les	si, ds:_dword_2D0BC_hnm_file_read_buf_seg ; Load Full Pointer to ES:xx
mov	ax, es:[si-2]


locret_1CD9F:		; Return Near from Procedure
retn

_sub_1CD8F_hnm_read_header_size	endp



; header bytes -> cx

_sub_1CDA0_hnm_prepare_header_read proc	near
call	_sub_1CE1A_hnm_reset ; Call Procedure

call	_sub_1CD8F_hnm_read_header_size	; header size -> ax

jb	short locret_1CE00 ; Jump if Below (CF=1)

mov	di, ds:_unk_2C324_vga_framebuffer_size_64000
sub	di, ax		; Integer Subtraction
sub	di, 2		; Integer Subtraction
mov	word ptr ds:_dword_2D0C0_hnm_file_read_buf_ofs,	di
stosw			; Store	String
mov	word ptr ds:_dword_2D0BC_hnm_file_read_buf_seg,	di
mov	cx, ax
sub	cx, 2		; Integer Subtraction

_sub_1CDA0_hnm_prepare_header_read endp



; cx = bytes to	read

_sub_1CDBF_hnm_read_from_file_handle proc near
mov	bx, ds:_word_22A56_hnm_file_handle
cmp	bx, 1		; Compare Two Operands
jb	short locret_1CE00 ; Jump if Below (CF=1)


loc_1CDC8:
push	cx
mov	cx, ds:_word_2D0B6_hnm_file_offset_hi
mov	dx, ds:_word_2D0B4_hnm_file_offset_lo
mov	ax, 4200h
int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
			; AL = method: offset from beginning of	file
pop	cx
push	ds
lds	dx, ds:_dword_2D0BC_hnm_file_read_buf_seg ; Load Full Pointer to DS:xx
mov	ah, 3Fh
int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
			; BX = file handle, CX = number	of bytes to read
			; DS:DX	-> buffer
pop	ds
cmp	ax, cx		; Compare Two Operands
jb	short loc_1CDC8	; Jump if Below	(CF=1)

sub	ds:_word_2D0B8_hnm_file_remain_lo, ax ;	Integer	Subtraction
sbb	ds:_word_2D0BA_hnm_file_remain_hi, 0 ; Integer Subtraction with	Borrow
add	ds:_word_2D0B4_hnm_file_offset_lo, ax ;	Add
adc	ds:_word_2D0B6_hnm_file_offset_hi, 0 ; Add with	Carry

_sub_1CDBF_hnm_read_from_file_handle endp




sub_1CDF7 proc near
add	word ptr ds:_dword_2D0BC_hnm_file_read_buf_seg,	ax ; Add
add	ds:word_2D0CA, ax ; Add
clc			; Clear	Carry Flag


locret_1CE00:		; Return Near from Procedure
retn

sub_1CDF7 endp




sub_1CE01 proc near
mov	ds:_word_2D098_hnm_frame_counter, 0

sub_1CE01 endp




sub_1CE07 proc near
mov	ds:_word_2D09A_hnm_counter_2, 0
mov	ds:word_2D09C, 0FFFFh
mov	ds:word_2D09E, 0FFFFh
retn			; Return Near from Procedure

sub_1CE07 endp




_sub_1CE1A_hnm_reset proc near
mov	ax, ds:_word_2D08E_framebuffer2_seg
mov	word ptr ds:_dword_2D0BC_hnm_file_read_buf_seg+2, ax
mov	word ptr ds:_dword_2D0C0_hnm_file_read_buf_ofs+2, ax
xor	ax, ax		; Logical Exclusive OR
mov	word ptr ds:_dword_2D0BC_hnm_file_read_buf_seg,	ax
mov	word ptr ds:_dword_2D0C0_hnm_file_read_buf_ofs,	ax
mov	ds:word_2D0CA, ax
mov	ds:word_2D0D0, ax
mov	ds:_word_2D0C6_video_decode_buf_seg, ax
mov	ax, ds:_unk_2C324_vga_framebuffer_size_64000
mov	ds:word_2D0C8, ax
retn			; Return Near from Procedure

_sub_1CE1A_hnm_reset endp




_sub_1CE3B_hnm_handle_pal_chunk	proc near
les	si, ds:_dword_2D0BC_hnm_file_read_buf_seg ; Load Full Pointer to ES:xx
mov	si, ds:_word_2D0CE_hnm_pl_block_ofs
call	_sub_1C1BA_hnm_apply_palette ; Call Procedure

call	ds:_ptr_22D65_gfx_vtable_func_32 ; Indirect Call Far Procedure
retn			; Return Near from Procedure

_sub_1CE3B_hnm_handle_pal_chunk	endp




sub_1CE4B proc near
mov	ds:_word_2D0B2_hnm_active_video_id, bx
mov	ds:word_2D09E, ax
retn			; Return Near from Procedure

sub_1CE4B endp




sub_1CE53 proc near
test	byte ptr ds:RES_MNT1_HNM, 4 ; Logical Compare
jz	short locret_1CE6B ; Jump if Zero (ZF=1)

mov	ax, 2


loc_1CE5D:
push	ax
add	ax, 97		; Add
call	_sub_1C13E_open_sprite_sheet ; Call Procedure

pop	ax
inc	ax		; Increment by 1

loc_1CE66:		; Compare Two Operands
cmp	ax, 8
jb	short loc_1CE5D	; Jump if Below	(CF=1)


locret_1CE6B:		; Return Near from Procedure
retn

sub_1CE53 endp




_sub_1CE6C_initialize_memory_handler proc near
test	ds:_byte_21DF3_cmd_args_memory,	2 ; Logical Compare

loc_1CE71:		; Jump if Not Zero (ZF=0)
jnz	short loc_1CE7B


loc_1CE73:		; Compare Two Operands
cmp	ds:_word_22E59_xms_or_ems_mem_limit, 350

loc_1CE79:		; Jump if Not Below (CF=0)
jnb	short loc_1CE8A


loc_1CE7B:
mov	ax, 2


loc_1CE7E:		; Call Procedure
call	_sub_1C921_get_hnm_resource_flag_name_ptr_by_index_ax_to_bx


loc_1CE81:		; Logical AND
and	byte ptr [bx], 0FBh
inc	ax		; Increment by 1
cmp	ax, 9		; Compare Two Operands
jb	short loc_1CE7E	; Jump if Below	(CF=1)


loc_1CE8A:		; Logical Compare
test	ds:_byte_21DF3_cmd_args_memory,	3
jz	short loc_1CE9F	; Jump if Zero (ZF=1)

xor	ax, ax		; Logical Exclusive OR


loc_1CE93:		; Call Procedure
call	_sub_1C921_get_hnm_resource_flag_name_ptr_by_index_ax_to_bx

and	byte ptr [bx], 7Fh ; Logical AND
inc	ax		; Increment by 1

loc_1CE9A:		; Compare Two Operands
cmp	ax, 25h	; '%'

loc_1CE9D:		; Jump if Below	(CF=1)
jb	short loc_1CE93


loc_1CE9F:
mov	ax, 2


loc_1CEA2:
push	ax
call	sub_1CEB0	; Call Procedure

pop	ax
inc	ax		; Increment by 1
cmp	ax, 8		; Compare Two Operands
jb	short loc_1CEA2	; Jump if Below	(CF=1)

jmp	_sub_1CA01_hnm_close_resource ;	Jump

_sub_1CE6C_initialize_memory_handler endp




sub_1CEB0 proc near
call	_sub_1C921_get_hnm_resource_flag_name_ptr_by_index_ax_to_bx ; Call Procedure

push	bx
call	_sub_1C92B_hnm_reset_and_read_header ; Call Procedure

pop	di
jb	short locret_1CEC8 ; Jump if Below (CF=1)


loc_1CEBA:		; Logical Compare
test	byte ptr [di], 8
jz	short locret_1CEC8 ; Jump if Zero (ZF=1)

sub	di, 8		; Integer Subtraction
mov	si, 0DBF6h
call	sub_15B99	; Call Procedure


locret_1CEC8:		; Return Near from Procedure
retn

sub_1CEB0 endp




sub_1CEC9 proc near
pushf			; Push Flags Register onto the Stack
push	bx
push	cx
push	dx
push	si
push	di
push	bp
push	es
xor	ax, ax		; Logical Exclusive OR
xchg	al, ds:_byte_2D065_hnm_flag_msb	; Exchange Register/Memory with	Register
sti			; Set Interrupt	Flag
push	ax
call	sub_1CAA0	; Call Procedure


loc_1CEDC:		; Jump if Below	or Equal (CF=1 | ZF=1)
jbe	short loc_1CEEF


loc_1CEDE:
mov	ax, ds:_word_2D0CE_hnm_pl_block_ofs

loc_1CEE1:		; Increment by 1
inc	ax
jnz	short loc_1CEEF	; Jump if Not Zero (ZF=0)


loc_1CEE4:		; Call Procedure
call	sub_1CAD4


loc_1CEE7:		; Jump if Below	(CF=1)
jb	short loc_1CEEF

call	_sub_1CC96_hnm_decode_video_frame ; Call Procedure

call	sub_1CC4E	; Call Procedure


loc_1CEEF:
pop	ax
mov	ds:_byte_2D065_hnm_flag_msb, al
pop	es
pop	bp
pop	di
pop	si
pop	dx
pop	cx
pop	bx
popf			; Pop Stack into Flags Register
retn			; Return Near from Procedure

sub_1CEC9 endp




_sub_1CEFC_load_IRULn_HSQ proc near
mov	ax, 105
add	al, ds:_byte_2C39B_language_setting ; Add
call	_sub_1C13E_open_sprite_sheet ; RES_IRULn_HSQ

mov	ds:_word_22AD2_URLx_subtitle_next_frame_ptr, offset _word_22A58_IRULx_subtitle_frames
xor	ax, ax		; Logical Exclusive OR
call	ds:_ptr_22D65_gfx_vtable_func_set_global_y_offset ; Indirect Call Far Procedure
call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

mov	ax, 25
jmp	_sub_1CA1B_hnm_load ; IRULAN.HNM

_sub_1CEFC_load_IRULn_HSQ endp




_sub_1CF1B_play_IRULx_HSQ proc near
push	ds:_word_2D08A_framebuffer_active
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure


loc_1CF22:
mov	si, ds:_word_22AD2_URLx_subtitle_next_frame_ptr
lodsw			; Load String
cmp	ax, ds:_word_2D098_hnm_frame_counter ; Compare Two Operands
ja	short loc_1CF30	; Jump if Above	(CF=0 &	ZF=0)

call	_sub_1CF4B_IRULx_draw_or_clear_subtitle	; Call Procedure


loc_1CF30:		; Call Procedure
call	_sub_1C9E8_hnm_do_frame_skippable

jb	short loc_1CF3B	; Jump if Below	(CF=1)

call	_sub_1CC85_check_if_hnm_complete ; Call	Procedure

jz	short loc_1CF22	; Jump if Zero (ZF=1)

clc			; Clear	Carry Flag


loc_1CF3B:		; Push Flags Register onto the Stack
pushf
call	_sub_1CA01_hnm_close_resource ;	Call Procedure

call	_sub_1AC14_pcm_stop_voc_q ; Call Procedure

call	_sub_1AD57_play_music_MORNING_HSQ ; Call Procedure

popf			; Pop Stack into Flags Register
pop	ds:_word_2D08A_framebuffer_active
retn			; Return Near from Procedure

_sub_1CF1B_play_IRULx_HSQ endp




_sub_1CF4B_IRULx_draw_or_clear_subtitle	proc near
mov	ax, si
mov	ds:_word_22AD2_URLx_subtitle_next_frame_ptr, ax
sub	ax, offset _word_22A58_IRULx_subtitle_frames ; Integer Subtraction
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
jnb	short loc_1CF61	; Jump if Not Below (CF=0)

mov	bx, 190
xor	dx, dx		; Logical Exclusive OR
jmp	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

; ���������������������������������������������������������������������������

loc_1CF61:
mov	di, (offset loc_1ED7E+2)
mov	es, ds:_word_2D088_vga_base_a000
xor	ax, ax		; Logical Exclusive OR

loc_1CF6A:
mov	cx, 2880
rep stosw		; Store	String
retn			; Return Near from Procedure

_sub_1CF4B_IRULx_draw_or_clear_subtitle	endp




sub_1CF70 proc near
push	bx
dec	si		; Decrement by 1
test	si, 800h	; Logical Compare
jz	short loc_1CF95	; Jump if Zero (ZF=1)

call	_sub_1D00F_load_PHRASExx_HSQ ; Call Procedure

les	bx, ds:dword_23C60 ; Load Full Pointer to ES:xx
and	si, 7FFh	; Logical AND
shl	si, 1		; Shift	Logical	Left
mov	si, es:[bx+si]
mov	bx, es:[bx]
mov	bx, es:[bx-2]
mov	ds:word_23C64, bx
pop	bx
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1CF95:		; Shift	Logical	Left
shl	si, 1
les	bx, ds:dword_23C5C ; Load Full Pointer to ES:xx
mov	si, es:[bx+si]
pop	bx
retn			; Return Near from Procedure

sub_1CF70 endp




_sub_1CFA0_check_amr_or_eng_language proc near
call	_sub_1AE2F_check_pcm_enabled ; Call Procedure

jz	short locret_1CFB8 ; Jump if Zero (ZF=1)

mov	al, ds:_byte_2C39B_language_setting
or	al, al		; Logical Inclusive OR
jz	short loc_1CFB0	; Jump if Zero (ZF=1)

cmp	al, 3		; Compare Two Operands
jnz	short locret_1CFB8 ; Jump if Not Zero (ZF=0)


loc_1CFB0:
mov	al, 2
mov	ds:byte_21D97, al
mov	ds:byte_21D98, al


locret_1CFB8:		; Return Near from Procedure
retn

_sub_1CFA0_check_amr_or_eng_language endp




sub_1CFB9 proc near
xor	bx, bx		; Logical Exclusive OR
mov	di, 0D7F4h
push	ds
pop	es


loc_1CFC0:
mov	si, ds:_word_29F26_res_dialogue_ofs[bx]
cmp	word ptr [si], 0FFFFh ;	Compare	Two Operands
jnz	short loc_1CFCE	; Jump if Not Zero (ZF=0)

add	bx, 2		; Add
jmp	short loc_1CFC0	; Jump

; ���������������������������������������������������������������������������

loc_1CFCE:
mov	ax, [si+2]
xchg	al, ah		; Exchange Register/Memory with	Register
and	ax, 3FFh	; Logical AND
dec	ax		; Decrement by 1
stosw			; Store	String
and	bx, 0FFF0h	; Logical AND
add	bx, 10h		; Add
cmp	bx, 110h	; Compare Two Operands
jb	short loc_1CFC0	; Jump if Below	(CF=1)


loc_1CFE4:
mov	al, ds:_byte_2C39B_language_setting
mov	si, 0BBh ; '�'  ; DNCHAR.BIN
cmp	al, 6		; Compare Two Operands
jnz	short loc_1CFF1	; Jump if Not Zero (ZF=0)

mov	si, 0C7h ; '�'  ; DNCHAR2.BIN used if lang = Fremen (DUT)


loc_1CFF1:
mov	di, 0CEECh
push	ds
pop	es
call	_sub_1F0B9_open_resource_by_index_si ; reads and decompresses to es:di

mov	al, 0C0h ; '�'  ; COMMAND1.HSQ - COMMAND7.HSQ
add	al, ds:_byte_2C39B_language_setting ; Add
xor	ah, ah		; Logical Exclusive OR
mov	si, ax
les	di, ds:dword_23C5C ; Load Full Pointer to ES:xx
call	_sub_1F0B9_open_resource_by_index_si ; reads and decompresses to es:di

call	_sub_10098_adjust_sub_resource_pointers	; Call Procedure

jmp	short loc_1D01A	; Jump

sub_1CFB9 endp




_sub_1D00F_load_PHRASExx_HSQ proc near
mov	ax, ds:word_23C2C
cmp	ax, ds:word_29F86 ; Compare Two	Operands
mov	al, 93h	; '�'
jb	short loc_1D01C	; Jump if Below	(CF=1)


loc_1D01A:
mov	al, 9Ah	; '�'


loc_1D01C:		; Add
add	al, ds:_byte_2C39B_language_setting
cmp	al, ds:byte_23C2E ; Compare Two	Operands
jz	short locret_1D03B ; Jump if Zero (ZF=1)

push	si
mov	ds:byte_23C2E, al
xor	ah, ah		; Logical Exclusive OR
mov	si, ax
les	di, ds:dword_23C60 ; Load Full Pointer to ES:xx
call	_sub_1F0B9_open_resource_by_index_si ; reads and decompresses to es:di

push	cx
call	_sub_10098_adjust_sub_resource_pointers	; Call Procedure

pop	cx
pop	si


locret_1D03B:		; Return Near from Procedure
retn

_sub_1D00F_load_PHRASExx_HSQ endp




sub_1D03C proc near
lods	byte ptr es:[si] ; Load	String
sub	al, 30h	; '0'   ; Integer Subtraction
cmp	al, 9		; Compare Two Operands
ja	short sub_1D03C	; Jump if Above	(CF=0 &	ZF=0)


loc_1D044:		; Load String
lods	byte ptr es:[si]
sub	al, 30h	; '0'   ; Integer Subtraction
cmp	al, 9		; Compare Two Operands
jbe	short loc_1D044	; Jump if Below	or Equal (CF=1 | ZF=1)

dec	si		; Decrement by 1
retn			; Return Near from Procedure

sub_1D03C endp




sub_1D04E proc near
mov	ds:word_2CCDC, dx
mov	ds:word_2CCDE, bx
mov	ds:word_2CCE0, dx
mov	ds:word_2CCE2, bx
retn			; Return Near from Procedure

sub_1D04E endp




sub_1D05F proc near
mov	dx, ds:word_2CCDC
mov	bx, ds:word_2CCDE
retn			; Return Near from Procedure

sub_1D05F endp




sub_1D068 proc near
mov	ds:off_219C8, 0D096h
mov	ds:word_23C50, 0CEECh
retn			; Return Near from Procedure

sub_1D068 endp




sub_1D075 proc near
mov	ds:off_219C8, offset unk_2C5DF
mov	ds:word_23C50, offset unk_2C41C
retn			; Return Near from Procedure

sub_1D075 endp




sub_1D082 proc near
mov	ds:off_219C8, 0D0FFh
mov	ds:word_23C50, 0CEECh
retn			; Return Near from Procedure

sub_1D082 endp




sub_1D08F proc near
mov	ds:off_219C8, 0D16Ah
retn			; Return Near from Procedure

sub_1D08F endp




sub_1D096 proc near
push	ax
push	bx
push	cx
push	dx
push	si
push	di
push	bp
push	es
xor	ah, ah		; Logical Exclusive OR
mov	si, ax
shl	si, 1		; Shift	Logical	Left
shl	si, 1		; Shift	Logical	Left
shl	si, 1		; Shift	Logical	Left
add	si, ax		; Add
add	si, ds:word_219C4 ; Add
mov	bx, offset unk_2C39C
xlat			; Table	Lookup Translation
call	sub_1D05F	; Call Procedure

add	ds:word_2CCDC, ax ; Add
mov	cl, al
mov	ch, 9
mov	ax, ds:word_2D094
mov	es, ds:_word_2D08A_framebuffer_active
call	ds:_ptr_22D65_gfx_vtable_func_07 ; Indirect Call Far Procedure
pop	es
pop	bp
pop	di
pop	si
pop	dx
pop	cx
pop	bx
pop	ax
retn			; Return Near from Procedure

sub_1D096 endp




sub_1D0D1 proc near
inc	cx		; Increment by 1
inc	sp		; Increment by 1
inc	bp		; Increment by 1
dec	sp		; Decrement by 1
dec	di		; Decrement by 1
push	ax
push	bx
push	sp
push	bp
and	ds:word_215CC, bx ; Logical AND
sbb	[bx+si], bx	; Integer Subtraction with Borrow
sbb	[bx], dl	; Integer Subtraction with Borrow
pop	ds

sub_1D0D1 endp




sub_1D0E3 proc near
push	cx
push	di
push	es
push	cs
pop	es
assume es:seg000
mov	di, offset unk_2C581
mov	cx, 9
repne scasb		; Compare String
pop	es
assume es:nothing
stc			; Set Carry Flag
jnz	short loc_1D0FC	; Jump if Not Zero (ZF=0)

mov	al, cs:[di+8]
mov	ah, 0Dh
sub	ah, cl		; Integer Subtraction


loc_1D0FC:
pop	di
pop	cx
retn			; Return Near from Procedure

sub_1D0E3 endp ; sp =  2




sub_1D0FF proc near
call	sub_1D068	; Call Procedure

call	sub_1D0E3	; Call Procedure

jb	short sub_1D096	; Jump if Below	(CF=1)

call	sub_1E270	; Call Procedure

push	es
push	ax
mov	ax, 32h	; '2'
call	_sub_1C13E_open_sprite_sheet ; RES_BOOK_HSQ

call	sub_1D05F	; Call Procedure

pop	ax
mov	cl, ah
xor	ah, ah		; Logical Exclusive OR
add	ds:word_2CCDC, ax ; Add
mov	al, cl
sub	bx, 13h		; Integer Subtraction
jnb	short loc_1D127	; Jump if Not Below (CF=0)

xor	bx, bx		; Logical Exclusive OR


loc_1D127:		; dx = sprite x
call	_sub_1C22F_draw_sprite ; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

pop	es
call	sub_1E283	; Call Procedure

retn			; Return Near from Procedure

sub_1D0FF endp




sub_1D12F proc near
push	ax
push	bx
push	cx
push	dx
push	si
push	di
push	bp
push	es
xor	ah, ah		; Logical Exclusive OR
mov	si, ax
shl	si, 1		; Shift	Logical	Left
shl	si, 1		; Shift	Logical	Left
shl	si, 1		; Shift	Logical	Left
sub	si, ax		; Integer Subtraction
add	si, ds:word_219C6 ; Add
mov	bx, offset unk_2C41C
xlat			; Table	Lookup Translation
call	sub_1D05F	; Call Procedure

add	ds:word_2CCDC, ax ; Add
mov	cl, al
mov	ch, 7
mov	ax, ds:word_2D094
mov	es, ds:_word_2D08A_framebuffer_active
call	ds:_ptr_22D65_gfx_vtable_func_07 ; Indirect Call Far Procedure
pop	es
pop	bp
pop	di
pop	si
pop	dx
pop	cx
pop	bx
pop	ax
retn			; Return Near from Procedure

sub_1D12F endp




sub_1D16A proc near
call	sub_1E270	; Call Procedure

push	es
xor	ah, ah		; Logical Exclusive OR
sub	al, 20h	; ' '   ; Integer Subtraction
push	ax
mov	ax, 19
call	_sub_1C13E_open_sprite_sheet ; RES_GENERIC_HSQ

pop	ax
push	ax
call	sub_1C1F4	; Call Procedure

lods	word ptr es:[si] ; Load	String
xor	ah, ah		; Logical Exclusive OR
add	al, 2		; Add
call	sub_1D05F	; Call Procedure

add	ds:word_2CCDC, ax ; Add
pop	ax
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9

pop	es
call	sub_1E283	; Call Procedure

retn			; Return Near from Procedure

sub_1D16A endp




sub_1D194 proc near
mov	ds:word_2D094, cx
call	sub_1D04E	; Call Procedure

sub_1D194 endp




sub_1D19B proc near
push	si
mov	si, ax
call	sub_1CF70	; Call Procedure

call	sub_1D1BB	; Call Procedure

pop	si


locret_1D1A5:		; Return Near from Procedure
retn

sub_1D19B endp




sub_1D1A6 proc near
lodsw			; Load String
mov	cx, ax
inc	ax		; Increment by 1
jz	short locret_1D1A5 ; Jump if Zero (ZF=1)

lodsw			; Load String
mov	dx, ax
lodsw			; Load String
mov	bx, ax
lodsw			; Load String
xchg	ax, cx		; Exchange Register/Memory with	Register
push	si
call	sub_1D194	; Call Procedure

pop	si
jmp	short sub_1D1A6	; Jump

sub_1D1A6 endp




sub_1D1BB proc near
lods	byte ptr es:[si] ; Load	String
cmp	al, 0FFh	; Compare Two Operands
jz	short locret_1D1A5 ; Jump if Zero (ZF=1)

cmp	al, 0Dh		; Compare Two Operands
jz	short loc_1D1D1	; Jump if Zero (ZF=1)

or	al, al		; Logical Inclusive OR
jns	short loc_1D1CB	; Jump if Not Sign (SF=0)

mov	al, 40h	; '@'


loc_1D1CB:		; Indirect Call	Near Procedure
call	word ptr ds:2518h
jmp	short sub_1D1BB	; Jump

; ���������������������������������������������������������������������������

loc_1D1D1:
mov	ax, ds:word_2CCE0
mov	ds:word_2CCDC, ax
mov	ax, 0Ah
cmp	ds:off_219C8, 0D12Fh ; Compare Two Operands
jnz	short loc_1D1E5	; Jump if Not Zero (ZF=0)

mov	ax, 7


loc_1D1E5:		; Add
add	ds:word_2CCE2, ax
add	ds:word_2CCDE, ax ; Add
jmp	short sub_1D1BB	; Jump

sub_1D1BB endp

; ���������������������������������������������������������������������������
lodsw			; Load String
mov	cx, ax




sub_1D1F2 proc near
call	_sub_1C137_load_icons_sprites ;	Call Procedure


loc_1D1F5:
push	cx
call	sub_1D200	; Call Procedure

pop	cx
add	si, 0Eh		; Add
loop	loc_1D1F5	; Loop while CX	!= 0

retn			; Return Near from Procedure

sub_1D1F2 endp




sub_1D200 proc near
push	ds:_word_2D08A_framebuffer_active
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

push	si
test	byte ptr [si+8], 40h ; Logical Compare
jz	short loc_1D218	; Jump if Zero (ZF=1)

mov	es, ds:_word_2D08A_framebuffer_active
push	si
call	ds:_ptr_22D65_gfx_vtable_func_09 ; Indirect Call Far Procedure
pop	si


loc_1D218:		; Logical Compare
test	byte ptr [si+8], 20h
jnz	short loc_1D233	; Jump if Not Zero (ZF=0)

lodsw			; Load String
mov	dx, ax
lodsw			; Load String
mov	bx, ax
lodsw			; Load String
mov	di, ax
lodsw			; Load String
mov	cx, ax
lodsw			; Load String
lodsw			; Load String
inc	ax		; Increment by 1
jz	short loc_1D233	; Jump if Zero (ZF=1)

dec	ax		; Decrement by 1
call	_sub_1C22F_draw_sprite ; dx = sprite x
			; bx = sprite y
			; cs:_byte_1C21A_pal_offset
			; ax = flags:7 | sprite_index:9


loc_1D233:
pop	si
pop	ds:_word_2D08A_framebuffer_active
retn			; Return Near from Procedure

sub_1D200 endp




sub_1D239 proc near
mov	ch, 2
jmp	short loc_1D23F	; Jump

sub_1D239 endp




sub_1D23D proc near
xor	cx, cx		; Logical Exclusive OR


loc_1D23F:
mov	si, offset unk_20FA4
mov	ax, [si+0Ah]
sub	ax, 0		; Integer Subtraction
mov	cl, 3
div	cl		; Unsigned Divide
cmp	ch, ah		; Compare Two Operands
jz	short locret_1D27F ; Jump if Zero (ZF=1)

mov	ax, 1
jnb	short loc_1D257	; Jump if Not Below (CF=0)

neg	ax		; Two's Complement Negation


loc_1D257:
push	ax
push	si
add	[si+0Ah], ax	; Add
add	[si+18h], ax	; Add
mov	cx, 2
call	sub_1D1F2	; Call Procedure

call	sub_11A34	; Call Procedure

mov	ax, 0Ah
call	sub_1E387	; Call Procedure

pop	si
pop	ax
add	[si+0Ah], ax	; Add
add	[si+18h], ax	; Add
mov	cx, 2
call	sub_1D1F2	; Call Procedure

call	sub_11A34	; Call Procedure


locret_1D27F:		; Return Near from Procedure
retn

sub_1D23D endp




sub_1D280 proc near
cmp	ds:_byte_2D196_in_transition?, 0 ; Compare Two Operands
jle	short locret_1D2BC ; Jump if Less or Equal (ZF=1 | SF!=OF)

call	sub_1E270	; Call Procedure

mov	ds:_byte_2D196_in_transition?, 0
call	sub_1D239	; Call Procedure

mov	cx, 11h


loc_1D295:
push	cx
push	ds:_word_2C32A_time_passed
mov	si, ds:_word_2D08E_framebuffer2_seg
mov	al, 18h
call	sub_1C0D5	; Call Procedure

pop	bx


loc_1D2A4:
push	bx
call	sub_1A7C2	; Call Procedure

pop	bx
mov	ax, ds:_word_2C32A_time_passed
sub	ax, bx		; Integer Subtraction
cmp	ax, 6		; Compare Two Operands
jb	short loc_1D2A4	; Jump if Below	(CF=1)

pop	cx
loop	loc_1D295	; Loop while CX	!= 0

call	sub_1D23D	; Call Procedure

call	sub_1E283	; Call Procedure


locret_1D2BC:		; Return Near from Procedure
retn

sub_1D280 endp




sub_1D2BD proc near
mov	al, byte ptr ds:loc_1DCE6
push	ax


loc_1D2C1:
mov	ds:_byte_2D196_in_transition?, 80h ; '�'
mov	si, ds:word_2168A
mov	si, [si]
lodsb			; Load String
cmp	al, 0FFh	; Compare Two Operands
jz	short loc_1D2DA	; Jump if Zero (ZF=1)

and	al, 0Fh		; Logical AND
jz	short loc_1D2DA	; Jump if Zero (ZF=1)

call	sub_1D2EA	; Call Procedure

jmp	short loc_1D2C1	; Jump

; ���������������������������������������������������������������������������

loc_1D2DA:
pop	ax
mov	ds:0DCE6h, al
retn			; Return Near from Procedure

sub_1D2BD endp

; ���������������������������������������������������������������������������
call	loc_1D2FD	; Call Procedure




sub_1D2E2 proc near
call	sub_1D316	; Call Procedure

call	sub_1D2EA	; Call Procedure

jmp	short sub_1D280	; Jump

sub_1D2E2 endp




sub_1D2EA proc near
mov	si, ds:21DAh
mov	di, [si]
mov	al, [di]
and	al, 0Fh		; Logical AND
cmp	al, 0Fh		; Compare Two Operands
jz	short locret_1D315 ; Jump if Zero (ZF=1)

mov	ax, [si+2]
call	ax		; Indirect Call	Near Procedure


loc_1D2FD:
mov	si, ds:21DAh
cmp	si, 21BEh	; Compare Two Operands
jz	short locret_1D315 ; Jump if Zero (ZF=1)

sub	si, 4		; Integer Subtraction
mov	ds:21DAh, si
mov	bp, [si]
mov	cl, 0FFh
call	sub_1D36D	; Call Procedure


locret_1D315:		; Return Near from Procedure
retn

sub_1D2EA endp




sub_1D316 proc near
cmp	ds:_word_22A56_hnm_file_handle,	0 ; Compare Two	Operands
jnz	short locret_1D322 ; Jump if Not Zero (ZF=0)

or	ds:_byte_2D196_in_transition?, 1 ; Logical Inclusive OR


locret_1D322:		; Return Near from Procedure
retn

sub_1D316 endp




sub_1D323 proc near
call	sub_1D316	; Call Procedure

call	sub_1D338	; Call Procedure

call	sub_1D280	; Call Procedure

jmp	loc_1D410	; Jump

sub_1D323 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_1AC7E

loc_1D32F:		; Call Procedure
call	sub_1D316

call	loc_1D33A	; Call Procedure

jmp	sub_1D280	; Jump

; END OF FUNCTION CHUNK	FOR sub_1AC7E



sub_1D338 proc near
mov	cl, 0FFh


loc_1D33A:
mov	si, ds:21DAh
mov	di, [si]
mov	al, [bp+0]
cmp	al, [di]	; Compare Two Operands
jz	short loc_1D368	; Jump if Zero (ZF=1)

jb	short loc_1D35B	; Jump if Below	(CF=1)

push	bp
push	bx
push	cx
mov	ax, [si+2]
call	ax		; Indirect Call	Near Procedure
sub	word ptr ds:21DAh, 4 ; Integer Subtraction
pop	cx
pop	bx
pop	bp
jmp	short loc_1D33A	; Jump

; ���������������������������������������������������������������������������

loc_1D35B:		; Compare Two Operands
cmp	si, 21D6h
jz	short loc_1D368	; Jump if Zero (ZF=1)

add	si, 4		; Add
mov	ds:21DAh, si


loc_1D368:
mov	[si], bp
mov	[si+2],	bx

sub_1D338 endp




sub_1D36D proc near
mov	si, ds:21DAh
mov	[si], bp
mov	si, bp
add	bp, 2		; Add


loc_1D378:		; Compare Two Operands
cmp	word ptr [bp+0], 0
jz	short loc_1D388	; Jump if Zero (ZF=1)

and	word ptr [bp+0], 7FFFh ; Logical AND
add	bp, 4		; Add
jmp	short loc_1D378	; Jump

; ���������������������������������������������������������������������������

loc_1D388:		; Compare Two Operands
cmp	cx, 5
jnb	short sub_1D397	; Jump if Not Below (CF=0)

shl	cx, 1		; Shift	Logical	Left
shl	cx, 1		; Shift	Logical	Left
mov	bx, cx
or	byte ptr [bx+si+3], 80h	; Logical Inclusive OR

sub_1D36D endp




sub_1D397 proc near
mov	ds:byte_2D197, 0FFh
mov	si, ds:word_2168A
mov	si, [si]
inc	si		; Increment by 1
lodsb			; Load String
mov	ds:0DCE4h, al
cbw			; AL ->	AX (with sign)
add	si, ax		; Add
xor	cx, cx		; Logical Exclusive OR
mov	ds:0DCE8h, cl
mov	byte ptr ds:0DCE5h, 0FFh


loc_1D3B5:
mov	ax, [si]
or	ax, ax		; Logical Inclusive OR
jz	short loc_1D3EF	; Jump if Zero (ZF=1)

cmp	cl, 4		; Compare Two Operands
jb	short loc_1D3D9	; Jump if Below	(CF=1)

cmp	byte ptr ds:0DCE4h, 0 ;	Compare	Two Operands
jnz	short loc_1D3CD	; Jump if Not Zero (ZF=0)

cmp	word ptr [si+4], 0 ; Compare Two Operands
jz	short loc_1D3D9	; Jump if Zero (ZF=1)


loc_1D3CD:		; Logical Inclusive OR
or	byte ptr ds:0DCE4h, 80h
mov	ax, 0A0h ; '�'
mov	ds:0DCE5h, cl


loc_1D3D9:		; Add
add	si, 4
push	cx
push	si
inc	byte ptr ds:0DCE8h ; Increment by 1
call	sub_1D48A	; Call Procedure

pop	si
pop	cx
inc	cx		; Increment by 1
cmp	cl, 5		; Compare Two Operands
jb	short loc_1D3B5	; Jump if Below	(CF=1)

jmp	short loc_1D410	; Jump

; ���������������������������������������������������������������������������

loc_1D3EF:		; Compare Two Operands
cmp	byte ptr ds:0DCE4h, 0
jz	short loc_1D403	; Jump if Zero (ZF=1)

mov	ax, 0A0h ; '�'
mov	ds:0DCE5h, cl
inc	byte ptr ds:0DCE8h ; Increment by 1
jmp	short loc_1D405	; Jump

; ���������������������������������������������������������������������������

loc_1D403:		; Logical Exclusive OR
xor	ax, ax


loc_1D405:
push	cx
call	sub_1D48A	; Call Procedure

pop	cx
inc	cx		; Increment by 1
cmp	cl, 5		; Compare Two Operands
jb	short loc_1D403	; Jump if Below	(CF=1)


loc_1D410:
mov	dx, ds:0DC36h
mov	bx, ds:0DC38h
jmp	sub_1D50F	; Jump

sub_1D397 endp




sub_1D41B proc near
mov	bp, ds:word_2168A
mov	bp, [bp+0]
retn			; Return Near from Procedure

sub_1D41B endp

; ���������������������������������������������������������������������������
add	byte ptr [si], 10h ; Add
jmp	sub_1D397	; Jump

; ���������������������������������������������������������������������������
mov	byte ptr [si], 0
jmp	sub_1D397	; Jump

; ���������������������������������������������������������������������������
mov	cx, 4
jmp	short loc_1D445	; Jump

; ���������������������������������������������������������������������������
mov	cx, 3
jmp	short loc_1D445	; Jump

; ���������������������������������������������������������������������������
mov	cx, 2
jmp	short loc_1D445	; Jump

; ���������������������������������������������������������������������������
mov	cx, 1
jmp	short loc_1D445	; Jump

; ���������������������������������������������������������������������������
xor	cx, cx		; Logical Exclusive OR


loc_1D445:		; Call Procedure
call	sub_1D454

or	bx, bx		; Logical Inclusive OR
jz	short locret_1D453 ; Jump if Zero (ZF=1)

test	ah, 40h		; Logical Compare
jnz	short locret_1D453 ; Jump if Not Zero (ZF=0)

jmp	bx		; Indirect Near	Jump

; ���������������������������������������������������������������������������

locret_1D453:		; Return Near from Procedure
retn




sub_1D454 proc near
mov	si, ds:21DAh
mov	si, [si]
inc	si		; Increment by 1
xor	ch, ch		; Logical Exclusive OR
cmp	cl, ds:0DCE5h	; Compare Two Operands
jz	short loc_1D475	; Jump if Zero (ZF=1)

lodsb			; Load String
cbw			; AL ->	AX (with sign)
add	si, ax		; Add
mov	ax, cx
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
add	si, ax		; Add
mov	ax, [si]
mov	bx, [si+2]
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1D475:
mov	ax, 0A0h ; '�'
mov	bx, 0D423h
cmp	byte ptr ds:0DCE4h, 0 ;	Compare	Two Operands
js	short locret_1D489 ; Jump if Sign (SF=1)

mov	bx, 0D429h
jg	short locret_1D489 ; Jump if Greater (ZF=0 & SF=OF)

xor	bx, bx		; Logical Exclusive OR


locret_1D489:		; Return Near from Procedure
retn

sub_1D454 endp




sub_1D48A proc near
push	ds:_word_2D08A_framebuffer_active
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

cmp	byte ptr ds:0DCE6h, 0 ;	Compare	Two Operands
jle	short loc_1D49B	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure


loc_1D49B:		; Call Procedure
call	sub_1D075

mov	si, ax
mov	al, 0Eh
mul	cl		; Unsigned Multiplication of AL	or AX
mov	di, ax
add	di, 1B48h	; Add
mov	bx, [di+2]
inc	bx		; Increment by 1
mov	dx, 5Dh	; ']'
call	sub_1D04E	; Call Procedure

mov	byte ptr ds:0DBE5h, 0F3h ; '�'
and	byte ptr [di+8], 7Fh ; Logical AND
mov	ax, si
and	si, 3FFFh	; Logical AND
jz	short loc_1D4E9	; Jump if Zero (ZF=1)

mov	al, 0F5h ; '�'
test	ah, 40h		; Logical Compare
jnz	short loc_1D4DA	; Jump if Not Zero (ZF=0)

or	byte ptr [di+8], 80h ; Logical Inclusive OR
mov	al, 0FAh ; '�'
or	ah, ah		; Logical Inclusive OR
jns	short loc_1D4DA	; Jump if Not Sign (SF=0)

xchg	al, ds:0DBE5h	; Exchange Register/Memory with	Register


loc_1D4DA:
mov	ds:0DBE4h, al
call	sub_1CF70	; Call Procedure

mov	al, 20h	; ' '
call	word ptr ds:2518h ; Indirect Call Near Procedure
call	sub_1D1BB	; Call Procedure


loc_1D4E9:		; Call Procedure
call	sub_1D05F

mov	si, 0DCE9h
mov	[si], dx
mov	[si+2],	bx
mov	word ptr [si+4], 0E3h ;	'�'
add	bx, 7		; Add
mov	[si+6],	bx
mov	al, ds:0DBE5h
mov	es, ds:_word_2D08A_framebuffer_active
call	dword ptr ds:38DDh ; Indirect Call Far Procedure
pop	ds:_word_2D08A_framebuffer_active
retn			; Return Near from Procedure

sub_1D48A endp




sub_1D50F proc near
push	bx
push	cx
push	dx
push	si
push	di
push	bp
cmp	byte ptr ds:4774h, 0 ; Compare Two Operands
jz	short loc_1D523	; Jump if Zero (ZF=1)

mov	cl, ds:4775h
jmp	loc_1D5DD	; Jump

; ���������������������������������������������������������������������������

loc_1D523:		; Call Procedure
call	sub_1D41B

cmp	bp, 1F0Eh	; Compare Two Operands
jnz	short loc_1D575	; Jump if Not Zero (ZF=0)

cmp	byte ptr ds:11C9h, 0 ; Compare Two Operands
jnz	short loc_1D575	; Jump if Not Zero (ZF=0)

mov	di, 1BF0h
cmp	byte ptr [di+8], 0 ; Compare Two Operands
jns	short loc_1D545	; Jump if Not Sign (SF=0)

call	sub_1D6FE	; Call Procedure

mov	cx, ds:47C4h
jb	short loc_1D55D	; Jump if Below	(CF=1)


loc_1D545:
push	bp
call	sub_19285	; Call Procedure

pop	bp
jnb	short loc_1D575	; Jump if Not Below (CF=0)

mov	al, cl
sub	al, 0Fh		; Integer Subtraction
jb	short loc_1D55D	; Jump if Below	(CF=1)

inc	al		; Increment by 1
cmp	al, ds:476Bh	; Compare Two Operands
jnz	short loc_1D55D	; Jump if Not Zero (ZF=0)

mov	cx, 17h


loc_1D55D:
mov	bp, cx
add	bp, 78h	; 'x'   ; Add
xor	cx, cx		; Logical Exclusive OR


loc_1D565:		; Call Procedure
call	sub_1D454

cmp	ax, bp		; Compare Two Operands
jz	short loc_1D5DD	; Jump if Zero (ZF=1)

inc	cx		; Increment by 1
cmp	cl, ds:0DCE8h	; Compare Two Operands
jb	short loc_1D565	; Jump if Below	(CF=1)

jmp	short loc_1D5DB	; Jump

; ���������������������������������������������������������������������������

loc_1D575:		; Compare Two Operands
cmp	bp, 1F7Eh
jnz	short loc_1D5B1	; Jump if Not Zero (ZF=0)

mov	di, 1BE2h
cmp	byte ptr [di+8], 0 ; Compare Two Operands
jns	short loc_1D593	; Jump if Not Sign (SF=0)

xor	cx, cx		; Logical Exclusive OR
call	sub_1D6FE	; Call Procedure

jb	short loc_1D5DD	; Jump if Below	(CF=1)

mov	di, 1BF0h
call	sub_1D6FE	; Call Procedure

jb	short loc_1D5DD	; Jump if Below	(CF=1)


loc_1D593:		; Compare Two Operands
cmp	byte ptr ds:1BF8h, 0
jns	short loc_1D5B1	; Jump if Not Sign (SF=0)

mov	di, 1BFEh
call	sub_1D6FE	; Call Procedure

mov	cl, 3
jb	short loc_1D5DD	; Jump if Below	(CF=1)

call	sub_192C9	; Call Procedure

jnb	short loc_1D5B1	; Jump if Not Below (CF=0)

cmp	cx, ds:47C4h	; Compare Two Operands
mov	cl, 2
jz	short loc_1D5DD	; Jump if Zero (ZF=1)


loc_1D5B1:		; Compare Two Operands
cmp	bx, 98h	; '�'
jb	short loc_1D5DB	; Jump if Below	(CF=1)

mov	cl, 0FFh
mov	di, 1B48h
cmp	dx, [di]	; Compare Two Operands
jb	short loc_1D5DD	; Jump if Below	(CF=1)

cmp	dx, [di+4]	; Compare Two Operands
jnb	short loc_1D5DD	; Jump if Not Below (CF=0)

xor	cx, cx		; Logical Exclusive OR


loc_1D5C7:		; Compare Two Operands
cmp	bx, [di+2]
jbe	short loc_1D5DB	; Jump if Below	or Equal (CF=1 | ZF=1)

cmp	bx, [di+6]	; Compare Two Operands
jbe	short loc_1D5DD	; Jump if Below	or Equal (CF=1 | ZF=1)

add	di, 0Eh		; Add
inc	cx		; Increment by 1
cmp	cl, ds:0DCE8h	; Compare Two Operands
jb	short loc_1D5C7	; Jump if Below	(CF=1)


loc_1D5DB:
mov	cl, 0FFh


loc_1D5DD:
mov	al, cl
xchg	cl, ds:0DCE7h	; Exchange Register/Memory with	Register
cmp	al, cl		; Compare Two Operands
jz	short loc_1D610	; Jump if Zero (ZF=1)

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

or	cl, cl		; Logical Inclusive OR
js	short loc_1D5FC	; Jump if Sign (SF=1)

cmp	cl, ds:0DCE8h	; Compare Two Operands
jnb	short loc_1D5FC	; Jump if Not Below (CF=0)

push	ax
call	sub_1D454	; Call Procedure

call	sub_1D48A	; Call Procedure

pop	ax


loc_1D5FC:		; Compare Two Operands
cmp	al, ds:0DCE8h
jnb	short loc_1D60D	; Jump if Not Below (CF=0)

mov	cx, ax
call	sub_1D454	; Call Procedure

or	ah, 80h		; Logical Inclusive OR
call	sub_1D48A	; Call Procedure


loc_1D60D:		; Call Procedure
call	_sub_1DBEC_draw_mouse


loc_1D610:
pop	bp
pop	di
pop	si
pop	dx
pop	cx
pop	bx
retn			; Return Near from Procedure

sub_1D50F endp




sub_1D617 proc near
push	ax
mov	ax, 90h	; '�'
jmp	short loc_1D621	; Jump

sub_1D617 endp




sub_1D61D proc near
push	ax
mov	ax, 9Fh	; '�'


loc_1D621:		; Call Procedure
call	sub_1E270

call	sub_1D41B	; Call Procedure

mov	si, 1F7Eh
cmp	[si+2],	ax	; Compare Two Operands
mov	[si+2],	ax
jz	short loc_1D649	; Jump if Zero (ZF=1)

cmp	bp, si		; Compare Two Operands
jnz	short loc_1D649	; Jump if Not Zero (ZF=0)

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

xor	cx, cx		; Logical Exclusive OR
call	sub_1D454	; Call Procedure

call	sub_1D48A	; Call Procedure

mov	byte ptr ds:0DCE7h, 0FFh
call	_sub_1DBEC_draw_mouse ;	Call Procedure


loc_1D649:		; Call Procedure
call	sub_1E283

pop	ax
retn			; Return Near from Procedure

sub_1D61D endp




sub_1D64E proc near
push	bx
push	dx
xor	bx, bx		; Logical Exclusive OR
xor	dx, dx		; Logical Exclusive OR
call	sub_1D50F	; Call Procedure

pop	dx
pop	bx
retn			; Return Near from Procedure

sub_1D64E endp




sub_1D65A proc near
test	byte ptr [di+9], 20h ; Logical Compare
jz	short locret_1D676 ; Jump if Zero (ZF=1)

mov	ds:0DC60h, di
inc	word ptr [di+0Ah] ; Increment by 1
push	si
push	di
mov	si, di
mov	cx, 1
call	sub_1D1F2	; Call Procedure

pop	di
pop	si
dec	word ptr [di+0Ah] ; Decrement by 1


locret_1D676:		; Return Near from Procedure
retn

sub_1D65A endp

; ���������������������������������������������������������������������������
call	sub_1E270	; Call Procedure

xor	si, si		; Logical Exclusive OR
xchg	si, ds:0DC60h	; Exchange Register/Memory with	Register
or	si, si		; Logical Inclusive OR
jz	short loc_1D690	; Jump if Zero (ZF=1)

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

mov	cx, 1
call	sub_1D1F2	; Call Procedure

call	_sub_1DBEC_draw_mouse ;	Call Procedure


loc_1D690:		; Call Procedure
call	sub_1E283

retn			; Return Near from Procedure




sub_1D694 proc near
mov	ax, ds:2582h
mov	di, 1B9Ch
cmp	ax, 260Ch	; Compare Two Operands
jz	short loc_1D6B5	; Jump if Zero (ZF=1)

add	di, 0Eh		; Add
cmp	ax, 2650h	; Compare Two Operands
jz	short loc_1D6B5	; Jump if Zero (ZF=1)

add	di, 0Eh		; Add
cmp	ax, 2694h	; Compare Two Operands
jz	short loc_1D6B5	; Jump if Zero (ZF=1)

add	di, 0Eh		; Add
cmp	ax, 26D8h	; Compare Two Operands


loc_1D6B5:		; Set Carry Flag
stc
retn			; Return Near from Procedure

sub_1D694 endp




sub_1D6B7 proc near
call	sub_1D694	; Call Procedure

jz	short locret_1D6FD ; Jump if Zero (ZF=1)

mov	di, 1AE4h
mov	cx, [di]
add	di, 2		; Add
cmp	word ptr ds:2570h, 1AD6h ; Compare Two Operands
jnz	short loc_1D6CF	; Jump if Not Zero (ZF=0)

sub	cx, 5		; Integer Subtraction


loc_1D6CF:		; Compare Two Operands
cmp	byte ptr ds:46D9h, 0
jz	short loc_1D6DC	; Jump if Zero (ZF=1)

mov	cx, 5
mov	di, 1B48h


loc_1D6DC:		; Compare Two Operands
cmp	byte ptr [di+8], 0
jns	short loc_1D6F7	; Jump if Not Sign (SF=0)

cmp	dx, [di]	; Compare Two Operands
jbe	short loc_1D6F7	; Jump if Below	or Equal (CF=1 | ZF=1)

cmp	dx, [di+4]	; Compare Two Operands
jnb	short loc_1D6F7	; Jump if Not Below (CF=0)

cmp	bx, [di+2]	; Compare Two Operands
jbe	short loc_1D6F7	; Jump if Below	or Equal (CF=1 | ZF=1)

dec	bx		; Decrement by 1
cmp	bx, [di+6]	; Compare Two Operands
inc	bx		; Increment by 1
jb	short locret_1D6FD ; Jump if Below (CF=1)


loc_1D6F7:		; Add
add	di, 0Eh
loop	loc_1D6DC	; Loop while CX	!= 0

clc			; Clear	Carry Flag


locret_1D6FD:		; Return Near from Procedure
retn

sub_1D6B7 endp




sub_1D6FE proc near
cmp	dx, [di]	; Compare Two Operands
jbe	short loc_1D710	; Jump if Below	or Equal (CF=1 | ZF=1)

cmp	dx, [di+4]	; Compare Two Operands
jnb	short loc_1D710	; Jump if Not Below (CF=0)

cmp	bx, [di+2]	; Compare Two Operands
jbe	short loc_1D710	; Jump if Below	or Equal (CF=1 | ZF=1)

cmp	bx, [di+6]	; Compare Two Operands
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1D710:		; Clear	Carry Flag
clc
retn			; Return Near from Procedure

sub_1D6FE endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_1D717

loc_1D712:
mov	si, 1CCAh
jmp	short sub_1D72B	; Jump

; END OF FUNCTION CHUNK	FOR sub_1D717



sub_1D717 proc near

; FUNCTION CHUNK AT D712 SIZE 00000005 BYTES

cmp	byte ptr ds:46EBh, 0 ; Compare Two Operands
jnz	short loc_1D712	; Jump if Not Zero (ZF=0)

mov	si, 1C76h
test	ds:byte_20679, 3 ; Logical Compare
jz	short sub_1D72B	; Jump if Zero (ZF=1)

mov	si, 1D72h

sub_1D717 endp




sub_1D72B proc near
push	ds
pop	es
mov	di, offset unk_2103E
mov	cx, 42
rep movsw		; Move Byte(s) from String to String


loc_1D735:		; Call Procedure
call	sub_1D741

mov	si, 1B8Eh
mov	cx, 6
jmp	sub_1D1F2	; Jump

sub_1D72B endp




sub_1D741 proc near
mov	ax, ds:1B0Ch
sub	ax, 3		; Integer Subtraction
cmp	ax, 3		; Compare Two Operands
jnb	short locret_1D759 ; Jump if Not Below (CF=0)

mov	si, 2458h
mov	es, word ptr ds:0DBD8h
mov	al, 0F0h ; '�'
call	dword ptr ds:38DDh ; Indirect Call Far Procedure


locret_1D759:		; Return Near from Procedure
retn

sub_1D741 endp

; ���������������������������������������������������������������������������
mov	si, 1C36h
call	loc_1D795	; Call Procedure

call	sub_11A34	; Call Procedure




sub_1D763 proc near
mov	si, 1C0Ch
mov	ax, 40h	; '@'
mov	[si+0Ah], ax
mov	[si+18h], ax
mov	cx, 2
call	sub_1D1F2	; Call Procedure

mov	si, 1C0Ch
mov	al, ds:1152h
cbw			; AL ->	AX (with sign)
add	ax, 41h	; 'A'   ; Add
mov	[si+0Ah], ax
mov	al, ds:1153h
cbw			; AL ->	AX (with sign)
add	ax, 41h	; 'A'   ; Add
mov	[si+18h], ax
mov	cx, 2
jmp	sub_1D1F2	; Jump

sub_1D763 endp




sub_1D792 proc near
mov	si, 1C66h


loc_1D795:
push	ds
pop	es
mov	di, 1AEEh
mov	cx, 4


loc_1D79D:		; Move Byte(s) from String to String
movsw
movsw			; Move Byte(s) from String to String
add	di, 0Ah		; Add
loop	loc_1D79D	; Loop while CX	!= 0

mov	si, 1AE6h
mov	cx, 3
jmp	sub_1D1F2	; Jump

sub_1D792 endp




sub_1D7AD proc near
mov	si, 1C56h
jmp	short loc_1D795	; Jump

sub_1D7AD endp




sub_1D7B2 proc near
mov	si, 1C46h
jmp	short loc_1D795	; Jump

sub_1D7B2 endp




sub_1D7B7 proc near
mov	ax, ds:_word_2C32A_time_passed
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
cmp	ah, ds:byte_2D1A1 ; Compare Two	Operands
jz	short locret_1D814 ; Jump if Zero (ZF=1)

mov	ds:byte_2D1A1, ah
mov	ax, ds:word_216D2
or	ax, ax		; Logical Inclusive OR
jz	short locret_1D814 ; Jump if Zero (ZF=1)

mov	bx, ds:word_20602
push	bx
or	al, al		; Logical Inclusive OR
jz	short loc_1D7E0	; Jump if Zero (ZF=1)

dec	al		; Decrement by 1
test	al, 1		; Logical Compare
jz	short loc_1D7E0	; Jump if Zero (ZF=1)

mov	bl, 0FFh


loc_1D7E0:		; Logical Inclusive OR
or	ah, ah
jz	short loc_1D7ED	; Jump if Zero (ZF=1)

dec	ah		; Decrement by 1
test	ah, 1		; Logical Compare
jz	short loc_1D7ED	; Jump if Zero (ZF=1)

mov	bh, 0FFh


loc_1D7ED:
mov	ds:word_216D2, ax
mov	ds:word_20602, bx
cmp	ds:word_20FAE, 0 ; Compare Two Operands
jnz	short loc_1D810	; Jump if Not Zero (ZF=0)

push	ds:_word_21C34_resource_id
call	_sub_1C137_load_icons_sprites ;	Call Procedure

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	sub_1D763	; Call Procedure

call	_sub_1DBEC_draw_mouse ;	Call Procedure

pop	ax
call	_sub_1C13E_open_sprite_sheet ; Call Procedure


loc_1D810:
pop	word ptr ds:1152h


locret_1D814:		; Return Near from Procedure
retn

sub_1D7B7 endp




sub_1D815 proc near
mov	ax, ds:_word_2C32A_time_passed

loc_1D818:
mov	ds:word_2D118, ax
mov	ds:byte_2D0FB, 0


loc_1D820:		; Compare Two Operands
cmp	ds:_byte_2C398_key_hit_qq, 2Fh ; '/'

loc_1D825:		; Jump if Not Zero (ZF=0)
jnz	short loc_1D831


loc_1D827:		; Compare Two Operands
cmp	ds:_byte_2C34E_key_w_status, 0FFh

loc_1D82C:		; Jump if Not Zero (ZF=0)
jnz	short loc_1D831


loc_1D82E:		; Call Procedure
call	sub_1B270


loc_1D831:		; Compare Two Operands
cmp	ds:byte_23B89, 0
jnz	short loc_1D83E	; Jump if Not Zero (ZF=0)

call	sub_1D7B7	; Call Procedure

call	sub_11B0D	; Call Procedure


loc_1D83E:		; Call Procedure
call	sub_1D9D2


loc_1D841:		; Compare Two Operands
cmp	ds:byte_23B89, 0

loc_1D846:		; Jump if Zero (ZF=1)
jz	short loc_1D84B


loc_1D848:		; Call Procedure
call	sub_10D8E


loc_1D84B:		; Call Procedure
call	sub_1E3CC

mov	ds:0, ax
call	sub_14F0C	; Call Procedure

cmp	byte ptr ds:0DC4Bh, 0 ;	Compare	Two Operands
jz	short loc_1D860	; Jump if Zero (ZF=1)

call	sub_1D962	; Call Procedure

jmp	short loc_1D866	; Jump

; ���������������������������������������������������������������������������

loc_1D860:		; Call Procedure
call	_sub_1DF1E_get_mouse_pos_etc

call	_sub_1DB4C_mouse_stuff ; Call Procedure


loc_1D866:		; Call Procedure
call	_sub_1DC20_redraw_mouse

mov	di, dx
xchg	di, ds:word_2D112 ; Exchange Register/Memory with Register
mov	cx, bx
xchg	cx, ds:word_2D114 ; Exchange Register/Memory with Register
sub	di, dx		; Integer Subtraction
sub	cx, bx		; Integer Subtraction
neg	di		; Two's Complement Negation
neg	cx		; Two's Complement Negation
mov	si, ds:word_21A20
and	ax, 0Fh		; Logical AND
jnz	short loc_1D893	; Jump if Not Zero (ZF=0)

call	sub_1D50F	; Call Procedure

mov	ax, cx
or	ax, di		; Logical Inclusive OR
jz	short $+2	; Jump if Zero (ZF=1)
call	word ptr [si]	; Indirect Call	Near Procedure
jmp	short loc_1D820	; Jump

; ���������������������������������������������������������������������������

loc_1D893:
mov	bp, ds:_word_2C32A_time_passed
mov	ds:word_2D10A, bp
cmp	byte ptr ds:4774h, 0 ; Compare Two Operands
jz	short loc_1D8B1	; Jump if Zero (ZF=1)

and	al, 5		; Logical AND
cmp	al, 5		; Compare Two Operands
jnz	short loc_1D8D7	; Jump if Not Zero (ZF=0)

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

call	sub_11707	; Call Procedure

jmp	loc_1D820	; Jump

; ���������������������������������������������������������������������������

loc_1D8B1:		; Logical Compare
test	al, 5
jnz	short loc_1D8BA	; Jump if Not Zero (ZF=0)

add	si, 2		; Add
shr	ax, 1		; Shift	Logical	Right


loc_1D8BA:		; Logical AND
and	al, 5
dec	al		; Decrement by 1
jnz	short loc_1D8F4	; Jump if Not Zero (ZF=0)

mov	bp, ds:0DC5Ch
or	bp, bp		; Logical Inclusive OR
jnz	short loc_1D8DA	; Jump if Not Zero (ZF=0)

mov	ax, cx
or	ax, di		; Logical Inclusive OR
jz	short loc_1D8D7	; Jump if Zero (ZF=1)

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

mov	al, ds:0DC35h
call	word ptr [si+0Ah] ; Indirect Call Near Procedure


loc_1D8D7:		; Jump
jmp	loc_1D820

; ���������������������������������������������������������������������������

loc_1D8DA:
mov	ax, ds:_word_2C32A_time_passed
sub	ax, ds:word_2D10E ; Integer Subtraction
cmp	ax, 32h	; '2'   ; Compare Two Operands
jb	short loc_1D8D7	; Jump if Below	(CF=1)

call	sub_1D6B7	; Call Procedure

jnb	short loc_1D8D7	; Jump if Not Below (CF=0)

cmp	di, bp		; Compare Two Operands
jnz	short loc_1D8D7	; Jump if Not Zero (ZF=0)

call	_sub_1DBB2_call_restore_cursor ; Call Procedure

jmp	short loc_1D92B	; Jump

; ���������������������������������������������������������������������������

loc_1D8F4:		; Call Procedure
call	_sub_1DBB2_call_restore_cursor

call	nullsub_4	; Call Procedure

sub	al, 3		; Integer Subtraction
jz	short loc_1D944	; Jump if Zero (ZF=1)

cmp	si, ds:2570h	; Compare Two Operands
jnz	short loc_1D90E	; Jump if Not Zero (ZF=0)

call	sub_1D6B7	; Call Procedure

jb	short loc_1D918	; Jump if Below	(CF=1)

push	si
call	sub_19215	; Call Procedure

pop	si


loc_1D90E:
mov	al, ds:0DC35h
call	word ptr [si+2]	; Indirect Call	Near Procedure
jmp	loc_1D820	; Jump

; ���������������������������������������������������������������������������

locret_1D917:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1D918:
mov	ds:word_2D110, di
call	sub_1D65A	; Call Procedure

test	byte ptr [di+9], 40h ; Logical Compare
jz	short loc_1D92B	; Jump if Zero (ZF=1)

mov	ds:word_2D10C, di
jmp	short loc_1D935	; Jump

; ���������������������������������������������������������������������������

loc_1D92B:
mov	ds:_byte_2C34D_key_enter_status, 0
mov	ds:byte_2C36A, 0


loc_1D935:
mov	ax, ds:_word_2C32A_time_passed
mov	ds:word_2D10E, ax
mov	al, byte ptr ds:word_2D0E4+1
call	word ptr [di+0Ch] ; Indirect Call Near Procedure
jmp	loc_1D820	; Jump

; ���������������������������������������������������������������������������

loc_1D944:
mov	di, ds:0DC5Ch
mov	word ptr ds:0DC5Ch, 0
or	di, di		; Logical Inclusive OR
jnz	short loc_1D92B	; Jump if Not Zero (ZF=0)

mov	al, ds:0DC35h
call	word ptr [si+6]	; Indirect Call	Near Procedure
jmp	loc_1D820	; Jump

sub_1D815 endp




sub_1D95B proc near
mov	ax, offset unk_21A22

sub_1D95B endp




sub_1D95E proc near
mov	ds:word_21A20, ax
retn			; Return Near from Procedure

sub_1D95E endp




sub_1D962 proc near
mov	ax, ds:_word_2C32A_time_passed
sub	al, ds:0DC4Ah	; Integer Subtraction
cmp	al, 6		; Compare Two Operands
jb	short loc_1D9CF	; Jump if Below	(CF=1)

mov	cx, 2
cmp	al, 0Ch		; Compare Two Operands
jb	short loc_1D97A	; Jump if Below	(CF=1)

dec	cx		; Decrement by 1
cmp	al, 18h		; Compare Two Operands
jb	short loc_1D97A	; Jump if Below	(CF=1)

dec	cx		; Decrement by 1


loc_1D97A:
mov	ax, ds:_word_2C32A_time_passed
mov	ds:byte_2D0FA, al
dec	ds:byte_2D0FB	; Decrement by 1
mov	dx, ds:word_2D0FC
mov	bx, ds:word_2D0FE
sub	dx, ds:_word_2D0E6_mouse_pos_y ; Integer Subtraction
jz	short loc_1D9A3	; Jump if Zero (ZF=1)

jcxz	short loc_1D99B	; Jump if CX is	0

sar	dx, cl		; Shift	Arithmetic Right
or	dl, 1		; Logical Inclusive OR
jmp	short loc_1D9A3	; Jump

; ���������������������������������������������������������������������������

loc_1D99B:
mov	ax, dx
sar	ax, 1		; Shift	Arithmetic Right
sar	ax, 1		; Shift	Arithmetic Right
sub	dx, ax		; Integer Subtraction


loc_1D9A3:		; Integer Subtraction
sub	bx, ds:_word_2D0E8_mouse_pos_x
jz	short loc_1D9BA	; Jump if Zero (ZF=1)

jcxz	short loc_1D9B2	; Jump if CX is	0

sar	bx, cl		; Shift	Arithmetic Right
or	bl, 1		; Logical Inclusive OR
jmp	short loc_1D9BA	; Jump

; ���������������������������������������������������������������������������

loc_1D9B2:
mov	ax, bx
sar	ax, 1		; Shift	Arithmetic Right
sar	ax, 1		; Shift	Arithmetic Right
sub	bx, ax		; Integer Subtraction


loc_1D9BA:
mov	ax, bx
or	ax, dx		; Logical Inclusive OR
jnz	short loc_1D9C7	; Jump if Not Zero (ZF=0)

mov	ds:byte_2D0FB, 0
jmp	short loc_1D9CF	; Jump

; ���������������������������������������������������������������������������

loc_1D9C7:		; Call Procedure
call	sub_1DAAF

mov	byte ptr ds:word_2D0E4,	0


loc_1D9CF:		; Jump
jmp	_sub_1DB4C_mouse_stuff

sub_1D962 endp




sub_1D9D2 proc near
call	sub_1ACE6	; Call Procedure

mov	ax, ds:_word_2C32A_time_passed
mov	cx, ax
mov	bx, ax
mov	si, offset word_2D118
xchg	cx, [si]	; Exchange Register/Memory with	Register
sub	bx, cx		; Integer Subtraction
mov	cx, [si+2]
jcxz	short locret_1DA03 ; Jump if CX	is 0

add	si, 4		; Add


loc_1D9EB:		; Load String
lodsw
mov	bp, ax
mov	ax, bx
add	ax, [si]	; Add
cmp	ax, bp		; Compare Two Operands
jnb	short loc_1DA04	; Jump if Not Below (CF=0)

mov	[si], ax
add	si, 4		; Add
loop	loc_1D9EB	; Loop while CX	!= 0


loc_1D9FD:
mov	ds:word_2D116, 0


locret_1DA03:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1DA04:		; Logical Inclusive OR
or	bp, bp
jz	short loc_1DA0E	; Jump if Zero (ZF=1)

xor	dx, dx		; Logical Exclusive OR
div	bp		; Unsigned Divide
mov	[si], dx


loc_1DA0E:		; Integer Subtraction
sub	si, 2
push	bx
push	cx
push	si
mov	ds:word_2D116, sp
call	word ptr [si+4]	; Indirect Call	Near Procedure
pop	si
pop	cx
pop	bx
add	si, 6		; Add
loop	loc_1D9EB	; Loop while CX	!= 0

jmp	short loc_1D9FD	; Jump

sub_1D9D2 endp




sub_1DA25 proc near
push	ds
pop	es
mov	di, offset word_2D11A
mov	ax, [di]
inc	ax		; Increment by 1
cmp	ax, 14h		; Compare Two Operands
ja	short locret_1DA52 ; Jump if Above (CF=0 & ZF=0)

stosw			; Store	String
dec	ax		; Decrement by 1
add	ax, ax		; Add
mov	bx, ax
add	ax, ax		; Add
add	ax, bx		; Add
add	di, ax		; Add
mov	ax, bp
stosw			; Store	String
xor	ax, ax		; Logical Exclusive OR
stosw			; Store	String
mov	ax, si
stosw			; Store	String
mov	bp, ds:word_2D116
or	bp, bp		; Logical Inclusive OR
jz	short locret_1DA52 ; Jump if Zero (ZF=1)

inc	word ptr [bp+2]	; Increment by 1


locret_1DA52:		; Return Near from Procedure
retn

sub_1DA25 endp




sub_1DA53 proc near
mov	ds:word_2D11A, 0
mov	ds:byte_23B87, 0
retn			; Return Near from Procedure

sub_1DA53 endp




sub_1DA5F proc near
mov	di, offset word_2D11A
mov	cx, [di]
jcxz	short locret_1DA72 ; Jump if CX	is 0

add	di, 6		; Add


loc_1DA69:		; Compare Two Operands
cmp	[di], si
jz	short loc_1DA73	; Jump if Zero (ZF=1)

add	di, 6		; Add
loop	loc_1DA69	; Loop while CX	!= 0


locret_1DA72:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1DA73:		; Integer Subtraction
sub	di, 4
dec	ds:word_2D11A	; Decrement by 1
mov	bp, ds:word_2D116
or	bp, bp		; Logical Inclusive OR
jz	short loc_1DA90	; Jump if Zero (ZF=1)

cmp	di, [bp+0]	; Compare Two Operands
ja	short loc_1DA8D	; Jump if Above	(CF=0 &	ZF=0)

sub	word ptr [bp+0], 6 ; Integer Subtraction

loc_1DA8B:		; Jump
jmp	short loc_1DA90

; ���������������������������������������������������������������������������

loc_1DA8D:		; Decrement by 1
dec	word ptr [bp+2]


loc_1DA90:		; Decrement by 1
dec	cx
jz	short locret_1DA72 ; Jump if Zero (ZF=1)

mov	ax, cx
add	cx, cx		; Add
add	cx, ax		; Add
mov	si, di
add	si, 6		; Add
push	ds
pop	es
rep movsw		; Move Byte(s) from String to String
retn			; Return Near from Procedure

sub_1DA5F endp




sub_1DAA3 proc near
mov	ds:word_2D108, 0
retn			; Return Near from Procedure

sub_1DAA3 endp




sub_1DAAA proc near
mov	ds:word_2D108, si
retn			; Return Near from Procedure

sub_1DAAA endp




sub_1DAAF proc near
mov	si, offset _ptr_2D0EA_mouse_clip_region
mov	ax, ds:_word_2D0E6_mouse_pos_y
add	ax, dx		; Add
cmp	ax, [si]	; Compare Two Operands
jge	short loc_1DABD	; Jump if Greater or Equal (SF=OF)

mov	ax, [si]


loc_1DABD:		; Add
add	si, 2
cmp	ax, [si]	; Compare Two Operands
jle	short loc_1DAC6	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

mov	ax, [si]


loc_1DAC6:
mov	ds:_word_2D0E6_mouse_pos_y, ax
add	si, 2		; Add
mov	ax, ds:_word_2D0E8_mouse_pos_x
add	ax, bx		; Add
cmp	ax, [si]	; Compare Two Operands
jge	short loc_1DAD7	; Jump if Greater or Equal (SF=OF)

mov	ax, [si]


loc_1DAD7:		; Add
add	si, 2
cmp	ax, [si]	; Compare Two Operands
jle	short loc_1DAE0	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

mov	ax, [si]


loc_1DAE0:
mov	ds:_word_2D0E8_mouse_pos_x, ax

sub_1DAAF endp




_sub_1DAE3_set_mouse_pos proc near
test	ds:_byte_21DF2_cmd_args, 40h ; Test cmd	arg NOM	= NoMouse
jnz	short locret_1DB02 ; Jump if Not Zero (ZF=0)

mov	ax, ds:_word_2D0E6_mouse_pos_y
mov	dx, ds:_word_2D0E8_mouse_pos_x
mov	cx, ds:_word_21A30_mouse_pos_scaler
shl	ax, cl		; Shift	Logical	Left
mov	cl, ch
shl	dx, cl		; Shift	Logical	Left
mov	cx, ax
mov	ax, 4
int	33h		; - MS MOUSE - POSITION	MOUSE CURSOR
			; CX = column, DX = row


locret_1DB02:		; Return Near from Procedure
retn

_sub_1DAE3_set_mouse_pos endp




sub_1DB03 proc near
call	_sub_1DBB2_call_restore_cursor ; Call Procedure

mov	ds:_word_2D0E6_mouse_pos_y, dx
mov	ds:_word_2D0E8_mouse_pos_x, bx
call	_sub_1DAE3_set_mouse_pos ; Call	Procedure

jmp	_sub_1DBEC_draw_mouse ;	Jump

sub_1DB03 endp




_sub_1DB14_define_mouse_range proc near
mov	di, offset _ptr_2D0EA_mouse_clip_region
mov	[di], cx
mov	[di+2],	dx
mov	[di+4],	ax
mov	[di+6],	bx
test	ds:_byte_21DF2_cmd_args, 40h ; Test cmd	arg NOM	= NoMouse
jnz	short locret_1DB43 ; Jump if Not Zero (ZF=0)

push	ax
push	bx
mov	al, ds:2580h
call	sub_1DB44	; Call Procedure

mov	ax, 7
int	33h		; - MS MOUSE - DEFINE HORIZONTAL CURSOR	RANGE
			; CX = minimum column, DX = maximum column
pop	dx
pop	cx
mov	al, ds:2581h
call	sub_1DB44	; Call Procedure

mov	ax, 8
int	33h		; - MS MOUSE - DEFINE VERTICAL CURSOR RANGE
			; CX = minimum row, DX = maximum row


locret_1DB43:		; Return Near from Procedure
retn

_sub_1DB14_define_mouse_range endp




sub_1DB44 proc near
xchg	ax, cx		; Exchange Register/Memory with	Register
shl	ax, cl		; Shift	Logical	Left
shl	dx, cl		; Shift	Logical	Left
mov	cx, ax
retn			; Return Near from Procedure

sub_1DB44 endp




_sub_1DB4C_mouse_stuff proc near
mov	ax, ds:word_2D0E4
and	al, 3		; Logical AND
mov	byte ptr ds:word_2D0E4+1, al
xor	ah, al		; Logical Exclusive OR
add	ah, ah		; Add
add	ah, ah		; Add
or	al, ah		; Logical Inclusive OR
xor	ah, ah		; Logical Exclusive OR
mov	dx, ds:_word_2D0E6_mouse_pos_y
mov	bx, ds:_word_2D0E8_mouse_pos_x
retn			; Return Near from Procedure

_sub_1DB4C_mouse_stuff endp




sub_1DB67 proc near
cmp	ds:_byte_2D0F7_cursor_unk_q, 0 ; Compare Two Operands
jns	short locret_1DBAB ; Jump if Not Sign (SF=0)

inc	ds:_byte_2D0F7_cursor_unk_q ; Increment	by 1
jmp	short _sub_1DBEC_draw_mouse ; Jump

sub_1DB67 endp




sub_1DB74 proc near
cmp	ds:_byte_2D0F6_cursor_hide_counter, 0 ;	Compare	Two Operands
js	short locret_1DBAB ; Jump if Sign (SF=1)

push	bx
push	dx
mov	bx, ds:_word_21A32_mouse_cursor_image_addr
mov	dx, ds:_word_2D0F2_mouse_draw_pos_y
sub	dx, [bx]	; Integer Subtraction
mov	bx, [bx+2]
neg	bx		; Two's Complement Negation
add	bx, ds:_word_2D0F4_mouse_draw_pos_x ; Add
cmp	dx, [si+4]	; Compare Two Operands
jge	short loc_1DBA9	; Jump if Greater or Equal (SF=OF)

cmp	bx, [si+6]	; Compare Two Operands
jge	short loc_1DBA9	; Jump if Greater or Equal (SF=OF)

add	dx, 10h		; Add
cmp	dx, [si]	; Compare Two Operands
jle	short loc_1DBA9	; Jump if Less or Equal	(ZF=1 |	SF!=OF)

add	bx, 10h		; Add
cmp	bx, [si+2]	; Compare Two Operands
jg	short loc_1DBAC	; Jump if Greater (ZF=0	& SF=OF)


loc_1DBA9:
pop	dx
pop	bx


locret_1DBAB:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1DBAC:
pop	dx
pop	bx

loc_1DBAE:		; Decrement by 1
dec	ds:_byte_2D0F7_cursor_unk_q

sub_1DB74 endp




_sub_1DBB2_call_restore_cursor proc near
push	ax

loc_1DBB3:
mov	al, ds:_byte_2D0F6_cursor_hide_counter

loc_1DBB6:		; Decrement by 1
dec	ds:_byte_2D0F6_cursor_hide_counter
js	short loc_1DBC0	; Jump if Sign (SF=1)

inc	ds:_byte_2D0F6_cursor_hide_counter ; Increment by 1


loc_1DBC0:		; Logical Inclusive OR
or	al, al

loc_1DBC2:		; Jump if Sign (SF=1)
js	short loc_1DBC8


loc_1DBC4:		; Indirect Call	Far Procedure
call	ds:_ptr_22D65_gfx_vtable_func_04_restore_mouse_area_qq


loc_1DBC8:
pop	ax

locret_1DBC9:		; Return Near from Procedure
retn

_sub_1DBB2_call_restore_cursor endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_14B2B

loc_1DBCA:
mov	ax, ds:_word_2D0F4_mouse_draw_pos_x

loc_1DBCD:		; Compare Two Operands
cmp	ax, 152
jnb	short locret_1DBE2 ; Jump if Not Below (CF=0)


loc_1DBD2:		; Compare Two Operands
cmp	ax, 136

loc_1DBD5:		; Jump if Not Below (CF=0)
jnb	short _sub_1DBB2_call_restore_cursor


loc_1DBD7:		; Decrement by 1
dec	ds:_byte_2D0F6_cursor_hide_counter

loc_1DBDB:		; Jump if Sign (SF=1)
js	short locret_1DBE2


loc_1DBDD:
mov	ds:_byte_2D0F6_cursor_hide_counter, 80h	; '�'


locret_1DBE2:		; Return Near from Procedure
retn

; END OF FUNCTION CHUNK	FOR sub_14B2B
; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR _sub_1CC96_hnm_decode_video_frame

loc_1DBE3:
mov	ax, ds:_word_2D0F4_mouse_draw_pos_x

loc_1DBE6:		; Compare Two Operands
cmp	ax, 152

loc_1DBE9:		; Jump if Below	(CF=1)
jb	short _sub_1DBEC_draw_mouse

retn			; Return Near from Procedure

; END OF FUNCTION CHUNK	FOR _sub_1CC96_hnm_decode_video_frame



_sub_1DBEC_draw_mouse proc near
inc	ds:_byte_2D0F6_cursor_hide_counter ; Increment by 1
js	short locret_1DC1A ; Jump if Sign (SF=1)

jnz	short loc_1DC1B	; Jump if Not Zero (ZF=0)

push	ax
push	bx
push	cx
push	dx
push	si
push	di
push	bp
mov	dx, ds:_word_2D0E6_mouse_pos_y

loc_1DBFF:
mov	bx, ds:_word_2D0E8_mouse_pos_x
mov	ds:_word_2D0F2_mouse_draw_pos_y, dx
mov	ds:_word_2D0F4_mouse_draw_pos_x, bx

loc_1DC0B:
mov	si, ds:_word_21A32_mouse_cursor_image_addr
call	ds:_ptr_22D65_gfx_vtable_func_03_draw_mouse ; Indirect Call Far	Procedure
pop	bp
pop	di
pop	si
pop	dx
pop	cx
pop	bx
pop	ax


locret_1DC1A:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1DC1B:		; Decrement by 1
dec	ds:_byte_2D0F6_cursor_hide_counter
retn			; Return Near from Procedure

_sub_1DBEC_draw_mouse endp




_sub_1DC20_redraw_mouse	proc near
push	ax
push	bx
push	cx
push	dx
push	si
push	di

loc_1DC26:
push	bp

loc_1DC27:
mov	dx, ds:_word_2D0E6_mouse_pos_y

loc_1DC2B:
mov	bx, ds:_word_2D0E8_mouse_pos_x

loc_1DC2F:		; Call Procedure
call	sub_1DC6A
mov	si, bp

loc_1DC34:		; Exchange Register/Memory with	Register
xchg	bp, ds:_word_21A32_mouse_cursor_image_addr

loc_1DC38:		; Logical Exclusive OR
xor	al, al
xchg	al, ds:_byte_2D0F6_cursor_hide_counter ; Exchange Register/Memory with Register
or	al, al		; Logical Inclusive OR
js	short loc_1DC56	; Jump if Sign (SF=1)


loc_1DC42:		; Compare Two Operands
cmp	dx, ds:_word_2D0F2_mouse_draw_pos_y

loc_1DC46:		; Jump if Not Zero (ZF=0)
jnz	short loc_1DC52


loc_1DC48:		; Compare Two Operands
cmp	bx, ds:_word_2D0F4_mouse_draw_pos_x

loc_1DC4C:		; Jump if Not Zero (ZF=0)
jnz	short loc_1DC52


loc_1DC4E:		; Compare Two Operands
cmp	si, bp


loc_1DC50:		; Jump if Zero (ZF=1)
jz	short loc_1DC62


loc_1DC52:		; Indirect Call	Far Procedure
call	ds:_ptr_22D65_gfx_vtable_func_04_restore_mouse_area_qq


loc_1DC56:
mov	ds:_word_2D0F2_mouse_draw_pos_y, dx

loc_1DC5A:
mov	ds:_word_2D0F4_mouse_draw_pos_x, bx

loc_1DC5E:		; Indirect Call	Far Procedure
call	ds:_ptr_22D65_gfx_vtable_func_03_draw_mouse


loc_1DC62:
pop	bp
pop	di

loc_1DC64:
pop	si
pop	dx
pop	cx
pop	bx

loc_1DC68:
pop	ax
retn			; Return Near from Procedure

_sub_1DC20_redraw_mouse	endp




sub_1DC6A proc near
cmp	ds:byte_21D6E, 0 ; Compare Two Operands
mov	bp, offset unk_21A78
jnz	short locret_1DCDF ; Jump if Not Zero (ZF=0)

mov	bp, offset word_21A34
cmp	byte ptr ds:4723h, 0 ; Compare Two Operands
jnz	short locret_1DCDF ; Jump if Not Zero (ZF=0)

mov	di, ds:word_2D108
or	di, di		; Logical Inclusive OR
jz	short locret_1DCDF ; Jump if Zero (ZF=1)

cmp	bx, 9Bh	; '�'   ; Compare Two Operands
jge	short locret_1DCDF ; Jump if Greater or	Equal (SF=OF)

call	sub_1D6FE	; Call Procedure

mov	bp, offset unk_21A78
jb	short locret_1DCDF ; Jump if Below (CF=1)

cmp	bx, [di+2]	; Compare Two Operands
jl	short loc_1DCB9	; Jump if Less (SF!=OF)

cmp	bx, [di+6]	; Compare Two Operands
jge	short loc_1DCB9	; Jump if Greater or Equal (SF=OF)

mov	bp, offset unk_21B88
mov	ax, [di]
sub	ax, dx		; Integer Subtraction
cmp	ax, 50		; Compare Two Operands
jb	short locret_1DCDF ; Jump if Below (CF=1)

mov	bp, offset unk_21B00
mov	ax, dx
sub	ax, [di+4]	; Integer Subtraction
cmp	ax, 50		; Compare Two Operands
jb	short locret_1DCDF ; Jump if Below (CF=1)

jmp	short loc_1DCDC	; Jump

; ���������������������������������������������������������������������������

loc_1DCB9:		; Compare Two Operands
cmp	dx, [di]
jl	short loc_1DCDC	; Jump if Less (SF!=OF)

cmp	dx, [di+4]	; Compare Two Operands
jge	short loc_1DCDC	; Jump if Greater or Equal (SF=OF)

mov	bp, offset unk_21ABC
mov	ax, [di+2]
sub	ax, bx		; Integer Subtraction
cmp	ax, 19h		; Compare Two Operands
jb	short locret_1DCDF ; Jump if Below (CF=1)

mov	bp, offset unk_21B44
mov	ax, bx
sub	ax, [di+6]	; Integer Subtraction
cmp	ax, 19h		; Compare Two Operands
jb	short locret_1DCDF ; Jump if Below (CF=1)


loc_1DCDC:
mov	bp, offset word_21A34


locret_1DCDF:		; Return Near from Procedure
retn

sub_1DC6A endp




_sub_1DCE0_read_game_port proc near
mov	dx, 201h
pushf			; Push Flags Register onto the Stack
cli			; Clear	Interrupt Flag
out	dx, al		; Game I/O port
			; bits 0-3: Coordinates	(resistive, time-dependent inputs)
			; bits 4-7: Buttons/Triggers (digital inputs)


loc_1DCE6:		; Logical Exclusive OR
xor	bx, bx
mov	cx, bx
mov	di, 800h


loc_1DCED:		; Game I/O port
in	al, dx		; bits 0-3: Coordinates	(resistive, time-dependent inputs)
			; bits 4-7: Buttons/Triggers (digital inputs)
mov	ah, al

loc_1DCF0:		; Shift	Logical	Right
shr	ah, 1

loc_1DCF2:		; Logical AND
and	ax, 101h

loc_1DCF5:		; Jump if Zero (ZF=1)
jz	short loc_1DD09


loc_1DCF7:		; Add
add	cl, al

loc_1DCF9:		; Add with Carry
adc	ch, 0

loc_1DCFC:		; Add
add	bl, ah

loc_1DCFE:		; Add with Carry
adc	bh, 0
dec	di		; Decrement by 1

loc_1DD02:		; Jump if Not Zero (ZF=0)
jnz	short loc_1DCED


loc_1DD04:		; Clear	cmd arg	JOY = Joystick support
and	ds:_byte_21DF2_cmd_args, 7Fh


loc_1DD09:		; Game I/O port
in	al, dx		; bits 0-3: Coordinates	(resistive, time-dependent inputs)
			; bits 4-7: Buttons/Triggers (digital inputs)
popf			; Pop Stack into Flags Register
mov	dx, cx
not	al		; One's Complement Negation

locret_1DD0F:		; Return Near from Procedure
retn

_sub_1DCE0_read_game_port endp




sub_1DD10 proc near
call	_sub_1DCE0_read_game_port ; Call Procedure

mov	ah, al
xor	al, al		; Logical Exclusive OR
test	ah, 30h		; Logical Compare
jz	short loc_1DD1E	; Jump if Zero (ZF=1)

not	al		; One's Complement Negation


loc_1DD1E:
mov	ds:0CEE6h, al
mov	ax, 0FFh
cmp	dx, ds:_word_22E5B_joystick_param ; Compare Two	Operands
ja	short loc_1DD2E	; Jump if Above	(CF=0 &	ZF=0)

xchg	ah, al		; Exchange Register/Memory with	Register
jmp	short loc_1DD36	; Jump

; ���������������������������������������������������������������������������

loc_1DD2E:		; Compare Two Operands
cmp	dx, ds:39ADh
jnb	short loc_1DD36	; Jump if Not Below (CF=0)

xor	ax, ax		; Logical Exclusive OR


loc_1DD36:
mov	ds:byte_2C391, al
mov	ds:byte_2C38F, ah
mov	ax, 0FFh
cmp	bx, ds:word_22E5F ; Compare Two	Operands
ja	short loc_1DD4A	; Jump if Above	(CF=0 &	ZF=0)

xchg	al, ah		; Exchange Register/Memory with	Register
jmp	short loc_1DD52	; Jump

; ���������������������������������������������������������������������������

loc_1DD4A:		; Compare Two Operands
cmp	bx, ds:word_22E61
jnb	short loc_1DD52	; Jump if Not Below (CF=0)

xor	ax, ax		; Logical Exclusive OR


loc_1DD52:
mov	ds:byte_2C394, al
mov	ds:byte_2C38C, ah
retn			; Return Near from Procedure

sub_1DD10 endp




_sub_1DD5A_get_key_hit?	proc near
xor	al, al		; Logical Exclusive OR
xchg	al, ds:_byte_2C398_key_hit_qq ;	Exchange Register/Memory with Register
or	al, al		; Logical Inclusive OR
retn			; Return Near from Procedure

_sub_1DD5A_get_key_hit?	endp




_sub_1DD63_stc_on_user_input proc near
call	sub_1DE7B	; Call Procedure

call	sub_1DE54	; Call Procedure

jz	short loc_1DDAE	; Jump if Zero (ZF=1)

cmp	ds:_byte_2C398_key_hit_qq, 0 ; Compare Two Operands
jnz	short loc_1DDAE	; Jump if Not Zero (ZF=0)

test	ds:_byte_21DF2_cmd_args, 40h ; Test cmd	arg NOM	= NoMouse
jnz	short loc_1DD89	; Jump if Not Zero (ZF=0)

mov	ax, 3
int	33h		; - MS MOUSE - RETURN POSITION AND BUTTON STATUS
			; Return: BX = button status, CX = column, DX =	row
xchg	bx, si		; Exchange Register/Memory with	Register
xor	bx, si		; Logical Exclusive OR
and	bx, si		; Logical AND
and	bl, 7		; Logical AND
jnz	short loc_1DDAE	; Jump if Not Zero (ZF=0)


loc_1DD89:		; Test cmd arg JOY = Joystick
test	ds:_byte_21DF2_cmd_args, 80h
jz	short loc_1DD9E	; Jump if Zero (ZF=1)

push	di
call	_sub_1DCE0_read_game_port ; Call Procedure

pop	di
xchg	ax, di		; Exchange Register/Memory with	Register
xor	ax, di		; Logical Exclusive OR
and	ax, di		; Logical AND
and	al, 30h		; Logical AND
jnz	short loc_1DDAE	; Jump if Not Zero (ZF=0)


loc_1DD9E:
push	si
push	di
call	sub_1E3CC	; Call Procedure

mov	ds:0, ax
call	sub_1D9D2	; Call Procedure

pop	di
pop	si
or	al, 1		; Logical Inclusive OR
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1DDAE:		; Set Carry Flag
stc
retn			; Return Near from Procedure

_sub_1DD63_stc_on_user_input endp




sub_1DDB0 proc near
call	sub_1E270	; Call Procedure

push	ax
mov	ds:_byte_2C398_key_hit_qq, 0
cmp	ds:byte_2172D, 0 ; Compare Two Operands
jnz	short loc_1DDC3	; Jump if Not Zero (ZF=0)

call	sub_1D64E	; Call Procedure


loc_1DDC3:
mov	si, 0FFFFh
mov	di, si
pop	cx
sti			; Set Interrupt	Flag


loc_1DDCA:
push	ds:_word_2C32A_time_passed
push	cx
call	_sub_1DD63_stc_on_user_input ; Call Procedure

pop	cx
pop	ax
jb	short loc_1DDE7	; Jump if Below	(CF=1)

mov	bx, ax


loc_1DDD8:
mov	ax, bx
sub	ax, ss:_word_2C32A_time_passed ; Integer Subtraction
jz	short loc_1DDD8	; Jump if Zero (ZF=1)

add	cx, ax		; Add
jb	short loc_1DDCA	; Jump if Below	(CF=1)

or	al, 1		; Logical Inclusive OR


loc_1DDE7:		; Push Flags Register onto the Stack
pushf
call	sub_1DE4E	; Call Procedure

popf			; Pop Stack into Flags Register
call	sub_1E283	; Call Procedure

retn			; Return Near from Procedure

sub_1DDB0 endp




sub_1DDF0 proc near
cmp	byte ptr ds:unk_2D07D, 0 ; Compare Two Operands
js	short loc_1DE07	; Jump if Sign (SF=1)

call	_sub_1ABA3_check_res_file_open ; Call Procedure

jz	short sub_1DDB0	; Jump if Zero (ZF=1)


loc_1DDFC:		; Call Procedure
call	_sub_1ABA3_check_res_file_open

jz	short loc_1DE07	; Jump if Zero (ZF=1)

call	_sub_1DD63_stc_on_user_input ; Call Procedure

jnb	short loc_1DDFC	; Jump if Not Below (CF=0)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1DE07:
push	ax
or	al, 1		; Logical Inclusive OR
pop	ax
retn			; Return Near from Procedure

sub_1DDF0 endp




_sub_1DE0C_check_user_input_qq proc near
cmp	byte ptr ds:unk_2D07D, 0 ; Compare Two Operands
jns	short loc_1DE07	; Jump if Not Sign (SF=0)

call	sub_1E270	; Call Procedure

mov	ds:_byte_2C398_key_hit_qq, 0
mov	si, 0FFFFh
mov	di, si


loc_1DE20:
mov	ax, 60h	; '`'
sub	ax, ds:word_2D080 ; Integer Subtraction
xor	ah, ah		; Logical Exclusive OR
mov	dl, 6
div	dl		; Unsigned Divide
and	al, 0Fh		; Logical AND
mov	dx, ds:word_2D07E
shl	dx, 1		; Shift	Logical	Left
shl	dx, 1		; Shift	Logical	Left
shl	dx, 1		; Shift	Logical	Left
shl	dx, 1		; Shift	Logical	Left
or	dl, al		; Logical Inclusive OR
cmp	bx, dx		; Compare Two Operands
jbe	short loc_1DE4A	; Jump if Below	or Equal (CF=1 | ZF=1)

push	bx
call	_sub_1DD63_stc_on_user_input ; Call Procedure

pop	bx
jb	short loc_1DDE7	; Jump if Below	(CF=1)

jmp	short loc_1DE20	; Jump

; ���������������������������������������������������������������������������

loc_1DE4A:		; Logical Inclusive OR
or	al, 1
jmp	short loc_1DDE7	; Jump

_sub_1DE0C_check_user_input_qq endp




sub_1DE4E proc near
mov	ds:_byte_2C398_key_hit_qq, 0
retn			; Return Near from Procedure

sub_1DE4E endp




sub_1DE54 proc near
mov	ds:byte_2C399, 0
cmp	ds:_byte_2C398_key_hit_qq, 1 ; Compare Two Operands
jnz	short locret_1DE67 ; Jump if Not Zero (ZF=0)

mov	ds:byte_2C399, 1
jmp	short sub_1DE4E	; Jump

; ���������������������������������������������������������������������������

locret_1DE67:		; Return Near from Procedure
retn

sub_1DE54 endp




sub_1DE68 proc near
call	_sub_1DD5A_get_key_hit?	; Call Procedure

jnz	short sub_1DE68	; Jump if Not Zero (ZF=0)

jmp	_sub_1F08E_clear_keyboard_array	; Jump

sub_1DE68 endp

; ���������������������������������������������������������������������������
db 32h,	0E4h, 0CDh, 16h, 0B4h, 1, 0CDh,	16h
db 75h,	0F6h



nullsub_11 proc	near
retn			; Return Near from Procedure

nullsub_11 endp




sub_1DE7B proc near
cmp	ds:_byte_2C34A_key_p_status, 0 ; Compare Two Operands
jz	short nullsub_11 ; Jump	if Zero	(ZF=1)

cmp	ds:byte_2C330, 0 ; Compare Two Operands
jz	short nullsub_11 ; Jump	if Zero	(ZF=1)

call	sub_1E270	; Call Procedure

mov	al, 1
xchg	al, ds:byte_21C38 ; Exchange Register/Memory with Register
push	ax
push	ds:_word_2C32A_time_passed
call	_sub_1DBB2_call_restore_cursor ; Call Procedure

push	ds:_word_2D08A_framebuffer_active
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

push	ds:_word_2D086_framebuffer_front
call	ds:_ptr_22D65_gfx_vtable_func_01_get_info ; ax = frameptr
			; cx = frame size in bytes
mov	ds:_word_2D086_framebuffer_front, ax
mov	si, offset unk_21DF5
call	sub_17B1B	; Call Procedure

mov	cx, 0F1FEh
mov	dx, 130
mov	bx, 169
mov	ax, 277
call	sub_1D068	; Call Procedure

call	sub_1D194	; Call Procedure

call	sub_1D075	; Call Procedure

mov	dx, 96
mov	bx, 184
mov	ax, 278
mov	cx, 0F1F7h
call	sub_1D194	; Call Procedure


loc_1DED6:		; Compare Two Operands
cmp	ds:_byte_2C34A_key_p_status, 0
jnz	short loc_1DED6	; Jump if Not Zero (ZF=0)

call	sub_1DE68	; Call Procedure


loc_1DEE0:		; Call Procedure
call	_sub_1DD5A_get_key_hit?

jz	short loc_1DEE0	; Jump if Zero (ZF=1)

push	ax
call	sub_1DE68	; Call Procedure

call	sub_1DF07	; Call Procedure

pop	ax
dec	al		; Decrement by 1
jz	short loc_1DEE0	; Jump if Zero (ZF=1)

pop	ds:_word_2D086_framebuffer_front
pop	ds:_word_2D08A_framebuffer_active
pop	ds:_word_2C32A_time_passed
pop	ax
mov	ds:byte_21C38, al
call	sub_1E283	; Call Procedure

xor	ax, ax		; Logical Exclusive OR
retn			; Return Near from Procedure

sub_1DE7B endp




sub_1DF07 proc near
push	ds:_word_21C34_resource_id
mov	si, offset byte_20FF8
mov	cx, 5
call	sub_1D1F2	; Call Procedure

pop	ax
call	_sub_1C13E_open_sprite_sheet ; Call Procedure

call	sub_1D397	; Call Procedure

jmp	_sub_1DBEC_draw_mouse ;	Jump

sub_1DF07 endp




_sub_1DF1E_get_mouse_pos_etc proc near

; FUNCTION CHUNK AT E1D1 SIZE 00000072 BYTES

call	sub_1DE7B	; Call Procedure

xor	al, al		; Logical Exclusive OR
test	ds:_byte_21DF2_cmd_args, 40h ; Test cmd	arg NOM	= NoMouse
jnz	short loc_1DF49	; Jump if Not Zero (ZF=0)

mov	ax, 3
int	33h		; - MS MOUSE - RETURN POSITION AND BUTTON STATUS
			; Return: BX = button status, CX = column, DX =	row
mov	ax, cx
mov	cx, ds:_word_21A30_mouse_pos_scaler
shr	ax, cl		; Shift	Logical	Right
mov	cl, ch
shr	dx, cl		; Shift	Logical	Right
mov	cx, ax
mov	al, bl
and	al, 3		; Logical AND
mov	ds:_word_2D0E6_mouse_pos_y, cx
mov	ds:_word_2D0E8_mouse_pos_x, dx


loc_1DF49:
mov	ds:0DC34h, al
test	ds:_byte_21DF2_cmd_args, 80h ; Test cmd	arg JOY	= Joystick
jz	short loc_1DF56	; Jump if Zero (ZF=1)

call	sub_1DD10	; Call Procedure


loc_1DF56:
mov	si, 0CEC8h
mov	di, ds:0DC48h
xor	dx, dx		; Logical Exclusive OR
mov	bx, dx
mov	ax, dx
mov	cx, 0Dh


loc_1DF66:		; Load String
lodsb
or	al, [si+12h]	; Logical Inclusive OR
jz	short loc_1DF74	; Jump if Zero (ZF=1)

or	ah, [di]	; Logical Inclusive OR
add	dx, [di+2]	; Add
add	bx, [di+4]	; Add


loc_1DF74:		; Add
add	di, 6
loop	loc_1DF66	; Loop while CX	!= 0

mov	al, ds:0CEBAh
or	al, ds:0CE9Dh	; Logical Inclusive OR
or	al, ds:0CEE6h	; Logical Inclusive OR
and	al, 1		; Logical AND
mov	ah, al
xchg	al, ds:0DC57h	; Exchange Register/Memory with	Register
not	al		; One's Complement Negation
and	al, ds:0DC34h	; Logical AND
or	al, ah		; Logical Inclusive OR
mov	ds:0DC34h, al
mov	ax, dx
or	ax, bx		; Logical Inclusive OR
jnz	short loc_1DFB7	; Jump if Not Zero (ZF=0)

mov	ds:0DC51h, ax
mov	ds:0DC53h, ax
mov	ds:0DC55h, ax


locret_1DFA6:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������
db 0A2h, 0E1h, 6Fh, 0E1h, 0CBh,	0E1h, 0B9h
db 0E1h, 8Ch, 0E1h, 0C3h, 0E1h,	92h, 0E1h
db 9Bh,	0E1h
; ���������������������������������������������������������������������������

loc_1DFB7:		; Compare Two Operands
cmp	byte ptr ds:0CE9Eh, 0FFh
jnz	short loc_1DFC1	; Jump if Not Zero (ZF=0)

jmp	loc_1E1D1	; Jump

; ���������������������������������������������������������������������������

loc_1DFC1:
mov	di, 0DFA9h
or	dl, dl		; Logical Inclusive OR
jz	short loc_1DFDB	; Jump if Zero (ZF=1)

jns	short loc_1DFCD	; Jump if Not Sign (SF=0)

add	di, 6		; Add


loc_1DFCD:		; Logical Inclusive OR
or	bl, bl
jz	short loc_1DFE7	; Jump if Zero (ZF=1)

lea	di, [di-2]	; Load Effective Address
js	short loc_1DFE7	; Jump if Sign (SF=1)

add	di, 4		; Add
jmp	short loc_1DFE7	; Jump

; ���������������������������������������������������������������������������

loc_1DFDB:
mov	di, 0DFB3h
or	bl, bl		; Logical Inclusive OR
jz	short locret_1DFA6 ; Jump if Zero (ZF=1)

js	short loc_1DFE7	; Jump if Sign (SF=1)

add	di, 2		; Add


loc_1DFE7:
mov	bx, cs:[di]
sub	sp, 0Ah		; Integer Subtraction
mov	bp, sp
mov	[bp+0],	bx
call	sub_1DE4E	; Call Procedure

mov	dx, ds:0DC36h
mov	bx, ds:0DC38h
mov	di, 1AE4h
mov	cx, [di]
mov	word ptr [bp+2], 8000h
add	di, 2		; Add


loc_1E00A:		; Logical Compare
test	byte ptr [di+8], 80h
jz	short loc_1E02C	; Jump if Zero (ZF=1)

call	sub_1D6FE	; Call Procedure

jb	short loc_1E02C	; Jump if Below	(CF=1)

call	sub_1E159	; Call Procedure

call	word ptr [bp+0]	; Indirect Call	Near Procedure
cmp	ax, [bp+2]	; Compare Two Operands
jnb	short loc_1E02C	; Jump if Not Below (CF=0)

mov	[bp+2],	ax
call	sub_1E159	; Call Procedure

mov	[bp+4],	ax
mov	[bp+6],	si


loc_1E02C:		; Add
add	di, 0Eh
loop	loc_1E00A	; Loop while CX	!= 0

call	sub_1E068	; Call Procedure

call	sub_1E0A2	; Call Procedure

call	sub_1E0DB	; Call Procedure

call	sub_1E11C	; Call Procedure

cmp	word ptr [bp+2], 0 ; Compare Two Operands
js	short loc_1E064	; Jump if Sign (SF=1)

mov	byte ptr ds:0CEBAh, 0
or	byte ptr ds:0CE9Dh, 0 ;	Logical	Inclusive OR
mov	ax, [bp+4]
mov	ds:0DC4Ch, ax
mov	ax, [bp+6]
mov	ds:0DC4Eh, ax
mov	byte ptr ds:0DC4Bh, 64h	; 'd'
mov	ax, ds:_word_2C32A_time_passed
mov	ds:byte_2D0FA, al


loc_1E064:		; Add
add	sp, 0Ah
retn			; Return Near from Procedure

_sub_1DF1E_get_mouse_pos_etc endp




sub_1E068 proc near
push	bp
call	sub_1D41B	; Call Procedure

cmp	bp, 201Ah	; Compare Two Operands
pop	bp
jnz	short locret_1E0A1 ; Jump if Not Zero (ZF=0)

mov	di, 28E9h


loc_1E076:
mov	si, [di+2]
mov	ax, [di]
cmp	ax, dx		; Compare Two Operands
jnz	short loc_1E083	; Jump if Not Zero (ZF=0)

cmp	si, bx		; Compare Two Operands
jz	short loc_1E099	; Jump if Zero (ZF=1)


loc_1E083:		; Indirect Call	Near Procedure
call	word ptr [bp+0]
cmp	ax, [bp+2]	; Compare Two Operands
jnb	short loc_1E099	; Jump if Not Below (CF=0)

mov	[bp+2],	ax
mov	ax, [di]
mov	[bp+4],	ax
mov	si, [di+2]
mov	[bp+6],	si


loc_1E099:		; Add
add	di, 4
cmp	word ptr [di], 0FFFFh ;	Compare	Two Operands
jnz	short loc_1E076	; Jump if Not Zero (ZF=0)


locret_1E0A1:		; Return Near from Procedure
retn

sub_1E068 endp




sub_1E0A2 proc near
cmp	byte ptr ds:46EBh, 0 ; Compare Two Operands
jns	short locret_1E0DA ; Jump if Not Sign (SF=0)

mov	di, 3CBEh
mov	cx, [di]
jcxz	short locret_1E0DA ; Jump if CX	is 0

add	di, 2		; Add


loc_1E0B3:		; Logical Compare
test	byte ptr [di+0Ch], 0C0h
jnz	short loc_1E0D5	; Jump if Not Zero (ZF=0)

call	sub_1D6FE	; Call Procedure

jb	short loc_1E0D5	; Jump if Below	(CF=1)

call	sub_1E159	; Call Procedure

call	word ptr [bp+0]	; Indirect Call	Near Procedure
cmp	ax, [bp+2]	; Compare Two Operands
jnb	short loc_1E0D5	; Jump if Not Below (CF=0)

mov	[bp+2],	ax
call	sub_1E159	; Call Procedure

mov	[bp+4],	ax
mov	[bp+6],	si


loc_1E0D5:		; Add
add	di, 11h
loop	loc_1E0B3	; Loop while CX	!= 0


locret_1E0DA:		; Return Near from Procedure
retn

sub_1E0A2 endp




sub_1E0DB proc near
cmp	byte ptr ds:46EBh, 0 ; Compare Two Operands
jz	short locret_1E0DA ; Jump if Zero (ZF=1)

mov	di, 0A5C0h


loc_1E0E5:		; Compare Two Operands
cmp	word ptr [di], 0
jz	short locret_1E0DA ; Jump if Zero (ZF=1)

mov	si, [di+4]
and	si, 0FFh	; Logical AND
mov	ax, [di+2]
cmp	ax, dx		; Compare Two Operands
jnz	short loc_1E0FC	; Jump if Not Zero (ZF=0)

cmp	si, bx		; Compare Two Operands
jz	short loc_1E117	; Jump if Zero (ZF=1)


loc_1E0FC:		; Indirect Call	Near Procedure
call	word ptr [bp+0]
cmp	ax, [bp+2]	; Compare Two Operands
jnb	short loc_1E117	; Jump if Not Below (CF=0)

mov	[bp+2],	ax
mov	ax, [di+2]
mov	[bp+4],	ax
mov	si, [di+4]
and	si, 0FFh	; Logical AND
mov	[bp+6],	si


loc_1E117:		; Add
add	di, 6
jmp	short loc_1E0E5	; Jump

sub_1E0DB endp




sub_1E11C proc near
test	byte ptr ds:46EBh, 1 ; Logical Compare
jz	short locret_1E0DA ; Jump if Zero (ZF=1)

cmp	word ptr ds:4749h, 0 ; Compare Two Operands
jz	short locret_1E0DA ; Jump if Zero (ZF=1)

mov	di, 2462h
mov	cx, 8


loc_1E130:
mov	ax, [di]
mov	si, [di+2]
cmp	ax, dx		; Compare Two Operands
jnz	short loc_1E13D	; Jump if Not Zero (ZF=0)

cmp	si, bx		; Compare Two Operands
jz	short loc_1E153	; Jump if Zero (ZF=1)


loc_1E13D:		; Indirect Call	Near Procedure
call	word ptr [bp+0]
cmp	ax, [bp+2]	; Compare Two Operands
jnb	short loc_1E153	; Jump if Not Below (CF=0)

mov	[bp+2],	ax
mov	ax, [di]
mov	si, [di+2]
mov	[bp+4],	ax
mov	[bp+6],	si


loc_1E153:		; Add
add	di, 4
loop	loc_1E130	; Loop while CX	!= 0

retn			; Return Near from Procedure

sub_1E11C endp




sub_1E159 proc near
mov	si, [di+6]
mov	ax, si
sub	ax, [di+2]	; Integer Subtraction
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
sub	si, ax		; Integer Subtraction
mov	ax, [di]
add	ax, [di+4]	; Add
shr	ax, 1		; Shift	Logical	Right
retn			; Return Near from Procedure

sub_1E159 endp

; ���������������������������������������������������������������������������
sub	ax, dx		; Integer Subtraction


loc_1E171:		; Integer Subtraction
sub	si, bx


loc_1E173:		; Jump if Not Sign (SF=0)
jns	short loc_1E177

neg	si		; Two's Complement Negation


loc_1E177:		; Compare Two Operands
cmp	ax, 6
jl	short loc_1E186	; Jump if Less (SF!=OF)

cmp	si, 32h	; '2'   ; Compare Two Operands
jnb	short loc_1E186	; Jump if Not Below (CF=0)

add	ax, si		; Add
add	ax, si		; Add
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1E186:
mov	ax, 0FFFFh
mov	si, ax
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������
sub	ax, dx		; Integer Subtraction
neg	ax		; Two's Complement Negation
jmp	short loc_1E171	; Jump

; ���������������������������������������������������������������������������
xchg	ax, si		; Exchange Register/Memory with	Register
sub	ax, bx		; Integer Subtraction
neg	ax		; Two's Complement Negation
sub	si, dx		; Integer Subtraction
jmp	short loc_1E173	; Jump

; ���������������������������������������������������������������������������
xchg	ax, si		; Exchange Register/Memory with	Register
sub	ax, bx		; Integer Subtraction
sub	si, dx		; Integer Subtraction
jmp	short loc_1E173	; Jump

; ���������������������������������������������������������������������������
sub	ax, dx		; Integer Subtraction
sub	si, bx		; Integer Subtraction
neg	si		; Two's Complement Negation


loc_1E1A8:		; Compare Two Operands
cmp	ax, 6
jl	short loc_1E186	; Jump if Less (SF!=OF)

cmp	si, 6		; Compare Two Operands
jl	short loc_1E186	; Jump if Less (SF!=OF)

sub	ax, si		; Integer Subtraction
jns	short locret_1E1B8 ; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


locret_1E1B8:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������
sub	ax, dx		; Integer Subtraction
neg	ax		; Two's Complement Negation
sub	si, bx		; Integer Subtraction
neg	si		; Two's Complement Negation
jmp	short loc_1E1A8	; Jump

; ���������������������������������������������������������������������������
sub	ax, dx		; Integer Subtraction
neg	ax		; Two's Complement Negation
sub	si, bx		; Integer Subtraction
jmp	short loc_1E1A8	; Jump

; ���������������������������������������������������������������������������
sub	ax, dx		; Integer Subtraction
sub	si, bx		; Integer Subtraction
jmp	short loc_1E1A8	; Jump

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR _sub_1DF1E_get_mouse_pos_etc

loc_1E1D1:		; Logical Inclusive OR
or	dl, dl
jz	short loc_1E1F3	; Jump if Zero (ZF=1)

mov	ax, ds:0DC51h
or	ax, ax		; Logical Inclusive OR
jns	short loc_1E1DE	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_1E1DE:		; Compare Two Operands
cmp	ax, 4
jb	short loc_1E1F3	; Jump if Below	(CF=1)

add	dl, dl		; Add
cmp	ax, 0Ch		; Compare Two Operands
jb	short loc_1E1F3	; Jump if Below	(CF=1)

add	dl, dl		; Add
cmp	ax, 24h	; '$'   ; Compare Two Operands
jb	short loc_1E1F3	; Jump if Below	(CF=1)

add	dl, dl		; Add


loc_1E1F3:		; Logical Inclusive OR
or	bl, bl
jz	short loc_1E213	; Jump if Zero (ZF=1)

mov	ax, ds:0DC53h
jns	short loc_1E1FE	; Jump if Not Sign (SF=0)

neg	ax		; Two's Complement Negation


loc_1E1FE:		; Compare Two Operands
cmp	ax, 3
jb	short loc_1E213	; Jump if Below	(CF=1)

add	bl, bl		; Add
cmp	ax, 0Ah		; Compare Two Operands
jb	short loc_1E213	; Jump if Below	(CF=1)

add	bl, bl		; Add
cmp	ax, 1Ch		; Compare Two Operands
jb	short loc_1E213	; Jump if Below	(CF=1)

add	bl, bl		; Add


loc_1E213:
mov	al, byte ptr ds:_word_2C32A_time_passed
mov	ah, al
xchg	ah, byte ptr ds:loc_1DC50 ; Exchange Register/Memory with Register
sub	al, ah		; Integer Subtraction
cmp	al, 8		; Compare Two Operands
jb	short loc_1E224	; Jump if Below	(CF=1)

mov	al, 8


loc_1E224:
mov	cl, al
mov	si, offset unk_2D105
mov	al, dl
call	sub_1E243	; Call Procedure

mov	dx, ax
add	ds:word_2D101, ax ; Add
inc	si		; Increment by 1
mov	al, bl
call	sub_1E243	; Call Procedure

mov	bx, ax
add	ds:word_2D103, ax ; Add
jmp	sub_1DAAF	; Jump

; END OF FUNCTION CHUNK	FOR _sub_1DF1E_get_mouse_pos_etc



sub_1E243 proc near
imul	cl		; Signed Multiply
or	ax, ax		; Logical Inclusive OR
js	short loc_1E25A	; Jump if Sign (SF=1)

add	al, [si]	; Add
mov	ch, al
and	ch, 7		; Logical AND
mov	[si], ch
cbw			; AL ->	AX (with sign)
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1E25A:		; Two's Complement Negation
neg	ax
add	al, [si]	; Add
mov	ch, al
and	ch, 7		; Logical AND
mov	[si], ch
cbw			; AL ->	AX (with sign)
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
neg	ax		; Two's Complement Negation
retn			; Return Near from Procedure

sub_1E243 endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_4. PRESS KEYPAD "+" TO EXPAND]


; Attributes: bp-based frame

sub_1E270 proc near
push	bx
push	cx
push	dx
push	si
push	di
push	bp
mov	bp, sp
xchg	ax, [bp+0Ch]	; Exchange Register/Memory with	Register
push	ax
mov	ax, [bp+0Ch]
mov	bp, [bp+0]
retn			; Return Near from Procedure

sub_1E270 endp ; sp = -0Eh



; Attributes: bp-based frame

sub_1E283 proc near

arg_A= word ptr	 0Ch

pop	ax
mov	bp, sp
xchg	ax, [bp+arg_A]	; Exchange Register/Memory with	Register
pop	bp
pop	di
pop	si
pop	dx
pop	cx
pop	bx
retn			; Return Near from Procedure

sub_1E283 endp ; sp =  0Eh




sub_1E290 proc near
call	sub_1D04E	; Call Procedure

jmp	short loc_1E297	; Jump

sub_1E290 endp




sub_1E295 proc near
xor	ah, ah		; Logical Exclusive OR


loc_1E297:
push	cx
mov	cx, 64h	; 'd'
div	cl		; Unsigned Divide
add	al, 30h	; '0'   ; Add
cmp	al, 30h	; '0'   ; Compare Two Operands
jnz	short loc_1E2A7	; Jump if Not Zero (ZF=0)

mov	al, 20h	; ' '
dec	ch		; Decrement by 1


loc_1E2A7:		; Indirect Call	Near Procedure
call	ds:off_219C8

mov	al, ah
aam			; ASCII	Adjust AX after	Multiply
xchg	al, ah		; Exchange Register/Memory with	Register
add	ax, 3030h	; Add
or	ch, ch		; Logical Inclusive OR
jz	short loc_1E2BE	; Jump if Zero (ZF=1)

cmp	al, 30h	; '0'   ; Compare Two Operands
jnz	short loc_1E2BE	; Jump if Not Zero (ZF=0)

mov	al, 20h	; ' '


loc_1E2BE:		; Indirect Call	Near Procedure
call	ds:off_219C8

mov	al, ah
call	ds:off_219C8	; Indirect Call	Near Procedure

pop	cx
retn			; Return Near from Procedure

sub_1E295 endp

; ���������������������������������������������������������������������������
aam			; ASCII	Adjust AX after	Multiply
xchg	al, ah		; Exchange Register/Memory with	Register
add	ax, 3030h	; Add
call	ds:off_219C8	; Indirect Call	Near Procedure

mov	al, ah
jmp	ds:off_219C8	; Indirect Near	Jump




sub_1E2DB proc near
push	ax
call	sub_1CF70	; Call Procedure

call	sub_1D03C	; Call Procedure

pop	ax

sub_1E2DB endp




sub_1E2E3 proc near
push	bx
push	cx
mov	cx, 64h	; 'd'
mov	bx, cx
cmp	ax, 3E8h	; Compare Two Operands
jb	short loc_1E2F2	; Jump if Below	(CF=1)

mov	ax, 3E7h


loc_1E2F2:		; Unsigned Divide
div	cl
add	al, 30h	; '0'   ; Add


loc_1E2F6:		; Compare Two Operands
cmp	al, 30h	; '0'
jnz	short loc_1E2FE	; Jump if Not Zero (ZF=0)

mov	al, 20h	; ' '
xor	bx, bx		; Logical Exclusive OR


loc_1E2FE:
mov	es:[si-3], al
mov	al, ah
aam			; ASCII	Adjust AX after	Multiply
xchg	al, ah		; Exchange Register/Memory with	Register
add	ax, 3030h	; Add
or	bx, bx		; Logical Inclusive OR
jnz	short loc_1E315	; Jump if Not Zero (ZF=0)

cmp	al, 30h	; '0'   ; Compare Two Operands
jnz	short loc_1E315	; Jump if Not Zero (ZF=0)

mov	al, 20h	; ' '


loc_1E315:
mov	es:[si-2], ax
pop	cx
pop	bx
retn			; Return Near from Procedure

sub_1E2E3 endp ; sp =  2




sub_1E31C proc near
push	bx
push	cx
mov	cx, 3E8h
mov	bx, cx
xor	dx, dx		; Logical Exclusive OR
div	cx		; Unsigned Divide
aam			; ASCII	Adjust AX after	Multiply
xchg	al, ah		; Exchange Register/Memory with	Register
add	ax, 3030h	; Add
cmp	al, 30h	; '0'   ; Compare Two Operands
jnz	short loc_1E33D	; Jump if Not Zero (ZF=0)

mov	al, 20h	; ' '
cmp	ah, 30h	; '0'   ; Compare Two Operands
jnz	short loc_1E33D	; Jump if Not Zero (ZF=0)

mov	ah, al
xor	bx, bx		; Logical Exclusive OR


loc_1E33D:
mov	es:[si-5], ax
mov	ax, dx
xor	dx, dx		; Logical Exclusive OR
mov	cx, 64h	; 'd'
div	cl		; Unsigned Divide
add	al, 30h	; '0'   ; Add
or	bx, bx		; Logical Inclusive OR
jnz	short loc_1E2FE	; Jump if Not Zero (ZF=0)

inc	bx		; Increment by 1
jmp	short loc_1E2F6	; Jump

sub_1E31C endp




sub_1E353 proc near
push	ax
push	ds:_word_2C32A_time_passed
call	bp		; Indirect Call	Near Procedure
pop	bx
pop	bp


loc_1E35C:		; Compare Two Operands
cmp	ds:byte_2172D, 0
jz	short loc_1E378	; Jump if Zero (ZF=1)

push	bx
push	cx
push	dx
push	si
push	di
push	bp
push	es
call	_sub_1DD63_stc_on_user_input ; Call Procedure

pop	es
pop	bp
pop	di
pop	si
pop	dx
pop	cx
pop	bx
jb	short locret_1E386 ; Jump if Below (CF=1)

jmp	short loc_1E37B	; Jump

; ���������������������������������������������������������������������������

loc_1E378:		; Call Procedure
call	sub_1DE7B


loc_1E37B:
mov	ax, ds:_word_2C32A_time_passed
sub	ax, bx		; Integer Subtraction
cmp	ax, bp		; Compare Two Operands
jb	short loc_1E35C	; Jump if Below	(CF=1)

or	al, 1		; Logical Inclusive OR


locret_1E386:		; Return Near from Procedure
retn

sub_1E353 endp




sub_1E387 proc near
push	ax
push	cx
mov	cx, ax
jcxz	short loc_1E39D	; Jump if CX is	0

pushf			; Push Flags Register onto the Stack
sti			; Set Interrupt	Flag


loc_1E38F:
mov	ax, ss:_word_2C32A_time_passed


loc_1E393:		; Compare Two Operands
cmp	ax, ss:_word_2C32A_time_passed
jz	short loc_1E393	; Jump if Zero (ZF=1)

loop	loc_1E38F	; Loop while CX	!= 0

popf			; Pop Stack into Flags Register


loc_1E39D:
pop	cx
pop	ax
retn			; Return Near from Procedure

sub_1E387 endp




sub_1E3A0 proc near
mov	cx, ax


loc_1E3A2:
mov	ax, ds:_word_2C32A_time_passed


loc_1E3A5:		; Compare Two Operands
cmp	ax, ds:_word_2C32A_time_passed
jz	short loc_1E3A5	; Jump if Zero (ZF=1)

call	sub_1E270	; Call Procedure

call	sub_1D9D2	; Call Procedure

call	sub_1E283	; Call Procedure

loop	loc_1E3A2	; Loop while CX	!= 0

retn			; Return Near from Procedure

sub_1E3A0 endp




sub_1E3B7 proc near
push	dx
mov	ax, ds:0D824h
mov	dx, 0E56Dh
mul	dx		; Unsigned Multiplication of AL	or AX
inc	ax		; Increment by 1
mov	ds:0D824h, ax
mov	al, ah
mov	ah, dl
and	ax, bx		; Logical AND
pop	dx
retn			; Return Near from Procedure

sub_1E3B7 endp




sub_1E3CC proc near
push	dx
mov	ax, ds:_unk_2CCD6_bios_timer_count_2
mov	dx, offset unk_2C081
mul	dx		; Unsigned Multiplication of AL	or AX
inc	ax		; Increment by 1
mov	ds:_unk_2CCD6_bios_timer_count_2, ax
mov	al, ah
mov	ah, dl
pop	dx
retn			; Return Near from Procedure

sub_1E3CC endp




sub_1E3DF proc near
push	cx
push	dx
mov	ax, bx
or	ax, ax		; Logical Inclusive OR
jz	short loc_1E408	; Jump if Zero (ZF=1)

mov	cx, 0FFFFh


loc_1E3EA:		; Shift	Logical	Left
shl	cx, 1
shr	ax, 1		; Shift	Logical	Right
jnz	short loc_1E3EA	; Jump if Not Zero (ZF=0)

not	cx		; One's Complement Negation


loc_1E3F2:
mov	ax, ds:0D828h
mov	dx, 0CBD1h
mul	dx		; Unsigned Multiplication of AL	or AX
inc	ax		; Increment by 1
mov	ds:0D828h, ax
mov	al, ah
mov	ah, dl
and	ax, cx		; Logical AND
cmp	ax, bx		; Compare Two Operands
ja	short loc_1E3F2	; Jump if Above	(CF=0 &	ZF=0)


loc_1E408:
pop	dx
pop	cx
retn			; Return Near from Procedure

sub_1E3DF endp

; ���������������������������������������������������������������������������
align 2
_stru_1E40C_cmd_arg_list cmd_arg_s <'386', 100h, 0>
cmd_arg_s <'MON', 200h, 0>
cmd_arg_s <'FRA', 400h, 0>
cmd_arg_s <'GER', 800h, 0>
cmd_arg_s <'ENG', 0C00h, 0>
cmd_arg_s <'ITA', 1000h, 0>
cmd_arg_s <'SPA', 1400h, 0>
cmd_arg_s <'DUT', 1800h, 0>
cmd_arg_s <'NOM', 4000h, 0>
cmd_arg_s <'JOY', 8000h, \
	   offset _word_22E5B_joystick_param>
cmd_arg_s <'SAF', 101h, 0>
cmd_arg_s <'VSF', 201h, 0>
cmd_arg_s <'XMS', 2001h, \
	   offset _word_22E59_xms_or_ems_mem_limit>
cmd_arg_s <'EMS', 4001h, 0>
cmd_arg_s <'EM4', 801h, 0>
cmd_arg_s <'HIM', 8001h, 0>
cmd_arg_s <'ADL', 102h, 0>
cmd_arg_s <'ADP', 202h, \
	   offset _word_22E63_cmd_arg_midi>
cmd_arg_s <'ADG', 302h, \
	   offset _word_22E63_cmd_arg_midi>
cmd_arg_s <'MID', 402h, \
	   offset _word_22E63_cmd_arg_midi>
cmd_arg_s <'SDB', 1002h, \
	   offset word_22E65>
cmd_arg_s <'SBP', 2002h, \
	   offset word_22E65>
cmd_arg_s <'WRI', 0, \
	   offset _22CD6_temp_filepath_buffer>



_sub_1E4AD_parse_command_line proc near
mov	si, 80h		; PSP[80h] = Number of bytes on	command-line
lodsb			; Load String
xor	ah, ah		; Logical Exclusive OR
mov	bp, ax
add	bp, si		; ds:[bp] = End	of Command-line	tail (terminated by 0Dh)


loc_1E4B7:
push	cs
pop	es

assume es:seg000

loc_1E4B9:		; Call Procedure
call	_sub_1E56B_parse_cmd_is_end_of_arg

jb	short locret_1E4E5 ; Jump if Below (CF=1)

jz	short loc_1E4B9	; skip space

mov	dl, al
call	_sub_1E56B_parse_cmd_is_end_of_arg ; Call Procedure

jbe	short loc_1E542	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	ah, al
call	_sub_1E56B_parse_cmd_is_end_of_arg ; Call Procedure

jbe	short loc_1E542	; Jump if Below	or Equal (CF=1 | ZF=1)

xchg	al, dl		; Exchange Register/Memory with	Register
mov	di, offset _stru_1E40C_cmd_arg_list
mov	cx, 23


loc_1E4D6:		; Compare String
scasw
jnz	short loc_1E4DE	; Jump if Not Zero (ZF=0)

cmp	dl, es:[di]	; Compare Two Operands
jz	short loc_1E4E6	; we got a match


loc_1E4DE:		; Add
add	di, 5
loop	loc_1E4D6	; Loop while CX	!= 0

jmp	short loc_1E542	; Jump

; ���������������������������������������������������������������������������

locret_1E4E5:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1E4E6:
mov	ax, seg	seg001
mov	es, ax
assume es:seg001
mov	bl, cs:[di+1]	; bl = ofs
xor	bh, bh		; Logical Exclusive OR
add	bx, offset _byte_21DF2_cmd_args	; Add
mov	al, cs:[di+2]	; al = bits
or	es:[bx], al	; Logical Inclusive OR
mov	bx, cs:[di+3]	; bx = storerest
or	bx, bx		; Logical Inclusive OR
jz	short loc_1E542	; Jump if Zero (ZF=1)

call	_sub_1E56B_parse_cmd_is_end_of_arg ; Call Procedure

jb	short locret_1E4E5 ; Jump if Below (CF=1)

jz	short loc_1E542	; Jump if Zero (ZF=1)

dec	si		; Decrement by 1
cmp	bx, offset _22CD6_temp_filepath_buffer ; Compare Two Operands
jz	short loc_1E54D	; Jump if Zero (ZF=1)


loc_1E512:		; Logical Exclusive OR
xor	dx, dx


loc_1E514:		; Call Procedure
call	_sub_1E56B_parse_cmd_is_end_of_arg

mov	ah, al
jbe	short loc_1E537	; Jump if Below	or Equal (CF=1 | ZF=1)

sub	al, 30h	; '0'   ; Integer Subtraction
jb	short loc_1E537	; Jump if Below	(CF=1)

cmp	al, 9		; Compare Two Operands
jbe	short loc_1E52B	; Jump if Below	or Equal (CF=1 | ZF=1)

sub	al, 7		; Integer Subtraction
jb	short loc_1E537	; Jump if Below	(CF=1)

cmp	al, 0Fh		; Compare Two Operands
ja	short loc_1E537	; Jump if Above	(CF=0 &	ZF=0)


loc_1E52B:		; Shift	Logical	Left
shl	dx, 1
shl	dx, 1		; Shift	Logical	Left
shl	dx, 1		; Shift	Logical	Left
shl	dx, 1		; Shift	Logical	Left
or	dl, al		; Logical Inclusive OR
jmp	short loc_1E514	; Jump

; ���������������������������������������������������������������������������

loc_1E537:
mov	es:[bx], dx
add	bx, 2		; Add
cmp	ah, 20h	; ' '   ; Compare Two Operands
ja	short loc_1E512	; Jump if Above	(CF=0 &	ZF=0)


loc_1E542:		; Decrement by 1
dec	si


loc_1E543:		; Call Procedure
call	_sub_1E56B_parse_cmd_is_end_of_arg

jb	short locret_1E4E5 ; Jump if Below (CF=1)

jnz	short loc_1E543	; Jump if Not Zero (ZF=0)

jmp	loc_1E4B7	; Jump

; ���������������������������������������������������������������������������

loc_1E54D:
mov	di, bx


loc_1E54F:		; Call Procedure
call	_sub_1E56B_parse_cmd_is_end_of_arg

jbe	short loc_1E55B	; Jump if Below	or Equal (CF=1 | ZF=1)

stosb			; Store	String
cmp	di, 3898h	; Compare Two Operands
jb	short loc_1E54F	; Jump if Below	(CF=1)


loc_1E55B:
mov	al, 5Ch	; '\'
cmp	es:[di-1], al	; Compare Two Operands
jz	short loc_1E564	; Jump if Zero (ZF=1)

stosb			; Store	String


loc_1E564:
mov	es:off_22D56, di
jmp	short loc_1E542	; Jump

_sub_1E4AD_parse_command_line endp




_sub_1E56B_parse_cmd_is_end_of_arg proc	near
mov	al, 0Dh
cmp	si, bp		; Compare Two Operands
jnb	short loc_1E578	; Jump if Not Below (CF=0)

lodsb			; Load String
cmp	al, 61h	; 'a'   ; Compare Two Operands
jb	short loc_1E578	; Jump if Below	(CF=1)

and	al, 0DFh	; Logical AND


loc_1E578:		; Compare Two Operands
cmp	al, 20h	; ' '
retn			; Return Near from Procedure

_sub_1E56B_parse_cmd_is_end_of_arg endp




_sub_1E57B_load_driver_ax_with_vtable_at_si proc near
push	cx
push	si
add	ax, 0C8h ; '�'  ; Driver table in resources
mov	si, ax
call	_sub_1F0B9_open_resource_by_index_si ; reads and decompresses to es:di

pop	si
pop	cx
mov	ax, es
sub	ax, 10h		; Integer Subtraction


loc_1E58C:
mov	[si], ax
add	si, 4		; Add
loop	loc_1E58C	; Loop while CX	!= 0

retn			; Return Near from Procedure

_sub_1E57B_load_driver_ax_with_vtable_at_si endp




_sub_1E594_initialize proc near
mov	ax, seg	seg001
mov	es, ax
mov	cx, offset _unk_2D1CD_top_of_mem
mov	di, offset _word_2316C_error_msg
sub	cx, di		; Integer Subtraction
cld			; Clear	Direction Flag
xor	ax, ax		; Logical Exclusive OR
rep stosb		; Store	String
mov	ax, ds:2
push	es
pop	ds
assume ds:seg001
mov	_word_2C318_allocator_last_free_seg, ax
mov	cx, offset _unk_2D1CD_top_of_mem
call	_sub_1F0FF_bump_allocate_bump_cx_bytes ; Call Procedure

mov	ax, 4C6Fh
mov	cl, 4
shr	ax, cl		; Shift	Logical	Right
mov	cx, ds
add	ax, cx		; Add
mov	_word_2D0E2_framebuffer_back, ax
mov	ah, 19h
int	21h		; DOS -	GET DEFAULT DISK NUMBER
mov	byte ptr _unk_2C326_default_drive, al
mov	byte ptr _unk_2C327_default_drive, al
mov	ax, 3301h
int	21h		; DOS -	EXTENDED CONTROL-BREAK CHECKING
			; AL = 00h get state / 01h set state / 02h set AND get
			; DL = 00h for OFF or 01h for ON
mov	byte_21DF1, dl
mov	ax, 3301h
xor	dx, dx		; Logical Exclusive OR
int	21h		; DOS -	EXTENDED CONTROL-BREAK CHECKING
			; AL = 00h get state / 01h set state / 02h set AND get
			; DL = 00h for OFF or 01h for ON
call	_sub_1E675_open_dune_dat ; Call	Procedure

mov	al, _byte_21DF2_cmd_args ; Test	cmd arg	386
and	ax, 1		; Logical AND
mov	si, (offset _ptr_22D65_gfx_vtable_func_00_set_mode+2)
mov	cx, 2Eh	; '.'   ; vtable entries
call	_sub_1E57B_load_driver_ax_with_vtable_at_si ; Load DNVGA or DN386

call	_ptr_22D65_gfx_vtable_func_01_get_info ; ax = frameptr
			; cx = frame size in bytes
mov	_word_2D088_vga_base_a000, ax
call	_sub_1C08E_set_screen_as_active_framebuffer ; Call Procedure

mov	_unk_2C324_vga_framebuffer_size_64000, cx
mov	di, offset _word_2D08C_framebuffer2_ofs
call	_sub_1F0F6_bump_alloc_get_addr_in_di ; Call Procedure

mov	_word_2D086_framebuffer_front, bp
or	bp, bp		; Logical Inclusive OR
jnz	short loc_1E610	; Jump if Not Zero (ZF=0)

mov	di, offset word_2D084
call	_sub_1F0F6_bump_alloc_get_addr_in_di ; Call Procedure


loc_1E610:		; Indirect Call	Far Procedure
call	_ptr_22D65_gfx_vtable_func_00_set_mode
mov	al, _byte_21DF2_cmd_args ; Check language arg
push	ax
shr	al, 1		; Shift	Logical	Right
shr	al, 1		; Shift	Logical	Right
and	al, 7		; Logical AND
mov	_byte_2C39B_language_setting, al
pop	ax
or	al, al		; Logical Inclusive OR
jns	short loc_1E62B	; Jump if Not Sign (SF=0)

push	ax
call	_sub_1EA32_initialize_joystick ; Call Procedure

pop	ax


loc_1E62B:		; Logical Compare
test	al, 40h
jnz	short loc_1E632	; Jump if Not Zero (ZF=0)

call	_sub_1E97A_initialize_mouse ; Call Procedure


loc_1E632:		; Call Procedure
call	sub_1E85C

call	_sub_1EA7B_memory_func_qq ; Call Procedure

mov	al, _byte_21DF2_cmd_args
and	al, 2		; Test cmd arg MON = Monochrome
mov	bp, offset _word_2C32A_time_passed
call	_ptr_22D65_gfx_vtable_func_28 ;	Indirect Call Far Procedure
mov	word_2D0F8, offset loc_1271C
mov	_byte_2D0F6_cursor_hide_counter, 0FFh
xor	ax, ax		; Logical Exclusive OR
mov	bx, 199
xor	cx, cx		; Logical Exclusive OR
mov	dx, 319
call	_sub_1DB14_define_mouse_range ;	Call Procedure

mov	bx, 171
mov	dx, 237
call	sub_1DB03	; Call Procedure

call	_sub_1E76A_initialize_audio ; Call Procedure

call	_sub_1CE6C_initialize_memory_handler ; Call Procedure

call	_sub_1C07C_set_frontbuffer_as_active_framebuffer ; Call	Procedure

call	_sub_1C0AD_gfx_clear_frame_buffer ; Call Procedure

jmp	sub_1C412	; Jump

_sub_1E594_initialize endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_12. PRESS	KEYPAD "+" TO EXPAND]



_sub_1E675_open_dune_dat proc near
mov	dx, offset aDnmaj1 ; "dnmaj1"
call	_sub_1F1FB_open_res_or_file_to_dx_size_ax ; Call Procedure

jb	short loc_1E692	; Jump if Below	(CF=1)

les	di, dword ptr _word_22E67_allocator_next_free_ofs ; Load Full Pointer to ES:xx
assume es:nothing
call	_sub_1F260_read_ffff_to_esdi_and_close ; Call Procedure

cmp	word ptr es:[di], 0C089h ; Compare Two Operands
jnz	short loc_1E692	; Jump if Not Zero (ZF=0)

mov	dx, offset _off_226AF_resource_names
call	dword ptr _word_22E67_allocator_next_free_ofs ;	Indirect Call Far Procedure


loc_1E692:
mov	si, (offset aDnmaj1+5)
inc	byte ptr [si]	; Increment by 1
cmp	byte ptr [si], 39h ; '9' ; Compare Two Operands
jbe	short _sub_1E675_open_dune_dat ; Jump if Below or Equal	(CF=1 |	ZF=1)

mov	dx, offset aDune_dat ; "dune.dat"
mov	ax, 3D00h
int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
			; DS:DX	-> ASCIZ filename
			; AL = access mode
			; 0 - read
jb	short nullsub_12 ; Jump	if Below (CF=1)

mov	_2D06A_dune_dat_file_handle, ax
call	_sub_1E741_read_dune_dat_toc ; -> es:di

mov	si, di
mov	bp, es		; toc in bp:si
les	di, dword ptr _word_22E67_allocator_next_free_ofs ; Load Full Pointer to ES:xx
mov	word ptr _dword_2D06C_dnmaj_func_ptr_2,	di
mov	word ptr _dword_2D06C_dnmaj_func_ptr_2+2, es
mov	ax, 145h
stosw			; Store	String
mov	cx, 14Dh
mov	al, 0FFh
rep stosb		; Store	String
mov	word_2CCD0, di
push	ds
mov	ds, bp
assume ds:nothing
lodsw			; Load String


loc_1E6CF:
push	si
call	_sub_1F314_locate_res_by_name_dssi ; Call Procedure

pop	si
jb	short loc_1E702	; Jump if Below	(CF=1)

call	sub_1F3A7	; Call Procedure

jz	short loc_1E6F9	; Jump if Zero (ZF=1)

push	ax
push	dx
push	si
push	di
mov	cx, ss:word_2CCD0
mov	si, cx
sub	cx, di		; Integer Subtraction
sub	si, 2		; Integer Subtraction
lea	di, [si+0Ah]	; Load Effective Address
shr	cx, 1		; Shift	Logical	Right
std			; Set Direction	Flag
rep movs word ptr es:[di], word	ptr es:[si] ; Move Byte(s) from	String to String
cld			; Clear	Direction Flag
pop	di
pop	si
pop	dx
pop	ax


loc_1E6F9:		; Call Procedure
call	sub_1E75B

add	ss:word_2CCD0, 0Ah ; Add


loc_1E702:		; Add
add	si, 19h
cmp	byte ptr [si], 0 ; Compare Two Operands
jnz	short loc_1E6CF	; Jump if Not Zero (ZF=0)

pop	ds
mov	si, 145h
mov	ax, ds:word_2CCD0
sub	ax, si		; Integer Subtraction
xor	dx, dx		; Logical Exclusive OR
mov	cx, 640
div	cx		; Unsigned Divide
mov	dx, 0Ah
mul	dx		; Unsigned Multiplication of AL	or AX
mov	dx, ax
les	di, ss:_dword_2D06C_dnmaj_func_ptr_2 ; Load Full Pointer to ES:xx
add	di, 2		; Add


loc_1E729:		; Add
add	si, dx
push	si
movs	word ptr es:[di], word ptr es:[si] ; Move Byte(s) from String to String
movs	byte ptr es:[di], byte ptr es:[si] ; Move Byte(s) from String to String
pop	si
mov	ax, si
stosw			; Store	String
cmp	di, 320		; Compare Two Operands
jb	short loc_1E729	; Jump if Below	(CF=1)

mov	cx, ds:word_2CCD0
jmp	_sub_1F0FF_bump_allocate_bump_cx_bytes ; Jump

_sub_1E675_open_dune_dat endp




_sub_1E741_read_dune_dat_toc proc near
xor	ax, ax		; Logical Exclusive OR
xor	dx, dx		; Logical Exclusive OR
call	_sub_1F2D6_seek_dune_dat_offset_dxax ; Call Procedure

mov	ax, ds:_word_22E69_allocator_next_free_seg
add	ax, 800h	; Add
mov	es, ax
xor	di, di		; Logical Exclusive OR
mov	cx, 0FFFFh
call	_sub_1F2EA_read_dune_dat_cx_to_esdi ; Call Procedure

jb	short _sub_1E741_read_dune_dat_toc ; Jump if Below (CF=1)

retn			; Return Near from Procedure

_sub_1E741_read_dune_dat_toc endp




sub_1E75B proc near
push	si
stosw			; Store	String
mov	al, dl
stosb			; Store	String
add	si, 10h		; Add
movsw			; Move Byte(s) from String to String
movsb			; Move Byte(s) from String to String
inc	si		; Increment by 1
movsw			; Move Byte(s) from String to String
movsw			; Move Byte(s) from String to String
pop	si
retn			; Return Near from Procedure

sub_1E75B endp




_sub_1E76A_initialize_audio proc near

; FUNCTION CHUNK AT F131 SIZE 0000000E BYTES

mov	al, ds:_byte_21DF4_cmd_args_audio
mov	cl, 4
shr	al, cl		; Shift	Logical	Right
add	al, 7		; Add
xor	ah, ah		; Logical Exclusive OR
mov	si, (offset _dword_22E39_pcm_audio_vtable_func_1+2)
mov	cx, 8
call	_sub_1E57B_load_driver_ax_with_vtable_at_si ; Load PCM audio driver

mov	ax, ds:word_22E65
call	ds:_dword_22E39_pcm_audio_vtable_func_1	; Indirect Call	Far Procedure
mov	ds:word_2D078, bx
call	sub_1A637	; Call Procedure

call	sub_1AE54	; Call Procedure

call	sub_1E851	; Call Procedure

jb	short loc_1E7BC	; Jump if Below	(CF=1)

test	ds:_byte_21DF4_cmd_args_audio, 0F0h ; Test cmd arg PCM support
jz	short loc_1E7B9	; Jump if Zero (ZF=1)

and	ds:_byte_21DF4_cmd_args_audio, 0Fh ; Clear cmd arg PCM support
xor	ax, ax		; Logical Exclusive OR
mov	word ptr ds:_dword_22CC1_pcm_voc_resource_offset+2, ax
mov	byte ptr ds:word_2D078,	al
mov	ax, word ptr ds:_dword_22E39_pcm_audio_vtable_func_1+2
add	ax, 10h		; Add
mov	ds:_word_22E69_allocator_next_free_seg,	ax
mov	ds:_word_2316C_error_msg, offset aNotEnoughStand ; "Not	enough standard	memory for sounds"
jmp	short _sub_1E76A_initialize_audio ; Jump

; ���������������������������������������������������������������������������

loc_1E7B9:		; Jump
jmp	_loc_1F131_out_of_memory_error

; ���������������������������������������������������������������������������

loc_1E7BC:
mov	ax, word ptr ds:_dword_22CC1_pcm_voc_resource_offset+2
mov	word ptr ds:dword_22CC9+2, ax
call	_sub_1A87E_audio_test_frequency	; Call Procedure


loc_1E7C5:
mov	al, ds:_byte_21DF4_cmd_args_audio
and	ax, 0Fh		; Logical AND
add	ax, 2		; Add
mov	si, (offset midi_vtable_func_1+2)
mov	cx, 7
call	_sub_1E57B_load_driver_ax_with_vtable_at_si ; Load midi	driver

mov	bp, offset _off_227F9_midi_resource_files
mov	cx, 0Ah
mov	ax, ds:_word_22E63_cmd_arg_midi
call	ds:midi_vtable_func_1 ;	Indirect Call Far Procedure
or	word ptr ds:loc_1DBC8, bx ; Logical Inclusive OR
call	sub_1A650	; Call Procedure

call	sub_1AE3F	; Call Procedure

call	sub_1E851	; Call Procedure

jb	short loc_1E818	; Jump if Below	(CF=1)

test	ds:_byte_21DF4_cmd_args_audio, 0Fh ; Logical Compare
jz	short loc_1E7B9	; Jump if Zero (ZF=1)

and	ds:_byte_21DF4_cmd_args_audio, 0F0h ; Logical AND
xor	ax, ax		; Logical Exclusive OR
mov	word ptr ds:dword_2D066+2, ax
mov	byte ptr ds:word_2D078+1, al
mov	ax, word ptr ds:midi_vtable_func_1+2
add	ax, 10h		; Add
mov	ds:_word_22E69_allocator_next_free_seg,	ax
mov	ds:_word_2316C_error_msg, offset aNotEnoughSta_0 ; "Not	enough standard	memory for music. T"...
jmp	short loc_1E7C5	; Jump

; ���������������������������������������������������������������������������

loc_1E818:		; Call Procedure
call	sub_1AE28

jz	short locret_1E825 ; Jump if Zero (ZF=1)

call	sub_1E826	; Call Procedure

and	ds:_byte_21DF3_cmd_args_memory,	0EFh ; Logical AND


locret_1E825:		; Return Near from Procedure
retn

_sub_1E76A_initialize_audio endp




sub_1E826 proc near
cmp	ds:_2D06A_dune_dat_file_handle,	0 ; Compare Two	Operands
jz	short locret_1E850 ; Jump if Zero (ZF=1)

call	_sub_1E741_read_dune_dat_toc ; Call Procedure

push	ds
mov	si, di
push	es
pop	ds
lodsw			; Load String
mov	cx, 0FAh ; '�'


loc_1E839:
push	cx
push	si
call	_sub_1F314_locate_res_by_name_dssi ; Call Procedure

pop	si
jb	short loc_1E849	; Jump if Below	(CF=1)

call	sub_1F3A7	; Call Procedure

jnz	short loc_1E849	; Jump if Not Zero (ZF=0)

call	sub_1E75B	; Call Procedure


loc_1E849:		; Add
add	si, 19h
pop	cx
loop	loc_1E839	; Loop while CX	!= 0

pop	ds


locret_1E850:		; Return Near from Procedure
retn

sub_1E826 endp




sub_1E851 proc near
mov	ax, ds:39B9h
add	ax, 2F13h	; Add
cmp	ax, ds:0CE68h	; Compare Two Operands
retn			; Return Near from Procedure

sub_1E851 endp




sub_1E85C proc near
cli			; Clear	Interrupt Flag
call	_sub_1E913_install_interrupt_handlers ;	Call Procedure

xor	ax, ax		; Logical Exclusive OR
mov	es, ax
assume es:nothing
mov	di, 20h	; ' '
mov	word ptr es:[di], offset _sub_1E8B8_get_pit_timer_value
pushf			; Push Flags Register onto the Stack
sti			; Set Interrupt	Flag


loc_1E86E:		; Wait for pit timer initialization
cmp	cs:_byte_1E8D4_pit_timer_counter, 0
jz	short loc_1E86E	; Jump if Zero (ZF=1)

popf			; Pop Stack into Flags Register
mov	word ptr es:[di], offset loc_1EF6A
mov	ax, cs:_word_1E8D2_pit_timer_value
or	ah, ah		; Logical Inclusive OR
jz	short loc_1E8A5	; Jump if Zero (ZF=1)

or	al, al		; Logical Inclusive OR
jz	short loc_1E8A5	; Jump if Zero (ZF=1)

xor	dx, dx		; Logical Exclusive OR
mov	cx, 1745h
div	cx		; Unsigned Divide
shl	dx, 1		; Shift	Logical	Left
cmp	dx, cx		; Compare Two Operands
jb	short loc_1E896	; Jump if Below	(CF=1)

inc	ax		; Increment by 1


loc_1E896:		; Decrement by 1
dec	ax
jns	short loc_1E89A	; Jump if Not Sign (SF=0)

inc	ax		; Increment by 1


loc_1E89A:		; Compare Two Operands
cmp	ax, 0Ah
jb	short loc_1E8A1	; Jump if Below	(CF=1)

mov	al, 0Ah


loc_1E8A1:
mov	byte ptr cs:loc_1EFD5+4, al


loc_1E8A5:
mov	ax, offset unk_20BF5

sub_1E85C endp




_sub_1E8A8_set_pit_timer_to_18_2Hz proc	near
pushf			; Push Flags Register onto the Stack
push	ax
cli			; Clear	Interrupt Flag
mov	al, 36h	; '6'   ; 0b00110110
out	43h, al		; Timer	8253-5 (AT: 8254.2).
pop	ax
out	40h, al		; Timer	8253-5 (AT: 8254.2).
mov	al, ah
out	40h, al		; Timer	8253-5 (AT: 8254.2).
popf			; Pop Stack into Flags Register
retn			; Return Near from Procedure

_sub_1E8A8_set_pit_timer_to_18_2Hz endp




_sub_1E8B8_get_pit_timer_value proc far

; FUNCTION CHUNK AT EF6A SIZE 00000050 BYTES

push	ax
mov	al, 36h	; '6'
out	43h, al		; Timer	8253-5 (AT: 8254.2).
in	al, 40h		; Timer	8253-5 (AT: 8254.2).
mov	ah, al
in	al, 40h		; Timer	8253-5 (AT: 8254.2).
xchg	ah, al		; Exchange Register/Memory with	Register
mov	cs:_word_1E8D2_pit_timer_value,	ax
inc	cs:_byte_1E8D4_pit_timer_counter ; Increment by	1
pop	ax
jmp	loc_1EF6A	; Jump

_sub_1E8B8_get_pit_timer_value endp

; ���������������������������������������������������������������������������
_word_1E8D2_pit_timer_value dw 0
_byte_1E8D4_pit_timer_counter db 0



_sub_1E8D5_uninitialize_memory_driver proc near
cmp	cs:_word_1EE8A_xms_memory_block, 0 ; Compare Two Operands
jz	short loc_1E8E2	; Jump if Zero (ZF=1)

mov	ah, 0Ah		; XMS: Free Extended Memory Block
call	_sub_1EF2B_call_xms_func_on_block ; Call Procedure


loc_1E8E2:		; Compare Two Operands
cmp	cs:_word_1ED3A_ems_emm_handle, 0
jz	short loc_1E8EF	; Jump if Zero (ZF=1)

mov	ah, 45h	; 'E'
call	_sub_1ED40_get_ems_emm_handle ;	Call Procedure


loc_1E8EF:
mov	dx, cs:word_1ED3E
or	dx, dx		; Logical Inclusive OR
jz	short loc_1E8FD	; Jump if Zero (ZF=1)

mov	ah, 45h	; 'E'   ; EMS: Release Handle and Memory Pages
call	_sub_1ED45_call_ems_func ; Call	Procedure


loc_1E8FD:		; Logical Exclusive OR
xor	ax, ax
call	_sub_1E8A8_set_pit_timer_to_18_2Hz ; Call Procedure

mov	dl, ds:byte_21DF1
mov	ax, 3301h
int	21h		; DOS -	EXTENDED CONTROL-BREAK CHECKING
			; AL = 00h get state / 01h set state / 02h set AND get
			; DL = 00h for OFF or 01h for ON
cmp	ds:byte_2C323, 0 ; Compare Two Operands
jnz	short _sub_1E913_install_interrupt_handlers ; Jump if Not Zero (ZF=0)

retn			; Return Near from Procedure

_sub_1E8D5_uninitialize_memory_driver endp




_sub_1E913_install_interrupt_handlers proc near
xor	ds:byte_2C323, 0FFh ; Logical Exclusive	OR
mov	si, offset _word_21DC3_interrupt_table
pushf			; Push Flags Register onto the Stack
cli			; Clear	Interrupt Flag
lodsw			; Load String


loc_1E91E:
mov	di, ax
lodsw			; Load String
xchg	ax, di		; Exchange Register/Memory with	Register
push	si
mov	si, ax
shl	si, 1		; Shift	Logical	Left
shl	si, 1		; Shift	Logical	Left
xor	ax, ax		; Logical Exclusive OR
mov	es, ax
mov	ax, cs:[di]
xchg	ax, es:[si]	; Exchange Register/Memory with	Register
mov	cs:[di], ax
mov	ax, cs:[di+2]
xchg	ax, es:[si+2]	; Exchange Register/Memory with	Register
mov	cs:[di+2], ax
pop	si
lodsw			; Load String
or	ax, ax		; Logical Inclusive OR
jns	short loc_1E91E	; Jump if Not Sign (SF=0)

popf			; Pop Stack into Flags Register
retn			; Return Near from Procedure

_sub_1E913_install_interrupt_handlers endp



; Attributes: bp-based frame

sub_1E94A proc far
push	bp
mov	bp, sp
add	word ptr [bp+2], 2 ; Add
pop	bp
iret			; Interrupt Return

sub_1E94A endp

; ���������������������������������������������������������������������������
word_1E953 dw 0C033h
unk_1E955 db 0CFh ; �
off_1E956 dw offset sub_1E94A
dw seg seg000
off_1E95A dd sub_1E94A
off_1E95E dd sub_1E94A
off_1E962 dd sub_1E94A
off_1E966 dd sub_1E94A
off_1E96A dd unk_1E955
off_1E96E dd unk_1E955
off_1E972 dd unk_1E955
off_1E976 dd word_1E953



_sub_1E97A_initialize_mouse proc near
mov	ax, 3533h
int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
			; AL = interrupt number
			; Return: ES:BX	= value	of interrupt vector
mov	ax, es
or	ax, bx		; Logical Inclusive OR
jz	short locret_1E9F3 ; Jump if Zero (ZF=1)

mov	ax, 0
int	33h		; - MS MOUSE - RESET DRIVER AND	READ STATUS
			; Return: AX = status
			; BX = number of buttons
inc	ax		; Increment by 1
jnz	short locret_1E9F3 ; Jump if Not Zero (ZF=0)

xor	cx, cx		; Logical Exclusive OR
xor	dx, dx		; Logical Exclusive OR
mov	ax, 4
int	33h		; - MS MOUSE - POSITION	MOUSE CURSOR
			; CX = column, DX = row


loc_1E996:		; Increment by 1
inc	byte ptr ds:2580h
js	short loc_1E9B3	; Jump if Sign (SF=1)

mov	cl, ds:2580h
mov	ax, 1
shl	ax, cl		; Shift	Logical	Left
mov	cx, ax
mov	ax, 4
int	33h		; - MS MOUSE - POSITION	MOUSE CURSOR
			; CX = column, DX = row
mov	ax, 3
int	33h		; - MS MOUSE - RETURN POSITION AND BUTTON STATUS
			; Return: BX = button status, CX = column, DX =	row
jcxz	short loc_1E996	; Jump if CX is	0


loc_1E9B3:		; Increment by 1
inc	byte ptr ds:2581h
js	short loc_1E9D0	; Jump if Sign (SF=1)

mov	cl, ds:2581h
mov	dx, 1
shl	dx, cl		; Shift	Logical	Left
mov	ax, 4
int	33h		; - MS MOUSE - POSITION	MOUSE CURSOR
			; CX = column, DX = row
mov	ax, 3
int	33h		; - MS MOUSE - RETURN POSITION AND BUTTON STATUS
			; Return: BX = button status, CX = column, DX =	row
or	dx, dx		; Logical Inclusive OR
jz	short loc_1E9B3	; Jump if Zero (ZF=1)


loc_1E9D0:
mov	ax, 10h
mov	dx, ax
and	word ptr ds:2580h, 7F7Fh ; Logical AND
mov	cx, ds:2580h
shr	ax, cl		; Shift	Logical	Right
mov	cl, ch
shr	dx, cl		; Shift	Logical	Right
mov	cx, ax
mov	ax, 0Fh
push	dx
int	33h		; - MS MOUSE - DEFINE MICKEY/PIXEL RATIO
			; CX = number of mickeys per 8 pixels horizontally (default 8)
			; DX = number of mickeys per 8 pixels vertically (default 16)
pop	dx
mov	ax, 13h
int	33h		; - MS MOUSE - DEFINE DOUBLE-SPEED THRESHOLD
			; DX = threshold speed in mickeys/second, 0000h	= default of 64/second


locret_1E9F3:		; Return Near from Procedure
retn

_sub_1E97A_initialize_mouse endp




_sub_1E9F4_mouse_func_uncalled proc far
push	ax
push	ds
mov	ds, cs:seg_1EA30
assume ds:seg001
mov	_word_2D0E6_mouse_pos_y, cx
mov	_word_2D0E8_mouse_pos_x, dx
shr	al, 1		; Shift	Logical	Right
jz	short loc_1EA2D	; Jump if Zero (ZF=1)

push	cx
mov	cl, byte ptr word_2D0E4
shr	al, 1		; Shift	Logical	Right
jnb	short loc_1EA13	; Jump if Not Below (CF=0)

or	cl, 1		; Logical Inclusive OR


loc_1EA13:		; Shift	Logical	Right
shr	al, 1
jnb	short loc_1EA1A	; Jump if Not Below (CF=0)

and	cl, 0FEh	; Logical AND


loc_1EA1A:		; Shift	Logical	Right
shr	al, 1
jnb	short loc_1EA21	; Jump if Not Below (CF=0)

or	cl, 2		; Logical Inclusive OR


loc_1EA21:		; Shift	Logical	Right
shr	al, 1
jnb	short loc_1EA28	; Jump if Not Below (CF=0)

and	cl, 0FDh	; Logical AND


loc_1EA28:
mov	byte ptr word_2D0E4, cl
pop	cx


loc_1EA2D:
pop	ds
assume ds:nothing
pop	ax
retf			; Return Far from Procedure

_sub_1E9F4_mouse_func_uncalled endp

; ���������������������������������������������������������������������������
seg_1EA30 dw seg seg001



_sub_1EA32_initialize_joystick proc near
mov	si, offset _word_22E5B_joystick_param
xor	bx, bx		; Logical Exclusive OR
mov	cx, 4


loc_1EA3A:		; Load String
lodsw
or	bx, ax		; Logical Inclusive OR
loop	loc_1EA3A	; Loop while CX	!= 0

or	bx, bx		; Logical Inclusive OR
jnz	short locret_1EA74 ; Jump if Not Zero (ZF=0)

call	_sub_1DCE0_read_game_port ; Call Procedure

mov	ax, dx
sub	ax, 4		; Integer Subtraction
cmp	ah, 4		; Compare Two Operands
jnb	short locret_1E9F3 ; Jump if Not Below (CF=0)

mov	ax, bx
sub	ax, 4		; Integer Subtraction
cmp	ah, 4		; Compare Two Operands
jnb	short locret_1E9F3 ; Jump if Not Below (CF=0)

mov	ax, dx
shr	ax, 1		; Shift	Logical	Right
add	dx, ax		; Add
mov	si, offset _word_22E5B_joystick_param
mov	[si], ax
mov	[si+2],	dx
mov	ax, bx
shr	ax, 1		; Shift	Logical	Right
add	bx, ax		; Add
mov	[si+4],	ax
mov	[si+6],	bx


locret_1EA74:		; Return Near from Procedure
retn

_sub_1EA32_initialize_joystick endp

; ���������������������������������������������������������������������������
word_1EA75 dw 0
_off_1EA77_memory_func_1 dw offset _sub_1EC9C_xms_memory_func_1
_off_1EA79_memory_func_2 dw offset _sub_1ECEC_xms_memory_func_1



_sub_1EA7B_memory_func_qq proc near
test	ds:_byte_21DF3_cmd_args_memory,	80h ; Logical Compare
jz	short loc_1EA85	; Jump if Zero (ZF=1)

call	_sub_1EEA0_initialize_himem_sys	; Call Procedure


loc_1EA85:		; Logical Compare
test	ds:_byte_21DF3_cmd_args_memory,	48h
jz	short loc_1EA8F	; Jump if Zero (ZF=1)

call	sub_1ED4C	; Call Procedure


loc_1EA8F:		; Logical Compare
test	ds:_byte_21DF3_cmd_args_memory,	0E8h
jz	short locret_1EAB6 ; Jump if Zero (ZF=1)

mov	di, 0CE6Ah
mov	cx, ds:_word_22E59_xms_or_ems_mem_limit
mov	ax, 0B9h ; '�'
mov	ds:0CE70h, al
add	cx, ax		; Add
add	cx, ax		; Add
push	cx
shl	cx, 1		; Shift	Logical	Left
call	_sub_1F0F6_bump_alloc_get_addr_in_di ; Call Procedure

les	di, ds:0CE6Ah	; Load Full Pointer to ES:xx
assume es:nothing
pop	cx
xor	ax, ax		; Logical Exclusive OR
rep stosw		; Store	String


locret_1EAB6:		; Return Near from Procedure
retn

_sub_1EA7B_memory_func_qq endp




_sub_1EAB7_memory_func_qq proc near
call	sub_1E270	; Call Procedure

push	ds
push	es
sub	sp, 6		; Integer Subtraction
mov	bp, sp
mov	ds:word_2C31E, ax
push	di
push	es
les	di, ds:dword_2C31A ; Load Full Pointer to ES:xx
mov	si, ax
mov	ax, ds:_word_22E59_xms_or_ems_mem_limit
shl	ax, 1		; Shift	Logical	Left
mov	[bp+0],	ax
shl	si, 1		; Shift	Logical	Left
add	si, ax		; Add
mov	dx, si
mov	ax, cs:word_1EA75
inc	ax		; Increment by 1
mov	es:[si+172h], ax
mov	cs:word_1EA75, ax
mov	[bp+2],	cx
pop	ds
pop	si


loc_1EAED:		; Compare Two Operands
cmp	di, [bp+0]
jb	short loc_1EAF4	; Jump if Below	(CF=1)


loc_1EAF2:		; Logical Exclusive OR
xor	di, di


loc_1EAF4:
mov	cx, [bp+0]
sub	cx, di		; Integer Subtraction
shr	cx, 1		; Shift	Logical	Right
xor	ax, ax		; Logical Exclusive OR
repne scasw		; Compare String
jz	short loc_1EB08	; Jump if Zero (ZF=1)

call	sub_1EB74	; Call Procedure

jb	short loc_1EAF2	; Jump if Below	(CF=1)

jmp	short loc_1EB60	; Jump

; ���������������������������������������������������������������������������

loc_1EB08:		; Integer Subtraction
sub	di, 2
xor	cx, cx		; Logical Exclusive OR
mov	bx, di
shr	bx, 1		; Shift	Logical	Right
inc	bx		; Increment by 1
mov	[bp+4],	bx
jmp	short loc_1EB28	; Jump

; ���������������������������������������������������������������������������

loc_1EB17:
mov	di, dx
add	di, 2		; Add
cmp	di, [bp+0]	; Compare Two Operands
jnb	short loc_1EB3F	; Jump if Not Below (CF=0)

cmp	word ptr es:[di], 0 ; Compare Two Operands
jnz	short loc_1EB3F	; Jump if Not Zero (ZF=0)

inc	bx		; Increment by 1


loc_1EB28:		; Exchange Register/Memory with	Register
xchg	di, dx
mov	es:[di], bx
mov	ax, 400h
add	cx, ax		; Add
sub	[bp+2],	ax	; Integer Subtraction
ja	short loc_1EB17	; Jump if Above	(CF=0 &	ZF=0)

mov	di, dx
mov	ax, [bp+2]
stosw			; Store	String
add	cx, ax		; Add


loc_1EB3F:
mov	bx, [bp+4]
push	dx
call	_sub_1EC59_call_memory_func_1 ;	Call Procedure

pop	dx
mov	di, dx
or	word ptr es:[di], 8000h	; Logical Inclusive OR
mov	ax, [bp+2]
dec	ax		; Decrement by 1
cmp	ax, 0FC00h	; Compare Two Operands
jbe	short loc_1EAED	; Jump if Below	or Equal (CF=1 | ZF=1)


loc_1EB57:		; Add
add	sp, 6
pop	es
pop	ds
call	sub_1E283	; Call Procedure

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1EB60:
mov	si, [bp+0]
mov	ax, 0FFFFh
xchg	ax, ss:word_2C31E ; Exchange Register/Memory with Register
add	si, ax		; Add
add	si, ax		; Add
call	sub_1EBAA	; Call Procedure

jmp	short loc_1EB57	; Jump

_sub_1EAB7_memory_func_qq endp




sub_1EB74 proc near
push	dx
push	si
mov	si, [bp+0]
mov	cx, 0B9h ; '�'
mov	dx, cs:word_1EA75
xor	bx, bx		; Logical Exclusive OR


loc_1EB83:
mov	ax, es:[si]
or	ax, ax		; Logical Inclusive OR
jz	short loc_1EB99	; Jump if Zero (ZF=1)

mov	ax, dx
sub	ax, es:[si+172h] ; Integer Subtraction
cmp	ax, bx		; Compare Two Operands
jb	short loc_1EB99	; Jump if Below	(CF=1)

mov	di, si
mov	bx, ax


loc_1EB99:		; Add
add	si, 2
loop	loc_1EB83	; Loop while CX	!= 0

or	bx, bx		; Logical Inclusive OR
jz	short loc_1EBA7	; Jump if Zero (ZF=1)

mov	si, di
call	sub_1EBAA	; Call Procedure


loc_1EBA7:
pop	si
pop	dx
retn			; Return Near from Procedure

sub_1EB74 endp




sub_1EBAA proc near
xor	bx, bx		; Logical Exclusive OR
xchg	bx, es:[si]	; Exchange Register/Memory with	Register
shl	bx, 1		; Shift	Logical	Left
mov	si, bx
dec	si		; Decrement by 1
dec	si		; Decrement by 1
jnb	short sub_1EBAA	; Jump if Not Below (CF=0)

retn			; Return Near from Procedure

sub_1EBAA endp




sub_1EBB8 proc near
push	ds
xor	cx, cx		; Logical Exclusive OR
mov	si, ds:_word_22E59_xms_or_ems_mem_limit
mov	ds, word ptr ds:0CE6Ch
add	si, ax		; Add
shl	si, 1		; Shift	Logical	Left
mov	si, [si]
or	si, si		; Logical Inclusive OR
jz	short loc_1EBE1	; Jump if Zero (ZF=1)

mov	cx, 0FC00h


loc_1EBD0:		; Add
add	cx, 400h
shl	si, 1		; Shift	Logical	Left
jb	short loc_1EBDD	; Jump if Below	(CF=1)

mov	si, [si-2]
jmp	short loc_1EBD0	; Jump

; ���������������������������������������������������������������������������

loc_1EBDD:		; Shift	Arithmetic Right
sar	si, 1
add	cx, si		; Add


loc_1EBE1:
pop	ds
retn			; Return Near from Procedure

sub_1EBB8 endp




sub_1EBE3 proc near
push	dx
push	ds
mov	si, ds:_word_22E59_xms_or_ems_mem_limit
mov	ds, word ptr ds:0CE6Ch
add	si, ax		; Add
shl	si, 1		; Shift	Logical	Left
mov	ax, [si]
or	ax, ax		; Logical Inclusive OR
jz	short loc_1EC43	; Jump if Zero (ZF=1)

mov	bx, ax
mov	ax, cs:word_1EA75
inc	ax		; Increment by 1
mov	[si+172h], ax
mov	cs:word_1EA75, ax
mov	ax, bx
push	di
push	es


loc_1EC0A:
mov	bx, ax
mov	dx, ax
xor	cx, cx		; Logical Exclusive OR


loc_1EC10:		; Add
add	cx, 400h
shl	ax, 1		; Shift	Logical	Left
jb	short loc_1EC33	; Jump if Below	(CF=1)

mov	si, ax
sub	si, 2		; Integer Subtraction
inc	dx		; Increment by 1
mov	ax, [si]
cmp	ax, dx		; Compare Two Operands
jz	short loc_1EC10	; Jump if Zero (ZF=1)

shl	ax, 1		; Shift	Logical	Left
jb	short loc_1EC33	; Jump if Below	(CF=1)

shr	ax, 1		; Shift	Logical	Right
push	ax
call	_sub_1EC46_call_memory_func_2 ;	Call Procedure

pop	ax
jb	short loc_1EC3A	; Jump if Below	(CF=1)

jmp	short loc_1EC0A	; Jump

; ���������������������������������������������������������������������������

loc_1EC33:		; Shift	Arithmetic Right
sar	ax, 1
add	cx, ax		; Add
call	_sub_1EC46_call_memory_func_2 ;	Call Procedure


loc_1EC3A:
mov	cx, di
pop	es
pop	di
pushf			; Push Flags Register onto the Stack
sub	cx, di		; Integer Subtraction
popf			; Pop Stack into Flags Register
cmc			; Complement Carry Flag


loc_1EC43:
pop	ds
pop	dx
retn			; Return Near from Procedure

sub_1EBE3 endp




_sub_1EC46_call_memory_func_2 proc near
push	cx
push	di
push	ds
push	es
dec	bx		; Decrement by 1
call	cs:_off_1EA79_memory_func_2 ; Indirect Call Near Procedure

pop	es
pop	ds
pop	di
pop	cx
pushf			; Push Flags Register onto the Stack
add	di, cx		; Add
popf			; Pop Stack into Flags Register
retn			; Return Near from Procedure

_sub_1EC46_call_memory_func_2 endp




_sub_1EC59_call_memory_func_1 proc near
push	si
push	ds
push	es
push	cx
dec	bx		; Decrement by 1
call	cs:_off_1EA77_memory_func_1 ; Indirect Call Near Procedure

pop	ax
pop	es
pop	ds
pop	si
pushf			; Push Flags Register onto the Stack
add	si, ax		; Add
popf			; Pop Stack into Flags Register
retn			; Return Near from Procedure

_sub_1EC59_call_memory_func_1 endp

; ���������������������������������������������������������������������������
db 10h dup(0), 2 dup(0FFh), 3 dup(0), 92h
db 2 dup(0), 2 dup(0FFh), 3 dup(0), 92h
db 12h dup(0)



_sub_1EC9C_xms_memory_func_1 proc near
mov	di, 0EC6Ch
inc	cx		; Increment by 1
shr	cx, 1		; Shift	Logical	Right
push	cx
shl	cx, 1		; Shift	Logical	Left
mov	cs:[di+10h], cx
mov	cs:[di+18h], cx
mov	ax, ds
xor	dx, dx		; Logical Exclusive OR
mov	cx, 4


loc_1ECB4:		; Shift	Logical	Left
shl	ax, 1
rcl	dx, 1		; Rotate Through Carry Left
loop	loc_1ECB4	; Loop while CX	!= 0

add	ax, si		; Add
adc	dx, 0		; Add with Carry
mov	cs:[di+12h], ax
mov	dh, 92h	; '�'
mov	cs:[di+14h], dx
xor	dl, dl		; Logical Exclusive OR
xchg	bl, bh		; Exchange Register/Memory with	Register
xchg	bl, dl		; Exchange Register/Memory with	Register
shl	bx, 1		; Shift	Logical	Left
rcl	dl, 1		; Rotate Through Carry Left
shl	bx, 1		; Shift	Logical	Left
rcl	dl, 1		; Rotate Through Carry Left
add	dl, 10h		; Add
mov	cs:[di+1Ah], bx
mov	cs:[di+1Ch], dx
mov	si, di
push	cs
pop	es
assume es:seg000
pop	cx
mov	ah, 87h	; '�'
int	15h		; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
			; CX = number of words to move,	ES:SI -> global	descriptor table
			; Return: CF set on error, AH =	status
retn			; Return Near from Procedure

_sub_1EC9C_xms_memory_func_1 endp




_sub_1ECEC_xms_memory_func_1 proc near
mov	si, 0EC6Ch
inc	cx		; Increment by 1
shr	cx, 1		; Shift	Logical	Right
push	cx
shl	cx, 1		; Shift	Logical	Left
mov	cs:[si+10h], cx
mov	cs:[si+18h], cx
mov	ax, es
xor	dx, dx		; Logical Exclusive OR
mov	cx, 4


loc_1ED04:		; Shift	Logical	Left
shl	ax, 1
rcl	dx, 1		; Rotate Through Carry Left
loop	loc_1ED04	; Loop while CX	!= 0

add	ax, di		; Add
adc	dx, 0		; Add with Carry
mov	cs:[si+1Ah], ax
mov	dh, 92h	; '�'
mov	cs:[si+1Ch], dx
xor	dl, dl		; Logical Exclusive OR
xchg	bl, bh		; Exchange Register/Memory with	Register
xchg	bl, dl		; Exchange Register/Memory with	Register
shl	bx, 1		; Shift	Logical	Left
rcl	dl, 1		; Rotate Through Carry Left
shl	bx, 1		; Shift	Logical	Left
rcl	dl, 1		; Rotate Through Carry Left
add	dl, 10h		; Add
mov	cs:[si+12h], bx
mov	cs:[si+14h], dx
push	cs
pop	es
pop	cx
mov	ah, 87h	; '�'
int	15h		; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
			; CX = number of words to move,	ES:SI -> global	descriptor table
			; Return: CF set on error, AH =	status
retn			; Return Near from Procedure

_sub_1ECEC_xms_memory_func_1 endp

; ���������������������������������������������������������������������������
_word_1ED3A_ems_emm_handle dw 0
_word_1ED3C_ems_page_frame_base_seg dw 0
word_1ED3E dw 0



_sub_1ED40_get_ems_emm_handle proc near
mov	dx, cs:_word_1ED3A_ems_emm_handle

_sub_1ED40_get_ems_emm_handle endp




_sub_1ED45_call_ems_func proc near
int	67h		;  - LIM EMS
cmp	ah, 80h	; '�'   ; Compare Two Operands
cmc			; Complement Carry Flag
retn			; Return Near from Procedure

_sub_1ED45_call_ems_func endp




sub_1ED4C proc near
mov	ah, 41h	; 'A'   ; EMS: Get Page Frame Base Address
call	_sub_1ED45_call_ems_func ; Call	Procedure

jb	short loc_1EDB3	; Jump if Below	(CF=1)

mov	cs:_word_1ED3C_ems_page_frame_base_seg,	bx
mov	ah, 42h	; 'B'   ; EMS: Get Page Counts
xor	bx, bx		; Logical Exclusive OR
call	_sub_1ED45_call_ems_func ; Call	Procedure

jb	short loc_1EDB3	; Jump if Below	(CF=1)

cmp	bx, 3		; Compare Two Operands
jb	short loc_1EDB3	; Jump if Below	(CF=1)

call	_sub_1EDB9_map_ems_for_midi_audio ; Call Procedure

test	ds:_byte_21DF3_cmd_args_memory,	8 ; Logical Compare
jnz	short loc_1EDB3	; Jump if Not Zero (ZF=0)

mov	ah, 42h	; 'B'   ; EMS: Get Page Counts
xor	bx, bx		; Logical Exclusive OR
call	_sub_1ED45_call_ems_func ; Call	Procedure

jb	short loc_1EDB3	; Jump if Below	(CF=1)

cmp	bx, 4		; Compare Two Operands
jb	short loc_1EDB3	; Jump if Below	(CF=1)


loc_1ED7E:		; Compare Two Operands
cmp	bx, 80h	; '�'
jb	short loc_1ED87	; Jump if Below	(CF=1)

mov	bx, 80h	; '�'


loc_1ED87:
mov	ax, bx
shl	ax, 1		; Shift	Logical	Left
jz	short loc_1EDB3	; Jump if Zero (ZF=1)

shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
mov	ds:_word_22E59_xms_or_ems_mem_limit, ax
mov	ah, 43h	; 'C'   ; Get Handle and Allocate Pages
call	_sub_1ED45_call_ems_func ; Call	Procedure

jb	short loc_1EDB3	; Jump if Below	(CF=1)

mov	cs:_word_1ED3A_ems_emm_handle, dx
mov	si, offset _sub_1EE46_ems_memory_func_1
mov	di, offset _sub_1EE02_ems_memory_func_2
mov	cs:_off_1EA77_memory_func_1, di
mov	cs:_off_1EA79_memory_func_2, si
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1EDB3:		; Logical AND
and	ds:_byte_21DF3_cmd_args_memory,	0B7h
retn			; Return Near from Procedure

sub_1ED4C endp




_sub_1EDB9_map_ems_for_midi_audio proc near
test	ds:_byte_21DF4_cmd_args_audio, 0Fh ; Logical Compare
jz	short locret_1EDFC ; Jump if Zero (ZF=1)

mov	bx, 3
mov	ah, 43h	; 'C'
call	_sub_1ED45_call_ems_func ; Call	Procedure

jb	short locret_1EDFC ; Jump if Below (CF=1)

mov	cs:word_1ED3E, dx
mov	ax, offset loc_14401
xor	bx, bx		; Logical Exclusive OR
call	_sub_1ED45_call_ems_func ; Call	Procedure

jb	short loc_1EDFD	; Jump if Below	(CF=1)

mov	ax, 4402h
mov	bx, 1
call	_sub_1ED45_call_ems_func ; Call	Procedure

jb	short loc_1EDFD	; Jump if Below	(CF=1)

mov	ax, 4403h
mov	bx, 2
call	_sub_1ED45_call_ems_func ; Call	Procedure

jb	short loc_1EDFD	; Jump if Below	(CF=1)

mov	ax, cs:_word_1ED3C_ems_page_frame_base_seg
mov	word ptr ds:dword_2D066+2, ax
mov	word ptr ds:dword_2D066, 4000h


locret_1EDFC:		; Return Near from Procedure
retn

; ���������������������������������������������������������������������������

loc_1EDFD:
mov	ah, 45h	; 'E'
jmp	_sub_1ED45_call_ems_func ; Jump

_sub_1EDB9_map_ems_for_midi_audio endp




_sub_1EE02_ems_memory_func_2 proc near
mov	ax, bx
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
xchg	al, ah		; Exchange Register/Memory with	Register
and	ax, 3C00h	; Logical AND
mov	di, ax
shr	bx, 1		; Shift	Logical	Right
shr	bx, 1		; Shift	Logical	Right
shr	bx, 1		; Shift	Logical	Right
shr	bx, 1		; Shift	Logical	Right


loc_1EE17:
mov	ax, 4400h
call	_sub_1ED40_get_ems_emm_handle ;	Call Procedure

jb	short locret_1EE45 ; Jump if Below (CF=1)

mov	es, cs:_word_1ED3C_ems_page_frame_base_seg
assume es:nothing
mov	dx, cx
mov	cx, 4000h
sub	cx, di		; Integer Subtraction
cmp	cx, dx		; Compare Two Operands
jb	short loc_1EE31	; Jump if Below	(CF=1)

mov	cx, dx


loc_1EE31:		; Integer Subtraction
sub	dx, cx
shr	cx, 1		; Shift	Logical	Right
rep movsw		; Move Byte(s) from String to String
adc	cl, cl		; Add with Carry
rep movsb		; Move Byte(s) from String to String
mov	cx, dx
jcxz	short loc_1EE44	; Jump if CX is	0

inc	bx		; Increment by 1
xor	di, di		; Logical Exclusive OR
jmp	short loc_1EE17	; Jump

; ���������������������������������������������������������������������������

loc_1EE44:		; Clear	Carry Flag
clc


locret_1EE45:		; Return Near from Procedure
retn

_sub_1EE02_ems_memory_func_2 endp




_sub_1EE46_ems_memory_func_1 proc near
mov	ax, bx
shl	ax, 1		; Shift	Logical	Left
shl	ax, 1		; Shift	Logical	Left
xchg	al, ah		; Exchange Register/Memory with	Register
and	ax, 3C00h	; Logical AND
mov	si, ax
shr	bx, 1		; Shift	Logical	Right
shr	bx, 1		; Shift	Logical	Right
shr	bx, 1		; Shift	Logical	Right
shr	bx, 1		; Shift	Logical	Right


loc_1EE5B:
mov	ax, 4400h
call	_sub_1ED40_get_ems_emm_handle ;	EMS: Map Logical Page Into Physical Page Window

jb	short locret_1EE45 ; Jump if Below (CF=1)

mov	ds, cs:_word_1ED3C_ems_page_frame_base_seg
mov	dx, cx
mov	cx, 4000h
sub	cx, si		; Integer Subtraction
cmp	cx, dx		; Compare Two Operands
jb	short loc_1EE75	; Jump if Below	(CF=1)

mov	cx, dx


loc_1EE75:		; Integer Subtraction
sub	dx, cx
shr	cx, 1		; Shift	Logical	Right
rep movsw		; Move Byte(s) from String to String
adc	cl, cl		; Add with Carry
rep movsb		; Move Byte(s) from String to String
mov	cx, dx
jcxz	short loc_1EE88	; Jump if CX is	0

inc	bx		; Increment by 1
xor	si, si		; Logical Exclusive OR
jmp	short loc_1EE5B	; Jump

; ���������������������������������������������������������������������������

loc_1EE88:		; Clear	Carry Flag
clc
retn			; Return Near from Procedure

_sub_1EE46_ems_memory_func_1 endp

; ���������������������������������������������������������������������������
_word_1EE8A_xms_memory_block dw	0
_dword_1EE8C_xms_driver_addr dd	0
word_1EE90 dw 0
dw 0
dw 0
dw 0
dw 0
dw 0
dw 0
dw 0



_sub_1EEA0_initialize_himem_sys	proc near
mov	ax, 4310h
int	2Fh		; - Multiplex -	XMS - GET DRIVER ADDRESS
			; Return: ES:BX	-> driver entry	point
mov	word ptr cs:_dword_1EE8C_xms_driver_addr, bx
mov	word ptr cs:_dword_1EE8C_xms_driver_addr+2, es
mov	ah, 8		; XMS Query Free Extended Memory
call	_sub_1EF22_call_xms_driver_func	; Call Procedure

cmp	ax, 63		; Size of the largest free extended memory block in K-bytes
jb	short loc_1EEE3	; Too little memory for	XMS

cmp	ax, 2048	; Compare Two Operands
jb	short loc_1EEC1	; Jump if Below	(CF=1)

mov	ax, 2048


loc_1EEC1:
mov	ds:_word_22E59_xms_or_ems_mem_limit, ax
mov	dx, ax
mov	ah, 9		; Allocate Extended Memory Block
call	_sub_1EF22_call_xms_driver_func	; Call Procedure

jb	short loc_1EEE3	; Jump if Below	(CF=1)

mov	cs:_word_1EE8A_xms_memory_block, dx ; 16-bit handle to the allocated block
mov	si, offset _sub_1EF32_xms_move_memory
mov	di, offset sub_1EEE9
mov	cs:_off_1EA77_memory_func_1, di
mov	cs:_off_1EA79_memory_func_2, si
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1EEE3:		; Logical AND
and	ds:_byte_21DF3_cmd_args_memory,	7Fh
retn			; Return Near from Procedure

_sub_1EEA0_initialize_himem_sys	endp




sub_1EEE9 proc near
mov	di, offset word_1EE90
mov	word ptr cs:[di+8], ds
push	cs
pop	ds
assume ds:seg000
mov	[di+6],	si
inc	cx		; Increment by 1
and	cl, 0FEh	; Logical AND
mov	[di], cx
xor	ax, ax		; Logical Exclusive OR
mov	[di+2],	ax
mov	[di+4],	ax
mov	ax, cs:_word_1EE8A_xms_memory_block
mov	[di+0Ah], ax
xor	dx, dx		; Logical Exclusive OR
xchg	bl, bh		; Exchange Register/Memory with	Register
xchg	bl, dl		; Exchange Register/Memory with	Register
shl	bx, 1		; Shift	Logical	Left
rcl	dl, 1		; Rotate Through Carry Left
shl	bx, 1		; Shift	Logical	Left
rcl	dl, 1		; Rotate Through Carry Left
mov	[di+0Ch], bx
mov	[di+0Eh], dx
mov	si, di
mov	ah, 0Bh

sub_1EEE9 endp




_sub_1EF22_call_xms_driver_func	proc near
call	cs:_dword_1EE8C_xms_driver_addr	; Indirect Call	Far Procedure
cmp	ax, 1		; Compare Two Operands
retn			; Return Near from Procedure

_sub_1EF22_call_xms_driver_func	endp




_sub_1EF2B_call_xms_func_on_block proc near
mov	dx, cs:_word_1EE8A_xms_memory_block
jmp	short _sub_1EF22_call_xms_driver_func ;	Jump

_sub_1EF2B_call_xms_func_on_block endp




_sub_1EF32_xms_move_memory proc	near
push	cs
pop	ds
mov	si, offset word_1EE90
inc	cx		; Increment by 1
and	cl, 0FEh	; Logical AND
mov	[si], cx
xor	ax, ax		; Logical Exclusive OR
mov	[si+2],	ax
mov	[si+0Ah], ax
mov	[si+0Ch], di
mov	word ptr [si+0Eh], es
mov	ax, cs:_word_1EE8A_xms_memory_block
mov	[si+4],	ax
xor	dx, dx		; Logical Exclusive OR
xchg	bl, bh		; Exchange Register/Memory with	Register
xchg	bl, dl		; Exchange Register/Memory with	Register
shl	bx, 1		; Shift	Logical	Left
rcl	dl, 1		; Rotate Through Carry Left
shl	bx, 1		; Shift	Logical	Left
rcl	dl, 1		; Rotate Through Carry Left
mov	[si+6],	bx
mov	[si+8],	dx
mov	ah, 0Bh
jmp	short _sub_1EF22_call_xms_driver_func ;	Jump

_sub_1EF32_xms_move_memory endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR _sub_1E8B8_get_pit_timer_value

loc_1EF6A:
push	ax
push	ds
push	es
mov	ax, seg	seg001
mov	ds, ax
assume ds:seg001
cld			; Clear	Direction Flag
cmp	byte_2C39A, 0	; Compare Two Operands
jg	short loc_1EFA2	; Jump if Greater (ZF=0	& SF=OF)

inc	_word_2C32A_time_passed	; Increment by 1
jnz	short loc_1EF84	; Jump if Not Zero (ZF=0)

inc	word ptr unk_2C32C ; Increment by 1


loc_1EF84:		; Compare Two Operands
cmp	byte_21C38, 0
jnz	short loc_1EF9F	; Jump if Not Zero (ZF=0)

dec	word_23B8B	; Decrement by 1
jns	short loc_1EF9F	; Jump if Not Sign (SF=0)

mov	ax, word_2091E
mov	word_23B8B, ax
inc	word_1F4B2	; Increment by 1
inc	byte_23B8D	; Increment by 1


loc_1EF9F:		; Call Procedure
call	sub_1EFBA


loc_1EFA2:
pop	es
dec	byte_2C322	; Decrement by 1
js	short loc_1EFD5	; Jump if Sign (SF=1)

mov	al, 20h	; ' '
out	20h, al		; Interrupt controller,	8259A.
cmp	_byte_2D065_hnm_flag_msb, 0 ; Compare Two Operands
jz	short loc_1EFB7	; Jump if Zero (ZF=1)

call	sub_1CEC9	; Call Procedure


loc_1EFB7:
pop	ds
assume ds:nothing
pop	ax
iret			; Interrupt Return

; END OF FUNCTION CHUNK	FOR _sub_1E8B8_get_pit_timer_value



sub_1EFBA proc near
push	bx
test	ds:_byte_21DF3_cmd_args_memory,	10h ; Logical Compare
jnz	short loc_1EFD3	; Jump if Not Zero (ZF=0)

push	cx
call	ds:midi_vtable_func_6 ;	Indirect Call Far Procedure
mov	byte ptr ds:unk_2D07D, al
mov	ds:word_2D07E, bx
mov	ds:word_2D080, cx
pop	cx


loc_1EFD3:
pop	bx
retn			; Return Near from Procedure

sub_1EFBA endp

; ���������������������������������������������������������������������������

loc_1EFD5:
mov	ds:byte_2C322, 0Ah
pop	ds
pop	ax

loc_1EFDC:		; Jump
jmp	loc_1EF6A

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_1EFE7

_loc_1EFE1_clear_and_retry: ; Call Procedure
call	_sub_1F08E_clear_keyboard_array

jmp	short loc_1F031	; Jump

; END OF FUNCTION CHUNK	FOR sub_1EFE7
; ���������������������������������������������������������������������������
nop			; No Operation




sub_1EFE7 proc far

; FUNCTION CHUNK AT EFE1 SIZE 00000005 BYTES

push	ax
push	cx
push	di
push	ds
mov	ax, seg	seg001
mov	ds, ax
assume ds:seg001
cld			; Clear	Direction Flag
in	al, 60h		; AT Keyboard controller 8042.
cmp	al, 0FFh	; Compare Two Operands
jz	short _loc_1EFE1_clear_and_retry ; Jump	if Zero	(ZF=1)

mov	di, ax
and	di, 7Fh		; Logical AND
cmp	di, 90		; Compare Two Operands
jnb	short loc_1F031	; Jump if Not Below (CF=0)

add	di, offset _unk_2C331_key_pressed_array	; Add
cbw			; AL ->	AX (with sign)
not	ah		; One's Complement Negation
xchg	al, ah		; Exchange Register/Memory with	Register
mov	[di], al
or	al, al		; Logical Inclusive OR
jz	short loc_1F031	; Jump if Zero (ZF=1)

mov	al, ah
mov	_byte_2C398_key_hit_qq,	al
cmp	al, 53h	; 'S'   ; Part of DEL scan code?
jnz	short loc_1F026	; Jump if Not Zero (ZF=0)

mov	al, byte_2C369
add	al, _byte_2C34E_key_w_status ; Add
cmp	al, 0FEh ; '�'  ; Compare Two Operands
jz	short loc_1F052	; Jump if Zero (ZF=1)

mov	al, 83


loc_1F026:		; Scan Code Set	1: 'C'
cmp	al, 2Eh	; '.'
jnz	short loc_1F031	; Jump if Not Zero (ZF=0)

cmp	_byte_2C34E_key_w_status, 0FFh ; Compare Two Operands
jz	short loc_1F057	; Jump if Zero (ZF=1)


loc_1F031:		; Compare Two Operands
cmp	al, 70h	; 'p'
jnb	short loc_1F049	; Jump if Not Below (CF=0)

in	al, 61h		; PC/XT	PPI port B bits:
			; 0: Tmr 2 gate	��� OR	03H=spkr ON
			; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF
			; 3: 1=read high switches
			; 4: 0=enable RAM parity checking
			; 5: 0=enable I/O channel check
			; 6: 0=hold keyboard clock low
			; 7: 0=enable kbrd
or	al, 80h		; Logical Inclusive OR
out	61h, al		; PC/XT	PPI port B bits:
			; 0: Tmr 2 gate	��� OR	03H=spkr ON
			; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF
			; 3: 1=read high switches
			; 4: 0=enable RAM parity checking
			; 5: 0=enable I/O channel check
			; 6: 0=hold keyboard clock low
			; 7: 0=enable kbrd
and	al, 7Fh		; Logical AND
out	61h, al		; PC/XT	PPI port B bits:
			; 0: Tmr 2 gate	��� OR	03H=spkr ON
			; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF
			; 3: 1=read high switches
			; 4: 0=enable RAM parity checking
			; 5: 0=enable I/O channel check
			; 6: 0=hold keyboard clock low
			; 7: 0=enable kbrd
mov	al, 20h	; ' '
cli			; Clear	Interrupt Flag
out	20h, al		; Interrupt controller,	8259A.
pop	ds
assume ds:nothing
pop	di
pop	cx
pop	ax
iret			; Interrupt Return

; ���������������������������������������������������������������������������

loc_1F049:
pop	ds
pop	di
pop	cx
pop	ax

loc_1F04D:		; Jump
jmp	sub_1EFE7

; ���������������������������������������������������������������������������

loc_1F052:		; Jump
jmp	far ptr	0F000h:0FFF0h

; ���������������������������������������������������������������������������

loc_1F057:		; Call Procedure
call	_sub_1F05C_reset_keyboard

jmp	short loc_1F031	; Jump

sub_1EFE7 endp




_sub_1F05C_reset_keyboard proc near
cmp	ds:byte_2C39A, 0 ; Compare Two Operands
jnz	short locret_1F08D ; Jump if Not Zero (ZF=0)

push	bx
push	es
mov	ah, 34h
int	21h		; DOS -	2+ internal - RETURN CritSectFlag (InDOS) POINTER
mov	al, es:[bx]
pop	es
pop	bx
or	al, al		; Logical Inclusive OR
jnz	short locret_1F08D ; Jump if Not Zero (ZF=0)

inc	ds:byte_2C39A	; Increment by 1
in	al, 61h		; PC/XT	PPI port B bits:
			; 0: Tmr 2 gate	��� OR	03H=spkr ON
			; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF
			; 3: 1=read high switches
			; 4: 0=enable RAM parity checking
			; 5: 0=enable I/O channel check
			; 6: 0=hold keyboard clock low
			; 7: 0=enable kbrd
or	al, 80h		; Logical Inclusive OR
out	61h, al		; PC/XT	PPI port B bits:
			; 0: Tmr 2 gate	��� OR	03H=spkr ON
			; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF
			; 3: 1=read high switches
			; 4: 0=enable RAM parity checking
			; 5: 0=enable I/O channel check
			; 6: 0=hold keyboard clock low
			; 7: 0=enable kbrd
and	al, 7Ch		; Logical AND
out	61h, al		; PC/XT	PPI port B bits:
			; 0: Tmr 2 gate	��� OR	03H=spkr ON
			; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF
			; 3: 1=read high switches
			; 4: 0=enable RAM parity checking
			; 5: 0=enable I/O channel check
			; 6: 0=hold keyboard clock low
			; 7: 0=enable kbrd
mov	al, 20h	; ' '
cli			; Clear	Interrupt Flag
out	20h, al		; Interrupt controller,	8259A.
push	ds
pop	ss
assume ss:nothing
mov	sp, offset _word_2316C_error_msg
jmp	_1003A_exit_with_error ; Jump

; ���������������������������������������������������������������������������

locret_1F08D:		; Return Near from Procedure
retn

_sub_1F05C_reset_keyboard endp




_sub_1F08E_clear_keyboard_array	proc near
push	es
push	ds
pop	es
xor	ax, ax		; Logical Exclusive OR
mov	ds:_byte_2C398_key_hit_qq, al
mov	di, offset _unk_2C331_key_pressed_array
mov	cx, 103
rep stosb		; Store	String
pop	es
retn			; Return Near from Procedure

_sub_1F08E_clear_keyboard_array	endp




_sub_1F0A0_open_resource_force_hsq proc	near
push	di
push	es
inc	ds:_byte_2C321_disable_hsq ; Increment by 1
push	ds
pop	es
mov	di, offset RESOURCE_GLOBDATA
call	_sub_1F0B9_open_resource_by_index_si ; reads and decompresses to es:di

dec	ds:_byte_2C321_disable_hsq ; Decrement by 1
mov	si, di
pop	es
pop	di
jmp	_sub_1F403_hsq_decomp_skip_header_dssi_to_esdi ; Jump

_sub_1F0A0_open_resource_force_hsq endp



; reads	and decompresses to es:di

_sub_1F0B9_open_resource_by_index_si proc near
mov	ds:_word_2C328_resource_index, si
shl	si, 1		; Shift	Logical	Left
mov	si, ds:_off_226AF_resource_names[si]
lodsw			; Load String
mov	dx, si
or	ax, ax		; Logical Inclusive OR
jz	short _sub_1F0D6_read_and_maybe_hsq ; Jump if Zero (ZF=1)

mov	cx, ax
push	dx
call	_sub_1F11C_alloc_cx_pages_to_di	; Call Procedure

pop	dx
call	_sub_1F0D6_read_and_maybe_hsq ;	Call Procedure

jmp	short _sub_1F0FF_bump_allocate_bump_cx_bytes ; Jump

_sub_1F0B9_open_resource_by_index_si endp




_sub_1F0D6_read_and_maybe_hsq proc near

; FUNCTION CHUNK AT F3D3 SIZE 00000030 BYTES

mov	ax, ds:_word_2C328_resource_index
cmp	al, ds:byte_2C320 ; Compare Two	Operands
jnb	short loc_1F0E4	; Jump if Not Below (CF=0)

call	sub_1EBE3	; Call Procedure

jb	short loc_1F0F3	; Jump if Below	(CF=1)


loc_1F0E4:		; Call Procedure
call	_sub_1F244_read_resource_to_esdi

mov	ax, ds:_word_2C328_resource_index
cmp	al, ds:byte_2C320 ; Compare Two	Operands
jnb	short loc_1F0F3	; Jump if Not Below (CF=0)

call	_sub_1EAB7_memory_func_qq ; Call Procedure


loc_1F0F3:		; Jump
jmp	_loc_1F3D3_check_hsq_checksum

_sub_1F0D6_read_and_maybe_hsq endp




_sub_1F0F6_bump_alloc_get_addr_in_di proc near
les	si, dword ptr ds:_word_22E67_allocator_next_free_ofs ; Load Full Pointer to ES:xx
mov	[di], si
mov	word ptr [di+2], es

_sub_1F0F6_bump_alloc_get_addr_in_di endp




_sub_1F0FF_bump_allocate_bump_cx_bytes proc near
mov	ax, cx
add	ax, 0Fh		; Add
rcr	ax, 1		; Rotate Through Carry Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
add	ds:_word_22E69_allocator_next_free_seg,	ax ; Add
push	ax
mov	ax, ds:_word_22E69_allocator_next_free_seg
cmp	ax, ds:_word_2C318_allocator_last_free_seg ; Compare Two Operands
pop	ax
ja	short _loc_1F131_out_of_memory_error ; Jump if Above (CF=0 & ZF=0)

retn			; Return Near from Procedure

_sub_1F0FF_bump_allocate_bump_cx_bytes endp




_sub_1F11C_alloc_cx_pages_to_di	proc near
les	di, dword ptr ds:_word_22E67_allocator_next_free_ofs ; Load Full Pointer to ES:xx
mov	ax, es
add	ax, cx		; Add
cmp	ax, ds:_word_2C318_allocator_last_free_seg ; Compare Two Operands
jnb	short loc_1F12B	; Jump if Not Below (CF=0)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1F12B:		; Call Procedure
call	_sub_1F13F_allocator_attempt_to_free_space

jmp	short _sub_1F11C_alloc_cx_pages_to_di ;	Jump

_sub_1F11C_alloc_cx_pages_to_di	endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR _sub_1F13F_allocator_attempt_to_free_space

_loc_1F130_out_of_memory_error:
pop	cx

; END OF FUNCTION CHUNK	FOR _sub_1F13F_allocator_attempt_to_free_space
; START	OF FUNCTION CHUNK FOR _sub_1E76A_initialize_audio

_loc_1F131_out_of_memory_error:
mov	ax, seg	seg001
mov	ds, ax
assume ds:seg001
mov	_word_2316C_error_msg, offset aNotEnoughSta_1 ;	"Not enough standard memory to run Dune"
jmp	_1003A_exit_with_error ; Jump

; END OF FUNCTION CHUNK	FOR _sub_1E76A_initialize_audio



_sub_1F13F_allocator_attempt_to_free_space proc	near

; FUNCTION CHUNK AT F130 SIZE 00000001 BYTES

push	cx
mov	bp, word_1F4B2
mov	si, offset unk_2CCF4
mov	di, offset _word_2CF3C_open_res_info
mov	cx, 91h	; '�'
xor	dx, dx		; Logical Exclusive OR
mov	bx, dx


loc_1F151:		; Add
add	di, 2
add	si, 4		; Add
mov	ax, [si+2]
or	ax, ax		; Logical Inclusive OR
jz	short loc_1F16A	; Jump if Zero (ZF=1)

mov	ax, bp
sub	ax, [di]	; Integer Subtraction
cmp	ax, dx		; Compare Two Operands
jb	short loc_1F16A	; Jump if Below	(CF=1)

mov	dx, ax
mov	bx, si


loc_1F16A:		; Loop while CX	!= 0
loop	loc_1F151

or	bx, bx		; Logical Inclusive OR
jz	short _loc_1F130_out_of_memory_error ; Jump if Zero (ZF=1)

mov	ax, bx
sub	ax, offset unk_2CCF4 ; Integer Subtraction
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
cmp	ax, _word_21C34_resource_id ; Compare Two Operands
jnz	short loc_1F185	; Jump if Not Zero (ZF=0)

mov	_word_21C34_resource_id, 0FFFFh


loc_1F185:		; Logical Exclusive OR
xor	dx, dx
xchg	dx, [bx+2]	; Exchange Register/Memory with	Register
mov	si, offset unk_2CCFA
mov	cx, 91h	; '�'
mov	bx, 8000h


loc_1F193:		; Load String
lodsw
add	si, 2		; Add
sub	ax, dx		; Integer Subtraction
jb	short loc_1F1A1	; Jump if Below	(CF=1)

cmp	ax, bx		; Compare Two Operands
jnb	short loc_1F1A1	; Jump if Not Below (CF=0)

mov	bx, ax


loc_1F1A1:		; Loop while CX	!= 0
loop	loc_1F193

or	bx, bx		; Logical Inclusive OR
js	short loc_1F1F5	; Jump if Sign (SF=1)

mov	si, offset unk_2CCF6
mov	cx, 91h	; '�'


loc_1F1AD:		; Add
add	si, 4
cmp	[si], dx	; Compare Two Operands
jb	short loc_1F1B6	; Jump if Below	(CF=1)

sub	[si], bx	; Integer Subtraction


loc_1F1B6:		; Loop while CX	!= 0
loop	loc_1F1AD

mov	si, 0DBB2h
cmp	[si], dx	; Compare Two Operands
jb	short loc_1F1C1	; Jump if Below	(CF=1)

sub	[si], bx	; Integer Subtraction


loc_1F1C1:
mov	es, dx
add	dx, bx		; Add
mov	ds, dx
assume ds:nothing
xor	si, si		; Logical Exclusive OR
mov	di, si
mov	ax, ss:39B9h
sub	ax, dx		; Integer Subtraction
cmp	ax, 1000h	; Compare Two Operands
jbe	short loc_1F1E3	; Jump if Below	or Equal (CF=1 | ZF=1)

mov	cx, 8000h
rep movsw		; Move Byte(s) from String to String
mov	dx, es
add	dx, 1000h	; Add
jmp	short loc_1F1C1	; Jump

; ���������������������������������������������������������������������������

loc_1F1E3:
mov	cx, ax
shl	cx, 1		; Shift	Logical	Left
shl	cx, 1		; Shift	Logical	Left
shl	cx, 1		; Shift	Logical	Left
rep movsw		; Move Byte(s) from String to String
push	ss
pop	ds
sub	ds:39B9h, bx	; Integer Subtraction
pop	cx
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1F1F5:
mov	ds:39B9h, dx
pop	cx

locret_1F1FA:		; Return Near from Procedure
retn

_sub_1F13F_allocator_attempt_to_free_space endp




_sub_1F1FB_open_res_or_file_to_dx_size_ax proc near
push	dx

loc_1F1FC:		; Call Procedure
call	_sub_1F2A7_seek_dune_dat_to_res_dsdx

pop	si
jnb	short locret_1F228 ; Jump if Not Below (CF=0)

mov	dx, si


loc_1F204:
push	dx
call	_sub_1F2FC_strcpy_to_filename_buf ; Call Procedure

mov	ax, 3D00h
int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
			; DS:DX	-> ASCIZ filename
			; AL = access mode
			; 0 - read
pop	dx
jb	short locret_1F228 ; Jump if Below (CF=1)

mov	bx, ax
xor	cx, cx		; Logical Exclusive OR
mov	dx, cx
mov	ax, 4202h
int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
			; AL = method: offset from end of file
push	ax
push	dx
xor	cx, cx		; Logical Exclusive OR
mov	dx, cx
mov	ax, 4200h
int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
			; AL = method: offset from beginning of	file
pop	bp
pop	cx


locret_1F228:		; Return Near from Procedure
retn

_sub_1F1FB_open_res_or_file_to_dx_size_ax endp




_sub_1F229_open_res_or_file_or_die proc	near
call	_sub_1F1FB_open_res_or_file_to_dx_size_ax ; Call Procedure

jb	short loc_1F22F	; Jump if Below	(CF=1)

retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

loc_1F22F:
mov	si, dx
mov	di, (offset aFileNotFound+10h)
mov	cx, 0Ch
push	ds
pop	es
rep movsb		; Move Byte(s) from String to String
mov	ds:_word_2316C_error_msg, offset aFileNotFound ; "File not found:	      "
jmp	_1003A_exit_with_error ; Jump

_sub_1F229_open_res_or_file_or_die endp




_sub_1F244_read_resource_to_esdi proc near
push	dx
call	_sub_1F229_open_res_or_file_or_die ; Call Procedure

pop	dx
cmp	bx, ds:_2D06A_dune_dat_file_handle ; Compare Two Operands
jnz	short _sub_1F260_read_ffff_to_esdi_and_close ; Jump if Not Zero	(ZF=0)

call	_sub_1F2EA_read_dune_dat_cx_to_esdi ; Call Procedure

jb	short _sub_1F244_read_resource_to_esdi ; Jump if Below (CF=1)

retn			; Return Near from Procedure

_sub_1F244_read_resource_to_esdi endp




_sub_1F255_open_nonres_file proc near
push	dx
push	di
push	es
call	loc_1F204	; Call Procedure

jb	short loc_1F22F	; Jump if Below	(CF=1)

pop	es
pop	di
pop	dx

_sub_1F255_open_nonres_file endp




_sub_1F260_read_ffff_to_esdi_and_close proc near
push	dx
push	di
push	es
push	ds
push	es
pop	ds
mov	cx, 0FFFFh
mov	dx, di
mov	ah, 3Fh
int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
			; BX = file handle, CX = number	of bytes to read
			; DS:DX	-> buffer
pop	ds
mov	cx, ax
pushf			; Push Flags Register onto the Stack
mov	ah, 3Eh
int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
			; BX = file handle
popf			; Pop Stack into Flags Register
pop	es
pop	di
pop	dx
retn			; Return Near from Procedure

_sub_1F260_read_ffff_to_esdi_and_close endp ; sp =  2

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR _sub_1B389_open_sav_cl

_loc_1F27C_create_and_write_file:
push	cx
mov	ah, 3Ch	; '<'
xor	cx, cx		; Logical Exclusive OR
int	21h		; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
			; CX = attributes for file
			; DS:DX	-> ASCIZ filename (may include drive and path)
pop	cx
jb	short locret_1F29A ; Jump if Below (CF=1)

mov	bx, ax
push	ds
push	es
pop	ds
mov	dx, di
mov	ah, 40h
int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
			; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
pop	ds
sub	ax, cx		; Integer Subtraction
pushf			; Push Flags Register onto the Stack
mov	ah, 3Eh
int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
			; BX = file handle
popf			; Pop Stack into Flags Register


locret_1F29A:		; Return Near from Procedure
retn

; END OF FUNCTION CHUNK	FOR _sub_1B389_open_sav_cl



sub_1F29B proc near
push	dx
mov	ds:0CE77h, al
mov	dl, al
mov	ah, 0Eh
int	21h		; DOS -	SELECT DISK
			; DL = new default drive number	(0 = A,	1 = B, etc.)
			; Return: AL = number of logical drives
pop	dx
retn			; Return Near from Procedure

sub_1F29B endp




_sub_1F2A7_seek_dune_dat_to_res_dsdx proc near
push	di
push	es
cmp	ds:_2D06A_dune_dat_file_handle,	1 ; Compare Two	Operands
jb	short loc_1F2D3	; Jump if Below	(CF=1)

mov	si, dx
call	_sub_1F314_locate_res_by_name_dssi ; Call Procedure

jb	short loc_1F2D3	; Jump if Below	(CF=1)

call	sub_1F3A7	; Call Procedure

jb	short loc_1F2D3	; Jump if Below	(CF=1)

xor	cx, cx		; Logical Exclusive OR
mov	cl, es:[di+5]
mov	bp, cx
mov	cx, es:[di+3]
mov	ax, es:[di+6]
mov	dx, es:[di+8]
call	_sub_1F2D6_seek_dune_dat_offset_dxax ; Call Procedure


loc_1F2D3:
pop	es
pop	di
retn			; Return Near from Procedure

_sub_1F2A7_seek_dune_dat_to_res_dsdx endp




_sub_1F2D6_seek_dune_dat_offset_dxax proc near
push	cx
mov	bx, ss:_2D06A_dune_dat_file_handle
mov	cx, dx
mov	dx, ax
mov	ax, 4200h
int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
			; AL = method: offset from beginning of	file
pop	cx
retn			; Return Near from Procedure

_sub_1F2D6_seek_dune_dat_offset_dxax endp




sub_1F2E7 proc near
call	_sub_1F2D6_seek_dune_dat_offset_dxax ; Call Procedure

sub_1F2E7 endp




_sub_1F2EA_read_dune_dat_cx_to_esdi proc near
push	ds
push	es
pop	ds
mov	bx, ss:_2D06A_dune_dat_file_handle
mov	dx, di
mov	ah, 3Fh
int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
			; BX = file handle, CX = number	of bytes to read
			; DS:DX	-> buffer
cmp	ax, cx		; Compare Two Operands
pop	ds
retn			; Return Near from Procedure

_sub_1F2EA_read_dune_dat_cx_to_esdi endp




_sub_1F2FC_strcpy_to_filename_buf proc near
push	si
push	di
mov	si, dx
mov	di, ds:off_22D56


loc_1F304:
mov	al, [si]
inc	si		; Increment by 1
mov	[di], al
inc	di		; Increment by 1
or	al, al		; Logical Inclusive OR
jnz	short loc_1F304	; Jump if Not Zero (ZF=0)

pop	di
pop	si
mov	dx, offset _22CD6_temp_filepath_buffer
retn			; Return Near from Procedure

_sub_1F2FC_strcpy_to_filename_buf endp




_sub_1F314_locate_res_by_name_dssi proc	near
push	ss		; ds:si	points to first	file name in dune.dat index
pop	es
cmp	word ptr [si+2], 'P\' ; Compare Two Operands
jz	short _loc_1F36C_is_in_p_dir ; Jump if Zero (ZF=1)

push	si
mov	cx, 10h
mov	dx, cx


loc_1F323:		; Load String
lodsb
or	al, al		; Logical Inclusive OR
loopne	loc_1F323	; Loop while rCX != 0 and ZF=0

jnz	short loc_1F32B	; Jump if Not Zero (ZF=0)

inc	cx		; Increment by 1


loc_1F32B:		; Integer Subtraction
sub	cx, 10h
neg	cx		; cx = dune.dat	entry filename length
pop	si
xor	dx, dx		; Logical Exclusive OR
mov	ax, ds:_word_2C328_resource_index
mov	di, ax
shl	di, 1		; Shift	Logical	Left
mov	di, ds:_off_226AF_resource_names[di]
add	di, 2		; Add
push	cx
push	si
repe cmpsb		; Compare Strings
pop	si
pop	cx
jz	short loc_1F3A5	; Jump if Zero (ZF=1)

mov	bx, offset _off_226AF_resource_names
mov	bp, 0F7h ; '�'


loc_1F34F:
mov	di, es:[bx]
mov	ax, bx
sub	ax, offset _off_226AF_resource_names ; Integer Subtraction
shr	ax, 1		; Shift	Logical	Right
add	bx, 2		; Add
add	di, 2		; Add
push	cx
push	si
repe cmpsb		; Compare Strings
pop	si
pop	cx
jz	short loc_1F3A5	; Jump if Zero (ZF=1)

dec	bp		; Decrement by 1
jnz	short loc_1F34F	; Jump if Not Zero (ZF=0)

stc			; Set Carry Flag
retn			; Return Near from Procedure

; ���������������������������������������������������������������������������

_loc_1F36C_is_in_p_dir:	; Add
add	si, 4
lodsb			; Load String
sub	al, 40h	; '@'   ; Integer Subtraction
mov	dl, al
xor	bx, bx		; Logical Exclusive OR
mov	cx, 3


loc_1F379:		; Load String
lodsb
cmp	al, 41h	; 'A'   ; Compare Two Operands
jb	short loc_1F380	; Jump if Below	(CF=1)

sub	al, 7		; Integer Subtraction


loc_1F380:		; Logical AND
and	al, 0Fh
shl	bx, 1		; Shift	Logical	Left
shl	bx, 1		; Shift	Logical	Left
shl	bx, 1		; Shift	Logical	Left
shl	bx, 1		; Shift	Logical	Left
or	bl, al		; Logical Inclusive OR
loop	loc_1F379	; Loop while CX	!= 0

lodsb			; Load String
cmp	al, 4Fh	; 'O'   ; Compare Two Operands
cmc			; Complement Carry Flag
rcl	dl, 1		; Rotate Through Carry Left
lodsb			; Load String
sub	al, 41h	; 'A'   ; Integer Subtraction
jb	short loc_1F3A3	; Jump if Below	(CF=1)

shl	al, 1		; Shift	Logical	Left
shl	al, 1		; Shift	Logical	Left
shl	al, 1		; Shift	Logical	Left
shl	al, 1		; Shift	Logical	Left
or	bh, al		; Logical Inclusive OR


loc_1F3A3:
mov	ax, bx


loc_1F3A5:		; Clear	Carry Flag
clc
retn			; Return Near from Procedure

_sub_1F314_locate_res_by_name_dssi endp




sub_1F3A7 proc near
les	di, ss:_dword_2D06C_dnmaj_func_ptr_2 ; Load Full Pointer to ES:xx
sub	di, 5		; Integer Subtraction


loc_1F3AF:		; Add
add	di, 5
cmp	dl, es:[di+4]	; Compare Two Operands
jnz	short loc_1F3BC	; Jump if Not Zero (ZF=0)

cmp	ax, es:[di+2]	; Compare Two Operands


loc_1F3BC:		; Jump if Above	(CF=0 &	ZF=0)
ja	short loc_1F3AF

mov	di, es:[di]
sub	di, 0Ah		; Integer Subtraction


loc_1F3C4:		; Add
add	di, 0Ah
cmp	dl, es:[di+2]	; Compare Two Operands
jnz	short loc_1F3D0	; Jump if Not Zero (ZF=0)

cmp	ax, es:[di]	; Compare Two Operands


loc_1F3D0:		; Jump if Above	(CF=0 &	ZF=0)
ja	short loc_1F3C4

retn			; Return Near from Procedure

sub_1F3A7 endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR _sub_1F0D6_read_and_maybe_hsq

_loc_1F3D3_check_hsq_checksum: ; Compare Two Operands
cmp	ds:_byte_2C321_disable_hsq, 0
jnz	short locret_1F402 ; Jump if Not Zero (ZF=0)

push	cx
push	di
push	ds
push	es
pop	ds
mov	dx, di
add	dx, cx		; Add
mov	cx, 6		; header length
mov	si, di
xor	ax, ax		; Logical Exclusive OR


loc_1F3EA:		; Load String
lodsb
add	ah, al		; Add
loop	loc_1F3EA	; Loop while CX	!= 0

cmp	ah, 0ABh ; '�'  ; sum of header bytes = 0xab?
jnz	short loc_1F3FE	; Jump if Not Zero (ZF=0)

mov	si, di
lodsw			; Load String
mov	di, ax		; ds = first word in resource =	unpacked size
lodsb			; Load String
or	al, al		; file is compressed if	checksum = 0xab	and
			; third	byte is	0
jz	short _loc_1F40D_hsq_decomp_no_header ;	ds:si points to	packed file + 3
			; di is	unpacked size
			; ax = packed size


loc_1F3FE:		; Set Carry Flag
stc
pop	ds
pop	di
pop	cx


locret_1F402:		; Return Near from Procedure
retn

; END OF FUNCTION CHUNK	FOR _sub_1F0D6_read_and_maybe_hsq



_sub_1F403_hsq_decomp_skip_header_dssi_to_esdi proc near
push	cx
push	di
push	ds
add	si, 6		; Add
xor	bp, bp		; Logical Exclusive OR
jmp	short _loc_1F435_next_bit ; Jump

; ���������������������������������������������������������������������������

_loc_1F40D_hsq_decomp_no_header: ; ds:si points	to packed file + 3
lodsw			; di is	unpacked size
			; ax = packed size
mov	cx, ax		; cx = packed size
sub	si, 5		; ds:si	points to start	of resource
mov	bp, si
add	di, si		; Add
add	di, 40h	; '@'   ; di = start + unpacked len + 64
add	si, cx		; Add
dec	si		; Decrement by 1
dec	di		; Decrement by 1
sub	cx, 6		; Integer Subtraction
std			; Set Direction	Flag
shr	cx, 1		; Shift	Logical	Right
jnb	short loc_1F427	; Jump if Not Below (CF=0)

movsb			; Move Byte(s) from String to String


loc_1F427:		; Decrement by 1
dec	si
dec	di		; Decrement by 1
rep movsw		; Move Byte(s) from String to String
cld			; Clear	Direction Flag
mov	si, di
add	si, 2		; Add
mov	di, bp
xor	bp, bp		; Logical Exclusive OR


_loc_1F435_next_bit:	; Shift	Logical	Right
shr	bp, 1
jz	short _loc_1F43E_refill	; Jump if Zero (ZF=1)

jnb	short _loc_1F446_bit_0 ; Jump if Not Below (CF=0)


_loc_1F43B_bit_1:	; Move Byte(s) from String to String
movsb
jmp	short _loc_1F435_next_bit ; Jump

; ���������������������������������������������������������������������������

_loc_1F43E_refill:	; Load String
lodsw
mov	bp, ax
stc			; Set Carry Flag
rcr	bp, 1		; Rotate Through Carry Right
jb	short _loc_1F43B_bit_1 ; Jump if Below (CF=1)


_loc_1F446_bit_0:	; Logical Exclusive OR
xor	cx, cx
shr	bp, 1		; Shift	Logical	Right
jnz	short loc_1F452	; Jump if Not Zero (ZF=0)

lodsw			; Load String
mov	bp, ax
stc			; Set Carry Flag
rcr	bp, 1		; Rotate Through Carry Right


loc_1F452:		; Jump if Below	(CF=1)
jb	short _loc_1F482_bit_01

shr	bp, 1		; Shift	Logical	Right
jnz	short _loc_1F45E_bit_00	; Jump if Not Zero (ZF=0)

lodsw			; Load String
mov	bp, ax
stc			; Set Carry Flag
rcr	bp, 1		; Rotate Through Carry Right


_loc_1F45E_bit_00:	; Rotate Through Carry Left
rcl	cx, 1
shr	bp, 1		; Shift	Logical	Right
jnz	short loc_1F46A	; Jump if Not Zero (ZF=0)

lodsw			; Load String
mov	bp, ax
stc			; Set Carry Flag
rcr	bp, 1		; Rotate Through Carry Right


loc_1F46A:		; Rotate Through Carry Left
rcl	cx, 1
lodsb			; Load String
mov	ah, 0FFh


loc_1F46F:		; Add
add	ax, di
xchg	ax, si		; Exchange Register/Memory with	Register
mov	bx, ds
mov	dx, es
mov	ds, dx
inc	cx		; Increment by 1
inc	cx		; Increment by 1
rep movsb		; Move Byte(s) from String to String
mov	ds, bx
mov	si, ax
jmp	short _loc_1F435_next_bit ; Jump

; ���������������������������������������������������������������������������

_loc_1F482_bit_01:	; Load String
lodsw
mov	cl, al
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
shr	ax, 1		; Shift	Logical	Right
or	ah, 0E0h	; Logical Inclusive OR
and	cl, 7		; Logical AND
jnz	short loc_1F46F	; Jump if Not Zero (ZF=0)

mov	bx, ax
lodsb			; Load String
mov	cl, al
mov	ax, bx
or	cl, cl		; Logical Inclusive OR
jnz	short loc_1F46F	; Jump if Not Zero (ZF=0)

stc			; Set Carry Flag
mov	cx, di
pop	ds
pop	di
add	sp, 2		; Add
sub	cx, di		; Integer Subtraction
retn			; Return Near from Procedure

_sub_1F403_hsq_decomp_skip_header_dssi_to_esdi endp

; ���������������������������������������������������������������������������
align 8
seg000 ends


; Segment type:	Uninitialized
seg001 segment byte stack 'STACK' use16
assume cs:seg001
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
word_1F4B0 dw 0
word_1F4B2 dw 2
word_1F4B4 dw 200Ah
unk_1F4B6 db  80h ; �
db    1
unk_1F4B8 db  20h
db    0
byte_1F4BA db 0
unk_1F4BB db  0Ah
db    0
db    0
db    0
db    0
word_1F4C0 dw 0
word_1F4C2 dw 0
unk_1F4C4 db	0
unk_1F4C5 db	0
db    0
unk_1F4C7 db	0
unk_1F4C8 db	0
db    0
unk_1F4CA db	0
db    0
db    0
db    0
db    0
db    0
unk_1F4D0 db	0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1F4D7 db	3
unk_1F4D8 db	0
byte_1F4D9 db 0
byte_1F4DA db 0
byte_1F4DB db 0
db    0
unk_1F4DD db	0
unk_1F4DE db	0
unk_1F4DF db	0
db    0
db    0
unk_1F4E2 db	0
unk_1F4E3 db	0
db    0
db    0
unk_1F4E6 db	0
db    0
db    0
db    0
unk_1F4EA db	0
db    0
unk_1F4EC db	0
db    0
db    0
db    0
db    0
unk_1F4F1 db	0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1F4F9 db	0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1F506 db	0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1F510 db	0
db    0
db    0
db    0
unk_1F514 db	0
db    0
db    0
unk_1F517 db	0
db    0
unk_1F519 db	0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1F52A db	0
db    0
db    0
db    0
db    0
db    0
unk_1F530 db	0
db    0
RES_HARK_HSQ db	   0
db    0
db    0
db    0
db    0
db    0
unk_1F538 db	0
db    0
db    0
db    0
unk_1F53C db	0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1F548 db	0
db    0
db    0
db    0
db    0
unk_1F54D db	0
db    0
db    0
db    0
db    0
unk_1F552 db	0
db    0
db    0
db    0
db    0
db    0
db  86h	; �
unk_1F559 db	1
unk_1F55A db	0
unk_1F55B db	0
db  58h	; X
db  1Bh
db    0
db    0
db    0
unk_1F561 db	0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1F568 db	0
db    0
unk_1F56A db	0
db    0
db    0
db    0
unk_1F56E db  80h ; �
unk_1F56F db	0
db    0
db    0
byte_1F572 db 0
db    0
db    0
byte_1F575 db 0
byte_1F576 db 0
db    0
unk_1F578 db	0
RES_SMUG_HSQ db	   0
db 0FFh
db 0FFh
db    0
db    0
db    0
byte_1F57F db 0
db 0FFh
db 0FFh
db    0
db    0
db    0
byte_1F585 db 0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
byte_1F597 db 0
byte_1F598 db 0
byte_1F599 db 0
byte_1F59A db 0
db    0
db    0
db    0
db    0
db    0
unk_1F5A0 db	0
RES_FRM1_HSQ db	   0
db    0
db    0
db    0
unk_1F5A5 db	0
byte_1F5A6 db 0
db    0
db    0
db    0
db    0
byte_1F5AB db 0FFh
db    1
db    0
db    0
unk_1F5AF db	0
db    2
db    1
db  15h
db  19h
db 0FCh	; �
db 0FFh
db    0
db    0
db  20h
db    0
db  10h
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1F5C5 db	0
unk_1F5C6 db	0
db    0
db    0
db    0
db    0
db    0
db    1
db    2
db  98h	; �
db  3Ah	; :
db 0C2h	; �
db 0FFh
db    0
db    0
db  30h	; 0
db  43h	; C
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    1
db    1
db    0
db    0
db    0
db    1
db    3
db 0FEh	; �
db  2Ah	; *
db 0CAh	; �
db 0FFh
db    0
db    0
unk_1F5F0 db  28h ; (
db  29h	; )
db  80h	; �
db 0FFh
db    0
unk_1F5F5 db	0
db    0
db    0
db    0
db    0
db  78h	; x
db    0
db    2
unk_1F5FD db	2
db    3
db    3
db    3
db    3
db    0
db    0
db    1
db    4
db  1Dh
db  3Eh	; >
db 0D0h	; �
db 0FFh
db    0
db    0
db  2Bh	; +
db  1Eh
unk_1F60E db  80h ; �
unk_1F60F db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db  64h	; d
db    0
db    2
db    3
db    3
db    3
db    3
db    3
db    0
db    0
db    1
db    5
db 0AEh	; �
db  27h	; '
db 0BDh	; �
db 0FFh
db    0
db    0
db  29h	; )
db  35h	; 5
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
unk_1F630 db	0
db    0
db  7Dh	; }
db    0
db    1
db    2
db    0
db    1
db    1
db    1
db    0
db    0
db    1
db    6
db  37h	; 7
db  1Bh
db 0E0h	; �
db 0FFh
db    0
db    0
db  2Dh	; -
db  24h	; $
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0C8h	; �
db    0
db    2
db    2
db    0
db    3
db    1
db    1
db    0
db    0
db    1
db    7
db 0D0h	; �
db  26h	; &
db 0D5h	; �
db 0FFh
db    0
db    0
db  2Ch	; ,
db  21h	; !
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0B4h	; �
db    0
db    2
db    3
db    3
db    3
db    2
db    0
db    0
db    0
db    1
db    8
db  0Ch
db  33h	; 3
db 0D9h	; �
db 0FFh
db    0
db    0
db  2Eh	; .
db  1Bh
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db  2Dh	; -
db    0
db    2
db    2
db    3
db    3
db    3
db    0
db    0
db    0
db    1
db    9
db  89h	; �
db  16h
db 0CFh	; �
db 0FFh
db    0
db    0
db  2Ah	; *
db  27h	; '
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db  8Ch	; �
db    0
db    2
db    2
db    0
db    2
db    2
db    0
db    0
db    0
db    1
db  0Ah
db  19h
unk_1F6AF db  3Ch ; <
db 0D8h	; �
db 0FFh
db    0
db    0
db  21h	; !
db    0
db  80h	; �
db  50h	; P
db    0
db    0
dw 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    3
db  48h	; H
db  31h	; 1
db 0EBh	; �
db 0FFh
db    0
db    0
db    2
db    8
db  80h	; �
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db  78h	; x
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    4
db  4Eh	; N
db  25h	; %
db 0FCh	; �
db 0FFh
db    0
db    0
db    1
db    3
db  40h	; @
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  3Ch	; <
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    5
db  48h	; H
db  26h	; &
db  0Ah
db    0
db    0
db    0
db    0
db    1
db  40h	; @
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  54h	; T
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    6
db  1Eh
db  21h	; !
db 0EDh	; �
db 0FFh
db    0
db    0
db    3
db    2
db  40h	; @
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Dh	; -
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    7
db  30h	; 0
db  11h
db    6
db    0
db    0
db    0
db    0
db    0
db  80h	; �
db  3Ch	; <
db    0
db    0
db    0
db    0
db    0
db    0
db  8Ch	; �
db    0
db    1
db    1
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    3
db    3
db 0C8h	; �
db  32h	; 2
db    8
db    0
db    0
db    0
db    8
db    5
db 0E0h	; �
unk_1F75F db	2
db    0
db    0
db    0
db    0
db    0
db    0
db  63h	; c
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db  14h
db    3
word_1F771 dw 9A04h
dw 163Dh
db    0
db    0
db    0
db    7
db    0
db  80h	; �
db  11h
db    0
db    0
db    0
db    0
db    0
db    0
db 0A0h	; �
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    5
db  2Fh	; /
db  4Dh	; M
db 0FCh	; �
db 0FFh
db    0
db    0
db    4
db    9
db  80h	; �
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db 0B4h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    6
db  54h	; T
db  3Dh	; =
db 0EFh	; �
db 0FFh
db    0
db    0
db    3
unk_1F7B1 db	0
db  80h	; �
db  0Ch
db    0
db    0
db    0
db    0
db    0
db    0
db 0A0h	; �
db    0
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    7
db  78h	; x
db  46h	; F
db    8
db    0
db    0
db    0
db    6
db    0
db  80h	; �
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db 0D2h	; �
db    0
db    1
db    2
db    3
db    0
db    0
db    0
db    0
db    0
db    3
db  0Ah
db  78h	; x
db  50h	; P
db  0Fh
db    0
db    0
word_1F7E7 dw 2100h
db    0
db  80h	; �
db  38h	; 8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    4
db    3
db 0C7h	; �
db  31h	; 1
db  30h	; 0
db    0
db    0
db    0
db    5
db    7
db  80h	; �
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db 0C8h	; �
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    4
db    4
db  8Dh	; �
db  2Ch	; ,
db  18h
db    0
db    0
db    0
db    4
db    4
db  80h	; �
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db 0AAh	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    4
db    5
db 0B1h	; �
db  31h	; 1
db  23h	; #
db    0
db    0
db    0
db    7
db    6
db  80h	; �
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db 0F0h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    4
db    7
db 0A8h	; �
db  16h
db  1Bh
db    0
db    0
db    0
db    3
db    0
db  80h	; �
db  16h
db    0
db    0
db    0
db    0
db    0
db    0
db 0C8h	; �
db    0
db    1
db    3
db    0
db    1
db    0
db    0
db    0
db    0
db    4
db    6
db 0D1h	; �
db  0Fh
db  46h	; F
db    0
db    0
db    0
db    9
db  0Ah
db 0A0h	; �
db  48h	; H
db    0
db    0
db    0
db    0
db    0
db    0
db 0F0h	; �
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db 0C8h	; �
db    5
db    3
db 0F7h	; �
db 0DEh	; �
db  17h
db    0
db    0
db    0
db    5
db    0
db  80h	; �
db  44h	; D
db    0
db    0
db    0
unk_1F897 db	0
unk_1F898 db	0
db    0
db 0B4h	; �
db    0
db    2
db    1
db    1
db    0
db    0
db    0
db    0
db    0
db    5
db    4
db  52h	; R
db 0F7h	; �
db  1Eh
db    0
db    0
db    0
db    2
db  0Bh
db  80h	; �
db  48h	; H
db    0
db    0
db    0
db    0
db    0
db    0
db 0A0h	; �
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    5
db    5
db 0CAh	; �
db 0E6h	; �
db  0Ah
db    0
db    0
db    0
db    5
db  0Ch
db  80h	; �
db  48h	; H
db    0
db    0
db    0
db    0
db    0
db    0
db  64h	; d
db    0
db    0
db    1
db    1
db    0
db    0
db    0
db    0
db    0
db    5
db    6
db  9Eh	; �
db    2
db  0Dh
db    0
db    0
db    0
db    7
db    0
db  80h	; �
db  28h	; (
db    0
db    0
db    0
db    0
db    0
db    0
db 0FAh	; �
db    0
db    1
db    1
db    5
db    0
db    0
db    0
db    0
db    0
db    5
db  0Ah
db  75h	; u
db  10h
db  12h
db    0
db    0
db    0
db  21h	; !
db    0
db  80h	; �
db  38h	; 8
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    6
db    3
db 0F3h	; �
db    7
db 0D8h	; �
db 0FFh
db    0
db    0
db  28h	; (
db  2Ch	; ,
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db  96h	; �
db    0
db    2
db    3
db    0
db    3
db    0
db    0
db    0
db    0
db    6
db    4
db 0F0h	; �
db 0F0h	; �
db 0DDh	; �
db 0FFh
db    0
db    0
db  29h	; )
db  2Fh	; /
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db  20h
db    0
db    1
db    0
db    3
db    3
db    0
db    0
db    0
db    0
db    6
db    5
db 0FBh	; �
db    6
db 0EBh	; �
db 0FFh
db    0
db    0
db    1
db    0
db  80h	; �
db  50h	; P
db    0
db    0
db    0
db    0
db    0
db    0
db  82h	; �
db    0
unk_1F960 db	1
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    6
db    6
db  27h	; '
db 0E2h	; �
db 0F0h	; �
db 0FFh
db    0
db    0
db    0
db  0Dh
db  80h	; �
db  50h	; P
db    0
db    0
db    0
db    0
db    0
db    0
db  78h	; x
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    6
db    7
db  29h	; )
db 0F9h	; �
db 0CAh	; �
db 0FFh
db    0
db    0
db  2Ah	; *
db  32h	; 2
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0B4h	; �
db    0
db    2
db    2
db    2
db    2
db    2
db    0
db    0
db    0
db    6
db    8
db  7Ch	; |
db 0F6h	; �
db 0EBh	; �
db 0FFh
db    0
db    0
db    6
db    0
db  80h	; �
db  3Ch	; <
db    0
db    0
db    0
db    0
db    0
db    0
db 0B4h	; �
db    0
db    1
db    1
db    0
db    2
db    1
db    0
db    0
db    0
db    6
db    9
db  46h	; F
db  18h
db 0C4h	; �
db 0FFh
db    0
db    0
db  2Bh	; +
db  34h	; 4
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0D2h	; �
db    0
db    2
db    2
db    1
db    1
db    1
db    0
db    0
db    0
db    6
db  0Ah
db  2Fh	; /
db 0F1h	; �
db 0F5h	; �
db 0FFh
db    0
db    0
db  21h	; !
db    0
db  80h	; �
db  47h	; G
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    6
db  0Bh
db 0CCh	; �
db  0Ch
db 0B7h	; �
db 0FFh
db    0
db    0
db  2Ch	; ,
db  36h	; 6
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db  78h	; x
db    0
db    0
db    0
db    1
db    1
db    1
db    0
db    0
db    0
db    7
db    3
db    0
db 0E0h	; �
db 0C1h	; �
db 0FFh
db    0
db    0
db  2Dh	; -
db  37h	; 7
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0FAh	; �
db    0
db    0
db    0
db    2
db    2
db    0
db    0
db    0
db    0
db    7
db    4
db 0E3h	; �
db 0D8h	; �
db 0D0h	; �
db 0FFh
db    0
db    0
db  2Eh	; .
db  39h	; 9
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0B4h	; �
db    0
db    0
db    0
db    1
db    1
db    0
db    0
db    0
db    0
db    7
db    5
db  4Fh	; O
db 0ADh	; �
db 0C3h	; �
db 0FFh
db    0
db    0
db  2Fh	; /
db  3Bh	; ;
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db  78h	; x
db    0
db    0
db    0
db    1
db    1
db    0
db    0
db    0
db    0
db    7
db    6
db  6Ch	; l
db 0C5h	; �
db 0C5h	; �
db 0FFh
db    0
db    0
db  28h	; (
db  3Ah	; :
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0C8h	; �
db    0
db    0
db    0
db    1
db    1
db    0
db    0
db    0
db    0
db    8
db    3
db  61h	; a
db 0B8h	; �
db 0DCh	; �
db 0FFh
db    0
db    0
db    7
db  11h
db 0A0h	; �
db  2Ch	; ,
db    0
db    0
db    0
db    0
db    0
db    0
db  96h	; �
db    0
db    1
db    1
db    0
db    0
db    0
db    0
db    0
db  50h	; P
db    8
db    4
db  7Fh	; 
db 0C4h	; �
db 0E8h	; �
db 0FFh
db    0
db    0
db    4
db  0Fh
db  80h	; �
db  28h	; (
db    0
db    0
db    0
db    0
db    0
db    0
db  6Eh	; n
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    8
db    5
db  74h	; t
db  96h	; �
db 0DEh	; �
db 0FFh
db    0
db    0
db    5
db  10h
db  80h	; �
db  2Ch	; ,
db    0
db    0
db    0
db    0
db    0
db    0
db  3Ch	; <
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    8
db    6
db 0C6h	; �
db 0A7h	; �
db 0E2h	; �
db 0FFh
db    0
db    0
db    6
db  12h
db  80h	; �
db  2Ch	; ,
db    0
db    0
db    0
db    0
db    0
db    0
db 0B4h	; �
db    0
db    1
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    8
db    7
db  70h	; p
db 0B1h	; �
db 0EBh	; �
db 0FFh
db    0
db    0
db    1
db  0Eh
db  80h	; �
db  2Ch	; ,
db    0
db    0
db    0
db    0
db    0
db    0
db  96h	; �
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    8
db    8
db 0F1h	; �
db 0AAh	; �
db 0D5h	; �
db 0FFh
db    0
db    0
db    0
db    0
db  80h	; �
db  2Ch	; ,
db    0
db    0
db    0
db    0
db    0
db    0
db 0A0h	; �
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    9
db    3
db 0E2h	; �
db  6Ah	; j
db 0F1h	; �
db 0FFh
db    0
db    0
db  0Bh
db  13h
db 0A0h	; �
db  5Ah	; Z
db    0
db    0
db    0
db    0
db    0
db    0
db 0AAh	; �
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db  28h	; (
db    9
db    4
db  32h	; 2
db  85h	; �
db 0F6h	; �
db 0FFh
db    0
db    0
db  0Ah
db  14h
db 0A0h	; �
db  5Ah	; Z
db    0
db    0
db    0
db    0
db    0
db    0
db 0D2h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    9
db    5
db    0
db  70h	; p
db 0E1h	; �
db 0FFh
db    0
db    0
db  29h	; )
db  42h	; B
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0C3h	; �
db    0
db    1
db    1
db    0
db    1
db    1
db    0
db    0
db    0
db    9
db    6
db  18h
db  5Ch	; \
db 0DAh	; �
db 0FFh
db    0
db    0
db  2Ah	; *
db  3Fh	; ?
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0F0h	; �
db    0
db    2
db    2
db    2
db    2
db    2
db    0
db    0
db    0
db    9
db    7
db 0E3h	; �
db  68h	; h
db 0D0h	; �
db 0FFh
db    0
db    0
db  2Bh	; +
db  3Eh	; >
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0C8h	; �
db    0
db    1
db    1
db    0
db    1
db    1
db    1
db    0
db    0
db    9
db    8
db  14h
db  67h	; g
db 0C3h	; �
db 0FFh
db    0
db    0
unk_1FBBC db  2Ch ; ,
db  3Dh	; =
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0D2h	; �
db    0
db    2
db    1
db    1
db    1
db    1
db    1
db    0
db    0
db    9
db    9
db 0BEh	; �
db  7Ch	; |
db 0C5h	; �
db 0FFh
db    0
db    0
db  2Dh	; -
db  3Ch	; <
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db  32h	; 2
db    0
db    1
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    9
db  0Ah
db 0F1h	; �
db  82h	; �
db 0DDh	; �
db 0FFh
db    0
db    0
db  21h	; !
db    0
db  80h	; �
db  5Ah	; Z
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    3
db 0B5h	; �
db  75h	; u
db    5
db    0
db    0
db    0
db    3
db    0
db  80h	; �
db  5Ah	; Z
db    0
db    0
db    0
db    0
db    0
db    0
db 0E6h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    4
db  95h	; �
db  94h	; �
db    2
db    0
db    0
db    0
db  0Dh
db    0
db 0A0h	; �
db  5Ah	; Z
db    0
db    0
db    0
db    0
db    0
db    0
db 0C8h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0A0h	; �
db  0Bh
db    3
db  4Ch	; L
db  91h	; �
db  18h
db    0
db    0
db    0
db    8
db  17h
db 0A0h	; �
db  58h	; X
db    0
db    0
db    0
db    0
db    0
db    0
db 0AAh	; �
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db  64h	; d
db  0Bh
db    4
db 0F3h	; �
db 0BCh	; �
db  2Fh	; /
db    0
db    0
db    0
db  0Ah
db  19h
db 0A0h	; �
db  58h	; X
db    0
db    0
db    0
db    0
db    0
db    0
db 0C8h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0C8h	; �
db  0Bh
db    5
db 0DFh	; �
db 0C7h	; �
db  16h
db    0
db    0
db    0
db  10h
db    0
db 0A0h	; �
db  55h	; U
db    0
db    0
db    0
db    0
db    0
db    0
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  6Eh	; n
db  0Bh
db    6
db 0B0h	; �
db 0BBh	; �
db  1Fh
db    0
db    0
db    0
db  0Bh
db  18h
db 0A0h	; �
db  58h	; X
db    0
db    0
db    0
db    0
db    0
db    0
db 0AAh	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  69h	; i
_unk_1FCB0_dune_dat_toc_seg db	0Bh
db    7
db 0DEh	; �
db 0CEh	; �
db 0F9h	; �
db 0FFh
db    0
db    0
db    3
db    0
db 0A0h	; �
db  28h	; (
db    0
db    0
db    0
db    0
db    0
db    0
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  78h	; x
db  0Bh
db  0Ah
db 0AEh	; �
db 0B2h	; �
db 0F5h	; �
db 0FFh
db    0
db    0
db  21h	; !
db    0
unk_1FCD6 db  80h ; �
db  58h	; X
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ch
db    3
db 0B6h	; �
db  5Dh	; ]
db  24h	; $
db    0
db    0
db    0
db  0Eh
db  15h
db 0A0h	; �
db  5Ah	; Z
db    0
db    0
db    0
db    0
db    0
db    0
db 0AAh	; �
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db  64h	; d
db  0Ch
db    4
db  93h	; �
db  71h	; q
db  31h	; 1
db    0
db    0
db    0
db  0Fh
db  16h
db 0A0h	; �
db  58h	; X
db    0
db    0
db    0
db    0
db    0
db    0
db 0F0h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0C8h	; �
db  0Ch
db    5
db 0F5h	; �
db  41h	; A
db  27h	; '
db    0
db    0
db    0
db    3
db    0
db  80h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db  8Ch	; �
db    0
db    1
db    1
db    3
db    0
db    0
db    0
db    0
db    0
db  0Ch
db    6
db    0
db 0C0h	; �
db  47h	; G
db    0
db    0
db    0
db  0Ch
db  1Ah
db 0A0h	; �
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0F0h	; �
db    0
db    0
db    0
db    2
db    1
db    0
db    0
db    0
db  96h	; �
db 0FFh
db 0FFh
db    1
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h	; @
db    0
db    0
db  1Ch
db  0Ah
db  0Ah
db    0
db    0
db 0BEh	; �
db    2
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Ah
db  14h
db  3Ch	; <
db    0
db    0
db 0D0h	; �
db    3
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db  0Eh
db    0
db    0
db    0
db  28h	; (
db    4
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  28h	; (
db  0Ch
db  0Ah
db  16h
db    0
db 0F3h	; �
db    5
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Eh
db  0Eh
db  0Ah
db  1Ah
db    0
db 0AEh	; �
db    6
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Ah
db  14h
db  0Ah
db  1Eh
db    0
db  96h	; �
db    7
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  16h
db    0
db  0Ah
db  14h
db    0
db 0C9h	; �
db    8
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Fh
db  0Bh
db  16h
db  18h
db    0
db  88h	; �
db    9
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  19h
db    4
db  0Bh
db  1Ah
db    0
db 0EBh	; �
db  0Ah
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  17h
db  0Ch
db  11h
db  11h
db    0
db 0FCh	; �
db  0Bh
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  13h
db  0Ch
db  1Fh
db    8
db    0
db 0F1h	; �
db  0Ch
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ch
db    5
db    1
db  1Dh
db    0
db  86h	; �
db  0Dh
unk_1FE9F db	0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h	; @
db    0
db    0
db  17h
db  16h
db  0Bh
db  16h
db    0
db 0D5h	; �
db  0Eh
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1FEC6 db	0
db    0
db    0
db    0
db    0
db  40h	; @
db    0
db    0
db  15h
db  0Ch
db  1Dh
db  16h
db    0
db  60h	; `
db  0Fh
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h	; @
db    0
db    0
db  14h
db  1Ch
db  0Bh
db    3
db    0
db 0EBh	; �
db  10h
db    0
db    1
db  80h	; �
db    0
unk_1FEF4 db	0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Fh
db  0Bh
db  1Ch
db    6
db    0
db  7Bh	; {
db  11h
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  27h	; '
db    9
db  1Fh
db    0
db    0
db  6Bh	; k
db  12h
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  11h
db  13h
db  0Ah
db  12h
db    0
db 0D6h	; �
db  13h
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h	; @
db    0
db    0
db  17h
db  0Ch
db  1Dh
db    3
db    0
db 0EDh	; �
db  14h
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h	; @
db    0
db    0
db  16h
db  0Dh
db    1
db  16h
db    0
db  42h	; B
db  15h
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    6
db  0Ah
db  0Bh
db  19h
db    0
db 0ACh	; �
db  16h
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Fh
db    1
db  16h
db    6
db    0
db 0ECh	; �
db  17h
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  15h
db    1
db  13h
db  1Eh
db    0
db  4Ch	; L
db  18h
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    8
db    8
db  0Ah
db  13h
db    0
db  9Bh	; �
db  19h
db    0
db    1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_1FFF0 db	0
db    0
db    0
db    0
db    0
db    0
db    0
db  10h
db  15h
db    6
db  1Fh
db    0
db 0DEh	; �
db  1Ah
db    0
unk_1FFFF db	1
db  80h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Fh
db  0Dh
db    4
db  0Dh
db    0
db  94h	; �
db  1Bh
db  1Ch
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  50h	; P
db  1Eh
db  50h	; P
db    6
db  38h	; 8
db 0B4h	; �
db  1Ch
db  1Dh
db  0Ah
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  50h	; P
db  1Eh
db  50h	; P
db  17h
db  38h	; 8
db 0B4h	; �
db  1Dh
db    0
db  0Bh
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  50h	; P
db  1Eh
db  50h	; P
db  0Bh
db  38h	; 8
db 0B4h	; �
db  1Eh
db  1Fh
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  46h	; F
db  1Eh
db  50h	; P
db    5
db  3Ch	; <
db 0B4h	; �
db  1Fh
db  20h
db  0Ah
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  46h	; F
db  1Eh
db  50h	; P
db    2
db  38h	; 8
db 0B4h	; �
db  20h
db    0
db  0Bh
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  46h	; F
db  1Eh
db  50h	; P
db  1Eh
db  3Ch	; <
db 0B4h	; �
db  21h	; !
db  22h	; "
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  50h	; P
db  1Eh
db  50h	; P
db  18h
db  38h	; 8
db 0B4h	; �
db  22h	; "
db  23h	; #
db  0Ah
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  3Ch	; <
db  1Eh
db  50h	; P
db  1Ch
db  38h	; 8
db 0B4h	; �
db  23h	; #
db    0
db  0Bh
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  50h	; P
db  1Eh
db  50h	; P
db  0Fh
db  30h	; 0
db 0B4h	; �
db  24h	; $
db  25h	; %
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  28h	; (
db  1Eh
db  50h	; P
db    0
db  18h
db 0B6h	; �
db  25h	; %
db  26h	; &
db  0Ah
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  28h	; (
db  1Eh
db  50h	; P
db    2
db  10h
db 0B6h	; �
db  26h	; &
db    0
db  0Bh
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  28h	; (
db  1Eh
db  50h	; P
db  0Fh
db  10h
db 0B6h	; �
db  27h	; '
db  28h	; (
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  3Ch	; <
db  1Eh
db  50h	; P
db  1Eh
db  18h
db 0B9h	; �
db  28h	; (
db    0
db  0Ah
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  32h	; 2
db  1Eh
db  50h	; P
db  1Dh
db  18h
db 0BEh	; �
db  29h	; )
db  2Ah	; *
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  46h	; F
db  1Eh
db  50h	; P
db  0Ah
db  3Ch	; <
db 0BEh	; �
db  2Ah	; *
db  2Bh	; +
db  0Ah
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  46h	; F
db  1Eh
db  50h	; P
db    3
db  38h	; 8
db 0BEh	; �
db  2Bh	; +
db    0
db  0Bh
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  46h	; F
db  1Eh
db  50h	; P
db  1Bh
db  3Ch	; <
db 0BEh	; �
db  2Ch	; ,
db  2Dh	; -
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  50h	; P
db  1Eh
db  50h	; P
db  1Bh
db  10h
db 0B9h	; �
db  2Dh	; -
db  2Eh	; .
db  0Ah
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  50h	; P
db  1Eh
db  50h	; P
db  13h
db  10h
db 0B9h	; �
db  2Eh	; .
db    0
db  0Bh
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  50h	; P
db  1Eh
db  50h	; P
db  18h
db  10h
db 0B9h	; �
db  2Fh	; /
db  30h	; 0
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  0Ah
db  1Eh
db  46h	; F
db  12h
db  30h	; 0
db 0BCh	; �
db  30h	; 0
db  31h	; 1
db  0Ah
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  11h
db  1Eh
db  45h	; E
db  0Fh
db  10h
db 0BCh	; �
db  31h	; 1
db    0
db  0Bh
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  14h
db  1Eh
db  41h	; A
db  1Fh
db  10h
db 0BCh	; �
db  32h	; 2
db  33h	; 3
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  19h
db  1Eh
db  30h	; 0
db    7
db  18h
db 0BCh	; �
db  33h	; 3
db    0
db  0Ah
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  19h
db  1Eh
db  3Ah	; :
db  16h
db  18h
db 0BCh	; �
db  34h	; 4
db    0
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  46h	; F
db  1Eh
db  50h	; P
db    4
db  38h	; 8
db 0B9h	; �
db  35h	; 5
db    0
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  5Ah	; Z
db  1Eh
db  5Ah	; Z
db    9
db  1Ch
db 0B4h	; �
db  36h	; 6
db    0
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  28h	; (
db  1Eh
db  50h	; P
db  0Dh
db  18h
db 0B4h	; �
db  37h	; 7
db  38h	; 8
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  0Ch
db  1Eh
db  22h	; "
db    2
db  30h	; 0
db 0B4h	; �
db  38h	; 8
db    0
db  0Ah
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  0Ch
db  1Eh
db  22h	; "
db  17h
db  30h	; 0
db 0B4h	; �
db  39h	; 9
db    0
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  0Ah
db  1Eh
db  22h	; "
db    0
db  30h	; 0
db 0B4h	; �
db  3Ah	; :
db    0
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  0Ah
db  1Eh
db  10h
db  1Fh
db  30h	; 0
db 0B4h	; �
db  3Bh	; ;
db    0
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  0Ah
db  1Eh
db  0Ah
db  10h
db  30h	; 0
db 0B4h	; �
db  3Ch	; <
db    0
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  50h	; P
db  1Eh
db  50h	; P
db  0Fh
db  10h
db 0B4h	; �
db  3Dh	; =
db    0
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  63h	; c
db  1Eh
db  50h	; P
db  15h
db  3Ch	; <
db 0B4h	; �
db  3Eh	; >
db    0
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  3Ch	; <
db  1Eh
db  50h	; P
db  16h
db  18h
db 0B4h	; �
db  3Fh	; ?
db  40h	; @
db    9
db  8Ch	; �
unk_203E8 db	0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  46h	; F
db  1Eh
db  50h	; P
db  10h
db  38h	; 8
db 0B4h	; �
db  40h	; @
db  41h	; A
db  0Ah
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  46h	; F
db  1Eh
unk_20416 db  50h ; P
db  1Eh
db    8
db 0B4h	; �
db  41h	; A
db    0
db  0Bh
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  46h	; F
db  1Eh
db  50h	; P
db  16h
db  30h	; 0
db 0B4h	; �
db  42h	; B
db    0
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db  32h	; 2
db  1Eh
db  50h	; P
db  14h
db  18h
db 0B4h	; �
db  43h	; C
db    0
db    9
db  8Ch	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  90h	; �
db    0
db    0
db    0
db    0
db    8
db  1Eh
db  5Fh	; _
db  14h
db  38h	; 8
db  0Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_20488 db  0Ah
db  20h
db  80h	; �
unk_2048B db	1
db 0F2h	; �
db  92h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
unk_20498 db	4
db  20h
unk_2049A db  80h ; �
db    1
db 0F7h	; �
db  92h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    2
unk_204A8 db	8
db  20h
unk_204AA db  80h ; �
unk_204AB db 0FFh
db 0FCh	; �
db  92h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    2
db    2
db    4
db  20h
db  80h	; �
unk_204BB db 0FFh
db    1
db  93h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    2
unk_204C8 db	2
db    0
unk_204CA db  80h ; �
db  0Dh
db    6
db  93h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    4
db    0
db    2
db    4
db  80h	; �
db  2Eh	; .
db  0Bh
db  93h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    5
db    0
unk_204E8 db	2
db  10h
db  80h	; �
db  3Fh	; ?
db  10h
db  93h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    6
db    0
unk_204F8 db	3
db    5
unk_204FA db  80h ; �
db  1Bh
db  15h
db  93h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    7
unk_20507 db	2
db    3
db    7
db  80h	; �
db  11h
db  1Ah
db  93h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    8
unk_20517 db	0
db    2
db  30h	; 0
db  80h	; �
db    2
db  1Fh
db  93h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    9
db  80h	; �
db    2
db  30h	; 0
db  80h	; �
db    2
db  24h	; $
db  93h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ah
db  80h	; �
db    2
db  30h	; 0
db  80h	; �
db    2
db  29h	; )
db  93h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Bh
db  80h	; �
db    2
db  30h	; 0
db  80h	; �
db    0
db  2Eh	; .
db  93h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Ch
db    0
db    2
db  30h	; 0
db  80h	; �
db    0
db  6Fh	; o
db  93h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Dh
db    0
db    2
db  30h	; 0
db  80h	; �
db    0
db  73h	; s
db  93h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Eh
db    0
db    2
db    2
db  80h	; �
db    0
db  7Eh	; ~
db  93h	; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  0Fh
db  80h	; �
db    1
db    0
db    0
db    0
db    1
db    2
db    0
db    2
db    2
db  9Eh	; �
db 0CBh	; �
db  0Ah
db 0A8h	; �
db 0FDh	; �
db    0
db    0
db    0
db    3
db    1
db    0
db    0
db    1
db    2
db    0
db    2
db    1
db  9Eh	; �
db 0CBh	; �
db  0Ah
db 0A8h	; �
db 0E4h	; �
db    0
db    0
db    0
db    5
db    3
db    0
db    0
db    1
db    1
db    0
db    0
db    1
db 0B2h	; �
db 0E3h	; �
db  0Ah
db  28h	; (
db 0E4h	; �
db    0
db    0
db    0
db    6
db    2
db    0
db    0
db    0
db    2
db    3
db    2
db    2
db  28h	; (
db 0D0h	; �
db  8Fh	; �
db 0B2h	; �
db 0FDh	; �
db    0
db    0
db    0
db    9
db    3
db    0
db    0
db    2
db    1
db    0
db    0
db    1
db 0B2h	; �
db 0D0h	; �
db  0Ah
db  28h	; (
db 0EEh	; �
db    0
db    0
db    0
db  0Bh
db    6
db    0
db    0
db    1
db    1
db    2
db    1
db    0
db 0BCh	; �
db 0DAh	; �
db  8Ah	; �
db 0A8h	; �
db  64h	; d
db    0
db    0
db    0
db 0FFh
db 0D8h	; �
db  10h
unk_205F1 db	3
db  0Dh
db  0Fh
db  32h	; 2
db  64h	; d
db  80h	; �
db  28h	; (
db  14h
db  28h	; (
db  23h	; #
db  32h	; 2
db  46h	; F
db  80h	; �
word_205FE dw 0FFFFh
word_20600 dw 100h
word_20602 dw 0FFFFh
unk_20604 db 0FFh
db 0FFh
unk_20606 db 0FFh
db 0FFh
word_20608 dw 0
db    0
db    0
db 0FFh
db 0FFh
db  14h
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db    3
db    0
db    3
db    0
db    0
db    0
db    0
db    2
db    0
word_20626 dw 1
unk_20628 db 0FFh
unk_20629 db	0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_2063D db	0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    7
db  12h
db    0
byte_2066C db 0
word_2066D dw 0AAh
db 0AAh	; �
db    0
db  4Bh	; K
db    0
db  0Fh
db    0
db    0
db    0
db    0
db    0
byte_20679 db 0
unk_2067A db	0
byte_2067B db 0
db    0
db    0
db    0
db    1
unk_20680 db  58h ; X
db  3Ch	; <
db  1Eh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  31h	; 1
db    0
db    0
db    0
db  4Ch	; L
db    0
db    1
db    0
db    0
db    0
db  86h	; �
db    0
db 0FFh
db 0FFh
word_2069B dw 1
db    1
db    0
db    2
db    0
db    3
db    0
db    4
db    0
db    5
db    0
db    6
unk_206A8 db	0
db    7
db    0
db    8
db    0
db    9
db    0
db  0Ah
db    0
unk_206B1 db	8
db    1
db  0Ch
db    0
db  0Dh
db    0
db  0Eh
db    0
db  0Fh
db    0
db    0
db    0
db 0B6h	; �
db    0
db  0Ch
db    0
unk_206C1 db	3
db    0
db  0Ah
db    1
db  41h	; A
db    0
unk_206C7 db	4
db    0
db 0EEh	; �
db    0
db  41h	; A
db    0
unk_206CD db	5
db    0
db 0C1h	; �
db    0
db  41h	; A
db    0
db 0FFh
db 0FFh
db  4Ch	; L
db    2
db    0
db 0FDh	; �
db    0
unk_206DA db  3Ah ; :
db    7
db    0
db    1
unk_206DE db  8Ch ; �
db 0CFh	; �
db    0
db    0
db    0
db  0Bh
db  62h	; b
db  0Ah
db    0
db    7
db    0
db  4Bh	; K
db    0
db    0
db    0
db  0Ah
db  15h
db  0Bh
db    0
db    0
db    0
db  5Dh	; ]
db    4
unk_206F5 db  8Bh ; �
db    2
unk_206F7 db  88h ; �
db  26h	; &
db    0
unk_206FA db  87h ; �
db  0Ch
db    0
db  63h	; c
db    0
db    0
db  0Ah
db    0
db  61h	; a
db    9
db    5
db    4
db    0
db  64h	; d
db    0
unk_20709 db  83h ; �
db    6
db    7
db  5Eh	; ^
db    8
db    2
db    0
db    0
unk_20711 db	1
db    2
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db  72h	; r
db    0
db    0
db    1
db    0
db    1
db    2
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db  73h	; s
db    0
db    0
db    1
db    0
db    1
db    2
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db  74h	; t
db    0
db    0
db    1
db    0
db    1
db    2
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db  75h	; u
db    0
db    0
db    1
db    0
db    1
db    2
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db  76h	; v
db    0
db    0
db    1
db    0
db    1
db    2
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db  77h	; w
db    3
db    0
db    1
db    0
db  72h	; r
db    0
db    0
db    2
db    0
db    1
db    3
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db  78h	; x
db    0
db    0
db    3
db    0
db  7Bh	; {
db    2
db    0
db    1
db    0
db    1
db    2
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db  7Ah	; z
db    3
db    0
db    1
db    0
db  72h	; r
db    0
db    0
db    2
db    0
db    1
db    3
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db  79h	; y
db    4
db    0
db    3
db    0
db  7Bh	; {
db    2
db    0
db    1
db    0
db  7Dh	; }
db    0
db    0
db    2
db    0
db    1
db    3
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db  7Ch	; |
db    4
db    0
db    3
db    0
db  7Bh	; {
db    2
db    0
db    1
db    0
db  7Dh	; }
db    0
db    0
db    2
db    0
db    1
db    3
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db  74h	; t
db    4
db    0
db    3
db    0
db  7Bh	; {
db    2
db    0
db    1
db    0
db  7Dh	; }
db    0
db    0
db    2
db    0
db    1
db    2
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db  75h	; u
db    4
db    3
db    1
db    0
db  72h	; r
db    0
db    0
db    0
db    2
db  7Dh	; }
db    0
db    0
db    2
db    0
db    1
db    2
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db  76h	; v
db    3
db    0
db    1
db    0
db  73h	; s
db    4
db    0
db    2
db    0
db  7Dh	; }
db    0
db    0
db    3
db    0
db    1
db    2
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db  77h	; w
db    3
db    4
db    1
db    0
db  72h	; r
db    0
db    0
db    2
db    0
db  7Dh	; }
db    0
db    0
db    0
db    2
db    1
db    3
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db  78h	; x
db    4
db    0
db    3
db    0
db  7Bh	; {
db    2
db    0
db    1
db    0
db  7Dh	; }
db    0
db    0
db    2
db    0
db    1
db    2
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db  7Ah	; z
db    3
db    4
db    1
db    0
db  72h	; r
db    0
db    0
db    2
db    0
db  7Dh	; }
db    0
db    0
db    0
db    2
db    1
db    3
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db  7Ch	; |
db    5
db    0
db    3
db    0
db  7Bh	; {
db    2
db    0
db    1
db    0
db  7Dh	; }
db    0
db    5
db    0
db    0
db 0DEh	; �
db    0
db    0
db    2
db    4
db    1
db 0FFh
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db    1
db    2
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db 0A7h	; �
db    0
db    3
db    1
db    0
db 0A6h	; �
db    0
db    0
db    0
db    2
db    2
db    2
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db 0A7h	; �
db    0
db    0
db    1
db    3
db 0A6h	; �
db    0
db    2
db    0
db    0
db    3
db    2
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db 0A7h	; �
db    0
db    3
db    1
db    0
db 0A6h	; �
db    0
db    0
db    0
db    2
db    4
db    2
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db 0A7h	; �
db    0
db    0
db    1
db    3
db 0A6h	; �
db    0
db    2
db    0
db    0
db    5
db    2
db 0FEh	; �
db 0FDh	; �
db 0FCh	; �
db 0A8h	; �
db    0
db    0
db    1
db    0
word_20874 dw 4705
dw 4715
dw 4725
dw 4735
dw 4745
dw 4755
dw 4770
dw 4785
dw 4800
dw 4820
dw 4840
dw 4860
dw 4880
dw 4900
dw 4920
dw 4940
dw 4960
dw 4715
dw 4725
dw 4735
dw 4745
dw 4755
dw 4770
dw 4785
dw 4800
dw 4820
dw 4840
dw 4860
dw 4880
dw 4900
dw 4920
dw 4940
dw 4645
dw 4985
dw 4985
dw 4985
dw 4985
dw 4985
dw 4985
dw 4985
dw 4990
dw 5005
dw 5020
dw 5035
dw 4990
dw 5005
dw 5020
dw 5035
dw 5050
dw 16669
dw 12629
dw 8477
dw 4409
dw 16697
dw 12573
dw 12545
dw 285
dw 4381
dw 12601
dw 16641
dw 0A0h
db    0
db    0
db  40h	; @
db    1
db  74h	; t
db    0
db 0A4h	; �
db    0
db    4
db    0
db  3Ch	; <
db    1
db  70h	; p
db    0
_byte_208FC_loaded_SAL_index db	0FFh
db  0Ah
db    9
db    8
db    4
db    6
db    5
db    5
db    9
db    2
db    0
db 0FFh
db    1
db    0
db    0
db    1
db 0FFh
db    0
db    0
db    0
db 0F4h	; �
db 0FFh
db    2
db  10h
db    0
db    0
db    0
db    0
db  0Ch
db    0
db 0FEh	; �
db 0EFh	; �
db    0
db    0
word_2091E dw 2EE0h
unk_20920 db	0
db    0
db    0
db    0
db  40h	; @
db    1
db  98h	; �
db    0
db    8
db    0
db    0
db    0
db  38h	; 8
db    1
db  94h	; �
db    0
db    0
db    0
db    4
db    0
db    4
db    0
db  3Ch	; <
db    1
db  94h	; �
db    0
db 0CCh	; �
db    0
db    4
db    0
db  3Ch	; <
db    1
db  3Ch	; <
db    0
db 0C8h	; �
db    0
db    0
db    0
db  40h	; @
db    1
unk_20948 db  40h ; @
db    0
db  0Ch
db 0E4h	; �
db  51h	; Q
db    0
db  2Dh	; -
db    0
db 0F1h	; �
db    0
db  86h	; �
db    0
unk_20954 db  4Dh ; M
db    0
db  21h	; !
db    0
db 0F5h	; �
db    0
db  29h	; )
db    0
db  4Dh	; M
db    0
db  21h	; !
db    0
db 0F5h	; �
db    0
db  8Ah	; �
db    0
unk_20964 db	0
db    0
db    0
db    0
db  13h
db    0
db    1
db    0
db  0Ah
db    0
db  2Bh	; +
db    0
db    2
db    0
db  4Fh	; O
db    0
db  2Dh	; -
db    0
db 0FFh
db 0FFh
db  12h
db    0
db  9Ch	; �
db    0
db  64h	; d
db    0
db  13h
db    0
db  54h	; T
db    0
db  5Ch	; \
db    0
db  13h
db  40h	; @
db 0DDh	; �
db    0
db  5Ch	; \
db    0
db 0FFh
db 0FFh
db    2
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db    0
db    0
db  5Fh	; _
db    0
db    4
db    0
db    0
db    0
db  7Bh	; {
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db    1
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db    2
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db    0
db    0
db  19h
db    0
db    4
db    0
db    0
db    0
db  32h	; 2
db    0
db    5
db    0
db    0
db    0
db  4Ah	; J
db    0
db    6
db    0
db  86h	; �
db    0
db  5Ch	; \
db    0
db    0
db    0
db    0
db    0
db  66h	; f
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db  34h	; 4
db    0
db  19h
db    0
db    2
db    0
db  6Ch	; l
db    0
db  33h	; 3
db    0
db 0FFh
db 0FFh
db    4
db  40h	; @
db    0
db    0
db    0
db    0
db    4
db    0
db 0ECh	; �
db    0
db    0
db    0
db    3
db    0
db  53h	; S
db    0
db    0
db    0
db 0FFh
db 0FFh
db    4
db  40h	; @
db    0
db    0
db    0
db    0
db    4
db    0
unk_20A06 db 0ECh ; �
db    0
db    0
db    0
db 0FFh
db 0FFh
db    5
db    0
db 0C6h	; �
db 0FFh
db  0Ch
db    0
db    6
db    0
db 0C6h	; �
db 0FFh
db  0Ch
db    0
db    5
db    0
db 0FBh	; �
db 0FFh
db  11h
db    0
db    6
db    0
db 0FBh	; �
db 0FFh
db  11h
db    0
db    7
db    0
db 0CCh	; �
db    0
db  0Eh
db    0
db    8
db    0
db 0CCh	; �
db    0
db  0Eh
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  40h	; @
db    1
db  51h	; Q
db    0
db    0
db    0
db  51h	; Q
db    0
db  40h	; @
db    1
db  86h	; �
db    0
db  7Dh	; }
db    0
db  65h	; e
db    0
db  64h	; d
db    0
db  65h	; e
db    0
db 0EFh	; �
db    0
db  7Ah	; z
db    0
db  0Fh
db    1
db  7Dh	; }
db    0
db    4
db 0FAh	; �
db    6
db 0FCh	; �
db 0FAh	; �
db 0FCh	; �
db 0FCh	; �
db 0FAh	; �
unk_20A5A db  7Eh ; ~
db    0
db  4Ch	; L
db    0
db  40h	; @
db    1
db  98h	; �
db    0
db  2Eh	; .
db    0
db  81h	; �
db    0
db  4Dh	; M
db    0
db  2Fh	; /
db    0
db  81h	; �
db    0
db  4Dh	; M
db    0
db  2Eh	; .
db    0
db  80h	; �
db    0
db  4Dh	; M
db    0
db  2Fh	; /
db    0
db  80h	; �
db    0
db  4Dh	; M
db    0
db  2Eh	; .
db    0
db  7Fh	; 
db    0
db  4Dh	; M
db    0
db  2Fh	; /
db    0
db  7Fh	; 
db    0
db  4Dh	; M
db    0
db  2Eh	; .
db    0
db  7Eh	; ~
db    0
db  4Dh	; M
db    0
db  2Fh	; /
db    0
db  7Eh	; ~
db    0
db  4Dh	; M
db    0
db  2Eh	; .
db    0
db  7Eh	; ~
db    0
db  4Dh	; M
db    0
db  2Fh	; /
db    0
db  7Fh	; 
db    0
db  4Dh	; M
db    0
db  2Eh	; .
db    0
db  7Fh	; 
db    0
db  4Dh	; M
db    0
db  2Fh	; /
db    0
db  80h	; �
db    0
db  4Dh	; M
db    0
db  2Eh	; .
db    0
db  80h	; �
db    0
db  4Dh	; M
db    0
db  30h	; 0
db    0
db  80h	; �
db    0
db  4Dh	; M
db    0
db  30h	; 0
db    0
db  81h	; �
db    0
db  4Dh	; M
db    0
db  31h	; 1
db    0
db  81h	; �
db    0
db  4Dh	; M
db    0
db  30h	; 0
db    0
db  82h	; �
db    0
db  4Eh	; N
db    0
db  30h	; 0
db    0
db  83h	; �
db    0
db  4Eh	; N
db    0
db  32h	; 2
db    0
db  84h	; �
db    0
db  4Dh	; M
db    0
db  32h	; 2
db    0
db  85h	; �
db    0
db  4Dh	; M
db    0
db  33h	; 3
db    0
db  87h	; �
db    0
db  4Dh	; M
db    0
db  34h	; 4
db    0
db  8Ah	; �
db    0
db  4Eh	; N
db    0
db  35h	; 5
db    0
db  8Ch	; �
db    0
db  4Eh	; N
db    0
db  36h	; 6
db    0
db  8Fh	; �
db    0
db  4Eh	; N
db    0
db  37h	; 7
db    0
db  96h	; �
db    0
db  50h	; P
db    0
db  38h	; 8
db    0
db  9Ah	; �
db    0
db  51h	; Q
db    0
db  39h	; 9
db    0
db 0ACh	; �
db    0
db  54h	; T
db    0
db  3Ah	; :
db    0
db 0C5h	; �
db    0
db  5Bh	; [
db    0
unk_20B0A db  3Bh ; ;
db    0
db 0FCh	; �
db    0
db  6Ah	; j
db    0
db  3Ch	; <
db    0
db  33h	; 3
db    1
db  7Dh	; }
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0F8h	; �
db  10h
db    0
db  0Dh
db  16h
db  0Dh
db 0EAh	; �
db  0Dh
db  16h
db    0
db 0EAh	; �
db    0
db  16h
db 0F2h	; �
db 0EAh	; �
db 0F2h	; �
db    0
db 0F2h	; �
db 0FAh	; �
db 0F8h	; �
db    0
db 0F8h	; �
db 0F4h	; �
db 0F8h	; �
db    6
db 0F8h	; �
db 0EEh	; �
db 0F8h	; �
db 0F7h	; �
db 0F6h	; �
db    3
db 0F6h	; �
db 0F1h	; �
db 0F6h	; �
db    2
db    2
db    0
db    0
db    2
db    2
db    1
db    0
db    2
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  1Ah
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db  4Fh	; O
db    0
db    0
db    0
db 0A2h	; �
db  16h
db 0A6h	; �
db  16h
db 0A2h	; �
db  16h
db 0A2h	; �
db  16h
db 0AAh	; �
db  16h
db 0AAh	; �
db  16h
db 0AAh	; �
db  16h
db 0AAh	; �
db  16h
db 0AEh	; �
db  16h
db 0AEh	; �
db  16h
db 0AEh	; �
db  16h
db 0AEh	; �
db  16h
db 0B2h	; �
db  16h
db 0B2h	; �
db  16h
db 0B2h	; �
db  16h
db 0B2h	; �
db  16h
db  13h
db    0
db    0
db  14h
db    0
db    0
db  15h
db    0
db    0
db  16h
db    0
db    0
db    0
db  17h
db    0
db    0
db  18h
db    0
db    0
db  19h
db    0
db    0
db  1Ah
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  2Bh	; +
db    0
db    0
db  2Ch	; ,
db    0
db    0
db  2Dh	; -
db    0
db    0
db  2Eh	; .
db    0
db    0
db  2Fh	; /
db    0
db    0
db  30h	; 0
db    0
db    0
db  31h	; 1
db    0
db    0
db  32h	; 2
db    0
db    0
db  33h	; 3
db    0
db    0
db  34h	; 4
db    0
db    0
db  35h	; 5
db    0
db    0
db  36h	; 6
db    0
db    0
db    0
db  31h	; 1
db    0
db    0
db  31h	; 1
db    0
db    0
db  30h	; 0
db    0
db    0
db  31h	; 1
db    0
db    0
db  31h	; 1
db    0
db    0
db  31h	; 1
db    0
db    0
db  30h	; 0
db    0
db    0
db  30h	; 0
db    0
db    0
db    0
db  1Bh
db    0
db    0
db  1Bh
db    0
db 0FFh
db  1Bh
db    0
db    1
db    0
db  27h	; '
db    0
db    0
db  27h	; '
db 0FFh
db 0FFh
db  27h	; '
db    1
db    1
unk_20BF5 db	0
db  1Fh
db    0
db    0
db  1Fh
db 0FFh
db 0FFh
db  1Fh
db    1
db    1
db    0
db  23h	; #
db    0
db    0
db  23h	; #
db    0
db 0FFh
db  23h	; #
db    0
db    1
db    0
db  47h	; G
db    0
db    0
db  48h	; H
db    0
db    0
db  49h	; I
db    0
db    0
db  4Ah	; J
db    0
db    0
db    0
db  4Bh	; K
db    0
db    0
db  4Ch	; L
unk_20C1B db	0
db    0
db  4Dh	; M
db    0
db    0
db  4Eh	; N
db    0
db    0
db    0
db  50h	; P
db    0
db    0
db  50h	; P
db    0
db 0FFh
db  50h	; P
db    0
db    1
db    0
db  5Ch	; \
db    0
db    0
db  5Ch	; \
db 0FFh
db 0FFh
db  5Ch	; \
db    1
db    1
db    0
db  54h	; T
db    0
db    0
db  54h	; T
db 0FFh
db 0FFh
db  54h	; T
db    1
db    1
db    0
db  58h	; X
db    0
db    0
db  58h	; X
db    0
db 0FFh
db  58h	; X
db    0
db    1
db    0
db 0D6h	; �
db  16h
db 0E3h	; �
db  16h
db 0F0h	; �
db  16h
db 0D6h	; �
db  16h
db 0F4h	; �
db  16h
db  19h
db  17h
db  32h	; 2
db  17h
db  19h
db  17h
db  5Ah	; Z
db  17h
db  67h	; g
db  17h
db  67h	; g
db  17h
db  67h	; g
db  17h
db 0B2h	; �
db  16h
db  74h	; t
db  17h
db 0B2h	; �
db  16h
db 0B2h	; �
db  16h
db  64h	; d
db    0
db    0
db  65h	; e
db    0
db    0
db  66h	; f
db    0
db    0
db  67h	; g
db    0
db    0
db    0
db  69h	; i
db    0
db    0
db  68h	; h
db    0
db    0
db  69h	; i
db    0
db    0
db  6Ah	; j
db    0
db    0
db  69h	; i
db    0
db    0
db  68h	; h
db    0
db    0
db  69h	; i
db    0
db    0
db  6Ah	; j
db    0
db    0
db  69h	; i
db    0
db    1
db  68h	; h
db    0
db    1
db  69h	; i
db    0
db    0
db  6Ah	; j
db    0
db    0
db  69h	; i
db    0
db    0
db  68h	; h
db 0FFh
db 0FFh
db  69h	; i
db    0
db    0
db  6Ah	; j
db    0
db    0
db  69h	; i
db    0
db    0
db  68h	; h
db    1
db    0
db  69h	; i
db    0
db    0
db  6Ah	; j
db    0
db 0FFh
db    0
db  6Ch	; l
db    0
db    0
db  6Dh	; m
db    0
db    0
db  6Eh	; n
db    0
db    0
db  6Fh	; o
db    0
db    0
db    0
db  63h	; c
db    0
db    0
db    0
db  68h	; h
db    0
db    0
db    0
db  6Bh	; k
db    0
db    0
db    0
db  60h	; `
db    0
db    0
db    0
db    3
db    0
db    0
db    4
db    0
db    0
db    5
db    0
db    0
db    6
db    0
db    0
db    0
db  1Bh
db    0
db    0
db  1Ch
db    0
db    0
db  1Dh
db    0
db    0
db  1Eh
db    0
db    0
db    0
db  37h	; 7
db    0
db    0
db  38h	; 8
db    0
db    0
db  39h	; 9
db    0
db    0
db  3Ah	; :
db    0
db    0
db    0
db    7
db    0
db    0
db    8
db    0
db    0
db    9
db    0
db    0
db  0Ah
db    0
db    0
db    0
db  1Fh
db    0
db    0
db  20h
db    0
db    0
db  21h	; !
db    0
db    0
db  22h	; "
db    0
db    0
db    0
db  3Bh	; ;
db    0
db    0
db  3Ch	; <
db    0
db    0
db  3Dh	; =
db    0
db    0
db  3Eh	; >
db    0
db    0
db    0
db  0Bh
db    0
db    0
db  0Ch
db    0
db    0
db  0Dh
db    0
db    0
db  0Eh
db    0
db    0
db    0
db  23h	; #
db    0
db    0
db  24h	; $
db    0
db    0
db  25h	; %
db    0
db    0
db  26h	; &
db    0
db    0
db    0
db  3Fh	; ?
db    0
db    0
db  40h	; @
db    0
db    0
db  41h	; A
db    0
db    0
db  42h	; B
db    0
db    0
db    0
db  0Fh
db    0
db    0
db  10h
db    0
db    0
db  11h
db    0
db    0
db  12h
db    0
db    0
db    0
db  27h	; '
db    0
db    0
db  28h	; (
db    0
db    0
db  29h	; )
db    0
db    0
db  2Ah	; *
db    0
db    0
db    0
db  43h	; C
db    0
db    0
db  44h	; D
db    0
db    0
db  45h	; E
db    0
db    0
db  46h	; F
db    0
db    0
db    0
db  23h	; #
db  18h
db  4Ah	; J
db  18h
db  71h	; q
db  18h
db  98h	; �
db  18h
db  30h	; 0
db  18h
db  57h	; W
db  18h
db  7Eh	; ~
db  18h
db 0A5h	; �
db  18h
db  3Dh	; =
db  18h
db  64h	; d
db  18h
db  8Bh	; �
db  18h
db 0B2h	; �
db  18h
db  30h	; 0
db  18h
db  57h	; W
db  18h
db  7Eh	; ~
db  18h
db 0A5h	; �
db  18h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FBh	; �
db 0F0h	; �
db    5
db    0
db    5
db    0
db 0E8h	; �
db    0
db  48h	; H
db    0
db 0F5h	; �
db 0FBh	; �
unk_20DA3 db	0
db    0
unk_20DA5 db	0
db    0
db    0
db    0
db    0
db    0
db 0F5h	; �
db 0E4h	; �
db  85h	; �
db    0
db    0
db  86h	; �
db    0
db    0
db  87h	; �
db    0
db    0
db  88h	; �
db    0
db    0
db  89h	; �
db    0
db    0
db  8Ah	; �
db    0
db    0
db  8Bh	; �
db    0
db    0
db  8Ch	; �
db    0
db    0
db    0
db  85h	; �
db    0
db    0
db  85h	; �
db    0
db    0
db  86h	; �
db    0
db    0
db  86h	; �
db    0
db    0
db  87h	; �
db    0
db    0
db  87h	; �
db    0
db    0
db  88h	; �
db    0
db    0
db  88h	; �
db    0
db    0
db    0
db  63h	; c
db  68h	; h
db  71h	; q
db  72h	; r
db  73h	; s
db  74h	; t
db  77h	; w
db  28h	; (
db    0
db  1Eh
db    0
db  0Bh
db    1
db  47h	; G
db    0
db 0F5h	; �
db 0FBh	; �
db  28h	; (
db    0
db  1Eh
db    0
db  0Bh
db    1
db  47h	; G
db    0
db  19h
db  1Eh
db  0Ah
db    0
db  0Ah
db    0
db 0BEh	; �
db    0
db  40h	; @
db    0
db 0F5h	; �
db 0FBh	; �
db    0
db    0
db  50h	; P
db    0
db  3Ch	; <
db    0
db 0F0h	; �
db    0
db  4Ah	; J
db    0
db 0F5h	; �
db 0FBh	; �
db    0
db    0
db  19h
db    0
db    0
db    0
db  18h
db    0
db    0
db    0
db    0
db    0
db    0
db  11h
db  10h
db  12h
db  13h
db  13h
db  3Ch	; <
db  72h	; r
db  7Fh	; 
db  76h	; v
db  84h	; �
db    5
db    4
db    5
db    4
db    4
word_20E2C dw 1964h
word_20E2E dw 0FFFCh
word_20E30 dw 1964h
word_20E32 dw 0FFFCh
db  9Fh	; �
db    8
db  37h	; 7
db    0
db  0Dh
db    0
db  5Bh	; [
db    0
db  38h	; 8
db  33h	; 3
db 0A0h	; �
db    8
db  37h	; 7
db    0
db  0Dh
db    0
db  5Bh	; [
db    0
db  38h	; 8
db  33h	; 3
db 0A1h	; �
db    8
db  37h	; 7
db    0
db  0Dh
db    0
db  5Bh	; [
db    0
db  38h	; 8
db  33h	; 3
db 0A2h	; �
db    8
db  37h	; 7
db    0
db  0Dh
db    0
db  5Bh	; [
db    0
db  38h	; 8
db  33h	; 3
db 0A3h	; �
db    8
db  37h	; 7
db    0
db  0Dh
db    0
db  5Bh	; [
db    0
db  38h	; 8
db  33h	; 3
db 0C6h	; �
db    8
db  39h	; 9
db    0
db  56h	; V
db    0
db  71h	; q
db    0
db  28h	; (
db  2Dh	; -
db 0C7h	; �
db    8
db  39h	; 9
db    0
db  56h	; V
db    0
db  71h	; q
db    0
db  28h	; (
db  2Dh	; -
db 0C8h	; �
db    8
db  39h	; 9
db    0
db  56h	; V
db    0
db  71h	; q
db    0
db  28h	; (
db  2Dh	; -
db 0C9h	; �
db    8
db  39h	; 9
db    0
db  56h	; V
db    0
db  71h	; q
db    0
db  28h	; (
db  2Dh	; -
db 0CAh	; �
db    8
db  39h	; 9
db    0
db  56h	; V
db    0
db  71h	; q
db    0
db  28h	; (
db  2Dh	; -
db 0CBh	; �
db    8
db  39h	; 9
db    0
db  56h	; V
db    0
db  71h	; q
db    0
db  28h	; (
db  2Dh	; -
db 0E8h	; �
db    8
db  30h	; 0
db    0
db  71h	; q
db    0
db  59h	; Y
db    0
db  2Ch	; ,
db  46h	; F
db 0EAh	; �
db    8
db  31h	; 1
db    0
db  71h	; q
db    0
db  56h	; V
db    0
db  2Ch	; ,
db  46h	; F
db 0EBh	; �
db    8
db  32h	; 2
db    0
db  71h	; q
db    0
db  56h	; V
db    0
db  2Ch	; ,
unk_20EBF db  46h ; F
db 0F0h	; �
db    8
db  37h	; 7
db    0
db  71h	; q
db    0
db  59h	; Y
db    0
db  2Ch	; ,
db  46h	; F
db 0F1h	; �
db    8
db  33h	; 3
db    0
db  71h	; q
db    0
db  59h	; Y
db    0
db  2Ch	; ,
db  46h	; F
db 0F2h	; �
db    8
db  34h	; 4
db    0
db  71h	; q
db    0
db  59h	; Y
db    0
db  2Ch	; ,
db  46h	; F
db 0F3h	; �
db    8
db  35h	; 5
db    0
db  71h	; q
db    0
db  59h	; Y
db    0
db  2Ch	; ,
db  46h	; F
db 0F4h	; �
db    8
db  36h	; 6
db    0
db  71h	; q
db    0
db  59h	; Y
db    0
db  2Ch	; ,
db  46h	; F
db 0F5h	; �
db    8
db  33h	; 3
db    0
db  71h	; q
db    0
db  59h	; Y
db    0
db  2Ch	; ,
db  46h	; F
db 0F6h	; �
db    8
db  34h	; 4
db    0
db  71h	; q
db    0
db  59h	; Y
db    0
db  2Ch	; ,
db  46h	; F
db 0F7h	; �
db    8
db  34h	; 4
db    0
db  71h	; q
db    0
db  59h	; Y
db    0
db  2Ch	; ,
db  46h	; F
db 0F8h	; �
db    8
db  35h	; 5
db    0
db  71h	; q
db    0
db  59h	; Y
db    0
db  2Ch	; ,
db  46h	; F
db 0F9h	; �
db    8
db  36h	; 6
db    0
db  71h	; q
db    0
db  59h	; Y
db    0
db  2Ch	; ,
db  46h	; F
db 0FAh	; �
db    8
db  36h	; 6
db    0
db  71h	; q
db    0
db  59h	; Y
db    0
db  2Ch	; ,
db  46h	; F
db 0FBh	; �
db    8
db  35h	; 5
db    0
db  71h	; q
db    0
db  59h	; Y
db    0
db  2Ch	; ,
db  46h	; F
db 0FCh	; �
db    8
db  36h	; 6
db    0
db  71h	; q
db    0
db  59h	; Y
db    0
db  2Ch	; ,
db  46h	; F
db    9
db    9
db  38h	; 8
db    0
db  97h	; �
db    0
db  77h	; w
db    0
db  37h	; 7
db    0
db 0FFh
db 0FFh
db    3
db  5Ch	; \
db  76h	; v
db  5Ch	; \
db 0E4h	; �
db  5Ch	; \
db  9Fh	; �
db  59h	; Y
db  66h	; f
db  0Fh
db 0C1h	; �
db  59h	; Y
db  66h	; f
db  0Fh
db    3
db  5Ch	; \
db 0ECh	; �
db  81h	; �
db  66h	; f
db  0Fh
db  66h	; f
db  0Fh
db  66h	; f
db  0Fh
db  66h	; f
db  0Fh
db  66h	; f
db  0Fh
db  66h	; f
db  0Fh
db 0E2h	; �
db 0D2h	; �
db  66h	; f
db  0Fh
db  66h	; f
db  0Fh
db  66h	; f
db  0Fh
db  66h	; f
db  0Fh
db  66h	; f
db  0Fh
db  86h	; �
db  45h	; E
db  0Eh
db  45h	; E
db  66h	; f
db  0Fh
db  66h	; f
db  0Fh
db  66h	; f
db  0Fh
db  86h	; �
db  45h	; E
db  86h	; �
db  45h	; E
db  66h	; f
db  0Fh
db  76h	; v
db 0A5h	; �
db  66h	; f
db  0Fh
db 0AAh	; �
db 0A5h	; �
db  66h	; f
db  0Fh
db 0DFh	; �
db 0A5h	; �
db  66h	; f
db  0Fh
unk_20F94 db  18h
db    0
unk_20F96 db  16h
db    0
db 0A1h	; �
db    0
db  44h	; D
db    0
db 0C4h	; �
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0C6h	; �
db 0B8h	; �
unk_20FA4 db	0
db    0
db  98h	; �
db    0
db    0
db    0
db  98h	; �
db    0
db    0
db    0
word_20FAE dw 0
db  66h	; f
db  0Fh
db 0E4h	; �
db    0
db  98h	; �
db    0
db  2Ch	; ,
db    1
db 0C6h	; �
db    0
db    0
db    0
db    3
db    0
db  66h	; f
db  0Fh
db  18h
db    0
db  9Bh	; �
db    0
db  45h	; E
db    0
db 0B0h	; �
db    0
db  80h	; �
db    0
db 0FFh
db 0FFh
db 0D6h	; �
db 0AEh	; �
db  5Ch	; \
db    0
db  98h	; �
db    0
db 0E5h	; �
db    0
db  9Fh	; �
db    0
db    0
db    0
db  0Eh
db    0
db  66h	; f
db  0Fh
db    2
db    0
db  9Ah	; �
db    0
db    2
db    0
db  9Ah	; �
db    0
db    0
db    0
db  0Ch
db    0
db  66h	; f
db  0Fh
db  3Dh	; =
db    1
db  9Ah	; �
db    0
db  3Dh	; =
db    1
db  9Ah	; �
db    0
db    0
db    0
db  0Ch
db    0
db  66h	; f
db  0Fh
byte_20FF8 db 5Ch
db    0
db  9Fh	; �
db    0
db 0E4h	; �
db    0
db 0A7h	; �
db    0
db  80h	; �
db    0
db  1Bh
db    0
db  43h	; C
db 0D4h	; �
unk_21006 db  5Ch ; \
db    0
db 0A7h	; �
db    0
db 0E4h	; �
db    0
db 0AFh	; �
db    0
db  80h	; �
db    0
db  1Bh
db    0
db  3Eh	; >
db 0D4h	; �
db  5Ch	; \
db    0
db 0AFh	; �
db    0
db 0E4h	; �
db    0
db 0B7h	; �
db    0
db  80h	; �
db    0
db  1Bh
db    0
db  39h	; 9
db 0D4h	; �
db  5Ch	; \
db    0
db 0B7h	; �
db    0
db 0E4h	; �
db    0
db 0BFh	; �
db    0
db  80h	; �
db    0
db  1Bh
db    0
db  34h	; 4
db 0D4h	; �
db  5Ch	; \
db    0
db 0BFh	; �
db    0
db 0E4h	; �
db    0
db 0C7h	; �
db    0
db  80h	; �
db    0
db  1Bh
db    0
db  2Fh	; /
db 0D4h	; �
unk_2103E db 0FFh
db    0
db 0A2h	; �
db    0
db  27h	; '
db    1
db 0C0h	; �
db    0
db    0
db    0
db 0FFh
db 0FFh
db  66h	; f
db  0Fh
db  0Dh
db    1
db 0A2h	; �
db    0
db  17h
db    1
db 0ACh	; �
db    0
db    0
db    0
db 0FFh
db 0FFh
db  66h	; f
db  0Fh
db  1Ch
db    1
db 0ACh	; �
db    0
db  26h	; &
db    1
db 0B6h	; �
db    0
db    0
db    0
db 0FFh
db 0FFh
db  66h	; f
db  0Fh
db  0Dh
db    1
db 0B5h	; �
db    0
db  17h
db    1
db 0BFh	; �
db    0
db    0
db    0
db 0FFh
db 0FFh
db  66h	; f
db  0Fh
db 0FFh
db    0
db 0ACh	; �
db    0
db    9
db    1
db 0B6h	; �
db    0
db    0
db    0
db 0FFh
db 0FFh
db  66h	; f
db  0Fh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db  66h	; f
db  0Fh
unk_21092 db	0
db    0
word_21094 dw 0
db    0
db    0
db    0
db    0
word_2109A dw 0
db 0FFh
db 0FFh
db  66h	; f
db  0Fh
unk_210A0 db	0
db    0
unk_210A2 db	0
db    0
db    0
db    0
db    0
db    0
word_210A8 dw 0
db 0FFh
db 0FFh
db  5Bh	; [
db  94h	; �
db    0
db    0
db    0
db    0
db  40h	; @
db    1
db  98h	; �
db    0
word_210B6 dw 0
db 0FFh
db 0FFh
db  1Dh
db  94h	; �
db  23h	; #
db    0
db 0B6h	; �
db    0
db  38h	; 8
db    0
db 0C4h	; �
db    0
db  80h	; �
db    0
db  40h	; @
db    0
db  15h
db  92h	; �
db  3Ah	; :
db    0
db 0B6h	; �
db    0
db  4Fh	; O
db    0
db 0C4h	; �
db    0
db  80h	; �
db    0
db  40h	; @
db    0
db  15h
db  92h	; �
db    0
db    0
db    4
db    0
db  28h	; (
db    0
db  2Eh	; .
db    0
byte_210E0 db 0
db    0
db 0FFh
db 0FFh
db 0EEh	; �
db 0B1h	; �
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    3
db    0
db  80h	; �
db    0
db 0FFh
db 0FFh
db  40h	; @
db    0
db  0Dh
db    0
db    0
db    0
db    6
db    0
db    0
db    0
db    3
db    0
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    9
db    0
db    0
db    0
db    3
db    0
db    0
db    0
db 0FFh
db 0FFh
db 0C0h	; �
db    0
db  0Dh
db    0
db    0
db    0
db    6
db    0
db    0
db    0
db    3
db    0
db    0
db    0
db 0FFh
db 0FFh
unk_21126 db 0FFh
db    0
db 0A2h	; �
db    0
db  27h	; '
db    1
db 0C0h	; �
db    0
db    0
db    0
db  21h	; !
db    0
db  66h	; f
db  0Fh
db  0Dh
db    1
db 0A2h	; �
db    0
db  17h
db    1
db 0ACh	; �
db    0
db  80h	; �
db    0
db  1Dh
db    0
db  15h
db  3Fh	; ?
db  1Ch
db    1
db 0ACh	; �
db    0
db  26h	; &
db    1
db 0B6h	; �
db    0
db  80h	; �
db    0
db  1Eh
db    0
db  1Ah
db  3Fh	; ?
db  0Dh
db    1
db 0B5h	; �
db    0
db  17h
db    1
db 0BFh	; �
db    0
db  80h	; �
db    0
db  1Fh
db    0
db  1Fh
db  3Fh	; ?
db 0FFh
db    0
db 0ACh	; �
db    0
db    9
db    1
db 0B6h	; �
db    0
db  80h	; �
db    0
db  20h
db    0
db  24h	; $
db  3Fh	; ?
db  0Dh
db    1
db 0ADh	; �
db    0
db  18h
db    1
db 0B5h	; �
db    0
db  80h	; �
db    0
db  24h	; $
db    0
db 0EEh	; �
db  18h
db  0Ah
db    1
db 0ABh	; �
db    0
db  1Dh
db    1
db 0B8h	; �
db    0
db  80h	; �
db    0
db  29h	; )
db    0
db    5
db  5Bh	; [
db  0Bh
db    1
db 0A2h	; �
db    0
db  1Ch
db    1
db 0ABh	; �
db    0
db  80h	; �
db  40h	; @
db  25h	; %
db    0
db  29h	; )
db  88h	; �
db  1Dh
db    1
db 0ABh	; �
db    0
db  29h	; )
db    1
db 0B8h	; �
db    0
db  80h	; �
db  40h	; @
db  26h	; &
db    0
db  24h	; $
db  88h	; �
db  0Bh
db    1
db 0B8h	; �
db    0
db  1Ch
db    1
db 0C1h	; �
db    0
db  80h	; �
db  40h	; @
db  27h	; '
db    0
db  2Eh	; .
db  88h	; �
db 0FEh	; �
db    0
db 0ABh	; �
db    0
db  0Ah
db    1
db 0B8h	; �
db    0
db  80h	; �
db  40h	; @
db  28h	; (
db    0
db  1Fh
db  88h	; �
db  0Ah
db    1
db 0ABh	; �
db    0
db  1Ch
db    1
db 0B7h	; �
db    0
db    0
db    0
db  35h	; 5
db    0
db  66h	; f
db  0Fh
unk_211CE db	6
db    1
db 0A8h	; �
db    0
db    7
db    1
db 0A9h	; �
db    0
db    0
db    2
db 0FFh
db 0FFh
db  66h	; f
db  0Fh
db    2
db    1
db 0ACh	; �
db    0
db  0Ah
db    1
db 0B6h	; �
db    0
db    0
db    0
db 0FFh
db 0FFh
db  66h	; f
db  0Fh
db  0Eh
db    1
db 0AAh	; �
db    0
db  17h
db    1
db 0B6h	; �
db    0
db    0
db    0
db 0FFh
db 0FFh
db  66h	; f
db  0Fh
db  1Bh
db    1
db 0ACh	; �
db    0
db  23h	; #
db    1
db 0B6h	; �
db    0
db    0
db    0
db 0FFh
db 0FFh
db  66h	; f
db  0Fh
db  0Ah
db    1
db 0BAh	; �
db    0
db  23h	; #
db    1
db 0BFh	; �
db    0
db    0
db    0
db 0FFh
db 0FFh
db  66h	; f
db  0Fh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db  66h	; f
db  0Fh
db    6
db    1
db 0A8h	; �
db    0
db    7
db    1
db 0A9h	; �
db    0
db    0
db    2
db 0FFh
db 0FFh
db  66h	; f
db  0Fh
db    2
db    1
db 0ACh	; �
db    0
db  0Ah
db    1
db 0B6h	; �
db    0
db  80h	; �
db  40h	; @
db  2Ah	; *
db    0
db 0D0h	; �
db  4Ah	; J
db  0Eh
db    1
db 0AAh	; �
db    0
db  17h
db    1
db 0B6h	; �
db    0
db  80h	; �
db    0
db  2Bh	; +
db    0
db    9
db  4Fh	; O
db  1Bh
db    1
db 0ACh	; �
db    0
db  23h	; #
db    1
db 0B6h	; �
db    0
db  80h	; �
db  40h	; @
db  2Ch	; ,
db    0
db 0D7h	; �
db  4Ah	; J
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db  66h	; f
db  0Fh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db  66h	; f
db  0Fh
unk_21276 db  0Ah
db    1
db 0ABh	; �
db    0
db  1Dh
db    1
db 0B8h	; �
db    0
db  80h	; �
db    0
db  29h	; )
db    0
db  81h	; �
db 0BCh	; �
db  26h	; &
db    0
db  9Fh	; �
db    0
db  36h	; 6
db    0
db 0ACh	; �
db    0
db  80h	; �
db  40h	; @
db  31h	; 1
db    0
db 0B9h	; �
db 0B9h	; �
db  36h	; 6
db    0
db 0A8h	; �
db    0
db  48h	; H
db    0
db 0B9h	; �
db    0
db  80h	; �
db  40h	; @
db  32h	; 2
db    0
db 0CCh	; �
db 0B9h	; �
db  26h	; &
db    0
db 0B7h	; �
db    0
db  36h	; 6
db    0
db 0C7h	; �
db    0
db  80h	; �
db  40h	; @
db  33h	; 3
db    0
db 0C0h	; �
db 0B9h	; �
db  14h
db    0
db 0A8h	; �
db    0
db  25h	; %
db    0
db 0B9h	; �
db    0
db  80h	; �
db  40h	; @
db  34h	; 4
db    0
db 0D3h	; �
db 0B9h	; �
db  24h	; $
db    0
db 0ACh	; �
db    0
db  39h	; 9
db    0
db 0B6h	; �
db    0
db  80h	; �
db    0
db  35h	; 5
db    0
db  9Eh	; �
db 0BAh	; �
unk_212CA db	0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db  66h	; f
db  0Fh
db  15h
db    0
db 0A1h	; �
db    0
db  2Ah	; *
db    0
db 0BAh	; �
db    0
db  80h	; �
db    0
db 0FFh
db 0FFh
db 0C7h	; �
db 0AFh	; �
db  2Bh	; +
db    0
db 0A1h	; �
db    0
db  3Fh	; ?
db    0
db 0BAh	; �
db    0
db  80h	; �
db    0
db 0FFh
db 0FFh
db 0B5h	; �
db 0AFh	; �
db    0
db    0
db  9Ah	; �
db    0
db  5Ch	; \
db    0
db 0C8h	; �
db    0
db  80h	; �
db    0
db 0FFh
db 0FFh
db  8Bh	; �
db 0B1h	; �
db 0E4h	; �
db    0
db  9Ah	; �
db    0
db  40h	; @
db    1
db 0C8h	; �
db    0
db    0
db    0
db 0FFh
db 0FFh
db  66h	; f
db  0Fh
db 0FFh
db    0
db 0A2h	; �
db    0
db  27h	; '
db    1
db 0C0h	; �
db    0
db  80h	; �
db    0
db  21h	; !
db    0
db  8Bh	; �
db 0B1h	; �
unk_2131E db  96h ; �
db    0
db  89h	; �
db    0
db 0AAh	; �
db    0
db 0A0h	; �
db    0
unk_21326 db  96h ; �
db    0
db  89h	; �
db    0
db 0AAh	; �
db    0
db  93h	; �
db    0
db    6
db    0
db 0BBh	; �
db    0
db  19h
db    0
db 0BAh	; �
db    0
db    6
db    0
db 0BAh	; �
db    0
db  1Ah
db    0
db 0BCh	; �
db    0
db    6
db    0
db 0B9h	; �
db    0
db    0
db    0
db    0
db    0
db    7
db    0
db 0B7h	; �
db    0
db    0
db    0
db    0
db    0
db    9
db    0
db 0B6h	; �
db    0
db    0
db    0
db    0
db    0
db  0Ah
db    0
db 0B5h	; �
db    0
db    0
db    0
db    0
db    0
db  0Dh
db    0
db 0B5h	; �
db    0
db    0
db    0
db    0
db    0
db  10h
db    0
db 0B5h	; �
db    0
db    0
db    0
db    0
db    0
db  12h
db    0
db 0B6h	; �
db    0
db    0
db    0
db    0
db    0
db  14h
db    0
db 0B7h	; �
db    0
db    0
db    0
db    0
db    0
db  14h
db    0
db 0B9h	; �
db    0
db    0
db    0
db    0
db    0
db  14h
db    0
db 0BAh	; �
db    0
db    8
db    0
db 0BCh	; �
db    0
db  14h
db    0
db 0BBh	; �
db    0
db    9
db    0
db 0BAh	; �
db    0
db    0
db    0
db    0
db    0
db  0Ch
db    0
db 0B7h	; �
db    0
db    0
db    0
db    0
db    0
db  11h
db    0
db 0B6h	; �
db    0
db    0
db    0
db    0
db    0
db  17h
db    0
db 0B7h	; �
db    0
db    6
db    0
db 0B5h	; �
db    0
db  1Eh
db    0
db 0BEh	; �
db    0
unk_213B6 db	6
db    0
db 0B5h	; �
db    0
db  1Eh
db    0
db 0C6h	; �
db    0
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db    0
db    0
db    0
unk_2142E db 0FCh ; �
db    0
db  90h	; �
db    0
db  72h	; r
db  94h	; �
db  91h	; �
db    0
db 0E2h	; �
db  95h	; �
db  95h	; �
db    0
db 0D5h	; �
db  9Eh	; �
db  94h	; �
db    0
db 0E2h	; �
db 0D2h	; �
db    0
db    0
db 0FCh	; �
db    0
db 0ADh	; �
db    0
db 0E2h	; �
db 0D2h	; �
db  95h	; �
db    0
db 0D5h	; �
db  9Eh	; �
db    0
db    0
db 0F8h	; �
db    0
db  58h	; X
db    0
db  7Ah	; z
db  49h	; I
db 0AEh	; �
db    0
db 0E2h	; �
db 0D2h	; �
db  95h	; �
db    0
db 0D5h	; �
db  9Eh	; �
db    0
db    0
unk_2145E db 0FCh ; �
db    0
db 0A2h	; �
db    0
db    7
db  17h
db  95h	; �
db    0
db 0D5h	; �
db  9Eh	; �
db    0
db    0
db 0FCh	; �
db    0
db 0A2h	; �
db    0
db    7
db  17h
db    0
db    0
unk_21472 db 0FCh ; �
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FBh	; �
db    0
db 0D9h	; �
db    0
db  93h	; �
db  29h	; )
db  95h	; �
db    0
db 0D5h	; �
db  9Eh	; �
db    0
db    0
db 0FBh	; �
db    0
db 0F1h	; �
db    0
db  53h	; S
db  24h	; $
db 0EFh	; �
db    0
db  1Ah
db  24h	; $
db 0F0h	; �
db    0
unk_214BA db  32h ; 2
db  24h	; $
db  95h	; �
db    0
db 0D5h	; �
db  9Eh	; �
db    0
db    0
unk_214C2 db 0F8h ; �
db    0
db 0A1h	; �
db    0
db 0E2h	; �
db 0D2h	; �
db    0
db    0
unk_214CA db 0F8h ; �
db    0
db  0Eh
db    1
db 0AFh	; �
db 0AEh	; �
db  0Bh
db    1
db  6Eh	; n
db 0ACh	; �
db  0Ah
db    1
db  7Eh	; ~
db 0ACh	; �
db 0BBh	; �
db    0
db  3Eh	; >
db  0Eh
db 0A1h	; �
db    0
db 0E2h	; �
db 0D2h	; �
db    0
db    0
unk_214E2 db 0FFh
db    0
unk_214E4 db 0E3h ; �
db    0
db  58h	; X
db 0AFh	; �
db 0E5h	; �
db    0
db  60h	; `
db 0AFh	; �
db 0E6h	; �
db    0
db  68h	; h
db 0AFh	; �
db 0E7h	; �
db    0
db  70h	; p
db 0AFh	; �
db 0E4h	; �
db    0
db  8Bh	; �
db 0B1h	; �
db    0
db    0
db 0FFh
db    0
db 0B7h	; �
db    0
db  81h	; �
db 0BCh	; �
db 0B1h	; �
db    0
db  6Bh	; k
db 0B9h	; �
db 0B4h	; �
db    0
db  9Eh	; �
db 0B2h	; �
db 0B3h	; �
db    0
db  8Ch	; �
db 0B2h	; �
db 0BBh	; �
db    0
db  3Eh	; >
db  0Eh
db    0
db    0
db 0FFh
db    0
db 0B6h	; �
db  80h	; �
db  66h	; f
db  0Fh
db    0
db    0
unk_2151A db 0F6h ; �
db    0
db  0Dh
db    1
db  97h	; �
db 0ACh	; �
db  0Ch
db    1
db  90h	; �
db 0ACh	; �
db 0A3h	; �
db    0
db 0DFh	; �
db 0D2h	; �
db    0
db    0
db 0FEh	; �
db    0
db  0Fh
db    1
db  5Ah	; Z
db 0B3h	; �
db  10h
db    1
db  5Ah	; Z
db 0B3h	; �
db 0A3h	; �
db    0
db 0E2h	; �
db 0D2h	; �
db    0
db    0
db 0FEh	; �
db    0
db  0Fh
db    1
db 0B0h	; �
db 0B3h	; �
db  10h
db    1
db 0B0h	; �
db 0B3h	; �
db  11h
db    1
db 0B0h	; �
db 0B3h	; �
db  12h
db    1
db 0B0h	; �
db 0B3h	; �
db 0A3h	; �
db    0
db 0E2h	; �
db 0D2h	; �
db    0
db    0
unk_21552 db 0FFh
db    0
db 0BAh	; �
db    0
db  47h	; G
db  0Eh
db 0B4h	; �
db    0
db  9Eh	; �
db 0B2h	; �
db 0BBh	; �
db    0
db  3Eh	; >
db  0Eh
db  95h	; �
db    0
db 0D5h	; �
db  9Eh	; �
db    0
db    0
unk_21566 db 0F6h ; �
db    0
db 0B8h	; �
db    0
db  3Ah	; :
db    0
db 0B9h	; �
db    0
db 0E2h	; �
db 0D2h	; �
db    0
db    0
db 0FFh
db    0
db 0BAh	; �
db    0
db  47h	; G
db  0Eh
db 0B4h	; �
db    0
db  9Eh	; �
db 0B2h	; �
db 0B3h	; �
db    0
db  8Ch	; �
db 0B2h	; �
db 0BBh	; �
db    0
db  3Eh	; >
db  0Eh
db  9Dh	; �
db    0
db 0B9h	; �
db  0Eh
db    0
db    0
db 0FCh	; �
db    0
db  59h	; Y
db    0
db 0DBh	; �
db  50h	; P
db 0A3h	; �
db    0
db 0E2h	; �
db 0D2h	; �
db    0
db    0
db 0FCh	; �
db    0
db  5Ah	; Z
db    0
db 0EAh	; �
db  50h	; P
db 0A3h	; �
db    0
db 0E2h	; �
db 0D2h	; �
db    0
db    0
db 0FFh
db    0
db  63h	; c
db    0
db  6Bh	; k
db  18h
db  62h	; b
db    0
db 0CCh	; �
db  86h	; �
db  64h	; d
db    0
db 0F1h	; �
db  53h	; S
db 0A7h	; �
db    0
db 0D9h	; �
db  42h	; B
db  67h	; g
db    0
db  1Eh
db  5Bh	; [
db    0
db    0
db 0FCh	; �
db    0
db  4Dh	; M
db    0
db 0EDh	; �
db  7Bh	; {
db  4Fh	; O
db    0
db 0B3h	; �
db  69h	; i
db  4Eh	; N
db    0
db 0BBh	; �
db  7Ch	; |
db  50h	; P
db    0
db  64h	; d
db  80h	; �
word_215CC dw 52h
db  63h	; c
db  87h	; �
db    0
db    0
unk_215D2 db 0FCh ; �
db    0
db  51h	; Q
db    0
db 0FAh	; �
db  86h	; �
db  52h	; R
db    0
db  70h	; p
db  87h	; �
db    0
db    0
unk_215DE db 0F8h ; �
db    0
db 0A3h	; �
db    0
db 0E2h	; �
db 0D2h	; �
db    0
db    0
db 0F8h	; �
db    0
db  5Bh	; [
db    0
db 0C7h	; �
db  80h	; �
db  5Ch	; \
db    0
db 0D9h	; �
db  80h	; �
db 0A1h	; �
db    0
db  14h
db  82h	; �
db 0A3h	; �
db    0
db 0E2h	; �
db 0D2h	; �
db    0
db    0
db 0FCh	; �
db    0
db  58h	; X
db    0
db  64h	; d
db  80h	; �
db  51h	; Q
db    0
db 0FAh	; �
db  86h	; �
db 0A3h	; �
db    0
db 0E2h	; �
db 0D2h	; �
db    0
db    0
db 0F8h	; �
db    0
db  75h	; u
db    0
db  71h	; q
db  6Ah	; j
db  76h	; v
db    0
db  83h	; �
db  6Ah	; j
db  77h	; w
db  40h	; @
db  87h	; �
db  6Ah	; j
db 0A3h	; �
db    0
db 0E2h	; �
db 0D2h	; �
db    0
db    0
db 0F8h	; �
db    0
db  5Dh	; ]
db    0
db  6Dh	; m
db  77h	; w
db  76h	; v
db    0
db  83h	; �
db  6Ah	; j
db  77h	; w
db    0
db  87h	; �
db  6Ah	; j
db 0A3h	; �
db    0
db 0E2h	; �
db 0D2h	; �
db    0
db    0
db 0F8h	; �
db    0
db  5Dh	; ]
db    0
db  34h	; 4
db  77h	; w
db  5Fh	; _
db  40h	; @
db  45h	; E
db  6Ah	; j
db  75h	; u
db    0
db  71h	; q
db  6Ah	; j
db  77h	; w
db    0
db  87h	; �
db  6Ah	; j
db 0A3h	; �
db    0
db 0E2h	; �
db 0D2h	; �
db    0
db    0
db 0F8h	; �
db    0
db  60h	; `
db    0
db  2Fh	; /
db  6Ah	; j
db 0A3h	; �
db    0
db 0E2h	; �
db 0D2h	; �
db    0
db    0
db 0F8h	; �
db    0
db  5Dh	; ]
db    0
db  5Ch	; \
db  77h	; w
db  61h	; a
db    0
db  2Bh	; +
db  6Ah	; j
db  75h	; u
db    0
db  71h	; q
db  6Ah	; j
db  76h	; v
db    0
db  83h	; �
db  6Ah	; j
db 0A3h	; �
db    0
db 0E2h	; �
db 0D2h	; �
db    0
db    0
db  0Eh
db  1Fh
db  66h	; f
db  0Fh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
word_2168A dw 21BEh
db 0A7h	; �
db    0
db 0E9h	; �
db  42h	; B
unk_21690 db 0A5h ; �
db    0
db  48h	; H
db  0Fh
db 0A6h	; �
db    0
db  67h	; g
db  0Fh
db 0D7h	; �
db    0
db  3Ah	; :
db  28h	; (
db 0D8h	; �
db    0
db  3Eh	; >
db  28h	; (
unk_216A0 db  99h ; �
db    0
db 0A6h	; �
db  0Eh
unk_216A4 db  9Eh ; �
db    0
db 0F0h	; �
db 0A3h	; �
db  58h	; X
db    0
db  7Ah	; z
db  49h	; I
unk_216AC db 0A9h ; �
db    0
db 0FBh	; �
db  4Fh	; O
unk_216B0 db 0ACh ; �
db    0
db 0A5h	; �
db  50h	; P
unk_216B4 db 0AAh ; �
db    0
db 0C4h	; �
db  50h	; P
db 0ABh	; �
db    0
db    9
db  4Fh	; O
unk_216BC db  98h ; �
db    0
db  6Bh	; k
db  18h
db  95h	; �
db    0
db 0EEh	; �
db  18h
unk_216C4 db 0A8h ; �
db    0
db 0D1h	; �
db  42h	; B
unk_216C8 db  9Ah ; �
db    0
db  17h
db  73h	; s
db  9Bh	; �
db    0
db 0C5h	; �
db  0Fh
word_216D0 dw 1FAEh
word_216D2 dw 0
db  50h	; P
db    0
db  0Eh
db    0
db 0C0h	; �
db    0
db  48h	; H
db    0
db  50h	; P
db    0
db  10h
db    0
db 0C8h	; �
db    0
db  56h	; V
db    0
db  50h	; P
db    0
db    8
db    0
db 0D0h	; �
db    0
db  61h	; a
db    0
unk_216EC db	0
db    0
db    0
db    0
db  40h	; @
db    1
db  47h	; G
db    0
unk_216F4 db	0
db    0
db    0
db    0
db  99h	; �
db    0
db  3Fh	; ?
db    0
unk_216FC db  10h
db    0
db    0
db    0
db  20h
db    1
db  42h	; B
db    0
unk_21704 db  14h
db    0
unk_21706 db	3
db    0
db  51h	; Q
db    0
db  40h	; @
db    0
db 0FDh	; �
word_2170D dw 0FFF2h
db  0Ch
db    5
db  0Ah
db 0FFh
db    9
db  0Bh
unk_21715 db	0
db    0
db    0
db    0
db  40h	; @
db    1
db  98h	; �
db    0
db  0Ah
db    0
db  8Bh	; �
db  12h
db  9Ch	; �
db  10h
db  9Dh	; �
db  0Ch
db    0
db    0
db  99h	; �
db    0
db  40h	; @
db    1
db  2Fh	; /
db    0
byte_2172D db 1
db  66h	; f
db  0Fh
asc_21730 db 8,8,9,9,9,9,9,9,9,9,9,0Ah
db 0Ah
db 0Bh,0Bh,0Bh,0
db    0
db  4Eh	; N
db    0
db  21h	; !
db    0
db 0FFh
db 0FFh
unk_21748 db	1
db    0
db  1Ah
db    0
db    4
db    0
db 0FFh
db 0FFh
db  63h	; c
db  79h	; y
db  72h	; r
db  6Fh	; o
db  46h	; F
db  42h	; B
word_21756 dw 0FFFFh
db  60h	; `
db  5Ah	; Z
db  74h	; t
db  60h	; `
db  64h	; d
db  68h	; h
db  7Eh	; ~
db  68h	; h
db  6Ah	; j
db  70h	; p
db  7Ch	; |
db  60h	; `
db  50h	; P
db  50h	; P
db  72h	; r
db  74h	; t
db  5Ah	; Z
word_21769 dw 48h
dw 3Dh
dw 54h
dw 1Dh
dw 38h
dw 1Ah
dw 2Fh
dw 8
dw 19Ah
dw 7C8h
db  69h	; i
db  6Dh	; m
db  65h	; e
db  72h	; r
db  74h	; t
db  6Fh	; o
db  6Ch	; l
db  75h	; u
db  62h	; b
db  72h	; r
db  65h	; e
db  68h	; h
word_21789 dw 4C60h
word_2178B dw 80h
word_2178D dw 10h
word_2178F dw 402h
db  55h	; U
db  55h	; U
byte_21793 db 1
unk_21794 db	7
db    0
db 0A8h	; �
db    0
db  17h
db    0
db 0FFh
db 0FFh
db 0A8h	; �
db    0
db  17h
db    0
db  2Ah	; *
db    1
db  61h	; a
db    0
unk_217A4 db 0B0h ; �
db    0
db  20h
db    0
db  20h
db    1
db  58h	; X
db    0
unk_217AC db  60h ; `
aLim1_hsq db 'LIM1.HSQ',0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
word_218B6 dw 0
db    0
db    0
db    0
db    0
db  40h	; @
db    1
db  98h	; �
db    0
db  53h	; S
db  53h	; S
db  0Eh
db    0
db    6
db    0
db    5
db    0
db  0Eh
db    0
db    6
db    0
db  11h
db    0
db  0Eh
db    0
db    6
db    0
db  1Dh
db    0
db 0FFh
db 0FFh
unk_218D6 db  56h ; V
db  84h	; �
db  57h	; W
db  84h	; �
unk_218DA db  59h ; Y
db  84h	; �
db  84h	; �
db    8
db  39h	; 9
db  19h
db  5Ch	; \
db  84h	; �
db  99h	; �
db  21h	; !
db  3Ah	; :
db  2Ah	; *
db  5Dh	; ]
db  84h	; �
db  79h	; y
db  3Ah	; :
db  61h	; a
db  84h	; �
db 0AEh	; �
db    8
word_218EE dw 0
unk_218F0 db  60h ; `
db    0
db  0Fh
db    0
db 0EAh	; �
db    0
db  86h	; �
db    0
unk_218F8 db  60h ; `
db    0
db  19h
db    0
db 0E0h	; �
db    0
db  86h	; �
db    0
db    0
db    0
db  99h	; �
db    0
db  40h	; @
db    1
db 0C8h	; �
db    0
db 0FEh	; �
db    0
db 0A2h	; �
db    0
db  28h	; (
db    1
db 0C1h	; �
db    0
word_21910 dw 0FFD8h
db  7Fh	; 
db    0
db  39h	; 9
db    0
db 0A0h	; �
db    0
db  31h	; 1
db    0
db 0C1h	; �
db    0
db  39h	; 9
db    0
db  78h	; x
db    0
db  59h	; Y
db    0
db 0C8h	; �
db    0
db  59h	; Y
db    0
db  7Fh	; 
db    0
db  79h	; y
db    0
db 0A0h	; �
db    0
db  81h	; �
db    0
db 0C1h	; �
db    0
db  79h	; y
db    0
db 0C2h	; �
db    0
db  10h
db    0
db    6
db    0
db 0FDh	; �
db 0F0h	; �
db 0C3h	; �
db    0
db 0D8h	; �
db    0
db    6
db    0
db 0FDh	; �
db 0F0h	; �
db 0FFh
db 0FFh
db 0C4h	; �
db    0
db  14h
db    0
db  45h	; E
db    0
db  3Fh	; ?
db 0F0h	; �
db 0C5h	; �
db    0
db  30h	; 0
db    0
db  45h	; E
db    0
db  25h	; %
db 0F0h	; �
db 0C6h	; �
db    0
db    8
db    0
db  50h	; P
db    0
db 0FBh	; �
db 0F0h	; �
db 0C7h	; �
db    0
db 0F0h	; �
db    0
db  3Ch	; <
db    0
db  3Fh	; ?
db 0F0h	; �
db 0C8h	; �
db    0
db  10h
db    1
db  3Ch	; <
db    0
db  25h	; %
db 0F0h	; �
db 0C9h	; �
db    0
db 0ECh	; �
db    0
db  47h	; G
db    0
db 0FBh	; �
db 0F0h	; �
db 0CAh	; �
db    0
db 0F0h	; �
db    0
db  83h	; �
db    0
db  3Fh	; ?
db 0F0h	; �
db 0CBh	; �
db    0
db  10h
db    1
db  83h	; �
db    0
db  25h	; %
db 0F0h	; �
db 0CCh	; �
db    0
db 0ECh	; �
db    0
db  8Eh	; �
db    0
db 0FBh	; �
db 0F0h	; �
db 0AFh	; �
db    0
db  23h	; #
db    0
db  7Dh	; }
db    0
db  25h	; %
db 0F0h	; �
db 0B0h	; �
db    0
db  23h	; #
db    0
db  8Bh	; �
db    0
db  3Fh	; ?
db 0F0h	; �
db 0FFh
db 0FFh
db  1Ah
db    0
db  3Eh	; >
db    0
db  36h	; 6
db    0
db  3Eh	; >
db    0
db 0FCh	; �
db    0
db  36h	; 6
db    0
db  18h
db    1
db  36h	; 6
db    0
db 0FCh	; �
db    0
db  7Dh	; }
db    0
db  18h
db    1
db  7Dh	; }
db    0
unk_219B6 db	3
db    0
db  0Bh
db    0
db  7Ch	; |
db    0
db    4
db    0
db  0Bh
db    0
db  88h	; �
db    0
db 0FFh
db 0FFh
word_219C4 dw 0CFECh
word_219C6 dw 0D46Ch
off_219C8 dw offset sub_1D096
aThstndrdEr____	db 'thstndrd} er} } . . . . thstndrd'
db  14h
db  20h
db  14h
db  20h
db  14h
db  20h
db  14h
db  20h
db  14h
db  20h
db  14h
db  20h
db  14h
db  20h
db  14h
db  20h
db  14h
db  20h
db  14h
db  20h
db  14h
db  20h
db  14h
db  20h
db  14h
db  20h
db  14h
unk_21A05 db  20h
db  14h
db  20h
db  14h
db  20h
db  14h
db  20h
db  14h
db  20h
db  14h
db  20h
db  14h
db  20h
db  1Fh
db 0BCh	; �
db  64h	; d
db 0BCh	; �
db  17h
db 0D9h	; �
db  17h
db 0D9h	; �
db  17h
db 0D9h	; �
db  17h
db 0D9h	; �
db  17h
db 0D9h	; �
word_21A20 dw 2572h
unk_21A22 db 0E7h ; �
db  1Ah
db  17h
db 0D9h	; �
db  17h
db 0D9h	; �
db  17h
db 0D9h	; �
db  17h
db 0D9h	; �
db  17h
db 0D9h	; �
db  17h
db 0D9h	; �
_word_21A30_mouse_pos_scaler dw	0FFFFh
_word_21A32_mouse_cursor_image_addr dw 2584h
word_21A34 dw 0
dw 0
db 0FFh
db  3Fh	; ?
db 0FFh
db  1Fh
db 0FFh
db  0Fh
db 0FFh
db    7
db 0FFh
db    3
db 0FFh
db    1
db 0FFh
db    0
db  7Fh	; 
db    0
db  3Fh	; ?
db    0
db  3Fh	; ?
db    0
db 0FFh
db    1
db 0FFh
db  10h
db 0FFh
db  30h	; 0
db  7Fh	; 
db 0F8h	; �
db  7Fh	; 
db 0F8h	; �
db  7Fh	; 
db 0FCh	; �
db    0
db    0
db    0
db  40h	; @
db    0
db  60h	; `
db    0
db  70h	; p
db    0
db  78h	; x
db    0
db  7Ch	; |
db    0
db  7Eh	; ~
db    0
db  7Fh	; 
db  80h	; �
db  7Fh	; 
db    0
db  7Ch	; |
db    0
db  6Ch	; l
db    0
db  46h	; F
db    0
db    6
db    0
db    3
db    0
db    3
db    0
db    0
unk_21A78 db	1
db    0
db    0
db    0
db 0FFh
db 0CFh	; �
db 0FFh
db  83h	; �
db 0FFh
db  81h	; �
db  7Fh	; 
db 0E0h	; �
db  3Fh	; ?
db 0F0h	; �
db    7
db 0C0h	; �
db    3
db 0C0h	; �
db    3
db  80h	; �
db    1
db    0
db    1
db    0
db    0
db  80h	; �
db    0
db 0C0h	; �
db    0
db 0E0h	; �
db    0
db 0F0h	; �
db    0
db 0FCh	; �
db    0
db 0FFh
db    0
db    0
db    0
db  30h	; 0
db    0
db  1Ch
db    0
db    6
db  80h	; �
db    3
db    0
db  0Dh
db 0F8h	; �
db  16h
db 0D8h	; �
db  19h
db  3Ch	; <
db  6Ch	; l
db 0ACh	; �
db  30h	; 0
db 0BCh	; �
db    3
db 0DEh	; �
db  1Fh
db 0FEh	; �
db  0Fh
db 0BEh	; �
db    3
db  7Eh	; ~
db    0
db  7Eh	; ~
db    0
unk_21ABC db	4
db    0
db    0
db    0
db 0FFh
db 0FBh	; �
db 0FFh
db 0F1h	; �
db 0FFh
db 0E0h	; �
db  7Fh	; 
db 0C0h	; �
db  3Fh	; ?
db  80h	; �
db  1Fh
db    0
db  1Fh
db    0
db 0FFh
db 0E0h	; �
db 0FFh
db 0E0h	; �
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    4
db    0
db  0Eh
db    0
db  1Fh
db  80h	; �
db  3Fh	; ?
db 0C0h	; �
db  7Fh	; 
db    0
db  0Eh
db    0
db  0Eh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_21B00 db	4
db    0
db    2
db    0
db 0FFh
db 0CFh	; �
db 0FFh
db 0C7h	; �
db 0FFh
db 0C3h	; �
db 0FFh
db    1
db 0FFh
db    0
db  7Fh	; 
db    0
db 0FFh
db    0
db 0FFh
db    1
db 0FFh
db 0C3h	; �
db 0FFh
db 0C7h	; �
db 0FFh
db 0CFh	; �
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db  10h
db    0
db  18h
db    0
db  1Ch
db    0
db  7Eh	; ~
db    0
db  7Fh	; 
db    0
db  7Eh	; ~
db    0
db  1Ch
db    0
db  18h
db    0
db  10h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_21B44 db	4
db    0
db    0
db    0
db 0FFh
db 0E0h	; �
db 0FFh
db 0E0h	; �
db  1Fh
db    0
db  1Fh
db    0
db  3Fh	; ?
db  80h	; �
db  7Fh	; 
db 0C0h	; �
db 0FFh
db 0E0h	; �
unk_21B56 db 0FFh
db 0F1h	; �
db 0FFh
db 0FBh	; �
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db  0Eh
db    0
db  0Eh
db 0C0h	; �
db  7Fh	; 
db  80h	; �
db  3Fh	; ?
db    0
db  1Fh
db    0
db  0Eh
db    0
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_21B88 db	5
db    0
db    2
db    0
db 0FFh
db 0F9h	; �
db 0FFh
db 0F1h	; �
db 0FFh
db 0E1h	; �
db  7Fh	; 
db 0C0h	; �
db  7Fh	; 
db  80h	; �
db  7Fh	; 
db    0
db  7Fh	; 
db  80h	; �
db  7Fh	; 
db 0C0h	; �
db 0FFh
db 0E1h	; �
db 0FFh
db 0F1h	; �
db 0FFh
db 0F9h	; �
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    4
db    0
db  0Ch
db    0
db  1Ch
db    0
db  3Fh	; ?
db    0
db  7Fh	; 
db    0
db  3Fh	; ?
db    0
db  1Ch
db    0
db  0Ch
db    0
db    4
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_21BCC db	0
db    0
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    1
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db 0FFh
db 0FFh
db    1
db    0
db    0
db    0
db    0
db    0
db    1
db    0
db    0
db    0
db    1
db    0
db    1
db    0
db    1
db    0
db    0
db    0
db    0
db    0
db    2
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  40h	; @
db    1
db 0C8h	; �
db    0
word_21C22 dw 0FFFFh
word_21C24 dw 256
dw 288
dw 320
dw 352
dw 384
dw 448
dw 512
dw 640
_word_21C34_resource_id	dw 0FFFFh
unk_21C36 db  27h ; '
db 0C8h	; �
byte_21C38 db 1
db    5
db 0FFh
db    4
db    3
db    0
db    4
db 0FFh
db    3
db    0
db    6
db 0FFh
db    5
db    4
word_21C46 dw 203h
word_21C48 dw 1
dw 8Ch
dw 42h
dw 78h
dw 39h
dw 6Ah
dw 32h
dw 50h
dw 26h
dw 35h
dw 19h
dw 28h
dw 13h
dw 14h
dw 9
word_21C66 dw 4Ch
dw 2Fh
dw 4Bh
dw 49h
dw 0
dw 0
dw 53h
dw 25h
db  4Ch	; L
db    0
db  3Eh	; >
db    0
db  53h	; S
db    0
db  3Eh	; >
db    0
db  4Dh	; M
db    0
db  4Eh	; N
db    0
db  58h	; X
db    0
db  3Fh	; ?
db    0
db  47h	; G
db    0
db  41h	; A
db    0
db  56h	; V
db    0
db  1Bh
db    0
db  69h	; i
db    0
db  5Bh	; [
db    0
db    0
db    0
db    0
db    0
db  4Ah	; J
db    0
db  29h	; )
db    0
db    0
db    0
db    0
db    0
db  5Eh	; ^
db    0
db  57h	; W
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db  42h	; B
db    0
db  37h	; 7
db    0
db  63h	; c
db    0
db  56h	; V
db    0
db  2Fh	; /
db    0
db  54h	; T
db    0
db  69h	; i
db    0
db  72h	; r
db    0
db  3Fh	; ?
db    0
db  59h	; Y
db    0
db  8Ch	; �
db    0
db  88h	; �
db    0
db  44h	; D
db    0
db  0Dh
db    0
db  65h	; e
db    0
db  45h	; E
db    0
db  28h	; (
db    0
db  50h	; P
db    0
db  68h	; h
db    0
db  70h	; p
db    0
db  38h	; 8
db    0
db  47h	; G
db    0
db  72h	; r
db    0
db  76h	; v
db    0
db  26h	; &
db    0
db  52h	; R
db    0
db  6Dh	; m
db    0
db  98h	; �
db    0
db  48h	; H
db    0
db  4Bh	; K
db    0
db  72h	; r
db    0
db  65h	; e
db    0
db  30h	; 0
db    0
db  48h	; H
db    0
db  65h	; e
db    0
db  6Ah	; j
db    0
db  44h	; D
db    0
db    9
db    0
db  71h	; q
db    0
db  24h	; $
db    0
db  52h	; R
db    0
db  5Bh	; [
db    0
db  7Eh	; ~
db    0
db  86h	; �
db    0
db  42h	; B
db    0
db  3Dh	; =
db    0
db  78h	; x
db    0
db  66h	; f
db    0
db  38h	; 8
db    0
db  0Dh
db    0
db  54h	; T
db    0
db  2Bh	; +
db    0
db  2Ch	; ,
db    0
db  33h	; 3
db    0
db  56h	; V
db    0
db  53h	; S
db    0
db  44h	; D
db    0
db  61h	; a
db    0
db  77h	; w
db    0
db  8Fh	; �
db    0
db  5Bh	; [
db    0
db  3Bh	; ;
db    0
db  89h	; �
db    0
db  60h	; `
db    0
db  48h	; H
db    0
db  36h	; 6
db    0
db  64h	; d
db    0
db  59h	; Y
db    0
_word_21D32_audio_time_to_play_28224_samples_hi	dw 7
_word_21D34_audio_time_to_play_28224_samples_lo	dw 0FFFFh
word_21D36 dw 28h
word_21D38 dw 1
db 0FAh	; �
db    0
db  90h	; �
db    0
unk_21D3E db 0FFh
db    0
db  0Ch
db    0
db  22h	; "
db    0
db  37h	; 7
db 0A6h	; �
byte_21D46 db 0E6h
db    0
db  32h	; 2
db    0
db  22h	; "
db    0
db  50h	; P
db 0A6h	; �
byte_21D4E db 0B4h
db    0
db  58h	; X
db    0
db  22h	; "
db    0
db  17h
db 0D9h	; �
db  64h	; d
db    0
db  11h
db    0
db  67h	; g
db    0
db  37h	; 7
db 0A6h	; �
byte_21D5E db 78h
db    0
db  37h	; 7
db    0
db  67h	; g
db    0
db  50h	; P
unk_21D65 db 0A6h ; �
byte_21D66 db 8Ch
db    0
db  5Dh	; ]
db    0
db  67h	; g
db    0
db  17h
db 0D9h	; �
byte_21D6E db 0
db  1Fh
db    0
db  7Ah	; z
db    0
db  5Ah	; Z
db    0
db  84h	; �
db    0
db  86h	; �
db    0
db  27h	; '
db    0
db 0C8h	; �
db    0
db  82h	; �
db    0
db    0
db    3
db    1
db    2
db    4
db    5
db    6
db    7
db    7
db    7
db    8
db    9
db  0Ah
db    0
db    2
db    3
db    1
db    4
db    5
db    6
db    7
db  0Ah
db  0Bh
db  0Ch
byte_21D97 db 0
byte_21D98 db 0
db 0BEh	; �
db    0
db  2Ch	; ,
db    0
db 0BEh	; �
db    0
db  33h	; 3
db    0
db 0BEh	; �
db    0
db  3Ah	; :
db    0
db 0BEh	; �
db    0
db  41h	; A
db    0
db 0BEh	; �
db    0
db  48h	; H
db    0
db 0BEh	; �
db    0
db  4Fh	; O
db    0
db 0BEh	; �
db    0
db  56h	; V
db    0
db 0BEh	; �
db    0
db  72h	; r
db    0
db 0BEh	; �
db    0
unk_21DBB db  79h ; y
db    0
db 0BEh	; �
db    0
db  80h	; �
db    0
db 0FFh
db 0FFh
_word_21DC3_interrupt_table dw 0
dw offset off_1E956
dw 1
dw offset off_1E95A
dw 2
dw offset off_1E95E
dw 3
dw offset off_1E962
dw 4
dw offset off_1E966
dw 5
dw offset off_1E96A
dw 8
dw offset loc_1EFDC+1
dw 9
dw offset loc_1F04D+1
dw 1Bh
dw offset off_1E96E
dw 23h
dw offset off_1E972
dw 24h
dw offset off_1E976
dw 0FFFFh
byte_21DF1 db 1
_byte_21DF2_cmd_args db	0
_byte_21DF3_cmd_args_memory db 10h
_byte_21DF4_cmd_args_audio db 0
unk_21DF5 db  5Ch ; \
db    0
db  9Fh	; �
db    0
db 0E4h	; �
db    0
db 0C8h	; �
db    0
db 0FEh	; �
db 0F1h	; �
RES_TABLAT_BIN dw 0
aTablat_bin db 'TABLAT.BIN',0
RES_DNCHAR_BIN dw 0
aDnchar_bin db 'DNCHAR.BIN',0
RES_DNCHAR2_BIN	dw 0
aDnchar2_bin db	'DNCHAR2.BIN',0
RES_DIALOGUE_HSQ dw 0
aDialogue_hsq db 'DIALOGUE.HSQ',0
RES_VER_BIN dw 0
aVer_bin db 'VER.BIN',0
RES_SIET_SAL dw	0
aSiet_sal db 'SIET.SAL',0
RES_PALACE_SAL dw 0
aPalace_sal db 'PALACE.SAL',0
RES_VILG_SAL dw	0
aVilg_sal db 'VILG.SAL',0
RES_HARK_SAL dw	0
aHark_sal db 'HARK.SAL',0
RES_GLOBDATA_HSQ dw 0
aGlobdata_hsq db 'GLOBDATA.HSQ',0
RES_PHRASE11_HSQ dw 0
aPhrase11_hsq db 'PHRASE11.HSQ',0
RES_PHRASE21_HSQ dw 0
aPhrase21_hsq db 'PHRASE21.HSQ',0
RES_PHRASE31_HSQ dw 0
aPhrase31_hsq db 'PHRASE31.HSQ',0
RES_PHRASE41_HSQ dw 0
aPhrase41_hsq db 'PHRASE41.HSQ',0
RES_PHRASE51_HSQ dw 0
aPhrase51_hsq db 'PHRASE51.HSQ',0
RES_PHRASE61_HSQ dw 0
aPhrase61_hsq db 'PHRASE61.HSQ',0
RES_PHRASE71_HSQ dw 0
aPhrase71_hsq db 'PHRASE71.HSQ',0
RES_PHRASE12_HSQ dw 0
aPhrase12_hsq db 'PHRASE12.HSQ',0
RES_PHRASE22_HSQ dw 0
aPhrase22_hsq db 'PHRASE22.HSQ',0
RES_PHRASE32_HSQ dw 0
aPhrase32_hsq db 'PHRASE32.HSQ',0
RES_PHRASE42_HSQ dw 0
aPhrase42_hsq db 'PHRASE42.HSQ',0
RES_PHRASE52_HSQ dw 0
aPhrase52_hsq db 'PHRASE52.HSQ',0
RES_PHRASE62_HSQ dw 0
aPhrase62_hsq db 'PHRASE62.HSQ',0
RES_PHRASE72_HSQ dw 0
aPhrase72_hsq db 'PHRASE72.HSQ',0
RES_COMMAND1_HSQ dw 0
aCommand1_hsq db 'COMMAND1.HSQ',0
RES_COMMAND2_HSQ dw 0
aCommand2_hsq db 'COMMAND2.HSQ',0
RES_COMMAND3_HSQ dw 0
aCommand3_hsq db 'COMMAND3.HSQ',0
RES_COMMAND4_HSQ dw 0
aCommand4_hsq db 'COMMAND4.HSQ',0
RES_COMMAND5_HSQ dw 0
aCommand5_hsq db 'COMMAND5.HSQ',0
RES_COMMAND6_HSQ dw 0
aCommand6_hsq db 'COMMAND6.HSQ',0
RES_COMMAND7_HSQ dw 0
aCommand7_hsq db 'COMMAND7.HSQ',0
RES_DNVGA_HSQ dw 1
aDnvga_hsq db 'DNVGA.HSQ',0
RES_DN386_HSQ dw 1
aDn386_hsq db 'DN386.HSQ',0
RES_DNPCS_HSQ dw 1
aDnpcs_hsq db 'DNPCS.HSQ',0
RES_DNADL_HSQ dw 1
aDnadl_hsq db 'DNADL.HSQ',0
RES_DNADP_HSQ dw 1
aDnadp_hsq db 'DNADP.HSQ',0
RES_DNADG_HSQ dw 1
aDnadg_hsq db 'DNADG.HSQ',0
RES_DNMID_HSQ dw 1
aDnmid_hsq db 'DNMID.HSQ',0
RES_DNPCS2_HSQ dw 1
aDnpcs2_hsq db 'DNPCS2.HSQ',0
RES_DNSDB_HSQ dw 1
aDnsdb_hsq db 'DNSDB.HSQ',0
RES_DNSDP_HSQ dw 1
aDnsbp_hsq db 'DNSBP.HSQ',0
RES_CONDIT_HSQ dw 1
aCondit_hsq db 'CONDIT.HSQ',0
RES_MAP_HSQ dw 1
aMap_hsq db 'MAP.HSQ',0
RES_ICONES_HSQ dw 50Dh
aIcones_hsq db 'ICONES.HSQ',0
RES_FRESK_HSQ dw 43Dh
aFresk_hsq db 'FRESK.HSQ',0
RES_LETO_HSQ dw	49Dh
aLeto_hsq db 'LETO.HSQ',0
RES_JESS_HSQ dw	699h
aJess_hsq db 'JESS.HSQ',0
RES_HAWA_HSQ dw	596h
aHawa_hsq db 'HAWA.HSQ',0
RES_IDAH_HSQ dw	75Dh
aIdah_hsq db 'IDAH.HSQ',0
RES_GURN_HSQ dw	6C3h
aGurn_hsq db 'GURN.HSQ',0
RES_STIL_HSQ dw	6C6h
aStil_hsq db 'STIL.HSQ',0
RES_KYNE_HSQ dw	969h
aKyne_hsq db 'KYNE.HSQ',0
RES_CHAN_HSQ dw	571h
aChan_hsq db 'CHAN.HSQ',0
RES_HARA_HSQ dw	751h
aHara_hsq db 'HARA.HSQ',0
RES_BARO_HSQ dw	5A8h
aBaro_hsq db 'BARO.HSQ',0
RES_FEYD_HSQ dw	8DBh
aFeyd_hsq db 'FEYD.HSQ',0
RES_EMPR_HSQ db	 9Ch ; �
db    9
aEmpr_hsq db 'EMPR.HSQ',0
RES_HARK_HSQ_0 db  82h ; �
db    6
aHark_hsq db 'HARK.HSQ',0
RES_SMUG_HSQ_0 db 0C9h ; �
db    5
aSmug_hsq db 'SMUG.HSQ',0
RES_FRM1_HSQ db	0F1h ; �
db  0Dh
aFrm1_hsq db 'FRM1.HSQ',0
RES_FRM2_HSQ db	0B0h ; �
db  0Ch
aFrm2_hsq db 'FRM2.HSQ',0
RES_FRM3_HSQ db	   3
db  0Ah
aFrm3_hsq db 'FRM3.HSQ',0
RES_GENERIC_HSQ	db 0D4h	; �
db    1
aGeneric_hsq db	'GENERIC.HSQ',0
RES_PROGUE_HSQ db  9Dh ; �
db    3
aProuge_hsq db 'PROUGE.HSQ',0
RES_COMM_HSQ db	 35h ; 5
db    4
aComm_hsq db 'COMM.HSQ',0
RES_EQUI_HSQ db	 86h ; �
db    2
aEqui_hsq db 'EQUI.HSQ',0
RES_BALCON_HSQ db  70h ; p
db    4
aBalcon_hsq db 'BALCON.HSQ',0
RES_CORR_HSQ db	 1Eh
db    4
aCorr_hsq db 'CORR.HSQ',0
RES_POR_HSQ db	66h ; f
db    7
aPor_hsq db 'POR.HSQ',0
RES_SIET1_HSQ db    7
db  0Ah
aSiet1_hsq db 'SIET1.HSQ',0
RES_XPLAIN9_HSQ	db  0Fh
db    7
aXplain9_hsq db	'XPLAIN9.HSQ',0
RES_libre db	4
db  0Ah
aLibre db 'libre',0
RES_BUNK_HSQ db	0A7h ; �
db    5
aBunk_hsq db 'BUNK.HSQ',0
RES_FINAL_HSQ db 0D2h ;	�
db    5
aFinal_hsq db 'FINAL.HSQ',0
RES_SERRE_HSQ db  74h ;	t
db    6
aSerre_hsq db 'SERRE.HSQ',0
RES_BOTA_HSQ db	0D6h ; �
db    5
aBota_hsq db 'BOTA.HSQ',0
RES_PALPLAN_HSQ	db 0E3h	; �
db    0
aPalplan_hsq db	'PALPLAN.HSQ',0
RES_SUN_HSQ db	51h ; Q
db    2
aSun_hsq db 'SUN.HSQ',0
RES_VIS_HSQ db	75h ; u
db    9
aVis_hsq db 'VIS.HSQ',0
RES_ORNYPAN_HSQ	db 0C8h	; �
db    1
aOrnypan_hsq db	'ORNYPAN.HSQ',0
RES_ONMAP_HSQ db 0AAh ;	�
db    5
aOnmap_hsq db 'ONMAP.HSQ',0
RES_PERS_HSQ db	0C2h ; �
db    5
aPers_hsq db 'PERS.HSQ',0
RES_CHANKISS_HSQ db  24h ; $
db    1
aChankiss_hsq db 'CHANKISS.HSQ',0
RES_SKY_HSQ db	  9
db    3
aSky_hsq db 'SKY.HSQ',0
RES_SKYDN_HSQ db  22h ;	"
db    4
aSkydn_hsq db 'SKYDN.HSQ',0
RES_ORNYTK_HSQ db  64h ; d
db    4
aOrnytk_hsq db 'ORNYTK.HSQ',0
RES_ATTACK_HSQ db  7Bh ; {
db    2
aAttack_hsq db 'ATTACK.HSQ',0
RES_STARS_HSQ db  14h
db  0Eh
aStars_hsq db 'STARS.HSQ',0
RES_INTDS_HSQ db 0B7h ;	�
db    2
aIntds_hsq db 'INTDS.HSQ',0
RES_SUNRS_HSQ db  55h ;	U
db    7
aSunrs_hsq db 'SUNRS.HSQ',0
RES_PAUL_HSQ db	0A2h ; �
db    4
aPaul_hsq db 'PAUL.HSQ',0
RES_BACK_HSQ db	0BDh ; �
db  0Bh
aBack_hsq db 'BACK.HSQ',0
RES_MOIS_HSQ db	0AFh ; �
db    2
aMois_hsq db 'MOIS.HSQ',0
RES_BOOK_HSQ db	 19h
db  0Ah
aBook_hsq db 'BOOK.HSQ',0
RES_ORNY_HSQ db	0F5h
db    0
aOrny_hsq db 'ORNY.HSQ',0
RES_ORNYCAB_HSQ	db  3Ch	; <
db    1
aOrnycab_hsq db	'ORNYCAB.HSQ',0
RES_LIBRE_HSQ db 0D4h ;	�
db    1
aLibre_hsq db 'libre.HSQ',0
RES_LIBRE_HSQ_0	db  2Ah	; *
db    3
aLibre_hsq_0 db	'libre.HSQ',0
RES_LIBRE_HSQ_1	db    0
db    6
aLibre_hsq_1 db	'libre.HSQ',0
RES_LIBRE_HSQ_2	db 0DDh	; �
db    6
aLibre_0 db 'libre',0
RES_VER_HSQ db	5Bh ; [
db    1
aVer_hsq db 'VER.HSQ',0
RES_MAP2_HSQ db	 64h ; d
db  0Ch
aMap2_hsq db 'MAP2.HSQ',0
RES_MIRROR_HSQ db  0Eh
db    5
aMirror_hsq db 'MIRROR.HSQ',0
RES_DS0_HSQ db	1Ch
db    6
aDs0_hsq db 'DS0.HSQ',0
RES_DS1_HSQ db	38h ; 8
db    5
aDs1_hsq db 'DS1.HSQ',0
RES_DS2_HSQ db	74h ; t
db    5
aDs2_hsq db 'DS2.HSQ',0
RES_DS3_HSQ db	3Ah ; :
db    6
aDs3_hsq db 'DS3.HSQ',0
RES_DS4_HSQ db	34h ; 4
db    6
aDs4_hsq db 'DS4.HSQ',0
RES_LIBRE db  2Ah ; *
db    3
aLibre_1 db 'libre',0
RES_DN20_HSQ db	 55h ; U
db    5
aDn20_hsq db 'DN20.HSQ',0
RES_DN21_HSQ db	0CDh ; �
db    6
aDn21_hsq db 'DN21.HSQ',0
RES_DN22_HSQ db	0E4h ; �
db    7
aDn22_hsq db 'DN22.HSQ',0
RES_DN23_HSQ db	0EAh ; �
db    7
aDn23_hsq db 'DN23.HSQ',0
RES_DN24_HSQ db	0B8h ; �
db    8
aDn24_hsq db 'DN24.HSQ',0
RES_DN25_HSQ db	 8Eh ; �
db    6
aDn25_hsq db 'DN25.HSQ',0
RES_DN26_HSQ db	   9
db    5
aDn26_hsq db 'DN26.HSQ',0
RES_DN27_HSQ db	 31h ; 1
db    6
aDn27_hsq db 'DN27.HSQ',0
RES_DN28_HSQ db	0DDh ; �
db    8
aDn28_hsq db 'DN28.HSQ',0
RES_DN29_HSQ db	 46h ; F
db    6
aDn29_hsq db 'DN29.HSQ',0
RES_DN30_HSQ db	0FFh
db    6
aDn30_hsq db 'DN30.HSQ',0
RES_DN31_HSQ db	 2Ah ; *
db    7
aDn31_hsq db 'DN31.HSQ',0
RES_DN32_HSQ db	 91h ; �
db    6
aDn32_hsq db 'DN32.HSQ',0
RES_DN33_HSQ db	 97h ; �
db    6
aDn33_hsq db 'DN33.HSQ',0
RES_DN34_HSQ db	0B7h ; �
db    6
aDn34_hsq db 'DN34.HSQ',0
RES_DN35_HSQ db	0CDh ; �
db    4
aDn35_hsq db 'DN35.HSQ',0
RES_DN36_HSQ db	0EFh ; �
db    5
aDn36_hsq db 'DN36.HSQ',0
RES_DN37_HSQ db	   6
db    5
aDn37_hsq db 'DN37.HSQ',0
RES_DN38_HSQ db	 51h ; Q
db    6
aDn38_hsq db 'DN38.HSQ',0
RES_MIXR_HSQ db	 3Eh ; >
db    4
aMixr_hsq db 'MIXR.HSQ',0
RES_INT02_HSQ db  8Eh ;	�
db    6
aInt02_hsq db 'INT02.HSQ',0
RES_INT04_HSQ db  7Ch ;	|
db    6
aInt04_hsq db 'INT04.HSQ',0
RES_INT05_HSQ db  38h ;	8
db    7
aInt05_hsq db 'INT05.HSQ',0
RES_INT06_HSQ db 0E1h ;	�
db    6
aInt06_hsq db 'INT06.HSQ',0
RES_INT07_HSQ db  3Ah ;	:
db    7
aInt07_hsq db 'INT07.HSQ',0
RES_INT08_HSQ db 0DEh ;	�
db    6
aInt08_hsq db 'INT08.HSQ',0
RES_INT09_HSQ db  6Ah ;	j
db    6
aInt09_hsq db 'INT09.HSQ',0
RES_INT10_HSQ db 0B8h ;	�
db    8
aInt10_hsq db 'INT10.HSQ',0
RES_INT11_HSQ db  7Ch ;	|
db    8
aInt11_hsq db 'INT11.HSQ',0
RES_INT13_HSQ db 0CAh ;	�
db    5
aInt13_hsq db 'INT13.HSQ',0
RES_INT14_HSQ db 0CCh ;	�
db    2
aInt14_hsq db 'INT14.HSQ',0
RES_INT15_HSQ db  38h ;	8
db    4
aInt15_hsq db 'INT15.HSQ',0
RES_PALAIS_HSQ db  42h ; B
db    6
aPalais_hsq db 'PALAIS.HSQ',0
RES_MNT1_LOP db	 5Fh ; _
db    9
aMnt1_lop db 'MNT1.LOP',0
RES_MNT2_LOP db	 60h ; `
db    9
aMnt2_lop db 'MNT2.LOP',0
RES_MNT3_LOP db	 48h ; H
db  0Eh
aMnt3_lop db 'MNT3.LOP',0
RES_MNT4_LOP db	 39h ; 9
db  0Eh
aMnt4_lop db 'MNT4.LOP',0
RES_SIET_LOP db	0B6h ; �
db    8
aSiet_lop db 'SIET.LOP',0
RES_PALACE_LOP db  8Eh ; �
db    8
aPalace_lop db 'PALACE.LOP',0
RES_IRUL1_HSQ db 0D2h ;	�
db    4
aIrul1_hsq db 'IRUL1.HSQ',0
RES_IRUL2_HSQ db  35h ;	5
db    5
aIrul2_hsq db 'IRUL2.HSQ',0
RES_IRUL3_HSQ db 0A8h ;	�
db    5
aIrul3_hsq db 'IRUL3.HSQ',0
RES_IRUL4_HSQ db 0D2h ;	�
db    4
aIrul4_hsq db 'IRUL4.HSQ',0
RES_IRUL5_HSQ db  4Dh ;	M
db    5
aIrul5_hsq db 'IRUL5.HSQ',0
RES_IRUL6_HSQ db  62h ;	b
db    5
aIrul6_hsq db 'IRUL6.HSQ',0
RES_IRUL7_HSQ db 0D0h ;	�
db    4
aIrul7_hsq db 'IRUL7.HSQ',0
RES_IRUL8_HSQ db 0D0h ;	�
db    4
aIrul8_hsq db 'IRUL8.HSQ',0
RES_IRUL9_HSQ db 0D0h ;	�
db    4
aIrul9_hsq db 'IRUL9.HSQ',0
RES_DP1_HSQ db 0F3h ; �
db    6
aDp1_hsq db 'DP1.HSQ',0
RES_DP0_HSQ db	9Ch ; �
db    7
aDp0_hsq db 'DP0.HSQ',0
RES_DP2_HSQ db	5Ch ; \
db    6
aDp2_hsq db 'DP2.HSQ',0
RES_DP3_HSQ db 0E7h ; �
db    3
aDp3_hsq db 'DP3.HSQ',0
RES_DF1_HSQ db	3Fh ; ?
db    7
aDf1_hsq db 'DF1.HSQ',0
RES_DF2_HSQ db	47h ; G
db    7
aDf2_hsq db 'DF2.HSQ',0
RES_DF3_HSQ db	8Dh ; �
db    7
aDf3_hsq db 'DF3.HSQ',0
RES_DF4_HSQ db 0D9h ; �
db    5
aDf4_hsq db 'DF4.HSQ',0
RES_VIL1_HSQ db	 1Dh
db    7
aVil1_hsq db 'VIL1.HSQ',0
RES_VIL2_HSQ db	0C0h ; �
db    6
aVil2_hsq db 'VIL2.HSQ',0
RES_VIL3_HSQ db	 4Fh ; O
db    5
aVil3_hsq db 'VIL3.HSQ',0
RES_VIL4_HSQ db	 12h
db    6
aVil4_hsq db 'VIL4.HSQ',0
RES_VIL5_HSQ db	0F2h ; �
db    6
aVil5_hsq db 'VIL5.HSQ',0
RES_VIL6_HSQ db	 8Ah ; �
db    5
aVil6_hsq db 'VIL6.HSQ',0
RES_DV1_HSQ db	  7
db    8
aDv1_hsq db 'DV1.HSQ',0
RES_DV2_HSQ db	94h ; �
db    7
aDv2_hsq db 'DV2.HSQ',0
RES_DV3_HSQ db	  6
db    6
aDv3_hsq db 'DV3.HSQ',0
RES_DV4_HSQ db 0C2h ; �
db    8
aDv4_hsq db 'DV4.HSQ',0
RES_DH0_HSQ db 0A0h ; �
db    7
aDh0_hsq db 'DH0.HSQ',0
RES_DH1_HSQ db	7Ch ; |
db    6
aDh1_hsq db 'DH1.HSQ',0
RES_DH2_HSQ db	1Eh
db    8
aDh2_hsq db 'DH2.HSQ',0
RES_DH3_HSQ db 0E8h ; �
db    8
aDh3_hsq db 'DH3.HSQ',0
RES_VG01_HSQ db	0E5h ; �
db    8
aVg01_hsq db 'VG01.HSQ',0
RES_VG02_HSQ db	 31h ; 1
db    8
aVg02_hsq db 'VG02.HSQ',0
RES_VG03_HSQ db	 78h ; x
db    8
aVg03_hsq db 'VG03.HSQ',0
RES_VG04_HSQ db	 6Fh ; o
db    9
aVg04_hsq db 'VG04.HSQ',0
RES_VG05_HSQ db	 86h ; �
db    9
aVg05_hsq db 'VG05.HSQ',0
RES_VG06_HSQ db	0AEh ; �
db    7
aVg06_hsq db 'VG06.HSQ',0
RES_VG07_HSQ db	 0Fh
db    8
aVg07_hsq db 'VG07.HSQ',0
RES_VG08_HSQ db	0F7h ; �
db    8
aVg08_hsq db 'VG08.HSQ',0
RES_VG09_HSQ db	 10h
db    8
aVg09_hsq db 'VG09.HSQ',0
RES_VG10_HSQ db	 4Eh ; N
db    8
aVg10_hsq db 'VG10.HSQ',0
_off_226AF_resource_names dw offset RES_ICONES_HSQ
dw offset RES_FRESK_HSQ
dw offset RES_LETO_HSQ
dw offset RES_JESS_HSQ
dw offset RES_HAWA_HSQ
dw offset RES_IDAH_HSQ
dw offset RES_GURN_HSQ
dw offset RES_STIL_HSQ
dw offset RES_KYNE_HSQ
dw offset RES_CHAN_HSQ
dw offset RES_HARA_HSQ
dw offset RES_BARO_HSQ
dw offset RES_FEYD_HSQ
dw offset RES_EMPR_HSQ
dw offset RES_HARK_HSQ_0
dw offset RES_SMUG_HSQ_0
dw offset RES_FRM1_HSQ
dw offset RES_FRM2_HSQ
dw offset RES_FRM3_HSQ
dw offset RES_GENERIC_HSQ
dw offset RES_PROGUE_HSQ
dw offset RES_COMM_HSQ
dw offset RES_EQUI_HSQ
dw offset RES_BALCON_HSQ
dw offset RES_CORR_HSQ
dw offset RES_POR_HSQ
dw offset RES_SIET1_HSQ
dw offset RES_XPLAIN9_HSQ
dw offset RES_libre
dw offset RES_BUNK_HSQ
dw offset RES_FINAL_HSQ
dw offset RES_SERRE_HSQ
dw offset RES_BOTA_HSQ
dw offset RES_PALPLAN_HSQ
dw offset RES_SUN_HSQ
dw offset RES_VIS_HSQ
dw offset RES_ORNYPAN_HSQ
dw offset RES_ONMAP_HSQ
dw offset RES_PERS_HSQ
dw offset RES_CHANKISS_HSQ
dw offset RES_SKY_HSQ
dw offset RES_SKYDN_HSQ
dw offset RES_ORNYTK_HSQ
dw offset RES_ATTACK_HSQ
dw offset RES_STARS_HSQ
dw offset RES_INTDS_HSQ
dw offset RES_SUNRS_HSQ
dw offset RES_PAUL_HSQ
dw offset RES_BACK_HSQ
dw offset RES_MOIS_HSQ
dw offset RES_BOOK_HSQ
dw offset RES_ORNY_HSQ
dw offset RES_ORNYCAB_HSQ
dw offset RES_LIBRE_HSQ
dw offset RES_LIBRE_HSQ_0
dw offset RES_LIBRE_HSQ_1
dw offset RES_LIBRE_HSQ_2
dw offset RES_VER_HSQ
dw offset RES_MAP2_HSQ
dw offset RES_MIRROR_HSQ
dw offset RES_DS0_HSQ
dw offset RES_DS1_HSQ
dw offset RES_DS2_HSQ
dw offset RES_DS3_HSQ
dw offset RES_DS4_HSQ
dw offset RES_LIBRE
dw offset RES_DN20_HSQ
dw offset RES_DN21_HSQ
dw offset RES_DN22_HSQ
dw offset RES_DN23_HSQ
dw offset RES_DN24_HSQ
dw offset RES_DN25_HSQ
dw offset RES_DN26_HSQ
dw offset RES_DN27_HSQ
dw offset RES_DN28_HSQ
dw offset RES_DN29_HSQ
dw offset RES_DN30_HSQ
dw offset RES_DN31_HSQ
dw offset RES_DN32_HSQ
dw offset RES_DN33_HSQ
dw offset RES_DN34_HSQ
dw offset RES_DN35_HSQ
dw offset RES_DN36_HSQ
dw offset RES_DN37_HSQ
dw offset RES_DN38_HSQ
dw offset RES_MIXR_HSQ
dw offset RES_INT02_HSQ
dw offset RES_INT04_HSQ
dw offset RES_INT05_HSQ
dw offset RES_INT06_HSQ
dw offset RES_INT07_HSQ
dw offset RES_INT08_HSQ
dw offset RES_INT09_HSQ
dw offset RES_INT10_HSQ
dw offset RES_INT11_HSQ
dw offset RES_INT13_HSQ
dw offset RES_INT14_HSQ
dw offset RES_INT15_HSQ
dw offset RES_PALAIS_HSQ
dw offset RES_MNT1_LOP
dw offset RES_MNT2_LOP
dw offset RES_MNT3_LOP
dw offset RES_MNT4_LOP
dw offset RES_SIET_LOP
dw offset RES_PALACE_LOP
dw offset RES_IRUL1_HSQ
dw offset RES_IRUL2_HSQ
dw offset RES_IRUL3_HSQ
dw offset RES_IRUL4_HSQ
dw offset RES_IRUL5_HSQ
dw offset RES_IRUL6_HSQ
dw offset RES_IRUL7_HSQ
dw offset RES_IRUL8_HSQ
dw offset RES_IRUL9_HSQ
dw offset RES_DP1_HSQ
dw offset RES_DP0_HSQ
dw offset RES_DP2_HSQ
dw offset RES_DP3_HSQ
dw offset RES_DF1_HSQ
dw offset RES_DF2_HSQ
dw offset RES_DF3_HSQ
dw offset RES_DF4_HSQ
dw offset RES_VIL1_HSQ
dw offset RES_VIL2_HSQ
dw offset RES_VIL3_HSQ
dw offset RES_VIL4_HSQ
dw offset RES_VIL5_HSQ
dw offset RES_VIL6_HSQ
dw offset RES_DV1_HSQ
dw offset RES_DV2_HSQ
dw offset RES_DV3_HSQ
dw offset RES_DV4_HSQ
dw offset RES_DH0_HSQ
dw offset RES_DH1_HSQ
dw offset RES_DH2_HSQ
dw offset RES_DH3_HSQ
dw offset RES_VG01_HSQ
dw offset RES_VG02_HSQ
dw offset RES_VG03_HSQ
dw offset RES_VG04_HSQ
dw offset RES_VG05_HSQ
dw offset RES_VG06_HSQ
dw offset RES_VG07_HSQ
dw offset RES_VG08_HSQ
dw offset RES_VG09_HSQ
dw offset RES_VG10_HSQ
dw offset RES_GLOBDATA_HSQ
dw offset RES_PHRASE11_HSQ
dw offset RES_PHRASE21_HSQ
dw offset RES_PHRASE31_HSQ
dw offset RES_PHRASE41_HSQ
dw offset RES_PHRASE51_HSQ
dw offset RES_PHRASE61_HSQ
dw offset RES_PHRASE71_HSQ
dw offset RES_PHRASE12_HSQ
dw offset RES_PHRASE22_HSQ
dw offset RES_PHRASE32_HSQ
dw offset RES_PHRASE42_HSQ
dw offset RES_PHRASE52_HSQ
dw offset RES_PHRASE62_HSQ
dw offset RES_PHRASE72_HSQ
dw offset RES_SIET_SAL
dw offset RES_PALACE_SAL
dw offset RES_VILG_SAL
dw offset RES_HARK_SAL
_off_227F9_midi_resource_files dw offset RES_SEKENCE_HSQ
dw offset RES_WATER_HSQ
dw offset RES_WORMSUIT_HSQ
dw offset RES_WORMINTR_HSQ
dw offset RES_WARSONG_HSQ
dw offset RES_MORNING_HSQ
dw offset RES_SIETCHM_HSQ
dw offset RES_BAGDAD_HSQ
dw offset RES_ARRAKIS_HSQ
dw offset RES_CRYOMUS_HSQ
dw offset RES_SN1_HSQ
dw offset RES_SN2_HSQ
dw offset RES_SN3_HSQ
dw offset RES_SN4_HSQ
dw offset RES_SN5_HSQ
dw offset RES_SN6_HSQ
dw offset RES_SN7_HSQ
dw offset RES_SN8_HSQ
dw offset RES_SN9_HSQ
dw offset RES_SNA_HSQ
dw offset RES_FREQ_HSQ
dw offset RES_TABLAT_BIN
dw offset RES_DNCHAR_BIN
dw offset RES_CONDIT_HSQ
dw offset RES_DIALOGUE_HSQ
dw offset RES_VER_BIN
dw offset RES_MAP_HSQ
dw offset RES_COMMAND1_HSQ
dw offset RES_COMMAND2_HSQ
dw offset RES_COMMAND3_HSQ
dw offset RES_COMMAND4_HSQ
dw offset RES_COMMAND5_HSQ
dw offset RES_COMMAND6_HSQ
dw offset RES_COMMAND7_HSQ
dw offset RES_DNCHAR2_BIN
dw offset RES_DNVGA_HSQ
dw offset RES_DN386_HSQ
dw offset RES_DNPCS_HSQ
dw offset RES_DNADL_HSQ
dw offset RES_DNADP_HSQ
dw offset RES_DNADG_HSQ
dw offset RES_DNMID_HSQ
dw offset RES_DNPCS2_HSQ
dw offset RES_DNSDB_HSQ
dw offset RES_DNSDP_HSQ
RESOURCE_LIST_HNM dw offset RES_BLANK_ENTRY
dw offset RES_DFL2_HNM
dw offset RES_MNT1_HNM
dw offset RES_MNT2_HNM
dw offset RES_MNT3_HNM
dw offset RES_MNT4_HNM
dw offset RES_SIET_HNM
dw offset RES_PALACE_HNM
dw offset RES_PALACE_HNM
dw offset RES_FORT_HNM
dw offset RES_FORT_HNM
dw offset RES_DEAD3_HNM
dw offset RES_DEAD_HNM
dw offset RES_DEAD2_HNM
dw offset RES_VER_HNM
dw offset RES_TITLE_HNM
dw offset RES_MTG1_HNM
dw offset RES_MTG2_HNM
dw offset RES_MTG3_HNM
dw offset RES_PLANT_HNM
dw offset RES_CREDITS_HNM
dw offset RES_VIRGIN_HNM
dw offset RES_CRYO_HNM
dw offset RES_CRYO2_HNM
dw offset RES_PRESENT_HNM
dw offset RES_IRULAN_HNM
dw offset RES_SEQA_HNM
dw offset RES_SEQL_HNM
dw offset RES_SEQM_HNM
dw offset RES_SEQP_HNM
dw offset RES_SEQQ_HNM
dw offset RES_SEQJ_HNM
dw offset RES_SEQK_HNM
dw offset RES_SEQI_HNM
dw offset RES_SEQD_HNM
dw offset RES_SEQN_HNM
dw offset RES_SEQR_HNM
RES_BLANK_ENTRY	dw 0
db    0
RES_DFL2_HNM dw	1221h
aDfl2_hnm db 'DFL2.HNM',0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
RES_MNT1_HNM dw	109Dh
aMnt1_hnm db 'MNT1.HNM',0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
RES_MNT2_HNM dw	109Dh
aMnt2_hnm db 'MNT2.HNM',0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
RES_MNT3_HNM dw	109Dh
aMnt3_hnm db 'MNT3.HNM',0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
RES_MNT4_HNM dw	109Dh
aMnt4_hnm db 'MNT4.HNM',0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
RES_SIET_HNM dw	109Ch
aSiet_hnm db 'SIET.HNM',0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
RES_PALACE_HNM dw 109Ch
aPalace_hnm db 'PALACE.HNM',0
RES_FORT_HNM dw	1000h
aFort_hnm db 'FORT.HNM',0
RES_MTG1_HNM dw	1090h
aMtg1_hnm db 'MTG1.HNM',0
RES_MTG2_HNM dw	1090h
aMtg2_hnm db 'MTG2.HNM',0
RES_MTG3_HNM dw	1090h
aMtg3_hnm db 'MTG3.HNM',0
RES_PLANT_HNM dw 1910h
aPlant_hnm db 'PLANT.HNM',0
RES_CREDITS_HNM	dw 740h
aCredits_hnm db	'CREDITS.HNM',0
RES_VIRGIN_HNM dw 1000h
aVirgin_hnm db 'VIRGIN.HNM',0
RES_CRYO_HNM dw	1100h
aCryo_hnm db 'CRYO.HNM',0
RES_CRYO2_HNM dw 400h
aCryo2_hnm db 'CRYO2.HNM',0
RES_PRESENT_HNM	dw 1600h
aPresent_hnm db	'PRESENT.HNM',0
RES_IRULAN_HNM dw 1080h
aIrulan_hnm db 'IRULAN.HNM',0
RES_SEQA_HNM dw	1080h
aSeqa_hnm db 'SEQA.HNM',0
RES_SEQL_HNM dw	1080h
aSeql_hnm db 'SEQL.HNM',0
RES_SEQM_HNM dw	1080h
aSeqm_hnm db 'SEQM.HNM',0
RES_SEQP_HNM dw	1080h
aSeqp_hnm db 'SEQP.HNM',0
RES_SEQQ_HNM dw	1080h
aSeqg_hnm db 'SEQG.HNM',0
RES_SEQJ_HNM dw	1080h
aSeqj_hnm db 'SEQJ.HNM',0
RES_SEQK_HNM dw	1080h
aSeqk_hnm db 'SEQK.HNM',0
RES_SEQI_HNM dw	1080h
aSeqi_hnm db 'SEQI.HNM',0
RES_SEQD_HNM dw	1080h
aSeqd_hnm db 'SEQD.HNM',0
RES_SEQN_HNM dw	1080h
aSeqn_hnm db 'SEQN.HNM',0
RES_SEQR_HNM dw	1080h
aSeqr_hnm db 'SEQR.HNM',0
RES_DEAD_HNM dw	4200h
aDead_hnm db 'DEAD.HNM',0
RES_DEAD2_HNM dw 0A00h
aDead2_hnm db 'DEAD2.HNM',0
RES_DEAD3_HNM dw 0A00h
aDead3_hnm db 'DEAD3.HNM',0
RES_VER_HNM dw 1900h
aVer_hnm db 'VER.HNM',0
RES_TITLE_HNM dw 0A00h
aTitle_hnm db 'TITLE.HNM',0
_word_22A56_hnm_file_handle dw 0
_word_22A58_IRULx_subtitle_frames dw 119,137,138,173,186,238,248,269,270,305,314,338,348,358,360,388
dw 389,415,425,460,470,518,528,571,576,604,605,659,660,685,693,744
dw 746,757,761,818,827,866,875,945,950,1000,1012,1042,1044,1075,1085,1119
dw 1120,1142,1147,1169,1172,1214,1226,1259,1266,1285,1294,1315,-1
_word_22AD2_URLx_subtitle_next_frame_ptr dw 0CEFCh
aNotEnoughStand	db 'Not enough standard memory for soun'
db 'ds',0
db    0
aNotEnoughSta_0	db 'Not enough standard memory for musi'
db 'c. Try with EMS extra memory.',0
db    0
aNotEnoughSta_1	db 'Not enough standard memory to run D'
db 'une',0
aFileNotFound db 'File not found:             ',0
RES_SEKENCE_HSQ	dw 0
aSekence_hsq db	'SEKENCE.HSQ',0
RES_WATER_HSQ dw 0
aWater_hsq db 'WATER.HSQ',0
RES_WORMSUIT_HSQ dw 0
aWormsuit_hsq db 'WORMSUIT.HSQ',0
RES_WORMINTR_HSQ dw 0
aWormintr_hsq db 'WORMINTR.HSQ',0
RES_WARSONG_HSQ	dw 0
aWarsong_hsq db	'WARSONG.HSQ',0
RES_MORNING_HSQ	dw 0
aMorning_hsq db	'MORNING.HSQ',0
RES_SIETCHM_HSQ	dw 0
aSietchm_hsq db	'SIETCHM.HSQ',0
RES_BAGDAD_HSQ dw 0
aBagdad_hsq db 'BAGDAD.HSQ',0
RES_ARRAKIS_HSQ	dw 0
aArrakis_hsq db	'ARRAKIS.HSQ',0
RES_CRYOMUS_HSQ	dw 0
aCryomus_hsq db	'CRYOMUS.HSQ',0
unk_22C0C db  82h ; �
db  82h	; �
db    1
db  82h	; �
db  84h	; �
db    4
db  85h	; �
db  85h	; �
db  87h	; �
db  88h	; �
db  86h	; �
db  89h	; �
db  83h	; �
db  83h	; �
_byte_22C1A_audio_current_sfx_id db 0FFh
RES_SN1_HSQ dw 0
aSn1_hsq db 'SN1.HSQ',0
RES_SN2_HSQ dw 0
aSn2_hsq db 'SN2.HSQ',0
RES_SN3_HSQ dw 0
aSn3_hsq db 'SN3.HSQ',0
RES_SN4_HSQ dw 0
aSn4_hsq db 'SN4.HSQ',0
RES_SN5_HSQ dw 0
aSn5_voc db 'SN5.VOC',0
RES_SN6_HSQ dw 0
aSn6_hsq db 'SN6.HSQ',0
RES_SN7_HSQ dw 0
aSn7_voc db 'SN7.VOC',0
RES_SN8_HSQ dw 0
aSn8_voc db 'SN8.VOC',0
RES_SN9_HSQ dw 0
aSn9_voc db 'SN9.VOC',0
RES_SNA_HSQ dw 0
aSna_hsq db 'SNA.HSQ',0
RES_FREQ_HSQ dw	0
aFreq_hsq db 'FREQ.HSQ',0
aPfPf001i_voc db 'PF\PF001I .VOC',0
aDune_dat db 'dune.dat',0
aDnmaj1	db 'dnmaj1',0
db    0
byte_22CAA db 9,6,8,1,4,3,7,5,2,-1
byte_22CB4 db 9,6,8,1,4,3,7,5,2,-1
word_22CBE dw 37FAh
byte_22CC0 db 1
_dword_22CC1_pcm_voc_resource_offset dd	0
_word_22CC5_res_remaining dw 0
_word_22CC7_pcm_callback_flag_q	dw 0
dword_22CC9 dd 2800h
word_22CCD dw 0
_word_22CCF_pcm_callback_flag_qq dw 0
_word_22CD1_res_file_handle dw 0
byte_22CD3 db 0
word_22CD4 dw 3811h
_22CD6_temp_filepath_buffer db	  0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_22D3D db	0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
off_22D56 dw offset _22CD6_temp_filepath_buffer
aDune37s0_sav db 'dune37s0.sav',0
_ptr_22D65_gfx_vtable_func_00_set_mode dd 100h		       ; 0
_ptr_22D65_gfx_vtable_func_01_get_info dd 103h ; ax = frameptr
			; cx = frame size in bytes
_ptr_22D65_gfx_vtable_func_02 dd 106h
_ptr_22D65_gfx_vtable_func_03_draw_mouse dd 109h
_ptr_22D65_gfx_vtable_func_04_restore_mouse_area_qq dd 10Ch
_ptr_22D65_gfx_vtable_func_05_blit dd 10Fh
_ptr_22D65_gfx_vtable_func_06 dd 112h
_ptr_22D65_gfx_vtable_func_07 dd 115h
_ptr_22D65_gfx_vtable_func_08 dd 118h
_ptr_22D65_gfx_vtable_func_09 dd 11Bh
_ptr_22D65_gfx_vtable_func_10 dd 11Eh
_ptr_22D65_gfx_vtable_func_11_copy_framebuf dd 121h
_ptr_22D65_gfx_vtable_func_12_copy_rect	dd 124h
_ptr_22D65_gfx_vtable_func_13_copy_framebuf dd 127h
_ptr_22D65_gfx_vtable_func_14 dd 12Ah
_ptr_22D65_gfx_vtable_func_15_copy_framebuf dd 12Dh
_ptr_22D65_gfx_vtable_func_16 dd 130h
_ptr_22D65_gfx_vtable_func_17_copy_fbuf_explode_and_center dd 133h
_ptr_22D65_gfx_vtable_func_18 dd 136h
_ptr_22D65_gfx_vtable_func_19 dd 139h
_ptr_22D65_gfx_vtable_func_20 dd 13Ch
_ptr_22D65_gfx_vtable_func_21_set_pixel	dd 13Fh
_ptr_22D65_gfx_vtable_func_22 dd 142h
_ptr_22D65_gfx_vtable_func_23 dd 145h
_ptr_22D65_gfx_vtable_func_24 dd 148h
_ptr_22D65_gfx_vtable_func_25 dd 14Bh
_ptr_22D65_gfx_vtable_func_26 dd 14Eh
_ptr_22D65_gfx_vtable_func_27 dd 151h
_ptr_22D65_gfx_vtable_func_28 dd 154h
_ptr_22D65_gfx_vtable_func_29 dd 157h
_ptr_22D65_gfx_vtable_func_30 dd 15Ah
_ptr_22D65_gfx_vtable_func_31 dd 15Dh
_ptr_22D65_gfx_vtable_func_32 dd 160h
_ptr_22D65_gfx_vtable_func_set_global_y_offset dd 163h
_ptr_22D65_gfx_vtable_func_34 dd 166h
_ptr_22D65_gfx_vtable_func_35 dd 169h
_ptr_22D65_gfx_vtable_func_36 dd 16Ch
_ptr_22D65_gfx_vtable_func_37 dd 16Fh
_ptr_22D65_gfx_vtable_func_38 dd 172h
_ptr_22D65_gfx_vtable_func_39 dd 175h
_ptr_22D65_gfx_vtable_func_40 dd 178h
_ptr_22D65_gfx_vtable_func_41_copy_pal2_to_pal1	dd 17Bh
_ptr_22D65_gfx_vtable_func_42 dd 17Eh
_ptr_22D65_gfx_vtable_func_43 dd 181h
_ptr_22D65_gfx_vtable_func_44 dd 184h
_ptr_22D65_gfx_vtable_func_45 dd 187h
midi_vtable_func_1 dd 100h
midi_vtable_func_2 dd 103h
midi_vtable_func_3 dd 106h
midi_vtable_func_4 dd 109h
midi_vtable_func_5 dd 10Ch
midi_vtable_func_6 dd 10Fh
midi_vtable_func_7 dd 112h
_dword_22E39_pcm_audio_vtable_func_1 dd	100h
_dword_22E3D_pcm_audio_vtable_func_2 dd	103h
pcm_audio_vtable_func_3	dd 106h
pcm_audio_vtable_func_4	dd 109h
pcm_audio_vtable_func_5	dd 10Ch
pcm_audio_vtable_func_6	dd 10Fh
pcm_audio_vtable_func_7	dd 112h
pcm_audio_vtable_func_8	dd 115h
_word_22E59_xms_or_ems_mem_limit dw 0
_word_22E5B_joystick_param dw 0
db    0
db    0
word_22E5F dw 0
word_22E61 dw 0
_word_22E63_cmd_arg_midi dw 0
word_22E65 dw 0
_word_22E67_allocator_next_free_ofs dw 0
_word_22E69_allocator_next_free_seg dw seg seg001
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
_word_2316C_error_msg dw ?
unk_2316E db	? ;
db    ?	;
unk_23170 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_238C5 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_239F0 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_23AB8 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_23B65 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_23B82 db	? ;
db    ?	;
unk_23B84 db	? ;
db    ?	;
byte_23B86 db ?
byte_23B87 db ?
byte_23B88 db ?
byte_23B89 db ?
unk_23B8A db	? ;
word_23B8B dw ?
byte_23B8D db ?
db    ?	;
byte_23B8F db ?
byte_23B90 db ?
db    ?	;
db    ?	;
word_23B93 dw ?
word_23B95 dw ?
word_23B97 dw ?
word_23B99 dw ?
byte_23B9B db ?
unk_23B9C db	? ;
word_23B9D dw ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
byte_23BAF db ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
word_23BC0 dw ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_23BD3 db	? ;
db    ?	;
db    ?	;
db    ?	;
unk_23BD7 db	? ;
db    ?	;
word_23BD9 dw ?
db    ?	;
db    ?	;
word_23BDD dw ?
word_23BDF dw ?
byte_23BE1 db ?
byte_23BE2 db ?
word_23BE3 dw ?
byte_23BE5 db ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_23BEA db	? ;
unk_23BEB db	? ;
db    ?	;
db    ?	;
byte_23BEE db ?
word_23BEF dw ?
word_23BF1 dw ?
word_23BF3 dw ?
word_23BF5 dw ?
word_23BF7 dw ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
byte_23C1A db ?
db    ?	;
db    ?	;
db    ?	;
word_23C1E dw ?
word_23C20 dw ?
word_23C22 dw ?
byte_23C24 db ?
db    ?	;
word_23C26 dw ?
word_23C28 dw ?
word_23C2A dw ?
word_23C2C dw ?
byte_23C2E db ?
unk_23C2F db	? ;
word_23C30 dw ?
word_23C32 dw ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_23C3C db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
word_23C4E dw ?
word_23C50 dw ?
db    ?	;
db    ?	;
byte_23C54 db ?
db    ?	;
byte_23C56 db ?
byte_23C57 db ?
db    ?	;
byte_23C59 db ?
word_23C5A dw ?
dword_23C5C dd ?
dword_23C60 dd ?
word_23C64 dw ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
word_23C6C dw ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
word_23C72 dw ?
word_23C74 dw ?
unk_23C76 db	? ;
db    ?	;
word_23C78 dw ?
unk_23C7A db	? ;
db    ?	;
unk_23C7C db	? ;
db    ?	;
unk_23C7E db	? ;
db    ?	;
unk_23C80 db	? ;
unk_23C81 db	? ;
word_23C82 dw ?
unk_23C84 db	? ;
db    ?	;
unk_23C86 db	? ;
db    ?	;
unk_23C88 db	? ;
db    ?	;
unk_23C8A db	? ;
db    ?	;
byte_23C8C db ?
db    ?	;
word_23C8E dw ?
byte_23C90 db ?
unk_23C91 db	? ;
unk_23C92 db	? ;
db    ?	;
unk_23C94 db	? ;
db    ?	;
word_23C96 dw ?
word_23C98 dw ?
word_23C9A dw ?
byte_23C9C db ?
byte_23C9D db ?
word_23C9E dw ?
word_23CA0 dw ?
word_23CA2 dw ?
word_23CA4 dw ?
_word_23CA6_SAL_stack_buffer_24b dw ?
word_23CA8 dw ?
word_23CAA dw ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
_word_23D04_intro_script_offset	dw ?
unk_23D06 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
word_23D0E dw ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_23D18 db	? ;
db    ?	;
word_23D1A dw ?
unk_23D1C db	? ;
db    ?	;
word_23D1E dw ?
word_23D20 dw ?
word_23D22 dw ?
word_23D24 dw ?
word_23D26 dw ?
word_23D28 dw ?
unk_23D2A db	? ;
db    ?	;
unk_23D2C db	? ;
db    ?	;
word_23D2E dw ?
unk_23D30 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
RESOURCE_TABLAT	dw ?
word_23DFA dw ?
word_23DFC dw ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_24069 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
RESOURCE_GLOBDATA dw ?
unk_24112 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2411F db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_242D0 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_24A05 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_24C29 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_24DEA db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_24E10 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2621D db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_26A5F db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_26A9A db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_275B1 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2806B db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_28E6E db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_29826 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_29A6F db	? ;
unk_29A70 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_29B60 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_29C72 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_29F16 db	? ;
db    ?	;
unk_29F18 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
word_29F1E dw ?
db    ?	;
db    ?	;
_word_29F22_res_condit_ofs dw ?
_word_29F24_res_condit_seg dw ?
_word_29F26_res_dialogue_ofs dw	?
_word_29F28_res_dialogue_seg dw	?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
word_29F86 dw ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
word_2A034 dw ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2A042 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2A3D6 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2A6EF db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2AE5E db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
_work_2B11E_SAL_data dw	?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2B307 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2B4AF db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2B539 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2B55D db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2B566 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2BAAC db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2C081 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
dw ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
byte_2C316 db ?
db    ?	;
_word_2C318_allocator_last_free_seg dw ?
dword_2C31A dd ?
word_2C31E dw ?
byte_2C320 db ?
_byte_2C321_disable_hsq	db ?
byte_2C322 db ?
byte_2C323 db ?
_unk_2C324_vga_framebuffer_size_64000 dw ?
_unk_2C326_default_drive db    ? ;
_unk_2C327_default_drive db    ? ;
_word_2C328_resource_index dw ?
_word_2C32A_time_passed	dw ?
unk_2C32C db	? ;
db    ?	;
db    ?	;
db    ?	;
byte_2C330 db ?
_unk_2C331_key_pressed_array db	   ? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
_byte_2C34A_key_p_status db ?
db    ?	;
db    ?	;
_byte_2C34D_key_enter_status db	?
_byte_2C34E_key_w_status db ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
byte_2C369 db ?
byte_2C36A db ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
byte_2C38C db ?
db    ?	;
db    ?	;
byte_2C38F db ?
db    ?	;
byte_2C391 db ?
db    ?	;
db    ?	;
byte_2C394 db ?
db    ?	;
db    ?	;
db    ?	;
_byte_2C398_key_hit_qq db ?
byte_2C399 db ?
byte_2C39A db ?
_byte_2C39B_language_setting db	?
unk_2C39C db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2C41C db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2C546 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2C581 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2C5AF db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2C5DF db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2C69F db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
word_2CCC4 dw ?
_unk_2CCC6_sav_file_first_word dw ?
word_2CCC8 dw ?
word_2CCCA dw ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
word_2CCD0 dw ?
db    ?	;
db    ?	;
_unk_2CCD4_bios_timer_count_1 db    ? ;
db    ?	;
_unk_2CCD6_bios_timer_count_2 dw ?
_unk_2CCD8_bios_timer_count_3 dw ?
db    ?	;
db    ?	;
word_2CCDC dw ?
word_2CCDE dw ?
word_2CCE0 dw ?
word_2CCE2 dw ?
unk_2CCE4 db	? ;
db    ?	;
unk_2CCE6 db	? ;
db    ?	;
unk_2CCE8 db	? ;
db    ?	;
word_2CCEA dw ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2CCF4 db	? ;
db    ?	;
unk_2CCF6 db	? ;
db    ?	;
db    ?	;
db    ?	;
unk_2CCFA db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
unk_2CDC7 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
_word_2CF3C_open_res_info dw ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
_dword_2D060_sprite_sheet_resource_ptr dd ?
byte_2D064 db ?
_byte_2D065_hnm_flag_msb db ?
dword_2D066 dd ?
_2D06A_dune_dat_file_handle dw ?
_dword_2D06C_dnmaj_func_ptr_2 dd ?
word_2D070 dw ?
word_2D072 dw ?
word_2D074 dw ?
word_2D076 dw ?
word_2D078 dw ?
byte_2D07A db ?
unk_2D07B db	? ;
unk_2D07C db	? ;
unk_2D07D db	? ;
word_2D07E dw ?
word_2D080 dw ?
word_2D082 dw ?
word_2D084 dw ?
_word_2D086_framebuffer_front dw ?
_word_2D088_vga_base_a000 dw ?
_word_2D08A_framebuffer_active dw ?
_word_2D08C_framebuffer2_ofs dw	?
_word_2D08E_framebuffer2_seg dw	?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
word_2D094 dw ?
byte_2D096 db ?
_byte_2D097_hnm_finished_flag db ?
_word_2D098_hnm_frame_counter dw ?
_word_2D09A_hnm_counter_2 dw ?
word_2D09C dw ?
word_2D09E dw ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
word_2D0A6 dw ?
word_2D0A8 dw ?
word_2D0AA dw ?
word_2D0AC dw ?
_word_2D0AE_current_hnm_resource_flag dw ?
_word_2D0B0_hnm_video_id dw ?
_word_2D0B2_hnm_active_video_id	dw ?
_word_2D0B4_hnm_file_offset_lo dw ?
_word_2D0B6_hnm_file_offset_hi dw ?
_word_2D0B8_hnm_file_remain_lo dw ?
_word_2D0BA_hnm_file_remain_hi dw ?
_dword_2D0BC_hnm_file_read_buf_seg dd ?
_dword_2D0C0_hnm_file_read_buf_ofs dd ?
_word_2D0C4_video_decode_buf_ofs dw ?
_word_2D0C6_video_decode_buf_seg dw ?
word_2D0C8 dw ?
word_2D0CA dw ?
_word_2D0CC_hnm_sd_block_ofs dw	?
_word_2D0CE_hnm_pl_block_ofs dw	?
word_2D0D0 dw ?
word_2D0D2 dw ?
_word_2D0D4_video_chunk_tag dw ?
_word_2D0D6_pcm_voc_lipsync_data dw ?
word_2D0D8 dw ?
byte_2D0DA db ?
byte_2D0DB db ?
word_2D0DC dw ?
word_2D0DE dw ?
word_2D0E0 dw ?
_word_2D0E2_framebuffer_back dw	?
word_2D0E4 dw ?
_word_2D0E6_mouse_pos_y	dw ?
_word_2D0E8_mouse_pos_x	dw ?
_ptr_2D0EA_mouse_clip_region db	   ? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
_word_2D0F2_mouse_draw_pos_y dw	?
_word_2D0F4_mouse_draw_pos_x dw	?
_byte_2D0F6_cursor_hide_counter	db ?
_byte_2D0F7_cursor_unk_q db ?
word_2D0F8 dw ?
byte_2D0FA db ?
byte_2D0FB db ?
word_2D0FC dw ?
word_2D0FE dw ?
unk_2D100 db	? ;
word_2D101 dw ?
word_2D103 dw ?
unk_2D105 db	? ;
db    ?	;
db    ?	;
word_2D108 dw ?
word_2D10A dw ?
word_2D10C dw ?
word_2D10E dw ?
word_2D110 dw ?
word_2D112 dw ?
word_2D114 dw ?
word_2D116 dw ?
word_2D118 dw ?
word_2D11A dw ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
_byte_2D196_in_transition? db ?
byte_2D197 db ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
byte_2D1A1 db ?
word_2D1A2 dw ?
word_2D1A4 dw ?
word_2D1A6 dw ?
word_2D1A8 dw ?
word_2D1AA dw ?
word_2D1AC dw ?
_unk_2D1AE_res_map dd ?
byte_2D1B2 db ?
byte_2D1B3 db ?
db    ?	;
db    ?	;
unk_2D1B6 db	? ;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
word_2D1BF dw ?
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
db    ?	;
_unk_2D1CD_top_of_mem db    ? ;
seg001 ends


end start

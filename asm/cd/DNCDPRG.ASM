

;
; �������������������������������������������������������������������������ͻ
; �	This file is generated by The Interactive Disassembler (IDA)	    �
; �	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    �
; �			 Licensed to: Freeware version			    �
; �������������������������������������������������������������������������ͼ
;
; Input	MD5   :	52A219E5CD7721BC645B54353844010B

; File Name   :	C:\Users\noalm\source\repos\OpenRakis\bin\CD\DNCDPRG.EXE
; Format      :	MS-DOS executable (EXE)
; Base Address:	1EDh Range: 1ED0h-1503Ch Loaded	length:	1316Ch
; Entry	Point :	1ED:0

.8086
.model large


; Segment type:	Pure code
seg000 segment byte public 'CODE'
assume cs:seg000
assume es:nothing, ss:seg001, ds:nothing



public start
start proc near
mov	ax, 0DD1Dh
call	sub_1037D
call	sub_10464
call	sub_1F80
sti
call	sub_2450
call	sub_21D9
call	sub_20EC
call	sub_CD87
mov	byte ptr ds:3810h, 0
mov	word ptr ds:2, 2
call	sub_1F53
mov	cl, 0FFh
call	sub_D259
call	sub_3730
mov	byte ptr ds:0CE80h, 0FFh
call	sub_D18E
call	sub_F6E5

loc_1F0A:
cld
xor	ax, ax
int	33h		; - MS MOUSE - RESET DRIVER AND	READ STATUS
			; Return: AX = status
			; BX = number of buttons
mov	ax, seg	seg001
mov	ds, ax
assume ds:seg001
call	sub_107A5
cmp	word ptr seg_11380+3977h, 0
jz	short loc_1F26
call	dword ptr seg_11380+3975h
call	dword ptr seg_11380+398Dh

loc_1F26:
mov	ax, 3
int	10h		; - VIDEO - SET	VIDEO MODE
			; AL = mode
mov	si, ds:3CBCh
or	si, si
jz	short loc_1F3E

loc_1F33:
lodsb
or	al, al
jz	short loc_1F3E
mov	ah, 0Eh
int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
			; AL = character, BH = display page (alpha modes)
			; BL = foreground color	(graphics modes)
jmp	short loc_1F33

loc_1F3E:
mov	ax, 0E0Dh
int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
			; AL = character, BH = display page (alpha modes)
			; BL = foreground color	(graphics modes)
mov	ax, 0E0Ah
int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
			; AL = character, BH = display page (alpha modes)
			; BL = foreground color	(graphics modes)
mov	dl, 0FFh
mov	ax, 0C06h
int	21h		; DOS -	CLEAR KEYBOARD BUFFER
			; AL must be 01h, 06h, 07h, 08h, or 0Ah.
mov	ah, 4Ch
int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
start endp		; AL = exit code




sub_1F53 proc near
call	sub_EE70
sub_1F53 endp




sub_1F56 proc near
call	sub_DF4C
call	sub_DF7D
mov	si, 1AE4h
mov	bp, 0D1EFh
call	sub_DF67
jmp	sub_3667
sub_1F56 endp




sub_1F68 proc near
mov	cx, es:[di]
shr	cx, 1
mov	bx, di

loc_1F6F:
mov	ax, es:[di]
add	ax, bx
stosw
loop	loc_1F6F
retn
sub_1F68 endp

;align 10h



sub_1F80 proc near
call	sub_1FA1
call	sub_2039
call	sub_F923
call	sub_D04A
call	sub_D04A
xor	ax, ax
mov	es, ax
assume es:nothing
mov	ax, es:46Ch
mov	ds:0D824h, ax
mov	ds:0D826h, ax
mov	ds:0D828h, ax
retn
sub_1F80 endp




sub_1FA1 proc near
push	ds
pop	es
assume es:seg001
mov	di, 4948h
mov	si, 0BAh ; '�'
call	sub_10F89
mov	cx, 18Ch
mov	si, di

loc_1FB1:
lodsw
xchg	ah, al
stosw
loop	loc_1FB1
mov	di, 4880h
mov	cx, 63h	; 'c'
mov	si, 494Ah

loc_1FC0:
xor	ax, ax
mov	dx, 1
mov	bx, [si]
shl	bx, 1
div	bx
cmp	[si], dx
adc	ax, 0
stosw
add	si, 8
loop	loc_1FC0
mov	si, 0BFh ; '�'
call	sub_10F89
mov	ax, di
add	ax, 62FCh
mov	ds:0DCFEh, ax
mov	word ptr ds:0DD00h, es
push	ds
pop	es
mov	di, 0AA76h
mov	si, 0BDh ; '�'
call	sub_10F70
call	sub_1F68
mov	si, 0BCh ; '�'
call	sub_10F89
mov	ds:0AA72h, di
mov	word ptr ds:0AA74h, es
call	sub_1F68
les	ax, dword ptr seg_11380+39B7h
assume es:nothing
mov	ds:47ACh, ax
mov	word ptr ds:47AEh, es
mov	cx, 1D4Ch
call	sub_10FCF
les	ax, dword ptr seg_11380+39B7h
mov	ds:47B0h, ax
mov	word ptr ds:47B2h, es
mov	cx, 0ADD4h
call	sub_10FCF
call	sub_EE89
jmp	sub_E007
sub_1FA1 endp

db 8 dup(0)
word_2037 dw 0



sub_2039 proc near
mov	ax, 3Ah	; ':'
call	sub_E00E
push	ds
pop	es
assume es:seg001
mov	di, 4C60h
push	di
mov	ax, 7
mov	cx, 100h
rep stosw
pop	di
les	si, ds:0DBB0h
assume es:nothing
mov	cx, 0C5F9h

loc_2055:
lods	byte ptr es:[si]
mov	bx, ax
shl	bx, 1
inc	word ptr [bx+di]
loop	loc_2055
mov	si, 100h

loc_2062:
mov	dx, [si+2]
mov	bx, [si+4]
call	sub_D495
mov	[si+2],	dx
mov	[si+6],	di
or	byte ptr es:[di], 40h
mov	es, word ptr ds:0DBB2h
mov	al, es:[di]
mov	[si+10h], al
xor	bx, bx
mov	bl, al
shl	bx, 1
mov	ax, [bx+4C60h]
mov	cl, 4
shr	ax, cl
mov	[si+11h], al
add	si, 1Ch
cmp	byte ptr [si], 0FFh
jnz	short loc_2062
mov	di, 100h

loc_209B:
mov	bp, 1E0h
mov	dx, [di+2]
mov	bx, [di+4]
call	sub_84D3
add	di, 1Ch
cmp	byte ptr [di], 0FFh
jnz	short loc_209B
retn
sub_2039 endp

mov	[si+4],	di
mov	[si+6],	dx
mov	[si+8],	bx
mov	al, [di]
mov	ah, [si+12h]
and	ax, 700Fh
cmp	al, 3
jbe	short loc_20D6
xor	ah, 80h
cmp	al, 5
jbe	short loc_20D6
xor	ah, 80h
cmp	al, 9
jbe	short loc_20D6
xor	ah, 80h

loc_20D6:
or	al, ah
mov	[si+12h], al
retn
db 0DEh, 2, 0E3h, 2, 4Ah, 9, 0F8h, 2, 0FBh
db 2, 0E3h, 2, 0F8h, 2,	0FEh, 2



sub_20EC proc near
mov	seg_11380+289Eh, 8Ch ; '�'
mov	seg_11380+28E7h, 1
jz	short loc_2162
call	sub_CC20
mov	ax, 3E8h
mov	si, 1

loc_2101:
push	si
mov	bp, 2C1h
call	sub_DFD2
call	sub_CCB0
pop	ax
push	ax
call	sub_CA1F
pop	si
call	sub_FD24
jz	short loc_2162
push	si
mov	ax, 320h
mov	ax, 0FA0h
call	sub_FC80
pushf
call	sub_27E1
call	sub_CAE4
call	sub_CCBD
popf
pop	si
jz	short loc_2162
inc	si
cmp	si, 8
jbe	short loc_2101
mov	bp, 301h
mov	al, 10h
call	sub_DFD8
mov	ax, 0C8h ; '�'
call	sub_FC80
mov	bl, 0Ch
call	sub_57C1
mov	byte ptr ds:46DFh, 1
mov	ax, 4B0h
call	sub_FC80
call	sub_5820
mov	byte ptr ds:46DFh, 0
mov	bp, 0C0ADh
mov	al, 10h
call	sub_DFD8

loc_2162:
mov	es, word ptr ds:0DBD8h
call	dword ptr seg_11380+38D5h
call	sub_CAE4
mov	seg_11380+227Dh, 0
mov	seg_11380+0C5h,	0
call	sub_27E1
mov	seg_11380+28E7h, 0
mov	byte ptr ds:0DBE6h, 6
inc	seg_11380+115h
mov	dx, 200Ah
mov	bx, 180h
jmp	sub_27C0
sub_20EC endp

push	si
call	sub_DF7D
add	si, si
mov	bp, cs:[si+20Ah]
call	bp
pop	ax
add	ax, 117h
call	sub_EF38
call	sub_B7D1
call	sub_A77F
jmp	sub_B7D1
xor	cx, cx


; Attributes: thunk

sub_21B0 proc near
jmp	sub_2914
sub_21B0 endp

mov	cx, 20h	; ' '
call	sub_21B0
call	sub_D777
call	sub_D72A
mov	ax, 2Ch	; ','
call	sub_E00E
jmp	sub_D7BA
jmp	loc_26BE
jmp	loc_287D
jmp	loc_263A
call	sub_DF7D
mov	al, 1Bh
jmp	sub_E1C2



sub_21D9 proc near
jz	short loc_2201
call	sub_FD1E
call	sub_DF4C
call	sub_DF7D
mov	ax, 18h
call	dword ptr seg_11380+3939h
mov	bp, 9EFh
call	sub_DFD2
call	sub_CC20

loc_21F4:
call	sub_28E6
call	sub_EB55
jnz	short loc_2201
call	sub_FC33
jnb	short loc_21F4

loc_2201:
pushf
call	sub_2449
popf
retn
sub_21D9 endp

db 2 dup(0), 1Ch, 6, 2 dup(0), 3Ah, 0, 25h
db 6, 1, 3 dup(0), 0ADh, 0C0h, 2 dup(0)
db 3Ah,	0, 66h,	0Fh, 1,	3 dup(0), 4Dh, 6
db 2 dup(0), 30h, 0, 61h, 6, 1,	3 dup(0)
db 58h,	6, 6Fh,	0, 30h,	0, 61h,	6, 1, 3	dup(0)
db 66h,	0Fh, 0A8h, 0, 2	dup(0FFh), 66h,	0Fh
db 1, 3	dup(0),	78h, 6,	2 dup(0), 3Ah, 0
db 84h,	6, 1, 3	dup(0),	0FCh, 0CEh, 2 dup(0)
db 3Ah,	0, 1Bh,	0CFh, 1, 3 dup(0), 0ADh
db 0C0h, 2 dup(0), 3Ah,	0, 66h,	0Fh, 1,	3 dup(0)
db 9Eh,	6, 2 dup(0), 36h, 0, 66h, 0Fh, 90h
db 1, 2	dup(0),	66h, 0Fh, 90h, 0, 30h, 0
db 0AAh, 6, 90h, 1, 2 dup(0), 66h, 0Fh,	0Ch
db 1, 2	dup(0FFh), 0BDh, 6, 1, 3 dup(0)
db 0FDh, 7, 2 dup(0), 3Ah, 0, 5Dh, 8, 0B0h
db 4, 48h, 1, 0CEh, 6, 4Eh, 1, 10h, 0, 4
db 7, 0, 19h, 4Bh, 2, 72h, 9, 4Eh, 2, 10h
db 0, 66h, 0Fh,	85h, 3 dup(0), 8Ah, 9, 58h
db 2, 10h, 0, 66h, 0Fh,	85h, 3 dup(0), 95h
db 9, 62h, 2, 10h, 0, 98h, 7, 58h, 2, 0CAh
db 2, 71h, 7, 0CFh, 2, 10h, 0, 98h, 7, 58h
db 2, 2Eh, 3, 0EEh, 7, 30h, 3, 10h, 0, 66h
db 0Fh,	0C8h, 0, 3Ch, 3, 0A5h, 9, 44h, 3
db 10h,	0, 66h,	0Fh, 85h, 3 dup(0), 0D3h
db 6, 4Eh, 3, 10h, 0, 4, 7, 48h, 26h, 0BEh
db 4, 7Ch, 7, 0C0h, 4, 10h, 0, 66h, 0Fh
db 85h,	3 dup(0), 88h, 7, 0D0h,	4, 2 dup(0FFh)
db 8Dh,	7, 58h,	2, 0Ch,	5, 0A3h, 7, 10h
db 5, 10h, 0, 98h, 7, 58h, 2, 4Ch, 5, 0C6h
db 7, 50h, 5, 10h, 0, 98h, 7, 58h, 2, 88h
db 5, 68h, 8, 8Fh, 5, 10h, 0, 7Bh, 8, 20h
db 3, 0ACh, 5, 86h, 8, 0AEh, 5,	30h, 0,	98h
db 7, 58h, 2, 0EEh, 5, 0ADh, 9,	0F0h, 5
db 30h,	0, 98h,	7, 58h,	2, 14h,	6, 66h,	0Fh
db 2 dup(0), 2 dup(0FFh), 0B6h,	8, 32h,	0
db 1Eh,	6, 0CDh, 0Ah, 1Eh, 6, 10h, 0, 66h
db 0Fh,	0D0h, 7, 4Ch, 6, 0D8h, 6, 2 dup(0)
db 10h,	0, 0FCh, 6, 80h, 0Ch, 0C6h, 6, 40h
db 7, 0C8h, 6, 3Ah, 0, 66h, 0Fh, 90h, 1
db 2 dup(0), 5Ah, 7, 0EEh, 6, 10h, 0, 66h
db 0Fh,	90h, 1,	2 dup(0), 52h, 7, 0FEh,	6
db 10h,	0, 66h,	0Fh, 90h, 1, 2 dup(0), 3Ch
db 7, 0Eh, 7, 10h, 0, 66h, 0Fh,	90h, 1,	2 dup(0)
db 56h,	7, 2Eh,	7, 10h,	0, 66h,	0Fh, 90h
db 1, 2	dup(0),	5Eh, 7,	3Eh, 7,	10h, 0,	66h
db 0Fh,	90h, 1,	2 dup(0), 37h, 7, 4Eh, 7
db 10h,	0, 66h,	0Fh, 90h, 1, 2 dup(0), 47h
db 7, 6Eh, 7, 10h, 0, 66h, 0Fh,	90h, 1,	2 dup(0)
db 0E0h, 7, 7Eh, 7, 10h, 0, 66h, 0Fh, 0B0h
db 4, 0ACh, 7, 0EAh, 6,	0AFh, 7, 10h, 0
db 4, 7, 0E8h, 3, 0CEh,	7, 4Bh,	7, 0CEh
db 7, 10h, 0, 66h, 0Fh,	90h, 1,	2 dup(0)
db 11h,	7, 0DCh, 7, 3Ah, 0, 1Dh, 7, 1, 3 dup(0)
db 6Ah,	7, 1Ch,	8, 3Ah,	0, 66h,	0Fh, 90h
db 1, 2	dup(0),	62h, 7,	3Eh, 8,	10h, 0,	66h
db 0Fh,	90h, 1,	2 dup(0), 66h, 7, 4Eh, 8
db 10h,	0, 66h,	0Fh, 0C8h, 3 dup(0), 0ADh
db 0C0h, 5Eh, 8, 3Ah, 0, 66h, 0Fh, 1, 3	dup(0)
db 6Ah,	7, 5Eh,	8, 36h,	0, 66h,	0Fh, 90h
db 1, 2	dup(0),	0ADh, 0C0h, 0E0h, 8, 38h
db 0, 66h
db 0Fh,	1, 0, 2	dup(0FFh)



sub_2449 proc near
xor	ax, ax
call	dword ptr seg_11380+3939h
retn
sub_2449 endp




sub_2450 proc near
call	sub_FD24
jz	short loc_24CD
call	dword ptr seg_11380+3959h
call	sub_CD87
mov	si, 337h
call	sub_2815

loc_2462:
mov	ax, 18h
call	dword ptr seg_11380+3939h
call	sub_280F
mov	bx, ax
inc	ax
jnz	short loc_2473
jmp	short sub_2450

loc_2473:
call	sub_FCDC
jb	short loc_24CD
call	sub_27E1
call	dword ptr seg_11380+3959h
call	sub_280F
mov	bp, ax
call	sub_DF67
and	byte ptr ds:47D1h, 7Fh
call	sub_58B6
call	sub_280F
mov	bx, ax
call	sub_FCDC
jb	short loc_24CD
call	sub_280F
or	ax, ax
js	short loc_24AC
mov	bp, 0F66h
call	sub_DFD8
call	sub_DFC4
call	sub_594C

loc_24AC:
call	sub_DF4C
or	byte ptr ds:47D1h, 80h
call	sub_FC33
jb	short loc_24CD
call	sub_280F
clc
call	ax
jb	short loc_24CD
call	sub_280F
or	ax, ax
jz	short loc_2462
call	sub_FCC0
jnb	short loc_2462

loc_24CD:
pushf
call	sub_B855
mov	es, word ptr ds:0DBD8h
call	dword ptr seg_11380+38D5h
popf
pushf
call	sub_2449
call	sub_E8D1
mov	word ptr seg_11380+2, 2
call	sub_27E1
popf
retn
sub_2450 endp

call	sub_CC27
mov	ax, 15h
jmp	sub_E8EB
call	sub_DF4C

loc_24F8:
call	sub_FC33
jb	short locret_251C
call	sub_E8C4
jz	short loc_24F8
call	sub_E39D
cmp	word ptr ds:0DBCEh, 8
jb	short loc_2516
cmp	byte ptr ds:0DBCBh, 0
jz	short loc_2516
call	sub_CD87

loc_2516:
call	sub_EB55
jz	short loc_24F8
clc

locret_251C:
retn
mov	al, 0Ah
call	loc_CC65
mov	ax, 16h
jmp	sub_E8EB
call	sub_DF7D
mov	ax, 17h
jmp	sub_E8EB
call	sub_DF4C

loc_2534:
call	sub_FC33
jb	short locret_251C
call	sub_E8C4
jz	short loc_2534
call	sub_E39D
call	sub_EB55
jz	short loc_2534
clc
retn
call	sub_2449
call	sub_DF7D
mov	ax, 18h
jmp	sub_E8EB
jmp	short loc_258D
db 90h,	0E8h, 23h, 0BAh, 0BEh, 0F0h, 14h
db 0EBh, 6, 0E8h, 1Bh, 0BAh, 0BEh, 0F8h
db 14h,	0B8h, 1Ch, 0, 0E8h, 0A3h, 0BAh,	0E9h
db 7Dh,	0BBh, 0E8h, 0DBh, 0B9h,	0E8h, 0D5h
db 0FEh, 0B8h, 0Fh, 0, 0E9h, 71h, 0C3h,	0E8h
db 0CCh, 0FEh, 0E8h, 0DEh, 0B9h, 0E8h, 35h
db 0C3h, 72h, 7, 83h, 3Eh, 0E8h, 0DBh, 56h
db 75h,	0F4h

locret_258C:
retn

loc_258D:
call	sub_2449
call	sub_DF5E

loc_2593:
call	sub_E8B8
jb	short locret_258C
call	sub_EB55
jz	short loc_2593
retn
mov	ax, 10h
jmp	short loc_25C3
mov	ax, 11h
jmp	short loc_25C3
call	sub_CAE4
mov	al, 1
mov	ds:46DFh, al
mov	bl, 12h
call	loc_5772
mov	ax, 12h
jmp	short loc_25C3
mov	word ptr seg_11380+4, 2
mov	ax, 13h

loc_25C3:
add	word ptr ds:0DBDAh, 1E0h
jmp	sub_E8EB
mov	byte ptr ds:46D7h, 3Fh ; '?'
call	loc_57D1
xor	bp, bp
mov	si, 70Ch
call	sub_F8F5
call	sub_E930
clc
retn
add	word ptr ds:0DBDAh, 1E0h
mov	ax, 0Eh
jmp	sub_E8EB
mov	al, 8
call	sub_C9E5
jmp	short loc_25FC

loc_25F4:
call	sub_69E6
call	sub_6807
jnz	short locret_2606

loc_25FC:
call	sub_E8C4
jnz	short loc_25F4
call	sub_FC33
ja	short loc_25F4

locret_2606:
retn
mov	al, 56h	; 'V'

loc_2609:
jmp	sub_E1C2
mov	al, 57h	; 'W'
jmp	short loc_2609
call	sub_DF7D
mov	al, 58h	; 'X'
jmp	short loc_2609
mov	al, 59h	; 'Y'
jmp	short loc_2609
call	sub_DF7D
mov	al, 5Ah	; 'Z'
jmp	short loc_2609
mov	al, 5Bh	; '['
jmp	short loc_2609
mov	al, 5Ch	; '\'
jmp	short loc_2609
mov	al, 5Dh	; ']'
jmp	short loc_2609
mov	al, 5Eh	; '^'
jmp	short loc_2609
mov	al, 5Fh	; '_'
jmp	short loc_2609
mov	al, 60h	; '`'
jmp	short loc_2609

loc_263A:
call	sub_DF7D
mov	al, 61h	; 'a'
jmp	short loc_2609
mov	dx, 2004h
call	sub_2848
mov	al, 1
jmp	loc_286D
call	sub_DF7D
mov	bx, 1080h
mov	dx, 803h
jmp	loc_2851
mov	al, 7
jmp	loc_286D
call	sub_DFC4
mov	byte ptr ds:0DBE6h, 6
call	sub_E738
mov	word ptr ds:4780h, 190h
call	sub_BDCD
clc
retn
mov	ax, 2Eh	; '.'
call	sub_E00E
mov	si, 1500h
call	sub_E0EB
mov	ax, 1
mov	dx, 54h	; 'T'
mov	bx, 0Bh
call	sub_E0FF
call	sub_E2E2
mov	al, 6
mov	bp, 12h
jmp	loc_286D
mov	bx, 1080h
mov	dx, 802h
mov	word ptr seg_11380+12h,	100h
call	loc_2851
mov	word ptr seg_11380+12h,	0
mov	al, 5
jmp	loc_286D
mov	al, 4
call	sub_CAAB
mov	dx, 804h
mov	bx, 1080h
jmp	loc_2851

loc_26BE:
mov	ax, 30h	; '0'
call	sub_E00E
mov	si, 1526h
call	sub_E0EB
jmp	loc_2830
call	sub_DF7D
mov	bl, 8



sub_26D2 proc near
call	sub_26F0
mov	cx, 0F0h ; '�'
mov	bx, 180h
call	dword ptr seg_11380+38BDh
mov	byte ptr ds:46D7h, 0
mov	ax, 2Eh	; '.'
call	sub_E00E
mov	si, 1500h
jmp	sub_E0EB
sub_26D2 endp




sub_26F0 proc near
mov	ax, 2Eh	; '.'
jmp	loc_5848
sub_26F0 endp

cmp	byte ptr ds:46D7h, 0
jnz	short loc_2724
mov	al, ds:46D6h
inc	ax
cmp	al, 0Bh
jz	short loc_2727
cmp	al, 0Eh
jz	short locret_2737
mov	ah, 0Ah
cmp	al, 0Dh
jz	short loc_2711
mov	ah, 1Eh

loc_2711:
mov	ds:46D7h, ah
mov	bl, al
call	sub_26F0
mov	cx, 0F0h ; '�'
mov	bx, 180h
call	dword ptr seg_11380+394Dh

loc_2724:
jmp	loc_57ED

loc_2727:
mov	ax, 9
jmp	sub_E00E
mov	si, 826h
mov	bp, 9
call	sub_F8F5
clc

locret_2737:
retn
mov	bl, 0Bh
call	sub_26D2
mov	ax, 7
mov	dx, 13h
mov	bx, 4Ah	; 'J'
call	sub_E0FF
clc
retn
mov	si, 826h
mov	bp, 10h
call	sub_F8F5
clc
retn
mov	ax, 30h	; '0'
call	sub_E00E
mov	si, 1470h
mov	al, 0DEh ; '�'
mov	es, word ptr ds:0DBDAh
call	dword ptr seg_11380+38DDh
mov	si, 154Eh
call	sub_E0EB
call	sub_7A78
mov	si, 155Ch
call	sub_E1FF
call	sub_E2E2
mov	al, 0Ah
mov	dx, 3Ah	; ':'
call	sub_2897
jmp	sub_B65E
mov	ax, 30h	; '0'
call	sub_E00E
call	sub_E2E2
call	sub_7A78
mov	dx, 0FFA0h

loc_2795:
push	dx
call	sub_E30E
pop	dx
mov	bx, 0Dh
mov	ax, 5
call	sub_E1D5
mov	ax, 6
call	sub_E1D5
push	dx
call	sub_E3AD
pop	dx
add	dx, 20h	; ' '
jle	short loc_2795
clc
retn
mov	ax, 200h
xor	bx, bx
call	dword ptr seg_11380+397Dh
clc
retn



sub_27C0 proc near
xor	al, al
mov	ds:47A4h, al
mov	ds:46DFh, al
mov	word ptr seg_11380+4, dx
mov	word ptr seg_11380+6, bx
mov	seg_11380+8, dh
mov	al, 1Ch
mul	bh
add	ax, 0E4h ; '�'
mov	word ptr seg_11380+114Eh, ax
jmp	sub_4C44
sub_27C0 endp




sub_27E1 proc near
call	sub_58B6
call	sub_D800
call	sub_29F1
call	sub_B855
call	sub_B7B6
mov	seg_11380+22E3h, 1
mov	byte ptr ds:46D7h, 0
mov	si, 70Ch
call	sub_F92F
mov	si, 3916h
call	sub_F92F
call	sub_290E
mov	si, 826h
jmp	sub_F92F
sub_27E1 endp




sub_280F proc near
mov	si, ds:4854h
lods	word ptr cs:[si]
sub_280F endp




sub_2815 proc near
mov	ds:4854h, si
retn
sub_2815 endp




sub_281A proc near
call	sub_5784
mov	ax, 2Dh	; '-'
call	sub_E00E
xor	ax, ax
xor	dx, dx
mov	bx, 3Ch	; '<'
jmp	sub_E0FF
sub_281A endp

call	sub_281A
; START	OF FUNCTION CHUNK FOR sub_2DD8

loc_2830:
call	sub_E2E2
xor	dx, dx

loc_2835:
mov	al, 2Dh	; '-'
call	sub_2897
mov	byte ptr ds:478Ch, 1
jmp	sub_B65E
; END OF FUNCTION CHUNK	FOR sub_2DD8
call	sub_DF7D
mov	dx, 2002h



sub_2848 proc near
mov	word ptr seg_11380+12h,	0

loc_284E:
mov	bx, 180h

loc_2851:
call	sub_27C0
call	sub_5682
jmp	sub_E2E2
sub_2848 endp

mov	word ptr seg_11380+12h,	2
mov	dx, 2004h
jmp	short loc_284E
mov	dx, 200Ah
call	sub_2848
xor	al, al

loc_286D:
xor	dx, dx
call	sub_2897
jmp	sub_B65E
call	sub_DF7D
mov	al, 62h	; 'b'
jmp	sub_E1C2

loc_287D:
mov	ax, 30h	; '0'
call	sub_E00E
mov	si, 153Ah
call	sub_E0EB
call	sub_E2E2
mov	al, 9
mov	dx, 52h	; 'R'
call	sub_2897
jmp	sub_B65E



sub_2897 proc near
push	dx
xor	ah, ah
mov	ds:47C4h, ax
call	sub_B070
mov	byte ptr ds:478Ch, 1Eh
mov	di, 1BF0h
pop	ax
cmp	[di], ax
jnb	short locret_28BE
add	[di], ax
add	[di+4],	ax
cmp	word ptr [di+4], 140h
jle	short locret_28BE
mov	word ptr [di+4], 140h

locret_28BE:
retn
sub_2897 endp




sub_28BF proc near
mov	ax, 14h
jmp	sub_E8EB
sub_28BF endp




sub_28C5 proc near
call	sub_28BF
call	sub_DFC4
cmp	seg_11380+227Dh, 0
jnz	short loc_28D9
test	seg_11380+3810h, 1
jnz	short loc_28DC

loc_28D9:
call	sub_CC20

loc_28DC:
mov	si, 0A16h
xor	bp, bp
call	sub_F8F5
clc
retn
sub_28C5 endp




sub_28E6 proc near
push	word ptr ds:0DBDAh
call	sub_28F3
pop	word ptr ds:0DBDAh

loc_28F1:
clc
retn
sub_28E6 endp




sub_28F3 proc near
cmp	seg_11380+227Dh, 0
jz	short loc_2900
call	sub_DF5E
jmp	sub_E930

loc_2900:
call	sub_DF4C
call	sub_E8C4
jz	short loc_28F1
call	sub_E3AD
jmp	sub_FABC
sub_28F3 endp




sub_290E proc near
mov	si, 0A16h
jmp	sub_F92F
sub_290E endp




sub_2914 proc near
mov	ax, 2Ch	; ','
call	sub_E00E
call	sub_7A78
call	sub_DF4C
push	cx
call	sub_E302
pop	ax
push	ax
mul	al
shr	ax, 1
mov	dx, ax
neg	dx
push	dx
xor	bx, bx
xor	ax, ax
call	sub_E1D5
mov	ax, 1
add	dx, 130h
call	sub_E1D5
mov	ax, 2
add	dx, 130h
call	sub_E1DD
pop	dx
push	dx
shl	dx, 1
push	dx
shl	dx, 1
add	dx, 45h	; 'E'
mov	ax, 24h	; '$'
mov	bx, 4Eh	; 'N'
call	sub_E213
pop	dx
pop	cx
pop	ax
push	ax
push	cx
add	dx, 3E2h
cmp	ax, 14h
ja	short loc_2975
mov	dx, ax
shl	dx, 1
shl	dx, 1
add	dx, 0F2h ; '�'

loc_2975:
shr	ax, 1
shr	ax, 1
add	ax, 25h	; '%'
mov	bx, 67h	; 'g'
call	sub_E213
pop	dx
pop	ax
neg	dx
shr	dx, 1
shr	dx, 1
shr	dx, 1
shr	dx, 1
add	dx, 80h	; '�'
add	al, 3
mov	bx, 4Fh	; 'O'
call	sub_E213
jmp	sub_E3AD
sub_2914 endp




sub_299D proc near
mov	word ptr seg_11380+2786h, 0C827h
mov	cs:byte_E00C, 2Bh ; '+'
call	near ptr byte_E00B
call	sub_DF4C
mov	si, 1582h
mov	es, word ptr ds:0DBDAh
mov	ax, 2
call	sub_E240
mov	si, 158Ah
mov	ax, 3
call	sub_E240
mov	si, 11DDh
call	sub_E0EB
call	sub_7A70
mov	di, 4856h
xor	ax, ax
push	ds
pop	es
assume es:seg001
mov	cx, 8
rep stosb
mov	si, 0B45h
call	sub_F92F
mov	si, 0B45h
mov	bp, 3
call	sub_F8F5
call	sub_E2E2
mov	al, 3
jmp	sub_C9E5
sub_299D endp




sub_29F1 proc near
call	sub_CB00
mov	cs:byte_E00C, 25h ; '%'
mov	si, 0B45h
call	sub_F92F
cmp	seg_11380+227Dh, 0
jnz	short loc_2A0E
cmp	seg_11380+0FBh,	0
js	short locret_2A14

loc_2A0E:
mov	word ptr ds:3CBEh, 0

locret_2A14:
retn
sub_29F1 endp

mov	si, 4856h
dec	byte ptr [si+7]
cmp	seg_11380+0EAh,	0
jg	short loc_2A2F
mov	bl, [si+7]
cmp	bl, 10h
ja	short loc_2A2F
push	si
call	sub_2BDD
pop	si

loc_2A2F:
mov	ax, ds:479Eh
or	al, ds:46EBh
or	ax, ax
jz	short loc_2A3B
retn

loc_2A3B:
dec	word ptr [si+4]
jns	short loc_2A87
dec	byte ptr [si+6]
jns	short loc_2A56
call	sub_1029C
and	al, 7Fh
mov	[si+6],	al
mov	al, ah
xor	ah, ah
mov	[si+4],	ax
jmp	short loc_2A87

loc_2A56:
call	sub_1029C
mov	bx, ax
mov	dx, ax
and	bx, 7Fh
cmp	bl, 60h	; '`'
jnb	short loc_2A87
cmp	bl, 30h	; '0'
jb	short loc_2A87
xchg	dl, dh
rol	dh, 1
and	dx, 1FFh
cmp	dx, 140h
jnb	short loc_2A87
mov	ax, bx
and	ax, 7
add	ax, 1Ch
push	si
xor	si, si
call	sub_E4DB
pop	si

loc_2A87:
dec	byte ptr [si]
jns	short loc_2A8E
call	sub_2B0B

loc_2A8E:
mov	di, 3CC0h
mov	cx, [di-2]
jcxz	short locret_2B0A

loc_2A96:
mov	ax, [di+8]
mov	dx, [di+0Ah]
push	cx
cmp	al, 14h
jb	short loc_2AC9
cmp	al, 1Ch
jb	short loc_2AAC
inc	ax
cmp	al, 2Dh	; '-'
jbe	short loc_2AD9
jmp	short loc_2AFF

loc_2AAC:
mov	bx, [di+0Dh]
call	sub_2BBA
call	sub_2BBA
mov	[di+0Dh], bx
mov	ax, word ptr seg_11380
mov	cl, 3
rol	ax, cl
mov	word ptr seg_11380, ax
and	ax, 7
add	al, 14h
jmp	short loc_2AD9

loc_2AC9:
shr	ax, 1
shr	ax, 1
rol	word ptr seg_11380, 1
rcl	ax, 1
rol	word ptr seg_11380, 1
rcl	ax, 1

loc_2AD9:
mov	[di+8],	ax
mov	bl, dh
mov	ax, bx
cbw
mov	bx, ax
mov	ax, dx
cbw
mov	dx, ax
push	di
call	sub_E531
pop	di
cmp	word ptr [di], 140h
jnb	short loc_2AFF
xor	ax, ax
cmp	[di+4],	ax
js	short loc_2AFF
cmp	[di+6],	ax
jns	short loc_2B04

loc_2AFF:
push	di
call	sub_E45A
pop	di

loc_2B04:
pop	cx
add	di, 11h
loop	loc_2A96

locret_2B0A:
retn



sub_2B0B proc near
dec	byte ptr [si+1]
jns	short loc_2B49
test	word ptr seg_11380, 3
jnz	short loc_2B28
mov	byte ptr [si+7], 0Bh
test	word ptr seg_11380, 0Ch
jnz	short loc_2B28
mov	byte ptr [si+7], 11h

loc_2B28:
call	sub_1029C
cmp	byte ptr ds:473Ah, 0
jz	short loc_2B34
and	al, 0EFh

loc_2B34:
mov	cx, ax
mov	bx, 7
call	sub_10287
mov	[si+1],	al
cmp	al, 4
jb	short loc_2B46
or	ch, 40h

loc_2B46:
mov	[si+2],	cx

loc_2B49:
mov	byte ptr [si], 8
mov	al, [si+2]
mov	di, ax
mov	bl, [si+3]
and	ax, 10h
jnz	short loc_2B68
and	bx, 6
mov	si, [bx+15A2h]
add	bx, bx
add	ax, bx
add	al, 4
jmp	short loc_2BA6

loc_2B68:
mov	al, [si+3]
mov	ah, al
and	ax, 0C03Fh
test	ah, 40h
jz	short loc_2B9A
rol	word ptr seg_11380, 1
jnb	short loc_2B9A
mov	cl, 0Ah
or	ah, ah
jns	short loc_2B83
neg	cl

loc_2B83:
add	al, cl
jns	short loc_2B8C
xor	ah, 80h
xor	al, al

loc_2B8C:
cmp	al, 40h	; '@'
jb	short loc_2B95
mov	al, 3Fh	; '?'
xor	ah, 80h

loc_2B95:
or	ah, al
mov	[si+3],	ah

loc_2B9A:
add	al, 0E0h ; '�'
call	sub_7068
mov	dh, bl
mov	si, dx
mov	ax, 14h

loc_2BA6:
and	di, 0Ch
mov	bx, [di+1594h]
mov	dx, [di+1592h]
call	sub_E4DB
mov	word ptr [di+0Dh], 0
retn
sub_2B0B endp




sub_2BBA proc near

; FUNCTION CHUNK AT 0D05 SIZE 00000008 BYTES

xor	ax, ax
mov	al, dl
or	al, al
js	short loc_2BD5
sub_2BBA endp




sub_2BC2 proc near
add	al, bl
mov	cl, 5
ror	ax, cl
mov	cl, 3
shr	ah, cl
mov	bl, ah
mov	dl, al
xchg	bl, bh
xchg	dl, dh
retn
sub_2BC2 endp

; START	OF FUNCTION CHUNK FOR sub_2BBA

loc_2BD5:
neg	al
call	sub_2BC2
neg	dh
retn
; END OF FUNCTION CHUNK	FOR sub_2BBA



sub_2BDD proc near
mov	al, bl
mov	bx, 180h
mov	cx, 54h	; 'T'
mov	dl, 37h	; '7'
jz	short loc_2BF3
dec	dx
cmp	al, 0Ah
jz	short loc_2BF3
call	dword ptr seg_11380+3951h
retn

loc_2BF3:
call	near ptr byte_E00B
mov	al, dl
xor	ah, ah
sub_2BDD endp




sub_2BFA proc near
call	sub_E0C4
lea	dx, [si+6]
call	dword ptr seg_11380+38BDh
call	sub_DFC4
mov	ax, 35h	; '5'
call	sub_E0C4
lea	dx, [si+6]
call	dword ptr seg_11380+394Dh
retn
sub_2BFA endp




sub_2C15 proc near
call	sub_582C
call	sub_5841
call	sub_5889
inc	seg_11380+227Dh
mov	cx, 3

loc_2C25:
push	cx
mov	bl, 28h	; '('
call	sub_5841
call	sub_585C
call	sub_DFC4
mov	byte ptr ds:46D7h, 20h ; ' '

loc_2C36:
mov	bp, 391Dh
mov	ax, 3
call	sub_10223
cmp	byte ptr ds:46D7h, 10h
jnb	short loc_2C36
pop	cx
loop	loc_2C25

loc_2C49:
mov	bp, 391Dh
mov	ax, 3
call	sub_10223
cmp	byte ptr ds:46D7h, 0
jnz	short loc_2C49
dec	seg_11380+227Dh
retn
sub_2C15 endp




sub_2C5E proc near
cmp	byte ptr ds:47A9h, 0
jnz	short locret_2C6D
xor	ax, ax
cmp	ds:46D9h, al
jns	short loc_2C6E

locret_2C6D:
retn

loc_2C6E:
mov	ds:473Bh, al
mov	ds:46ECh, al
cmp	seg_11380+0FBh,	al
jns	short loc_2C80
call	sub_FA82
jmp	loc_373B

loc_2C80:
call	sub_F18D
call	sub_2C15
call	sub_FA82
call	sub_B7B6
mov	word ptr seg_11380+2, 16C5h
call	sub_2D36
mov	seg_11380+11CAh, 1
call	sub_BE10
mov	word ptr ds:47C4h, 0FFFFh
mov	al, 80h	; '�'
xchg	al, ds:46D9h
xor	ah, ah
push	ax
add	ax, 0BAh ; '�'
call	sub_B7D1
call	sub_A77F
call	sub_B7D1
mov	si, 2254h
call	sub_99EB
call	sub_F923
pop	ax
mov	bx, 225Dh
xlat
or	al, al
js	short loc_2CF2
call	sub_B070
les	si, ds:0DBB0h
assume es:nothing
lods	word ptr es:[si]
shr	ax, 1
sub	ax, 3
mov	dx, word ptr seg_11380+2254h
mov	bx, word ptr seg_11380+2256h
inc	dx
inc	bx
push	ax
call	sub_E1CD
pop	ax
inc	ax
call	sub_E0FF
call	dword ptr seg_11380+3935h
call	sub_BDCD

loc_2CF2:
call	sub_E39D
mov	byte ptr ds:4727h, 0
call	sub_F611
mov	byte ptr ds:47A7h, 1
mov	bp, 20A2h
mov	bx, 0F66h
call	sub_F1F3
jmp	sub_FABC
sub_2C5E endp

mov	bx, 0F66h
mov	bp, 20B6h
jmp	sub_F1F3
mov	cl, 0FFh

loc_2D19:
push	cx
cmp	byte ptr ds:46D9h, 0
jz	short loc_2D32
mov	ax, 0Dh
call	loc_2D3C
mov	byte ptr ds:46D9h, 0
mov	word ptr ds:47C4h, 0

loc_2D32:
pop	cx
jmp	loc_D280



sub_2D36 proc near
call	sub_CC2E
mov	ax, 0Ch

loc_2D3C:
push	ax
call	sub_C675
pop	ax
mov	bp, 181Eh
jmp	sub_E7CB
sub_2D36 endp




sub_2D47 proc near
call	sub_CC20
call	sub_DF4C
mov	ax, 0Bh
call	sub_E8EB
call	sub_E3AD
call	sub_DFC4
mov	cx, 5

loc_2D5C:
push	cx

loc_2D5D:
call	sub_E8C4
jz	short loc_2D5D
mov	al, 3Ch	; '<'
mov	bp, 1797h
call	sub_DFD8
pop	cx
loop	loc_2D5C
call	sub_E8D1
call	sub_E2E2
jmp	sub_36EE
sub_2D47 endp

call	sub_D189
call	sub_B7B6
call	sub_36EE
mov	al, 4
xor	dx, dx
mov	bp, 0ED0h
jmp	sub_DFD8

loc_2D89:
xor	ax, ax
mov	ds:47C3h, al
call	sub_D18E
mov	byte ptr ds:47A6h, 0FFh
mov	al, 4
xor	dx, dx
call	sub_376A
jmp	sub_4C81
mov	al, 3Bh	; ';'
call	sub_E1C2
mov	ax, 1
call	sub_E0FF
call	sub_2DD8
mov	ax, 3Bh	; ';'
call	sub_E00E
mov	ax, 2
xor	dx, dx
xor	bx, bx
call	sub_E0FF
call	sub_3667
mov	si, 1D1Eh
call	sub_F5FB
call	sub_B7C5
mov	seg_11380+1C06h, 80h ; '�'
mov	bp, 20C2h
mov	bx, 0EB9h
jmp	sub_F208



sub_2DD8 proc near

; FUNCTION CHUNK AT 0960 SIZE 00000012 BYTES

test	word ptr seg_11380+10h,	80h
jnz	short loc_2DE3
jmp	loc_2830

loc_2DE3:
call	sub_E2E2
mov	word ptr ds:47C4h, 7
call	sub_B067
mov	byte ptr ds:478Ch, 0
add	word ptr seg_11380+1BF2h, 0Fh
call	sub_B65E
call	sub_B85E
mov	word ptr seg_11380+22A6h, 0FFFFh
inc	byte ptr ds:47C3h
mov	word ptr ds:47C6h, 1
call	sub_E2E2
mov	dx, 2Dh	; '-'
jmp	loc_2835
sub_2DD8 endp

mov	ax, word ptr seg_11380+2
mov	bx, ax
and	al, 0Fh
cmp	al, 0Ch
jnb	short nullsub_1
push	bx
cmp	al, 2
jnb	short loc_2E2F
mov	ax, bx
add	al, 2
call	sub_2E82

loc_2E2F:
pop	ax
and	al, 0F0h
or	al, 0Ch
jmp	short loc_2E54
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS KEYPAD "+" TO EXPAND]
mov	ax, word ptr seg_11380+2
mov	bx, ax
and	al, 0Fh
cmp	al, 0Bh
jb	short nullsub_1
push	bx
cmp	al, 0Dh
jnb	short loc_2E4E
mov	ax, bx
add	al, 2
call	sub_2E82

loc_2E4E:
pop	ax
and	al, 0F0h
add	ax, 10h

loc_2E54:
cmp	seg_11380+2Ah, 14h
jnz	short sub_2E65
call	sub_2E65
sub	word ptr ds:0DC5Ah, 3E8h
retn



sub_2E65 proc near
push	ax
call	sub_57DA
call	sub_6BD0
call	sub_D18E
pop	cx
sub	cx, word ptr seg_11380+2
call	sub_2EA9
sub_2E65 endp

; START	OF FUNCTION CHUNK FOR sub_35D7

loc_2E77:
call	sub_FA82
mov	al, 2Ah	; '*'
call	sub_376A
jmp	sub_F633
; END OF FUNCTION CHUNK	FOR sub_35D7



sub_2E82 proc near
call	loc_582F
call	sub_5841
cmp	byte ptr ds:46D7h, 0
jz	short loc_2E92
jmp	sub_5889

loc_2E92:
jmp	sub_585C
sub_2E82 endp

mov	cx, 10h

loc_2E98:
push	cx
mov	cx, 1
call	sub_2EA9
pop	cx
cmp	seg_11380+2Bh, 0
loopne	loc_2E98
jmp	short loc_2E77



sub_2EA9 proc near
mov	byte ptr ds:46DAh, 1
call	sub_D18E
or	cx, cx
jle	short loc_2ED5
push	cx
mov	ax, word ptr seg_11380+146Eh
mov	ds:46DBh, ax
cmp	byte ptr ds:46DDh, 0
jz	short loc_2EC6
call	sub_39F3

loc_2EC6:
inc	word ptr seg_11380+2
mov	byte ptr ds:46DDh, 1
call	sub_39F3
pop	cx
loop	sub_2EA9

loc_2ED5:
mov	byte ptr ds:46DAh, 0
retn
sub_2EA9 endp




sub_2EDB proc near
mov	seg_11380+100Bh, 1
retn
sub_2EDB endp




sub_2EE1 proc near
dec	seg_11380+122Ah
mov	si, 1021h
call	sub_2F2B
sub_2EE1 endp




sub_2EEB proc near
mov	seg_11380+0FE8h, 9
retn
sub_2EEB endp

db 18h,	2, 0DCh, 2, 2 dup(0)



sub_2EF7 proc near
and	seg_11380+122Eh, 7Fh
jmp	sub_4ECB
sub_2EF7 endp




sub_2EFF proc near
and	seg_11380+124Ah, 7Fh
and	seg_11380+1247h, 7Fh
mov	word ptr seg_11380+121Dh, 0FFFFh
mov	ax, 1321h
jmp	sub_3641
sub_2EFF endp




sub_2F15 proc near

; FUNCTION CHUNK AT 26DA SIZE 00000055 BYTES

mov	seg_11380+0FD8h, 5
call	sub_2EEB
mov	ax, 10Bh
jmp	loc_45AA
sub_2F15 endp




sub_2F23 proc near
mov	seg_11380+0FD8h, 0Ah
mov	si, 1069h
sub_2F23 endp




sub_2F2B proc near
lods	word ptr cs:[si]
or	ax, ax
jz	short locret_2F38
mov	di, ax
call	sub_612B
jmp	short sub_2F2B

locret_2F38:
retn
sub_2F2B endp

db 4Ch,	3, 68h,	3, 84h,	3, 2 dup(0)



sub_2F41 proc near
mov	seg_11380+0FFh,	0
mov	seg_11380+2Ah, 15h
mov	seg_11380+0FDBh, 1
mov	word ptr seg_11380+1018h, 200Bh
mov	word ptr seg_11380+101Ah, 180h
mov	seg_11380+0FE8h, 0Ah
mov	seg_11380+0D5h,	0FFh
call	sub_3F60
or	seg_11380+0Ah, 1
mov	ax, 1
jmp	sub_48BE
sub_2F41 endp




sub_2F74 proc near
and	seg_11380+1245h, 7Fh
mov	word ptr seg_11380+1217h, 0FFFFh
jmp	sub_4ECB
sub_2F74 endp




sub_2F82 proc near
mov	seg_11380+0FFBh, 1
sub_2F82 endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_2. PRESS KEYPAD "+" TO EXPAND]



sub_2F88 proc near
mov	di, 800h
jmp	sub_612B
sub_2F88 endp




sub_2F8E proc near
mov	ax, word ptr seg_11380+2
mov	word ptr seg_11380+1154h, ax
mov	word ptr seg_11380+1018h, 2006h
mov	word ptr seg_11380+0FF8h, 2008h
mov	word ptr seg_11380+0FFAh, 180h
mov	seg_11380+0FE8h, 0Ah
mov	word ptr seg_11380+0FEAh, 180h
mov	word ptr seg_11380+1201h, 109h
mov	al, 14h
call	sub_8E48
or	seg_11380+0Ah, 10h
mov	si, 10F7h
jmp	sub_2F2B
sub_2F8E endp

db 0ECh, 5, 0D0h, 5, 8,	6, 40h,	6, 5Ch,	6
db 2 dup(0)



sub_2FD3 proc near
mov	ax, 4
call	sub_48BE
mov	ax, 1409h
jmp	loc_45AA
sub_2FD3 endp




sub_2FDF proc near
cmp	seg_11380+0FE8h, 8
jz	short loc_2FF1
mov	seg_11380+0FE8h, 0Ah
mov	word ptr seg_11380+0FEAh, 180h

loc_2FF1:
mov	ax, 280Ah
jmp	loc_45AA
sub_2FDF endp




sub_2FF7 proc near
mov	seg_11380+0FDBh, 0FFh
retn
sub_2FF7 endp




sub_2FFD proc near
or	seg_11380+1067h, 2
retn
sub_2FFD endp




sub_3003 proc near
mov	di, 3D8h
jmp	sub_612B
sub_3003 endp




sub_3009 proc near
mov	al, 0Ah
call	sub_8E48
mov	ax, 1313h
call	sub_3641
mov	al, seg_11380+1057h
or	al, 10h
and	al, 0FDh
mov	seg_11380+1057h, al
mov	al, seg_11380+28h
add	al, 2
mov	seg_11380+1178h, al
mov	si, 115Ch
jmp	sub_2F2B
sub_3009 endp

db 0F4h, 3, 10h, 4, 0BCh, 3, 8Ch, 8, 2 dup(0)



sub_3036 proc near
inc	seg_11380+1141h
mov	seg_11380+0FE8h, 2
mov	word ptr seg_11380+0FEAh, 180h
mov	ax, 105h
jmp	sub_48BE
sub_3036 endp




sub_304B proc near
or	seg_11380+0Ah, 40h
mov	al, 28h	; '('
call	sub_8E48
jmp	sub_2EEB
sub_304B endp




sub_3058 proc near
and	seg_11380+1259h, 7Fh
mov	word ptr seg_11380+1211h, 0FFFFh
jmp	sub_4ECB
sub_3058 endp




sub_3066 proc near
or	seg_11380+0Ah, 20h
mov	ax, 12FBh
call	sub_3641
mov	si, 11A7h
jmp	sub_2F2B
sub_3066 endp

db 0E4h, 7, 90h, 7, 0ACh, 7, 54h, 8, 1Ch
db 8, 2	dup(0)



sub_3083 proc near
mov	seg_11380+1038h, 5
add	seg_11380+11D0h, 0Ch
call	sub_3995
add	ax, 3
mov	word ptr seg_11380+1156h, ax
inc	seg_11380+1141h
retn
sub_3083 endp




sub_309B proc near
mov	seg_11380+0FFh,	0
mov	seg_11380+2Ah, 60h ; '`'
mov	di, 11Ch
call	sub_5F7E
mov	dl, 2
mov	word ptr seg_11380+1048h, dx
mov	word ptr seg_11380+104Ah, bx
retn
sub_309B endp

byte_30B6 db 0E9h
off_30B7 dw offset sub_2BFA
dw offset sub_2EE1
dw offset sub_2EF7
dw offset sub_2EFF
dw offset sub_2F15
dw offset sub_2F23
dw offset nullsub_2
dw offset sub_2F74
dw offset sub_2F82
dw offset nullsub_2
dw offset sub_2F88
dw offset sub_2F8E
dw offset sub_2FD3
dw offset sub_2FDF
dw offset sub_2FF7
dw offset nullsub_2
dw offset sub_2FFD
dw offset sub_3003
dw offset sub_3009
dw offset sub_3036
dw offset sub_304B
dw offset sub_3058
dw offset sub_3066
dw offset sub_3083
dw offset sub_309B
dw offset byte_30B6
dw offset nullsub_2
dw offset nullsub_2



sub_30EF proc near
cmp	al, seg_11380+2Ah
jbe	short locret_3112
mov	seg_11380+2Ah, al
mov	seg_11380+0FFh,	0
call	sub_D04A
mov	bl, seg_11380+2Ah
cmp	bl, 6Ch	; 'l'
ja	short locret_3112
xor	bh, bh
shr	bx, 1
call	cs:off_30B7[bx]

locret_3112:
retn
sub_30EF endp




sub_3113 proc near
mov	bp, 1269h
xor	dx, dx
xor	bx, bx
call	sub_3128
cmp	bx, 3E8h
jb	short locret_3127
inc	seg_11380+0C2h

locret_3127:
retn
sub_3113 endp




sub_3128 proc near
mov	di, 138h
mov	cx, 3

loc_312E:
push	cx
call	sub_84ED
pop	cx
add	di, 1Ch
loop	loc_312E
retn
sub_3128 endp

cmp	byte ptr [si+3], 4
jnz	short locret_314B
test	byte ptr [si+19h], 4
jz	short locret_314B
add	bl, [si+1Ah]
adc	bh, 0

locret_314B:
retn



sub_314C proc near
cmp	al, 4
jnz	short loc_315D
cmp	seg_11380+2Ah, 15h
jb	short loc_315D
cmp	seg_11380+2Ah, 20h ; ' '
retn

loc_315D:
clc
retn
sub_314C endp

;align 2
db 2, 10h, 3, 1, 7, 2, 4, 5, 7 dup(0Fh)
db 0Ah,	0Bh, 9,	8, 2, 2	dup(4),	8, 2, 0Bh
db 2, 3, 3 dup(2), 0Bh,	2 dup(2), 4, 8,	2
db 5, 2, 9, 2, 7, 2, 0Ah, 4, 8,	2, 5, 2
db 0Bh,	3 dup(2), 1, 12h, 2, 10h, 3, 1,	0FFh
db 2, 4, 5, 7 dup(0Fh),	0Ah, 0Bh, 9, 8,	14h
db 16h,	0, 2, 5, 1, 2, 4, 5, 7,	3 dup(2)
db 1, 3	dup(2),	7, 2, 5, 4, 8, 2, 4, 3 dup(2)
db 1, 2	dup(2),	0FFh, 0Eh, 10h,	0FFh, 0
db 2, 3, 5, 7, 6, 8, 2,	7, 2, 6, 2, 7, 2
db 5, 2, 6, 4, 8, 2, 7,	2, 6, 0FFh, 2, 7
db 0Ah,	0Ch, 4,	2, 7, 0Ch, 0Ah,	2, 5, 2
db 7, 0FFh, 0, 8, 9, 7 dup(0FFh), 0, 1,	8
db 2, 0, 2, 1, 0, 8, 5,	0, 1, 3, 0FFh, 4
db 8, 2, 0, 2, 0, 2, 1,	0, 8, 5, 0FFh, 1
db 3, 0FFh, 4, 6, 0, 8,	2, 0, 0FFh, 2, 1
db 2, 0, 2, 1, 4, 8, 2,	2 dup(0), 5, 4,	0
db 1, 3, 2 dup(8), 2, 0, 2, 3, 2, 0, 2,	8
db 4, 8, 2, 0, 2, 0, 0FFh, 2, 1, 0, 0Ah
db 3, 1, 5, 0, 8, 2, 5,	2, 5, 2, 0, 2, 5
db 4, 8, 2, 5, 2, 1, 0,	0Ah, 2,	1, 5, 6
db 0, 8, 2, 0, 0FFh



sub_3262 proc near
mov	word ptr seg_11380+2220h, 1FBAh
retn
sub_3262 endp




sub_3269 proc near
mov	word ptr seg_11380+2220h, 1FAEh
retn
sub_3269 endp

; START	OF FUNCTION CHUNK FOR sub_35D7

loc_3270:
call	sub_3269
or	byte ptr ds:46EBh, 40h
jmp	short loc_3286

loc_327A:
call	sub_77CA
call	sub_DF5E
mov	si, 18E9h
call	sub_E421

loc_3286:
mov	ax, 0Fh
call	sub_DF5E
call	sub_B631
call	sub_BDCD
call	sub_B7D1
jmp	sub_DF4C
; END OF FUNCTION CHUNK	FOR sub_35D7



sub_3298 proc near
lods	byte ptr cs:[si]
mov	seg_11380+4, al
mov	ds:4778h, si
lods	byte ptr cs:[si]
xor	ah, ah
add	si, ax
mov	ds:477Ah, si

loc_32AB:
call	sub_3262
call	sub_4C81
jmp	sub_35D7
sub_3298 endp

; START	OF FUNCTION CHUNK FOR sub_35D7

loc_32B4:
call	sub_3269
push	si
call	sub_AB5A
pop	si
lods	byte ptr cs:[si]
inc	word ptr ds:477Ah
xor	ah, ah
cmp	ax, ds:47C4h
jz	short loc_32D8
cmp	ds:47A4h, ah
jns	short loc_32D8
push	ax
mov	bp, 2DB1h
call	sub_DF67
pop	ax

loc_32D8:
jmp	sub_B631

loc_32DB:
call	sub_3262
lods	byte ptr cs:[si]
inc	word ptr ds:477Ah
xor	ah, ah
mov	ds:47C4h, ax
call	sub_B65E
call	sub_BA5B
jmp	sub_35D7

loc_32F2:
call	sub_3262
call	sub_39B0
cmp	al, 0Dh
jnb	short loc_3304
mov	cx, 1
call	sub_2EA9
jmp	short loc_32F2

loc_3304:
call	sub_57DA
call	sub_5682
call	sub_E2E2
mov	si, 2290h
jmp	short loc_3335

loc_3312:
call	sub_3262
call	sub_5682
mov	es, word ptr ds:0DBDEh
push	ds
mov	ds, word ptr ds:0DBDAh
assume ds:nothing
xor	dx, dx
mov	bx, 32h	; '2'
mov	bp, 3
call	dword ptr ss:seg_11380+3949h
pop	ds
call	sub_E30E
mov	si, 2298h

loc_3335:
mov	ax, 27h	; '''
call	sub_E00E
call	sub_E0EB
call	sub_DFC4
jmp	sub_E3AD

locret_3344:
retn
; END OF FUNCTION CHUNK	FOR sub_35D7
off_3345 dw offset sub_3298
dw offset loc_32B4
dw offset loc_32AB
dw offset loc_32DB
dw offset locret_3344
dw offset loc_32F2
dw offset loc_3312
dw offset loc_3270
dw offset loc_327A
dw offset loc_335D
dw offset loc_3399
dw offset loc_354C
; START	OF FUNCTION CHUNK FOR sub_35D7

loc_335D:
call	sub_3262
mov	al, 10h
mov	bp, 1498h
jmp	sub_DFD8
; END OF FUNCTION CHUNK	FOR sub_35D7
call	sub_3298
mov	byte ptr ds:0E8h, 0
mov	word ptr ds:1152h, 0FFFFh
call	sub_F633
jmp	loc_2DE3
mov	ax, 1Eh
call	sub_E00E
xor	ax, ax

loc_3384:
push	ax
xor	bx, bx
xor	dx, dx
call	sub_E0FF
pop	ax
inc	ax
cmp	ax, 3
jb	short loc_3384
call	sub_BA5B
jmp	loc_2DE3
; START	OF FUNCTION CHUNK FOR sub_35D7

loc_3399:
mov	si, 176Bh
call	sub_F92F
mov	cx, 150h
mov	bx, 180h
mov	bp, 1
mov	al, 28h	; '('
call	sub_344E
call	sub_3436
mov	bp, 14ACh
call	sub_DF67
call	dword ptr ds:3959h
mov	cx, 0E4h ; '�'
mov	bx, 129h
xor	bp, bp
mov	al, 30h	; '0'
call	sub_344E
call	dword ptr ds:3935h
call	sub_E3AD
call	sub_3436
call	sub_BA5B
mov	si, 1470h
mov	al, 8Fh	; '�'
mov	es, word ptr ds:0DBDAh
call	dword ptr ds:38DDh
mov	ax, 1Eh
call	sub_E00E
mov	ax, 3
mov	dx, 34h	; '4'
xor	bx, bx
call	sub_E0FF
mov	al, 22h	; '"'
mov	bp, 0F66h
call	sub_DFD8
mov	ax, 12Ch
call	sub_10257
mov	cx, 2Dh	; '-'
mov	bx, 1E0h
xor	bp, bp
mov	al, 20h	; ' '
call	sub_344E
mov	ax, 4
mov	dx, 5Ah	; 'Z'
mov	bx, 40h	; '@'
call	sub_E0FF
call	dword ptr ds:3935h
call	sub_E3AD
call	sub_3436
jmp	loc_365E
; END OF FUNCTION CHUNK	FOR sub_35D7
mov	al, ds:46D7h
mov	bx, ds:0D818h
mov	cx, ds:0D81Ah
call	dword ptr ds:3951h
retn



sub_3436 proc near
inc	byte ptr ds:227Dh

loc_343A:
mov	bp, 1556h
mov	ax, 10h
call	sub_10223
dec	byte ptr ds:46D7h
jnz	short loc_343A
dec	byte ptr ds:227Dh
retn
sub_3436 endp




sub_344E proc near
mov	ds:46D7h, al
mov	ds:0D81Ah, cx
mov	ds:0D818h, bx
sub	sp, cx
push	ss
pop	es
assume es:seg001
mov	di, sp
xor	ax, ax
push	cx
rep stosb
pop	cx
mov	dx, sp
or	bp, bp
jnz	short loc_3471
call	dword ptr ds:38BDh
jmp	short loc_3475

loc_3471:
call	dword ptr ds:394Dh

loc_3475:
add	sp, cx
retn
sub_344E endp




sub_3478 proc near
call	sub_EF5F
mov	ax, ds:11EBh
mov	dx, 0Ah
mov	bx, 9Dh	; '�'
jmp	sub_F064
sub_3478 endp

mov	ax, 1Eh
call	sub_E00E
mov	ax, 5
mov	dx, 40h	; '@'
mov	bx, 34h	; '4'
jmp	sub_E0FF
mov	dx, 200Ah
call	loc_284E
xor	ax, ax
jmp	loc_286D
mov	dx, 2003h
call	loc_284E
mov	al, 1
jmp	loc_286D
mov	dx, 2006h
call	loc_284E
mov	al, 4
jmp	loc_286D
mov	dx, 2004h
call	loc_284E
mov	al, 3
jmp	loc_286D
mov	dx, 3002h
mov	bx, 280h
call	loc_2851
mov	al, 0Bh
jmp	loc_286D
mov	dx, 3002h
mov	bx, 280h
call	loc_2851
mov	al, 0Ah
mov	dx, 3Ah	; ':'
call	sub_2897
jmp	sub_B65E
mov	bx, 1180h
mov	dx, 703h
call	loc_2851
mov	al, 8
jmp	loc_286D
mov	dx, 2008h
call	loc_284E
mov	al, 2
jmp	loc_286D
mov	bx, 1080h
mov	dx, 802h
call	loc_2851
mov	al, 5
jmp	loc_286D
mov	bx, 3F80h
mov	dx, 1005h
call	loc_2851
mov	al, 6
jmp	loc_286D
mov	bx, 1080h
mov	dx, 803h
call	loc_2851
mov	al, 7
jmp	loc_286D
db 0B7h, 15h, 5Dh, 9, 0C9h, 15h, 0D4h, 15h
db 0DFh, 15h, 0EAh, 15h, 0F5h, 15h, 17h
db 16h,	25h, 16h, 30h, 16h, 0ADh, 9, 3,	16h
db 4Ch,	16h, 3Eh, 16h, 0F5h, 9,	0ACh, 14h
db 2 dup(0FFh)
; START	OF FUNCTION CHUNK FOR sub_35D7

loc_354C:
xor	ax, ax
mov	ds:4774h, al
mov	ds:12h,	ax
mov	ds:10h,	ax
dec	ax
mov	ds:22A6h, ax
call	sub_DF7D
inc	byte ptr ds:227Dh
mov	byte ptr ds:0CE80h, 0
call	sub_E36A
mov	ax, 12h
call	dword ptr ds:3939h
call	sub_CC20
mov	word ptr ds:11EBh, 120h
mov	si, 165Ah
call	sub_2815

loc_3580:
mov	byte ptr ds:0DBE7h, 0FFh
call	sub_280F
mov	bx, ax
inc	bx
jz	short loc_35C1
push	ax
call	sub_27E1
call	dword ptr ds:3959h
call	sub_DF7D
pop	bp
call	sub_DF67
inc	word ptr ds:11EBh
call	sub_DF4C
call	sub_3478
mov	al, 3Ah	; ':'
mov	bp, 0F66h
call	sub_DFD8
call	sub_DFC4

loc_35B1:
mov	ax, 258h
call	sub_FC80
call	sub_EB55
jz	short loc_35B1
call	sub_B855
jmp	short loc_3580

loc_35C1:
mov	ax, 0FFFFh
call	sub_FC80
jnb	short loc_35C1
jmp	loc_1F0A
; END OF FUNCTION CHUNK	FOR sub_35D7
; START	OF FUNCTION CHUNK FOR sub_6DDC

loc_35CC:
mov	byte ptr ds:2Ah, 0C8h ;	'�'
mov	ax, 128Fh
call	sub_3641
; END OF FUNCTION CHUNK	FOR sub_6DDC



sub_35D7 proc near

; FUNCTION CHUNK AT 0FA7 SIZE 0000000B BYTES
; FUNCTION CHUNK AT 13A0 SIZE 00000028 BYTES
; FUNCTION CHUNK AT 13E4 SIZE 00000091 BYTES
; FUNCTION CHUNK AT 148D SIZE 0000000B BYTES
; FUNCTION CHUNK AT 14C9 SIZE 0000008D BYTES
; FUNCTION CHUNK AT 167C SIZE 00000080 BYTES
; FUNCTION CHUNK AT 9ED5 SIZE 0000001C BYTES

cmp	word ptr ds:2220h, 1FAEh
jnz	short loc_35EA
mov	di, 1B56h
call	sub_F5CE
jnb	short loc_35EA
jmp	loc_BDA5

loc_35EA:
mov	byte ptr ds:0CE9Dh, 0
mov	si, ds:477Ah
lods	byte ptr cs:[si]
cmp	al, 0FFh
jz	short loc_3606
mov	ds:477Ah, si
xor	ah, ah
mov	bx, ax
jmp	cs:off_3345[bx]

loc_3606:
mov	si, 176Bh
call	sub_F92F
mov	ax, ds:4776h
mov	ds:4, al
mov	ds:46E0h, ah
xor	al, al
mov	ds:4774h, al
cmp	byte ptr ds:2Ah, 48h ; 'H'
jz	short loc_3625
call	sub_CC8E

loc_3625:
call	sub_D18E
cmp	byte ptr ds:0FBh, 0
js	short loc_3632
jmp	loc_2E77

loc_3632:
call	sub_CC2E
call	sub_87BB
jmp	sub_96DA
sub_35D7 endp

xor	byte ptr ds:4775h, 0FFh
retn



sub_3641 proc near
mov	ds:477Ah, ax
mov	word ptr ds:4778h, 0
inc	byte ptr ds:4774h
call	sub_D189
call	sub_CC2E
mov	al, ds:4
mov	ah, ds:46E0h
mov	ds:4776h, ax

loc_365E:
mov	bp, 64h	; 'd'
mov	si, 176Bh
jmp	sub_F8F5
sub_3641 endp




sub_3667 proc near
push	word ptr ds:2784h
call	sub_E007
mov	dx, 7Eh	; '~'
mov	bx, 94h	; '�'
mov	ax, 0Fh
call	sub_E0FF
mov	ax, 10h
add	al, ds:0E8h
mov	dx, 96h	; '�'
mov	bx, 89h	; '�'
call	sub_E0FF
pop	ax
jmp	sub_E00E
sub_3667 endp




sub_368E proc near
call	sub_DF4C
mov	si, 1E6Eh
push	si
cmp	byte ptr ds:0CE66h, 0
jnz	short loc_36A1
call	sub_E316
jmp	short loc_36AF

loc_36A1:
mov	bp, 1E76h
mov	si, 0CD9Eh
mov	es, word ptr ds:0DBD6h
assume es:nothing
call	dword ptr ds:391Dh

loc_36AF:
call	sub_3667
pop	si
jmp	sub_E3C0
sub_368E endp




sub_36B6 proc near
cmp	byte ptr ds:11C9h, 0
jnz	short locret_36ED
cmp	byte ptr ds:0E8h, 0Ah
jz	short locret_36ED
inc	byte ptr ds:0E8h
call	sub_368E
mov	ax, 8
call	sub_10257
jmp	short sub_36B6
sub_36B6 endp




sub_36D3 proc near
cmp	byte ptr ds:28E7h, 0
jnz	short locret_36ED
cmp	byte ptr ds:0E8h, 0
jz	short locret_36ED
mov	byte ptr ds:0CE66h, 1
call	sub_36EE
dec	byte ptr ds:0CE66h

locret_36ED:
retn
sub_36D3 endp




sub_36EE proc near
cmp	byte ptr ds:0E8h, 0
jz	short locret_36ED
dec	byte ptr ds:0E8h
call	sub_368E
mov	ax, 8
call	sub_10257
jmp	short sub_36EE
sub_36EE endp




sub_3704 proc near
mov	si, 0CD9Eh
mov	bp, 1E76h
mov	es, word ptr ds:0DBD6h
call	dword ptr ds:3919h
retn
sub_3704 endp




sub_3713 proc near
cmp	byte ptr ds:0E8h, 0
jz	short locret_36ED
mov	byte ptr ds:0E8h, 9
call	sub_368E
mov	ax, 8
call	sub_10257
mov	byte ptr ds:0E8h, 8
jmp	sub_368E
sub_3713 endp




sub_3730 proc near
cmp	byte ptr ds:11C9h, 0
jz	short loc_3738
retn

loc_3738:
call	sub_3713

loc_373B:
call	sub_F973
neg	byte ptr ds:0FBh
jns	short loc_3747
jmp	sub_78EA

loc_3747:
call	sub_F18D
call	sub_79AF
mov	al, ds:28E8h
mov	ds:28E7h, al
call	sub_D800
mov	word ptr ds:1C14h, 80h ; '�'
mov	word ptr ds:1C22h, 80h ; '�'
mov	bp, 0D75Ah
call	sub_DF67
mov	al, 34h	; '4'
sub_3730 endp




sub_376A proc near
mov	bp, 2DB1h
cmp	byte ptr ds:46D9h, 0
jz	short loc_3776
jmp	bp

loc_3776:
xor	dx, dx
call	sub_DFD8
call	sub_DF4C
call	sub_CCD4
mov	ax, ds:0CE7Ah
mov	ds:0DC5Ah, ax
jmp	sub_36B6
sub_376A endp




sub_378A proc near
mov	word ptr ds:1C06h, 0
mov	word ptr ds:1C14h, 0
mov	word ptr ds:1C22h, 0
call	sub_58B6
call	sub_CB00
call	sub_6BD0
call	sub_F18D
call	sub_699A
call	sub_B7B6
mov	byte ptr ds:46DFh, 0
cmp	byte ptr ds:2Bh, 0
jz	short locret_37BD
call	sub_29F1

locret_37BD:
retn
sub_378A endp

call	sub_F2EB
cmp	bp, 2012h
jnz	short loc_37CA
jmp	sub_F1B2

loc_37CA:
mov	ax, ds:4
cmp	ah, 20h	; ' '
jnz	short locret_3817
cmp	al, 1
jz	short locret_3817
mov	ax, 1ABAh
call	sub_F82E
call	sub_F18D
call	sub_DF4C
mov	si, 143Ch
mov	al, 0F1h ; '�'
mov	es, word ptr ds:0DBDAh
call	dword ptr ds:38DDh
mov	si, 1444h
mov	al, 0F7h ; '�'
call	loc_7A3E
mov	ax, 21h	; '!'
call	sub_E00E
mov	si, 120Bh
call	sub_E0EB
call	sub_3818
mov	si, 143Ch
mov	al, 10h
call	sub_DFA5
mov	bp, 2012h
mov	bx, 19FCh
jmp	sub_F1F3

locret_3817:
retn



sub_3818 proc near
sub	sp, 24h
mov	di, sp
push	ss
pop	es
assume es:seg001
mov	cx, 24h	; '$'
xor	ax, ax
rep stosb
mov	si, 0FD8h
mov	di, sp
mov	cx, 10h
mov	dh, ds:7

loc_3832:
cmp	dh, [si+3]
jnz	short loc_3850
mov	al, [si+0Eh]
call	sub_314C
jb	short loc_3850
mov	bx, [si]
dec	bl
xor	bh, bh
test	byte ptr [si+0Fh], 40h
jz	short loc_384E
add	bx, 0Ch

loc_384E:
inc	byte ptr [bx+di]

loc_3850:
add	si, 10h
loop	loc_3832
mov	bx, ds:4
xor	bh, bh
cmp	bl, 0Ch
ja	short loc_3865
add	bl, 17h
inc	byte ptr [bx+di]

loc_3865:
mov	cx, 0Bh
inc	di
mov	si, 1426h

loc_386C:
mov	dx, ds:120Dh
mov	bx, ds:120Fh
lodsb
xor	ah, ah
add	dx, ax
lodsb
add	bx, ax
push	cx
push	si
push	di
add	bx, 2
add	dx, 3
mov	cl, [di]
call	sub_38AF
add	bx, 7
mov	cl, [di+0Ch]
call	sub_38AF
sub	bx, 4
add	dx, 9
cmp	byte ptr [di+18h], 0
jz	short loc_38A5
mov	ax, 1
call	sub_E0FF

loc_38A5:
pop	di
pop	si
pop	cx
inc	di
loop	loc_386C
add	sp, 24h
retn
sub_3818 endp




sub_38AF proc near
xor	ch, ch
jcxz	short locret_38CB
push	dx
push	di
cmp	cl, 5
jbe	short loc_38BC
mov	cl, 5

loc_38BC:
push	cx
mov	ax, 2
call	sub_E1CD
pop	cx
add	dx, 4
loop	loc_38BC
pop	di
pop	dx

locret_38CB:
retn
sub_38AF endp

call	sub_F973
mov	si, 143Ch
push	si
call	sub_E316
pop	si
mov	al, 12h
call	sub_DFA5
jmp	sub_F82B



sub_38DF proc near
cmp	word ptr ds:1AFEh, 0
jnz	short locret_3903
call	sub_FA82
push	word ptr ds:2784h
call	sub_E007
mov	si, 1AF4h
call	sub_F0D0
call	sub_3904
mov	si, 1F06h
call	sub_E37A
pop	ax
call	sub_E00E

locret_3903:
retn
sub_38DF endp




sub_3904 proc near
cmp	word ptr ds:1AFEh, 0
jnz	short locret_3903
push	word ptr ds:0DBDAh
call	sub_DF5E
mov	ax, ds:2
and	ax, 0Fh
shl	ax, 1
shl	ax, 1
shl	ax, 1
add	ax, 1E7Eh
mov	si, ax
mov	ax, 4Ah	; 'J'
call	sub_396B
mov	ax, 4Bh	; 'K'
call	sub_396B
call	sub_EF45
mov	word ptr ds:0DBE4h, 0F1FAh
call	sub_39A1
mov	bx, 16Dh
add	ax, bx

loc_3940:
sub	ax, bx
cmp	ax, bx
jnb	short loc_3940
inc	ax
mov	dx, 0Bh
mov	bx, 0BEh ; '�'
cmp	ax, 64h	; 'd'
jnb	short loc_395D
sub	dl, 2
cmp	ax, 0Ah
jnb	short loc_395D
sub	dl, 2

loc_395D:
call	sub_10160
mov	al, 20h	; ' '
call	word ptr ds:2518h
pop	word ptr ds:0DBDAh
retn
sub_3904 endp




sub_396B proc near
push	ax
lodsw
mov	dx, ax
lodsw
mov	bx, ax
pop	ax
or	dx, dx
jz	short locret_3994
push	si
call	sub_E0C4
push	ds
push	es
mov	es, word ptr ds:0DBD8h
assume es:nothing
pop	ds
lodsw
mov	di, ax
lodsw
mov	cx, ax
xor	ch, ch
mov	bp, 1EFEh
call	dword ptr ss:seg_11380+38CDh
pop	ds
pop	si

locret_3994:
retn
sub_396B endp




sub_3995 proc near
mov	ax, ds:2
shr	ax, 1
shr	ax, 1
shr	ax, 1
shr	ax, 1
retn
sub_3995 endp




sub_39A1 proc near
mov	ax, ds:2
add	ax, 3
shr	ax, 1
shr	ax, 1
shr	ax, 1
shr	ax, 1
retn
sub_39A1 endp




sub_39B0 proc near
mov	ax, ds:2
and	ax, 0Fh
retn
sub_39B0 endp

call	sub_F2EB
cmp	bp, 1F7Eh
jnz	short nullsub_5
mov	ax, ds:0CE7Ah
cmp	ax, ds:4770h
jz	short nullsub_5
mov	ds:4770h, ax
sub	ax, ds:476Eh
cmp	ax, ds:4772h
jb	short nullsub_5
call	sub_E72B
call	sub_E738
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_5. PRESS KEYPAD "+" TO EXPAND]



sub_39DD proc near
call	sub_CA9C
jnz	short nullsub_5
cmp	byte ptr ds:2788h, 0
jnz	short nullsub_5
cmp	byte ptr ds:2Ah, 0C8h ;	'�'
jnb	short nullsub_5
call	sub_49FA
sub_39DD endp




sub_39F3 proc near

; FUNCTION CHUNK AT 1BB8 SIZE 00000034 BYTES

cmp	byte ptr ds:46DDh, 0
jz	short nullsub_5
mov	byte ptr ds:46DDh, 0
mov	al, ds:0F4h
dec	al
cmp	al, 10h
jge	short loc_3A0D
xor	al, al
mov	ds:0F5h, al

loc_3A0D:
mov	ds:0F4h, al
call	sub_38DF
call	sub_57B1
mov	ax, ds:2
mov	cx, ax
xchg	ax, ds:1174h
and	al, 0F0h
and	cl, 0F0h
sub	al, cl
mov	ds:46DEh, al
jz	short loc_3A2E
call	sub_3B16

loc_3A2E:
cmp	byte ptr ds:0C2h, 7
jnb	short sub_3A82
call	sub_3C6F
push	word ptr ds:11F7h
push	word ptr ds:11CEh
call	sub_8B3F
call	sub_82C0
call	sub_39B0
shl	ax, 1
mov	si, ax
call	cs:off_3C83[si]
call	sub_3AE8
pop	di
call	sub_51EE
pop	word ptr ds:11F7h

loc_3A5D:
call	sub_3ABC
cmp	byte ptr ds:46D9h, 0
jnz	short sub_3A82
cmp	byte ptr ds:46ECh, 0
jz	short loc_3A71
call	sub_7C3D

loc_3A71:
mov	di, ds:114Eh
or	di, di
jz	short sub_3A82
cmp	byte ptr ds:473Bh, 0
js	short loc_3AA2
ja	short loc_3A88
sub_39F3 endp




sub_3A82 proc near
mov	byte ptr ds:473Bh, 0
retn
sub_3A82 endp

; START	OF FUNCTION CHUNK FOR sub_39F3

loc_3A88:
cmp	byte ptr ds:0FBh, 0
js	short sub_3A82
cmp	byte ptr ds:46DAh, 0
jnz	short sub_3A82
call	sub_FA82
call	sub_3A82
call	sub_29F1
jmp	sub_4C81

loc_3AA2:
call	sub_3A82
cmp	byte ptr ds:0FBh, 0
js	short loc_3AB9
cmp	byte ptr ds:46DAh, 0
jnz	short sub_3A82
call	sub_F18D
jmp	loc_2E77

loc_3AB9:
jmp	sub_7C3D
; END OF FUNCTION CHUNK	FOR sub_39F3



sub_3ABC proc near
cmp	byte ptr ds:2Bh, 0
jz	short locret_3AE7
mov	di, ds:114Eh
call	sub_6F0C
cmp	byte ptr ds:46D9h, 0
jz	short loc_3AD6
mov	byte ptr ds:46D9h, 6

loc_3AD6:
cmp	byte ptr ds:2Bh, 0
jnz	short locret_3AE7
push	di
call	sub_29F1
pop	di
or	byte ptr ds:473Bh, 1

locret_3AE7:
retn
sub_3ABC endp




sub_3AE8 proc near
cmp	byte ptr ds:46EBh, 0
jns	short loc_3B09
call	near ptr byte_E00B
mov	si, ds:46FAh
or	si, si
jz	short loc_3AFD
call	sub_97B9

loc_3AFD:
mov	di, ds:46F8h
or	di, di
jz	short locret_3B08
call	sub_7EDE

locret_3B08:
retn

loc_3B09:
jnz	short locret_3B15
cmp	byte ptr ds:0FBh, 0
jns	short locret_3B15
call	sub_DC8B

locret_3B15:
retn
sub_3AE8 endp




sub_3B16 proc near
mov	al, ds:2Ah
mov	ah, al
xchg	al, ds:0FEh
cmp	al, ah
jz	short loc_3B28
mov	byte ptr ds:0FFh, 0

loc_3B28:
inc	byte ptr ds:0FFh
call	sub_3C36
call	sub_3D13
mov	al, ds:0D5h
inc	al
cmp	al, 2
jb	short loc_3B3E
mov	ds:0D5h, al

loc_3B3E:
xor	ax, ax
xchg	ax, ds:1172h
mov	bx, ds:0A0h
add	ax, bx
xchg	bx, ds:1170h
sub	ax, bx
jnb	short loc_3B54
xor	ax, ax

loc_3B54:
mov	ds:0A6h, ax
xchg	ax, ds:0AEh
xor	bx, bx
sub	ax, ds:0A6h
jnb	short loc_3B66
neg	ax
xchg	ax, bx

loc_3B66:
mov	ds:0B2h, ax
mov	ds:0B0h, bx
call	sub_3BAA
call	sub_DEFE
call	sub_DDF6
call	sub_1029C
mov	bx, ax
mov	si, 10D8h

loc_3B7E:
test	byte ptr [si+2], 8
jz	short loc_3BA1
mov	bp, 4

loc_3B87:
cmp	byte ptr [bp+si+4], 0
jnz	short loc_3B9E
cmp	byte ptr [bp+si+9], 0
jns	short loc_3B9E
rol	bx, 1
rol	bx, 1
mov	al, bl
and	al, 3
mov	[bp+si+4], al

loc_3B9E:
dec	bp
jns	short loc_3B87

loc_3BA1:
add	si, 11h
cmp	byte ptr [si], 14h
jb	short loc_3B7E
retn
sub_3B16 endp




sub_3BAA proc near
mov	di, 100h
xor	cx, cx
xor	dx, dx

loc_3BB1:
call	sub_7C06
jb	short loc_3BC4
inc	dx
mov	al, [di+12h]
shr	al, 1
shr	al, 1
shr	al, 1
xor	ah, ah
add	cx, ax

loc_3BC4:
add	di, 1Ch
cmp	byte ptr [di], 0FFh
jnz	short loc_3BB1
mov	bx, cx
shr	bx, 1
shr	bx, 1
shr	bx, 1
shr	bx, 1
call	sub_102AF
add	cx, ax
mov	ds:0A8h, cx
retn
sub_3BAA endp




sub_3BE0 proc near
rol	word ptr ds:0, 1
jnb	short locret_3C04
mov	si, 8AAh

loc_3BE9:
test	byte ptr [si+10h], 80h
jz	short loc_3BFB
mov	al, [si+1Ah]
dec	al
cmp	al, 0C7h ; '�'
jnb	short loc_3BFB
inc	byte ptr [si+1Ah]

loc_3BFB:
add	si, 1Bh
cmp	si, 0FA0h
jb	short loc_3BE9

locret_3C04:
retn
sub_3BE0 endp

add	al, [bp+si]
add	al, [bp+si]
add	al, [bp+di]
add	ax, [bp+di]
add	al, 4
add	al, 4
add	al, 4
add	al, 4
add	ax, 202h
add	al, [bp+si]
add	al, [bp+di]
add	ax, [si]
add	al, 4
add	al, 4
add	al, 4
add	al, 0Ch
add	[bx+di], ax
add	[bx+di], ax
add	[bx+di], ax
add	[bp+di], ax
add	ax, [bp+di]
add	ax, [bp+di]
add	ax, [bp+di]
add	ax, [bp+si]



sub_3C36 proc near
mov	si, 0FD8h
mov	cx, 0Ch

loc_3C3C:
mov	ax, [si+2]
cmp	al, 80h	; '�'
jnz	short loc_3C69
cmp	ah, 0FFh
jz	short loc_3C69
mov	al, 1Ch
mul	ah
add	ax, 0E4h ; '�'
mov	di, ax
mov	ax, [si]
mov	bl, [di+8]
cmp	ah, bl
jnz	short loc_3C63
xor	bh, bh
cmp	al, cs:[bx+1D35h]
jbe	short loc_3C69

loc_3C63:
mov	ah, bl
mov	al, 1
mov	[si], ax

loc_3C69:
add	si, 10h
loop	loc_3C3C
retn
sub_3C36 endp




sub_3C6F proc near
test	word ptr ds:12h, 80h
jnz	short locret_3C82
mov	si, 1048h
call	sub_3CD1
jnb	short locret_3C82
call	sub_3DAA

locret_3C82:
retn
sub_3C6F endp

off_3C83 dw offset nullsub_3
dw offset nullsub_3
dw offset nullsub_3
dw offset sub_3CA4
dw offset sub_3CA7
dw offset nullsub_3
dw offset nullsub_3
dw offset nullsub_3
dw offset sub_3CAA
dw offset nullsub_3
dw offset nullsub_3
dw offset nullsub_3
dw offset nullsub_3
dw offset nullsub_3
dw offset nullsub_3
dw offset sub_3CCE
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_3. PRESS KEYPAD "+" TO EXPAND]


; Attributes: thunk

sub_3CA4 proc near
jmp	loc_3F74
sub_3CA4 endp



; Attributes: thunk

sub_3CA7 proc near
jmp	sub_3E34
sub_3CA7 endp




sub_3CAA proc near
test	byte ptr ds:0BFh, 10h
jz	short locret_3CCD
test	word ptr ds:10h, 8
jnz	short locret_3CCD
cmp	byte ptr ds:0Bh, 8
jz	short locret_3CCD
cmp	byte ptr ds:0C2h, 0
jnz	short locret_3CCD
mov	ax, 30Bh
call	sub_48BE

locret_3CCD:
retn
sub_3CAA endp



; Attributes: thunk

sub_3CCE proc near
jmp	sub_3BE0
sub_3CCE endp




sub_3CD1 proc near
cmp	byte ptr ds:2Ah, 5Dh ; ']'
jnz	short loc_3D0E
cmp	byte ptr [si+0Eh], 7
jnz	short loc_3D0E
mov	bx, [si+2]
cmp	bl, 80h	; '�'
jnz	short loc_3D0E
mov	byte ptr [si], 2
jnz	short loc_3D0E
mov	al, 1Ch
mul	bh
add	ax, 0E4h ; '�'
mov	di, ax
sub_3CD1 endp




sub_3CF4 proc near
mov	al, [di+9]
or	al, al
jz	short loc_3D0E
push	si

loc_3CFC:
call	sub_87D6
test	word ptr [si+12h], 400h
jnz	short loc_3D10
mov	al, [si+1]
or	al, al
jnz	short loc_3CFC
pop	si

loc_3D0E:
clc
retn

loc_3D10:
pop	si
stc
retn
sub_3CF4 endp




sub_3D13 proc near
call	sub_3995
cmp	ax, ds:1156h
jb	short locret_3D78
cmp	byte ptr ds:2Ah, 5Ch ; '\'
jnz	short locret_3D78
cmp	word ptr ds:114Eh, 7C8h
jz	short locret_3D78
mov	di, 100h
xor	cx, cx

loc_3D30:
cmp	byte ptr [di+8], 28h ; '('
jnb	short loc_3D52
test	byte ptr [di+0Ah], 80h
jnz	short loc_3D52
cmp	di, 2C0h
jz	short loc_3D52
xor	dx, dx
mov	bp, 1EA1h
call	sub_84ED
cmp	dx, cx
jbe	short loc_3D52
mov	cx, dx
mov	bx, di

loc_3D52:
add	di, 1Ch
cmp	byte ptr [di], 0FFh
jnz	short loc_3D30
jcxz	short locret_3D78
mov	di, bx
mov	ds:11DBh, di
inc	byte ptr ds:0F8h
mov	bp, 1EA9h
call	sub_84ED
mov	al, 8
jmp	sub_9082
cmp	byte ptr [si+3], 8
adc	dx, 0

locret_3D78:
retn
sub_3D13 endp

or	word ptr [si+12h], 400h
jmp	sub_8F55
mov	ax, [si+12h]
and	ax, 0FBFFh
or	ax, 800h
mov	[si+12h], ax
retn



sub_3D8E proc near
test	word ptr [si+12h], 800h
jz	short locret_3DA9
mov	al, ds:2Ah
sub	al, 60h	; '`'
cmp	al, 4
jnb	short locret_3DA9
call	sub_10140
mov	al, 64h	; 'd'
call	sub_30EF
call	sub_10153

locret_3DA9:
retn
sub_3D8E endp




sub_3DAA proc near
add	byte ptr ds:0F9h, 8
jnz	short locret_3DE2
push	cx
push	si
mov	bp, 1EB1h
call	sub_84D3
mov	ax, 709h
call	sub_48C0
dec	byte ptr ds:0F8h
mov	di, 100h

loc_3DC6:
call	sub_3CF4
jb	short loc_3DD5
add	di, 1Ch
cmp	byte ptr [di], 0FFh
jnz	short loc_3DC6
xor	di, di

loc_3DD5:
mov	ds:11DBh, di
or	di, di
jnz	short loc_3DE0
call	sub_309B

loc_3DE0:
pop	si
pop	cx

locret_3DE2:
retn
sub_3DAA endp

mov	di, 138h
mov	bx, 0FF9Ch

loc_3DE9:
mov	ax, [di+4]
cmp	ax, bx
jle	short loc_3E07
call	sub_7C06
jb	short loc_3E07
call	sub_6F68
or	dx, dx
jnz	short loc_3E07
mov	ax, [di+4]
cmp	ax, bx
jle	short loc_3E07
mov	bx, ax
mov	si, di

loc_3E07:
add	di, 1Ch
cmp	byte ptr [di], 8
jb	short loc_3DE9
cmp	bx, 0FF9Ch
jnz	short loc_3E17
mov	si, 100h

loc_3E17:
mov	di, si
call	sub_5F7E
mov	dl, 3
mov	ds:1048h, dx
mov	ds:104Ah, bx
mov	ah, [di]
mov	al, [di+1]
mov	ds:0F2h, ax
mov	ax, 2B0Ah
jmp	loc_45AA



sub_3E34 proc near
cmp	byte ptr ds:2Ah, 3Ch ; '<'
jnb	short loc_3E49
mov	ax, ds:2
sub	ax, ds:1154h
jb	short locret_3E61
cmp	ax, 70h	; 'p'
jb	short locret_3E61

loc_3E49:
test	word ptr ds:2, 10h
jnz	short locret_3E61
xor	al, al
xchg	al, ds:11BCh
or	al, al
jnz	short locret_3E61
rol	word ptr ds:0, 1
jb	short loc_3E62

locret_3E61:
retn

loc_3E62:
call	sub_3EE7
jz	short locret_3EE3
inc	byte ptr ds:0C4h
mov	cx, 2

loc_3E6E:
mov	al, [bp+9]

loc_3E71:
or	al, al
jz	short loc_3E9B
call	sub_87D6
mov	al, [si+1]
test	byte ptr [si+10h], 80h
jz	short loc_3E71
push	cx
push	bp
push	si
push	di
mov	byte ptr [si+3], 8Dh ; '�'
call	sub_A376
pop	di
pop	si
and	byte ptr [si+10h], 0EFh
push	di
call	sub_A227
pop	di
pop	bp
pop	cx
loop	loc_3E6E

loc_3E9B:
or	byte ptr [di+0Ah], 2
call	sub_A2CD
call	sub_5F7E
mov	si, 0FD8h
mov	cx, 9

loc_3EAB:
cmp	bx, [si+2]
jnz	short loc_3EB2
mov	[si], dx

loc_3EB2:
add	si, 10h
loop	loc_3EAB
mov	al, 0Ch
mov	si, 8E0h
cmp	di, [si+4]
jnz	short loc_3EC3
inc	al

loc_3EC3:
push	bx
push	dx
call	sub_9082
pop	dx
pop	bx
cmp	bx, ds:6
jnz	short loc_3EE4
mov	ds:4, dx
mov	al, dl
mov	ds:0Bh,	al
or	ds:473Bh, al
mov	ds:2Bh,	al
call	sub_8014

locret_3EE3:
retn

loc_3EE4:
jmp	sub_7C20
sub_3E34 endp




sub_3EE7 proc near
mov	di, 100h
mov	word ptr ds:0D816h, 0
mov	bx, 64h	; 'd'

loc_3EF3:
cmp	byte ptr [di+8], 20h ; ' '
jnb	short loc_3F4D
test	byte ptr [di+0Ah], 82h
jnz	short loc_3F4D
cmp	bx, [di+4]
jle	short loc_3F4D
call	sub_3CF4
jb	short loc_3F4D
push	bx
call	sub_51EE
pop	bx
mov	al, ds:60h
sub	al, ds:63h
jz	short loc_3F4D
mov	bp, ds:0E4h
cmp	word ptr ds:0E2h, 1Eh
jb	short loc_3F2D
cmp	word ptr ds:0DCh, 1Eh
jnb	short loc_3F4D
mov	bp, ds:0DEh

loc_3F2D:
cmp	bp, 11Ch
jz	short loc_3F4D
push	di
mov	di, bp
call	sub_6F68
mov	bp, di
pop	di
jcxz	short loc_3F4D
or	dx, dx
jnz	short loc_3F4D
mov	bx, [di+4]
mov	ds:0D816h, di
mov	ds:0D818h, bp

loc_3F4D:
add	di, 1Ch
cmp	byte ptr [di], 8
jb	short loc_3EF3
mov	bp, ds:0D818h
mov	di, ds:0D816h
or	di, di
retn
sub_3EE7 endp




sub_3F60 proc near

; FUNCTION CHUNK AT 2131 SIZE 0000002E BYTES

call	sub_3995
mov	ds:118Dh, ax
jmp	short loc_3FA2

loc_3F68:
sub	ax, ds:118Dh
jz	short locret_3FA1
neg	ax
mov	ds:0CFh, al
retn

loc_3F74:
test	byte ptr ds:0BFh, 80h
jz	short locret_3FA1
call	sub_3995
cmp	byte ptr ds:0C2h, 0
jnz	short loc_3F68
test	byte ptr ds:0BFh, 10h
jnz	short loc_4001
cmp	byte ptr ds:11BBh, 0
jz	short loc_3F96
jmp	sub_402F

loc_3F96:
sub	ax, ds:118Dh
jz	short loc_3FA2
neg	ax
mov	ds:0CFh, al

locret_3FA1:
retn

loc_3FA2:
mov	al, ds:0C3h
inc	byte ptr ds:0C3h
mov	bx, 96h	; '�'
mul	bx
or	dx, dx
jnz	short loc_3FE1
add	ax, 64h	; 'd'
jb	short loc_3FE1
mov	cx, ax
mov	bx, 3Fh	; '?'
call	sub_10287
add	ax, 0E0h ; '�'
mul	cx
or	dh, dh
jnz	short loc_3FE1
mov	dh, dl
mov	dl, ah
mov	al, ds:0BEh
shl	al, 1
jb	short loc_3FE4
not	al
mov	ah, 1
mul	dx
xchg	dl, dh
xchg	dl, ah
or	ah, ah
jz	short loc_3FE4

loc_3FE1:
mov	dx, 0FFFFh

loc_3FE4:
mov	ds:0BCh, dx
mov	byte ptr ds:0CFh, 0
or	byte ptr ds:0BFh, 90h
mov	ax, 20Bh
cmp	byte ptr ds:0BEh, 0
js	short loc_3FFE
inc	ah

loc_3FFE:
jmp	loc_45AA
sub_3F60 endp

; START	OF FUNCTION CHUNK FOR sub_3F60

loc_4001:
sub	ax, ds:118Dh
jz	short locret_3FA1
cmp	ax, 4
jnb	short sub_402F
shl	al, 1
shl	al, 1
mov	bl, al
call	sub_43A2
mov	al, ah
cmp	al, 3
jb	short loc_401D
mov	al, 2

loc_401D:
add	al, bl
mov	bx, 2161h
xlat	byte ptr cs:[bx]
or	al, al
jz	short sub_402F
mov	ah, al
mov	al, 0Bh
jmp	loc_45AA
; END OF FUNCTION CHUNK	FOR sub_3F60



sub_402F proc near
mov	byte ptr ds:46D9h, 7
retn
sub_402F endp

db 4, 5, 6, 0, 5, 6, 2 dup(0), 6, 2 dup(0)



sub_4040 proc near
call	sub_10140
mov	si, 0FD8h
mov	cx, 9

loc_4049:
test	byte ptr [si+0Fh], 40h
jnz	short loc_40C1
mov	dx, [si]
mov	bx, [si+2]
cmp	si, 1008h
jnz	short loc_4064
cmp	bx, 180h
jnz	short loc_4064
mov	dl, 4
mov	[si], dx

loc_4064:
cmp	bl, 80h	; '�'
jnz	short loc_40BE
cmp	dl, 1
jnz	short loc_40AC
cmp	dh, 21h	; '!'
jnb	short loc_40C1
cmp	bh, ds:9
jz	short loc_40C1
mov	al, 1Ch
mul	bh
add	ax, 0E4h ; '�'
mov	di, ax
test	byte ptr [di+0Ah], 2
jnz	short loc_40C1
inc	byte ptr [si]
cmp	bh, 1
jnz	short loc_40C1
mov	bx, 144Dh
mov	al, [si+0Eh]
xlat
mov	[si], al
and	byte ptr [si+0Fh], 0FBh
cmp	al, 6
jnz	short loc_40C1
cmp	byte ptr ds:2Ah, 24h ; '$'
jnb	short loc_40C1
mov	byte ptr [si], 0Ah
jmp	short loc_40C1

loc_40AC:
cmp	si, 1028h
jb	short loc_40C1
cmp	bh, 1
jnz	short loc_40C1
call	sub_40CA
mov	[si], al
jmp	short loc_40C1

loc_40BE:
call	sub_40ED

loc_40C1:
add	si, 10h
loop	loc_4049
call	sub_10153
retn
sub_4040 endp




sub_40CA proc near
mov	bx, 0Ah
call	sub_102AF
add	al, 2
cmp	byte ptr ds:2Ah, 54h ; 'T'
jnb	short locret_40EC
cmp	al, 3
jz	short sub_40CA
cmp	byte ptr ds:2Ah, 24h ; '$'
jnb	short locret_40EC
cmp	al, 0Bh
jz	short sub_40CA
cmp	al, 6
jz	short sub_40CA

locret_40EC:
retn
sub_40CA endp




sub_40ED proc near
push	cx
push	si
mov	dx, [si]
call	sub_7214
call	sub_5F7E
pop	si
pop	cx
mov	[si], dx
mov	[si+2],	bx
cmp	bh, ds:9
jnz	short locret_4108
or	byte ptr [si+0Fh], 4

locret_4108:
retn
sub_40ED endp

xor	ax, ax
mov	ds:9Fh,	al
mov	ds:20h,	ax
mov	ds:1Ah,	al
mov	ax, ds:0A0h
or	ax, ax
jz	short loc_4120
mov	byte ptr ds:9Fh, 3

loc_4120:
call	sub_4181
mov	si, 10D8h
call	sub_3995
xor	dl, dl

loc_412B:
cmp	word ptr [si+0Eh], 0
jz	short loc_4144
test	byte ptr [si+2], 60h
jnz	short loc_4144
mov	ah, al
sub	ah, [si+10h]
cmp	ah, dl
jbe	short loc_4144
mov	dl, ah
mov	di, si

loc_4144:
add	si, 11h
cmp	byte ptr [si], 0FFh
jnz	short loc_412B
or	dl, dl
mov	si, di
jnz	short loc_4173
mov	si, ds:113Fh
jmp	short loc_415E

loc_4158:
cmp	si, ds:113Fh
jz	short locret_4180

loc_415E:
add	si, 11h
cmp	byte ptr [si], 0FFh
jnz	short loc_4169
mov	si, 10D8h

loc_4169:
cmp	word ptr [si+0Eh], 0
jz	short loc_4158
mov	ds:113Fh, si

loc_4173:
call	sub_422F
mov	al, [si]
xor	ah, ah
add	ax, 0
mov	ds:11F7h, ax

locret_4180:
retn



sub_4181 proc near
mov	bp, 0B4h ; '�'
and	byte ptr ds:0BFh, 0F9h
mov	bx, ds:0BCh
mov	cx, bx
shr	cx, 1
add	cx, bx
mov	dx, bx
add	dx, dx
mov	si, ax
shr	si, 1
mov	di, ax
shr	di, 1
shr	di, 1
add	di, si
cmp	ax, bx
jb	short loc_41C1
mov	[bp+0],	bx
mov	[bp+2],	ax
cmp	ax, cx
jb	short loc_41D0
cmp	ax, dx
jb	short loc_41DC
mov	[bp+4],	cx
mov	[bp+6],	dx
or	byte ptr ds:0BFh, 6
retn

loc_41C1:
mov	[bp+0],	ax
mov	[bp+2],	di
mov	[bp+4],	si
sub	di, si
mov	[bp+6],	di
retn

loc_41D0:
mov	[bp+4],	di
mov	[bp+6],	si
or	byte ptr ds:0BFh, 2
retn

loc_41DC:
mov	[bp+4],	di
mov	[bp+6],	cx
or	byte ptr ds:0BFh, 4
retn
sub_4181 endp




sub_41E8 proc near
mov	al, [di]
mov	si, 10C7h

loc_41ED:
add	si, 11h
cmp	al, [si]
jnz	short loc_41ED
call	sub_422F
call	sub_3995
sub	al, [si+3]
test	byte ptr [si+2], 8
jnz	short loc_4209
mov	al, 1
or	byte ptr [si+2], 8

loc_4209:
mov	ds:1Eh,	al
mov	byte ptr ds:9Dh, 0
mov	ax, ds:0
and	ax, 7

loc_4217:
cmp	al, ds:1141h
jb	short loc_4223
sub	al, ds:1141h
jmp	short loc_4217

loc_4223:
add	ax, 0E8h ; '�'
mov	ds:11F1h, ax
mov	byte ptr ds:9Fh, 0
retn
sub_41E8 endp




sub_422F proc near
mov	ds:10B4h, si
mov	al, [si+2]
mov	ds:1Ch,	al
mov	ax, [si+0Eh]
mov	ds:20h,	ax
mov	byte ptr ds:1Fh, 0
or	ax, ax
jz	short loc_4251
call	sub_3995
sub	al, [si+10h]
mov	ds:1Fh,	al

loc_4251:
mov	al, [si+1]
mov	ds:1Dh,	al
retn
sub_422F endp

mov	al, 3Ch	; '<'
call	sub_30EF
mov	bx, 3
call	sub_10287
mov	ds:9Eh,	al
call	sub_3995
mov	di, ds:10B4h
mov	[di+3],	al
mov	byte ptr ds:1Ah, 0
mov	ax, ds:11F1h
sub	ax, 0E8h ; '�'
mov	cx, 2

loc_427E:
inc	ax

loc_427F:
cmp	al, ds:1141h
jb	short loc_428C
sub	al, ds:1141h
loop	loc_427F
retn

loc_428C:
mov	bx, ax
cmp	byte ptr [bx+di+4], 0
jz	short loc_427E
add	ax, 0E8h ; '�'
mov	ds:11F1h, ax
mov	al, [bx+di+9]
and	al, 7Fh
shl	al, 1
mov	ds:9Dh,	al
retn



sub_42A5 proc near
mov	al, ds:9Dh
mov	ah, al
shr	ah, 1
shr	ah, 1
shr	ah, 1
sub	al, ah
mov	ds:9Dh,	al
retn
sub_42A5 endp




sub_42B6 proc near
and	byte ptr [di+2], 9Fh
xor	ax, ax
xchg	al, ds:9Dh
add	ds:20h,	ax
add	[di+0Eh], ax
cmp	ax, [di+0Eh]
jnz	short loc_42D0
inc	byte ptr ds:22h

loc_42D0:
call	sub_3995
mov	[di+10h], al
mov	ax, ds:11F1h
sub	ax, 0E8h ; '�'
mov	bx, ax
dec	byte ptr [bx+di+4]
mov	si, ds:114Eh
inc	byte ptr [bx+si+14h]
retn
sub_42B6 endp

retn
cmp	word ptr ds:47C4h, 0Dh
jz	short loc_42F6
mov	al, 1
jmp	short loc_4366
;align 2

loc_42F6:
mov	di, ds:10B4h
call	sub_42B6
mov	al, 1
jmp	short loc_4366
;align 2
cmp	word ptr ds:47C4h, 0Dh
jz	short loc_430E
mov	al, 2
jmp	short loc_4366
;align 2

loc_430E:
mov	di, ds:10B4h
mov	bx, 7
call	sub_10287
jz	short loc_433B
mov	byte ptr ds:9Dh, 0
mov	al, 2
jmp	short loc_4366
cmp	word ptr ds:47C4h, 0Dh
jz	short loc_432F
mov	al, 3
jmp	short loc_4366
db 90h

loc_432F:
mov	di, ds:10B4h
mov	bx, 3
call	sub_10287
jnz	short loc_4344

loc_433B:
or	byte ptr ds:9Eh, 10h
mov	al, 3
jmp	short loc_4366

loc_4344:
inc	byte ptr ds:9Eh
and	byte ptr ds:9Eh, 3
and	al, 1
add	al, ds:1Ah
sub	al, [di+1]
jb	short loc_4361
mov	byte ptr ds:9Dh, 0
mov	al, 3
jmp	short loc_4366

loc_4361:
call	sub_42A5
mov	al, 3

loc_4366:
mov	ds:9Fh,	al
inc	byte ptr ds:1Ah
call	sub_F1B2
jmp	loc_B342
cmp	byte ptr ds:2Ah, 10h
jnb	short loc_4380
or	byte ptr ds:0FF7h, 10h
retn

loc_4380:
call	sub_C0B8
mov	word ptr ds:0C0h, 0
or	byte ptr ds:0BFh, 1
call	sub_43A2
add	ah, 7
mov	al, 0Bh
cmp	ah, 0Ch
jnz	short loc_439F
inc	byte ptr ds:11BBh

loc_439F:
jmp	loc_45AA



sub_43A2 proc near
mov	al, ds:0BEh
xor	cl, cl
xor	ah, ah
cmp	al, 1
adc	ah, cl
cmp	al, 40h	; '@'
adc	ah, cl
cmp	al, 80h	; '�'
adc	ah, cl
cmp	al, 90h	; '�'
adc	ah, cl
cmp	al, 0FFh
adc	ah, cl
retn
sub_43A2 endp

cmp	byte ptr ds:9Fh, 2
jz	short loc_4411
jnb	short loc_43FD
cmp	byte ptr ds:476Dh, 0
jnz	short loc_43E7
mov	al, ds:1Ah
dec	ax
and	ax, 3
mov	bx, ax
shl	bx, 1
mov	ax, [bx+0B4h]
mov	ds:0C0h, ax
mov	word ptr ds:1158h, 0FFFFh
retn

loc_43E7:
mov	di, ds:10B4h
xor	ax, ax
xchg	ax, [di+0Eh]
dec	byte ptr ds:22h



sub_43F4 proc near
sub	ds:0A0h, ax
add	ds:1172h, ax
retn
sub_43F4 endp


loc_43FD:
cmp	byte ptr ds:476Dh, 0
jz	short locret_4410
mov	di, ds:10B4h
and	byte ptr [di+2], 9Fh
or	byte ptr [di+2], 20h

locret_4410:
retn

loc_4411:
cmp	byte ptr ds:476Dh, 0
jz	short locret_4424
mov	di, ds:10B4h
and	byte ptr [di+2], 9Fh
or	byte ptr [di+2], 40h

locret_4424:
retn
mov	al, 0Ah
call	sub_C9E5
mov	dx, 8Ch	; '�'
mov	bx, 27h	; '''
mov	ax, 1Bh
jmp	sub_E0FF



sub_4436 proc near
mov	si, 1008h
push	ax
call	sub_5FB6
pop	ax
mov	bx, ax
call	sub_43F4
mov	ax, bx
xor	dx, dx
xchg	al, ah
xchg	al, dl
div	word ptr ds:0BCh
cmp	ax, 200h
jb	short loc_4457
mov	ax, 1FFh

loc_4457:
shr	ax, 1
jnz	short loc_445D
mov	al, 1

loc_445D:
mov	ds:0BEh, al
mov	ah, 40h	; '@'
mov	bx, 7
cmp	al, 0C0h ; '�'
jnb	short loc_4483
dec	bx
cmp	al, 80h	; '�'
ja	short loc_4483
dec	bx
xor	ah, ah
cmp	al, 80h	; '�'
jz	short loc_4483
dec	bx
mov	ah, 8
test	ds:0BFh, ah
jz	short loc_4483
mov	byte ptr ds:0BEh, 0

loc_4483:
or	ah, 80h
mov	ds:0BFh, ah
mov	si, 118Dh
add	[si], bx
mov	bl, ds:0C3h
shr	bl, 1
and	bx, 3
call	sub_10287
add	[si], ax
call	sub_3995
sub	ax, [si]
neg	ax
mov	ds:0CFh, al
mov	word ptr ds:1158h, 0
call	sub_46D6
call	sub_4665
call	sub_E36A
mov	ax, 2Ch	; ','
call	sub_E00E
call	sub_DFC4
mov	bp, 2555h
mov	al, 8
call	sub_DFD8
mov	ax, 64h	; 'd'
call	sub_FC80
mov	cx, 18h
mov	bp, 0A44h
mov	al, 6
call	sub_DFD8
mov	cx, 18h

loc_44DB:
push	cx
mov	bp, 0A44h
mov	ax, 0Ch
dec	cx
call	sub_10223
pop	cx
loop	loc_44DB
mov	ax, 27h	; '''
call	sub_CA1F
mov	si, 4C60h
mov	bp, 15AAh
mov	es, word ptr ds:0DBD6h
call	dword ptr ds:3919h
mov	ax, 0C8h ; '�'
call	sub_FC80
call	sub_CA79
mov	al, 1
call	sub_C9E5
mov	cx, 1

loc_450E:
push	cx
mov	si, 15B2h

loc_4512:
push	si
mov	bp, 26ACh
mov	ax, 0Ch
call	sub_10223
pop	si
cmp	si, 161Eh
jnz	short loc_4526
call	sub_CB00

loc_4526:
add	si, 6
cmp	byte ptr [si], 0FFh
jnz	short loc_4512
pop	cx
loop	loc_450E
call	sub_457C
xor	cx, cx

loc_4536:
inc	cx
push	cx
mov	bp, 0A44h
mov	ax, 0Ch
call	sub_10223
pop	cx
cmp	cx, 19h
jb	short loc_4536
mov	byte ptr ds:47A9h, 1
mov	bp, 2DB1h
call	sub_DF67
mov	ax, 2Ch	; ','
call	sub_E00E
mov	al, 6
mov	bp, 2555h
call	sub_DFD8
mov	bp, 2DB1h
call	sub_DF67
mov	byte ptr ds:47A9h, 0
mov	bp, 26A6h
mov	al, 8
call	sub_DFD8
jmp	sub_4643
sub_4436 endp

call	sub_E30E
jmp	sub_3667



sub_457C proc near
push	si
mov	bp, 15AAh
mov	si, 4C60h
mov	es, word ptr ds:0DBD6h
call	dword ptr ds:391Dh
pop	si
lodsw
or	ax, ax
js	short loc_459B
mov	bx, ax
lodsw
mov	dx, ax
lodsw
xchg	ax, bx
call	sub_E0FF

loc_459B:
mov	dx, 7Eh	; '~'
mov	bx, 4Ch	; 'L'
mov	bp, 0C2h ; '�'
mov	ax, 4Ch	; 'L'
jmp	loc_E3F6
sub_457C endp

; START	OF FUNCTION CHUNK FOR sub_2F15

loc_45AA:
call	sub_10140
mov	cl, ds:0C8h
xor	ch, ch
jcxz	short loc_45C1
mov	si, 1179h

loc_45B8:
cmp	ax, [si]
jz	short loc_45FB
add	si, 2
loop	loc_45B8

loc_45C1:
mov	cl, ds:0C8h
mov	si, 1179h
cmp	cl, 0Ah
jb	short loc_45D7
push	ax
call	sub_45FF
mov	cl, 9
mov	si, 1179h
pop	ax

loc_45D7:
add	cl, cl
xor	ch, ch
add	si, cx
mov	[si], ax
inc	byte ptr ds:0C8h
inc	byte ptr ds:0C9h
cmp	byte ptr ds:2Ah, 38h ; '8'
jb	short loc_45FB
cmp	byte ptr ds:0Bh, 8
jz	short loc_45FB
mov	ax, 201h
call	sub_48BE

loc_45FB:
call	sub_10153
retn
; END OF FUNCTION CHUNK	FOR sub_2F15



sub_45FF proc near
mov	cl, ds:0C8h
xor	ch, ch
jcxz	short locret_461D
mov	si, 1179h
dec	byte ptr ds:0C8h
mov	di, si
add	si, 2
push	ds
pop	es
mov	cx, 9
rep movsw
xor	ax, ax
stosw

locret_461D:
retn
sub_45FF endp




sub_461E proc near
call	sub_DF5E
mov	ax, 15h
call	sub_E00E
mov	si, 14C8h
call	sub_E0EB
mov	al, 1
sub_461E endp




sub_462F proc near
call	sub_DF5E
and	ax, 7
add	al, 0Bh
mov	bx, 56h	; 'V'
mov	dx, 64h	; 'd'
call	sub_E0FF
jmp	sub_DF4C
sub_462F endp




sub_4643 proc near
mov	ax, 15h
call	sub_E00E
mov	al, 9
call	sub_C9E5
mov	word ptr ds:0D816h, 4

loc_4654:
mov	bp, 27B6h
mov	ax, 9
call	sub_10223
dec	word ptr ds:0D816h
jns	short loc_4654
jmp	short sub_461E
sub_4643 endp




sub_4665 proc near
mov	ax, 15h
call	sub_E00E
mov	word ptr ds:0D816h, 0

loc_4671:
mov	bp, 27B6h
mov	ax, 9
call	sub_10223
inc	word ptr ds:0D816h
cmp	word ptr ds:0D816h, 0Dh
jb	short loc_4671
retn
sub_4665 endp

mov	ax, ds:0D816h
and	ax, 7
cmp	al, 5
jb	short loc_4694
sub	al, 8
neg	al

loc_4694:
add	al, 2
call	sub_462F



sub_4699 proc near
call	sub_DF5E
mov	bx, 67h	; 'g'

loc_469F:
push	bx
mov	bx, 0Fh

loc_46A3:
call	sub_10287
cmp	al, dl
jz	short loc_46A3
mov	dl, al
add	ax, 17h
pop	bx
push	dx
mov	dx, 0A3h ; '�'
call	sub_E1CD
pop	dx
add	bx, 3
cmp	bx, 70h	; 'p'
jbe	short loc_469F
mov	si, 14CEh
mov	ax, ds:0D816h
and	ax, 3
add	al, 13h
mov	[si], al
mov	[si+6],	al
call	sub_E0EB
jmp	sub_DF4C
sub_4699 endp




sub_46D6 proc near
call	sub_461E
mov	al, 2
call	sub_462F
mov	cx, 14h
call	sub_46EC
call	sub_CA79
mov	al, 1
jmp	sub_462F
sub_46D6 endp




sub_46EC proc near
mov	ax, 15h
call	sub_E00E
mov	word ptr ds:0D816h, 0

loc_46F8:
push	cx
call	sub_4699
mov	ax, 9
call	sub_10270
inc	word ptr ds:0D816h
pop	cx
loop	loc_46F8
retn
sub_46EC endp

xor	ax, ax
jmp	short loc_4711
xor	ax, ax
dec	ax

loc_4711:
mov	ds:0DBh, al
neg	ax
add	al, 2Ah	; '*'
call	sub_CA15
call	sub_B782
call	sub_46D6
call	loc_494F
call	sub_59B9
mov	byte ptr ds:0E9h, 0
push	ds
pop	es
mov	di, 1FC3h
xor	al, al
stosb
mov	si, 1179h
xor	cx, cx
mov	cl, ds:0C8h
add	si, cx
add	si, cx
mov	bl, ds:0DBh

loc_4745:
sub	si, 2
mov	ax, [si]
mov	ah, al
xor	ah, bl
js	short loc_475B
and	ax, 3Fh
add	ax, 78h	; 'x'
stosw
mov	ax, 290Bh
stosw

loc_475B:
loop	loc_4745
mov	ax, 0A3h ; '�'
stosw
mov	ax, 29D4h
stosw
xor	ax, ax
stosw
mov	bp, 1FC2h
mov	bx, 0F66h
jmp	sub_F1F3



sub_4771 proc near
mov	ds:47A9h, al
call	sub_4665
call	sub_E36A
call	sub_CA79
mov	bp, 28B5h
mov	al, 8
jmp	sub_DFD8
sub_4771 endp




sub_4785 proc near
mov	ax, 15h
call	sub_E00E
mov	al, 0Ah
call	sub_C9E5
mov	al, ds:47A9h
xor	ah, ah
mov	si, ax
shl	si, 1
mov	dx, [si+225Dh]
xor	bx, bx
xchg	bl, dh
add	ax, 1Eh
shl	si, 1
mov	[si+47F8h], dx
mov	[si+47FAh], bx
jmp	sub_E0FF
sub_4785 endp




sub_47B1 proc near
cmp	byte ptr ds:24h, 0Ch
jnz	short loc_47BB
call	sub_402F

loc_47BB:
cmp	byte ptr ds:47A9h, 0
jz	short locret_47DA
call	sub_E36A
mov	byte ptr ds:47A6h, 0FFh
mov	al, 8
mov	bp, 2DD3h
call	sub_DFD8
mov	byte ptr ds:47A9h, 0
call	sub_4643

locret_47DA:
retn
sub_47B1 endp

mov	al, ds:1FC3h
cbw
shr	ax, 1
shr	ax, 1
add	cx, ax
inc	cx
mov	si, 1179h
xor	ax, ax
mov	al, ds:0C8h
add	si, ax
add	si, ax

loc_47F2:
sub	si, 2
mov	ax, [si]
xor	al, ds:0DBh
js	short loc_47F2
loop	loc_47F2
mov	ax, [si]
mov	ds:24h,	ah
and	al, 3Fh
cmp	byte ptr ds:0DBh, 0
jnz	short loc_4826
or	byte ptr [si], 80h
dec	byte ptr ds:0C9h
cmp	al, 0Bh
jnz	short loc_4826
sub	ah, 2
cmp	ah, 2
jnb	short loc_4826
or	byte ptr ds:0BFh, 20h

loc_4826:
xor	ah, ah
cmp	al, ds:47A9h
jz	short loc_4840
push	ax
call	sub_47B1
pop	ax
push	ax
add	ax, 1Ah
call	sub_CA15
pop	ax
push	ax
call	sub_4771
pop	ax

loc_4840:
mov	ds:0E9h, al
xor	bl, bl
xchg	bl, ds:46D9h
push	bx
call	sub_B5C1
call	sub_B7C5
mov	byte ptr ds:1C06h, 80h ; '�'
mov	bp, 1FF2h
mov	bx, 2997h
call	sub_F1F3
pop	ax
mov	ds:46D9h, al

locret_4862:
retn

loc_4863:
mov	al, 6
jmp	short loc_4869
xor	al, al

loc_4869:
mov	bl, ds:0C9h
mov	ds:0EBh, bl
cmp	byte ptr ds:47A9h, 0
jz	short locret_4862
push	ax
call	sub_B69F
call	sub_B7C5
call	sub_DF5E
call	sub_4785
call	sub_47B1
mov	byte ptr ds:24h, 0
pop	ax
mov	ds:23h,	al
call	sub_F1E6
call	sub_4D82
call	loc_4CA3
cmp	byte ptr ds:47A7h, 0
jnz	short locret_4862
jmp	sub_F150
mov	ax, 29h	; ')'
call	sub_CA15
mov	byte ptr ds:47A6h, 0FFh
mov	bp, 2DBFh
call	sub_DF67
call	sub_F1E6
call	sub_F150
jmp	sub_CA79



sub_48BE proc near
xor	di, di
sub_48BE endp




sub_48C0 proc near
test	byte ptr ds:0Ah, 1
jz	short locret_4903
mov	si, 1190h
mov	cl, [si]
xor	ch, ch
jcxz	short loc_48E4
inc	si

loc_48D1:
cmp	ax, [si]
jnz	short loc_48DA
cmp	di, [si+2]
jz	short locret_4903

loc_48DA:
add	si, 4
loop	loc_48D1
mov	si, 1190h
mov	cl, [si]

loc_48E4:
cmp	cx, 0Ah
jb	short loc_48F5
push	ax
push	si
push	di
call	sub_4904
pop	di
pop	si
pop	ax
mov	cx, 9

loc_48F5:
inc	byte ptr [si]
inc	si
add	cx, cx
add	cx, cx
add	si, cx
mov	[si], ax
mov	[si+2],	di

locret_4903:
retn
sub_48C0 endp




sub_4904 proc near
mov	si, 1190h
dec	byte ptr [si]
jnz	short loc_490F
mov	byte ptr [si-1], 0

loc_490F:
inc	si
mov	di, si
add	si, 4
push	ds
pop	es
mov	cx, 12h
rep movsw
xor	ax, ax
stosw
stosw
retn
sub_4904 endp




sub_4921 proc near
mov	si, 1190h
mov	dl, al
mov	bx, di
xor	cx, cx
xor	bp, bp
lodsb
mov	cl, al
jcxz	short locret_497E
mov	di, si
push	ds
pop	es

loc_4935:
lodsw
cmp	ah, dl
jnz	short loc_4948
cmp	dl, 0Fh
jnz	short loc_4943
cmp	bx, [si]
jnz	short loc_4948

loc_4943:
add	si, 2
jmp	short loc_494B

loc_4948:
stosw
movsw
inc	bp

loc_494B:
loop	loc_4935
jmp	short loc_496E

loc_494F:
mov	si, 1190h
xor	cx, cx
xor	bp, bp
lodsb
mov	cl, al
jcxz	short locret_497E
mov	di, si
push	ds
pop	es

loc_495F:
lodsw
cmp	al, 1
jnz	short loc_4969
add	si, 2
jmp	short loc_496C

loc_4969:
stosw
movsw
inc	bp

loc_496C:
loop	loc_495F

loc_496E:
mov	cx, bp
mov	ch, cl
xchg	cl, ds:1190h
cmp	cl, ch
jz	short locret_497E
xor	ax, ax
stosw
stosw

locret_497E:
retn
sub_4921 endp




sub_497F proc near
push	si
mov	si, 1190h
xor	cx, cx
mov	cl, [si]
jcxz	short loc_499D
inc	si

loc_498A:
cmp	al, [si+1]
jnz	short loc_4998
cmp	al, 0Fh
jnz	short loc_49A0
cmp	di, [si+2]
jz	short loc_49A0

loc_4998:
add	si, 4
loop	loc_498A

loc_499D:
pop	si
clc
retn

loc_49A0:
mov	ax, [si]
mov	di, [si+2]
pop	si
stc
retn
sub_497F endp




sub_49A8 proc near
push	ax
mov	ax, ds:1191h
mov	bx, ds:12h
mov	cl, ah
shr	bx, cl
shr	bx, 1
jnb	short loc_49C7
mov	di, ds:1193h
cmp	cl, 0Fh
jnz	short loc_49CA
cmp	di, ds:114Eh
jz	short loc_49CA

loc_49C7:
pop	ax
clc
retn

loc_49CA:
add	sp, 2
call	sub_FA82

loc_49D0:
push	word ptr ds:11CEh
or	di, di
jz	short loc_49DD
push	ax
call	sub_51EE
pop	ax

loc_49DD:
mov	ds:0EAh, al
mov	al, ah
xor	ah, ah
call	sub_B5A8
call	sub_B815
mov	byte ptr ds:0EAh, 0FFh
mov	al, 1
call	sub_BDC1
pop	di
call	sub_51EE
stc
retn
sub_49A8 endp




sub_49FA proc near

; FUNCTION CHUNK AT 3542 SIZE 0000000F BYTES

mov	al, ds:46D9h
or	al, ds:4774h
or	al, ds:11C9h
jnz	short locret_4A5F
call	sub_F2EB
cmp	bp, 1F0Eh
jnz	short locret_4A5F
cmp	byte ptr ds:0FBh, 0
js	short locret_4A5F
mov	ax, ds:0CE7Ah
cmp	byte ptr ds:2Ah, 14h
jb	short locret_4A5F
jz	short loc_4A71
cmp	byte ptr ds:1190h, 0
jz	short locret_4A5F
sub	ax, ds:0DC5Ah
cmp	ax, 32h	; '2'
jb	short locret_4A5F
call	sub_49A8
jnb	short loc_4A40
mov	byte ptr ds:23h, 0
jmp	loc_5412

loc_4A40:
cmp	byte ptr ds:2Bh, 0
jnz	short loc_4AA2
mov	bl, 28h	; '('
cmp	ax, 96h	; '�'
jb	short loc_4A60
cmp	ax, 0FAh ; '�'
jb	short locret_4A5F
cmp	ax, 15Eh
mov	bl, 26h	; '&'
jb	short loc_4A60
cmp	ax, 1C2h
jnb	short loc_4AA2

locret_4A5F:
retn

loc_4A60:
push	bx
call	sub_FA82
call	sub_E36A
pop	ax
mov	bp, 0F66h
call	sub_DFD8
jmp	sub_FABC

loc_4A71:
cmp	word ptr ds:10h, 0
jnz	short locret_4A5F
cmp	byte ptr ds:8, 0FFh
jnz	short locret_4A5F
sub	ax, ds:0DC5Ah
cmp	ax, 3E8h
jb	short locret_4A5F
add	word ptr ds:0DC5Ah, 3B6h
call	sub_2F41
call	sub_D04A

loc_4A94:
call	sub_49FA
cmp	byte ptr ds:0EAh, 0FFh
jnz	short loc_4A94
retn

loc_4A9F:
jmp	sub_4904

loc_4AA2:
call	sub_FA82
call	sub_CC2E
mov	di, ds:1193h
or	di, di
jz	short loc_4AC4
mov	ax, di
sub	ax, 100h
cmp	ax, 7AAh
jb	short loc_4AC1
mov	byte ptr ds:1193h, 0
jmp	short loc_4AC4

loc_4AC1:
call	sub_51EE

loc_4AC4:
mov	ax, ds:1191h
mov	ds:0EAh, al
cmp	al, 1
jnz	short loc_4AD1
mov	ds:0EBh, al

loc_4AD1:
mov	al, ah
xor	ah, ah
mov	di, ds:1193h
cmp	ax, 10h
jnb	short loc_4A9F
cmp	al, 0Eh
jnz	short loc_4AE6
or	di, di
jz	short loc_4A9F

loc_4AE6:
mov	ds:47C4h, ax
or	di, di
jz	short loc_4B17
call	sub_51EE
call	sub_4D68
cmp	word ptr ds:47C4h, 0Eh
jb	short loc_4B17
mov	al, 3
cmp	byte ptr ds:0EAh, 0Eh
jz	short loc_4B0A
mov	al, [di+9]
or	al, al
jz	short loc_4B17

loc_4B0A:
call	sub_87D6
mov	word ptr ds:47C4h, 0Eh
mov	ds:4756h, si

loc_4B17:
call	sub_4B62
mov	al, 1
call	sub_BDC1
call	sub_4904
xor	ax, ax
mov	ds:1F0Fh, al
mov	ds:1F10h, ax
call	sub_F267
call	sub_D189
mov	ax, 0BB8h
call	sub_FC80
call	sub_D183
mov	si, 2CC7h
call	sub_F92F
call	sub_B7B6
xor	ax, ax
mov	ds:479Eh, ax
mov	ds:4540h, ax
mov	byte ptr ds:0EAh, 0FFh
mov	byte ptr ds:0E8h, 0Ah
mov	word ptr ds:0DC30h, 0
mov	al, 6
call	sub_376A
jmp	sub_E2E2
sub_49FA endp




sub_4B62 proc near
mov	al, 6
mov	bp, 2C9Ah
jmp	sub_DFD8
sub_4B62 endp

mov	byte ptr ds:0E8h, 0
mov	al, 23h	; '#'
call	sub_E1C2
call	sub_E2E2
mov	ax, ds:47C4h
call	sub_B5A8
xor	ax, ax
mov	ds:1BEAh, ax
mov	ds:1BF8h, ax
mov	ds:46DFh, al
mov	si, 0C0B6h
call	sub_F92F
mov	si, 2CC7h
mov	bp, 6
jmp	sub_F8F5
mov	al, 0Ah
mov	si, 1478h
jmp	sub_DFA5
or	byte ptr ds:0Ah, 8
cmp	byte ptr ds:9Fh, 1
jnz	short locret_4BFB
call	sub_FA82
call	sub_CA9C
jnz	short loc_4BBB
mov	ax, 258h
call	sub_FC80
jmp	short loc_4BBE

loc_4BBB:
call	sub_CAA5

loc_4BBE:
cmp	byte ptr ds:29h, 64h ; 'd'
jb	short loc_4BF6
or	byte ptr ds:0Ah, 2
mov	byte ptr ds:0D5h, 0FFh
mov	al, 38h	; '8'
mov	bp, 0F66h
call	sub_DFD8
mov	ax, 3E8h
call	sub_10257
call	sub_AB5A
mov	al, 36h	; '6'
mov	bp, 0F66h
call	sub_DFD8
mov	cx, 3
call	sub_2EA9
mov	byte ptr ds:23h, 11h
jmp	sub_547D

loc_4BF6:
mov	byte ptr ds:46D9h, 3

locret_4BFB:
retn
inc	byte ptr ds:0C2h
sub	sp, 32h
mov	bx, sp
mov	bp, 2D62h
call	sub_3128
mov	word ptr [bx], 0
mov	si, sp

loc_4C11:
lodsw
or	ax, ax
jz	short loc_4C2E
push	si
mov	si, ax
push	si
mov	di, 11Ch
call	sub_A376
pop	si
call	sub_A1D8
pop	si
mov	ax, sp
add	ax, 0Eh
cmp	si, ax
jb	short loc_4C11

loc_4C2E:
add	sp, 32h
retn
cmp	byte ptr [si+3], 4
jnz	short locret_4C43
test	byte ptr [si+19h], 4
jz	short locret_4C43
mov	[bx], si
add	bx, 2

locret_4C43:
retn



sub_4C44 proc near
mov	si, ds:114Eh
cmp	si, 100h
jb	short locret_4C80
xor	ax, ax
call	sub_7D1F
cmp	ax, 2
jnb	short loc_4C5F
test	byte ptr ds:4732h, 1
jnz	short locret_4C80

loc_4C5F:
cmp	ax, 4
ja	short locret_4C80
jnz	short loc_4C67
dec	ax

loc_4C67:
cmp	ds:144Ch, al
jz	short locret_4C80
mov	ds:144Ch, al
add	ax, 0A1h ; '�'
push	ds
pop	es
mov	di, 0BC6Eh
mov	si, ax
call	sub_10F89
call	sub_1F68

locret_4C80:
retn
sub_4C44 endp




sub_4C81 proc near
mov	bp, 0D717h
call	sub_DF67
call	sub_F82B
mov	byte ptr ds:47A6h, 0FFh

loc_4C8F:
call	sub_4C44
xor	ax, ax
mov	ds:0DCE6h, al
mov	ds:47A4h, al
mov	ds:47AAh, ax
mov	bp, 2EB2h
call	sub_DF67

loc_4CA3:
cmp	byte ptr ds:2Bh, 0
jz	short loc_4CCB
mov	byte ptr ds:4732h, 0
call	sub_4C44
or	byte ptr ds:11BCh, 1
mov	byte ptr ds:46DFh, 0
call	sub_299D
call	sub_3667
call	sub_E39D
call	sub_DFC4
jmp	sub_36B6

loc_4CCB:
test	byte ptr ds:4732h, 1
jz	short loc_4CD5
call	sub_675A

loc_4CD5:
xor	ax, ax
mov	ds:14h,	ax
mov	ds:46DFh, al
call	sub_DF4C
call	sub_7A70
call	sub_5682
test	byte ptr ds:11C9h, 3
jnz	short loc_4CF0
call	sub_E2E2

loc_4CF0:
call	sub_CC2E
call	sub_3704
call	sub_3667
mov	al, ds:46DFh
mov	ah, al
xchg	al, ds:46E0h
cmp	al, ah
jz	short loc_4D1C
mov	ax, ds:0DBD6h
cmp	ax, ds:0DBD8h
jz	short sub_4D22
mov	al, 10h
mov	bp, 0F66h
call	sub_DFD8
call	sub_CCD4
jmp	short sub_4D22

loc_4D1C:
call	sub_DFC4
call	sub_E39D
sub_4C81 endp




sub_4D22 proc near

; FUNCTION CHUNK AT 3723 SIZE 0000008A BYTES

call	sub_547D
mov	ax, ds:0CE7Ah
mov	ds:0DC5Ah, ax
cmp	byte ptr ds:47A7h, 0
jnz	short locret_4D67
mov	al, ds:4735h
or	al, al
jns	short loc_4D3C
jmp	loc_55F3

loc_4D3C:
cmp	byte ptr ds:8, 0FFh
jz	short loc_4D4D
cmp	byte ptr ds:4774h, 0
jnz	short locret_4D67
jmp	sub_36B6

loc_4D4D:
cmp	byte ptr ds:11C9h, 0
jnz	short locret_4D67
mov	si, ds:47AAh
or	si, si
jz	short locret_4D67
xor	ax, ax
mov	al, [si+0Eh]
mov	ds:47C4h, ax
call	sub_B65E

locret_4D67:
retn
sub_4D22 endp




sub_4D68 proc near
mov	ds:47E6h, di
xor	ah, ah
mov	al, [di]
add	ax, 0
mov	ds:11EDh, ax
mov	al, [di+1]
xor	ah, ah
add	ax, 0Ch
mov	ds:11EFh, ax
retn
sub_4D68 endp




sub_4D82 proc near

; FUNCTION CHUNK AT 2EC9 SIZE 00000032 BYTES

cmp	byte ptr ds:4774h, 0
jz	short loc_4D99
call	loc_4EEA
call	sub_B7B6
sub_4D82 endp




sub_4D8F proc near
mov	bp, ds:2220h
mov	bx, 0F66h
jmp	sub_F208
sub_4D8F endp

; START	OF FUNCTION CHUNK FOR sub_4D82

loc_4D99:
mov	di, ds:114Eh
call	sub_4D68
call	sub_4DCB
cmp	byte ptr ds:11C9h, 0
jnz	short loc_4DAD
call	sub_4F60

loc_4DAD:
mov	ax, ds:0DC38h
cmp	ax, 74h	; 't'
jb	short loc_4DBC
mov	ax, 0DBECh
push	ax
call	sub_FA82

loc_4DBC:
call	sub_4ECB
call	sub_F633
mov	bp, 1F0Eh
mov	bx, 0F66h
jmp	sub_F208
; END OF FUNCTION CHUNK	FOR sub_4D82



sub_4DCB proc near
push	ds
pop	es
mov	di, 1F0Fh
xor	al, al
stosb
mov	bx, ds:6
mov	dx, ds:4
cmp	bl, 80h	; '�'
jz	short loc_4DE3
jmp	loc_4E7A

loc_4DE3:
mov	si, 220Ch
movsw
movsw
cmp	dl, 1
jnz	short loc_4E28
cmp	byte ptr ds:2Bh, 0
jz	short loc_4E0D
mov	si, 2218h
movsw
movsw
movsw
movsw
mov	si, 2214h
lodsw
cmp	byte ptr ds:2Ah, 4Fh ; 'O'
sbb	ah, ah
and	ah, 40h
stosw
movsw
jmp	short loc_4E73

loc_4E0D:
push	di
mov	di, ds:114Eh
call	sub_9DF7
pop	di
mov	si, 21DCh
lodsw
cmp	byte ptr ds:46FFh, 1
sbb	ah, ah
and	ah, 40h
stosw
movsw
jmp	short loc_4E73

loc_4E28:
cmp	bh, 1
jnz	short loc_4E73
cmp	dl, 8
jnz	short loc_4E69
cmp	byte ptr ds:0C8h, 0
jz	short loc_4E73
mov	si, 21E8h
lodsw
mov	cl, ds:0C9h
mov	ch, 27h	; '''
cmp	cl, 1
sbb	ah, ah
add	ch, ah
cmp	byte ptr ds:47A9h, 0
jz	short loc_4E53
mov	ch, 28h	; '('

loc_4E53:
mov	ds:1248h, ch
and	ah, 40h
stosw
movsw
lodsw
cmp	cl, ds:0C8h
cmc
sbb	ah, ah
and	ah, 40h
stosw
movsw

loc_4E69:
cmp	dl, 9
jnz	short loc_4E73
mov	si, 21F0h
movsw
movsw

loc_4E73:
mov	si, 21F4h
movsw
movsw
jmp	short loc_4EC7

loc_4E7A:
test	byte ptr ds:11C9h, 3
jnz	short loc_4EA7
mov	si, 220Ch
movsw
movsw
mov	si, 2214h
lodsw
cmp	byte ptr ds:2Ah, 4Fh ; 'O'
sbb	ah, ah
and	ah, 40h
stosw
movsw
call	sub_39B0
mov	si, 21E0h
cmp	al, 0Bh
jb	short loc_4EA3
add	si, 4

loc_4EA3:
movsw
movsw
jmp	short loc_4E73

loc_4EA7:
mov	si, 21FCh
cmp	byte ptr ds:11CBh, 0
jz	short loc_4EC0
mov	si, 2200h
cmp	byte ptr ds:2Ah, 32h ; '2'
jb	short loc_4EC0
movsw
movsw
mov	si, 2204h

loc_4EC0:
movsw
movsw
mov	si, 21F8h
movsw
movsw

loc_4EC7:
xor	ax, ax
stosw
retn
sub_4DCB endp




sub_4ECB proc near
cmp	byte ptr ds:2Bh, 0
jnz	short loc_4EEA
test	byte ptr ds:11C9h, 3
jz	short loc_4EF0
cmp	byte ptr ds:11CAh, 0
jnz	short loc_4EEA
mov	si, 1D72h
cmp	byte ptr ds:11CBh, 0
jnz	short loc_4EED

loc_4EEA:
mov	si, 1D1Eh

loc_4EED:
jmp	sub_F5FB

loc_4EF0:
mov	bx, ds:6
cmp	bl, 80h	; '�'
jnz	short loc_4F43
mov	dx, ds:4
cmp	dh, 21h	; '!'
jz	short loc_4F43
call	sub_5DCE
inc	si
mov	di, 1B96h
mov	al, 20h	; ' '
cmp	word ptr ds:114Eh, 100h
jnz	short loc_4F15
mov	al, 80h	; '�'

loc_4F15:
mov	bx, 21h	; '!'
cmp	dl, 1
jnz	short loc_4F20
inc	bx
mov	al, 20h	; ' '

loc_4F20:
mov	[di+2],	bx
mov	[di+46h], al
mov	ds:1CC4h, al
mov	cx, 4

loc_4F2C:
lodsb
add	di, 0Eh
mov	ah, 20h	; ' '
or	al, al
jz	short loc_4F3C
cmp	al, 0FBh ; '�'
jl	short loc_4F3C
mov	ah, 80h	; '�'

loc_4F3C:
mov	[di], ah
loop	loc_4F2C
jmp	loc_F605

loc_4F43:
mov	di, 1B98h
mov	word ptr [di], 23h ; '#'
mov	bx, 1Dh
mov	cx, 4

loc_4F50:
add	di, 0Eh
mov	[di], bx
mov	word ptr [di-2], 80h ; '�'
inc	bx
loop	loc_4F50
jmp	loc_F605
sub_4ECB endp




sub_4F60 proc near
call	sub_B7B6

loc_4F63:
call	sub_4FF7
mov	di, 1F0Ch

loc_4F69:
add	di, 4
cmp	word ptr [di], 0
jnz	short loc_4F69
mov	word ptr ds:12h, 0
push	ds
pop	es
mov	bp, 30B9h
call	loc_55BE
mov	bp, 3120h
call	loc_55BE
xor	ax, ax
stosw
retn
sub_4F60 endp

test	byte ptr [si+0Fh], 40h
jnz	short locret_4FEF
cmp	word ptr ds:47AAh, 0
jnz	short loc_4F9A
mov	ds:47AAh, si

loc_4F9A:
mov	al, [si+0Eh]
mov	cl, al
xor	ah, ah
add	ax, 78h	; 'x'
stosw
mov	ax, 1
shl	ax, cl
or	ds:12h,	ax
mov	ax, [si+4]
stosw
cmp	cl, 0Fh
jnz	short locret_4FEF
mov	cl, ds:476Ah
xor	ch, ch
dec	cx
jle	short loc_4FCE
push	si
mov	si, ax
mov	ax, 87h	; '�'

loc_4FC6:
inc	ax
stosw
xchg	ax, si
stosw
xchg	ax, si
loop	loc_4FC6
pop	si

loc_4FCE:
cmp	byte ptr ds:2Ah, 5
jb	short locret_4FEF
mov	al, ds:476Bh
or	al, al
jz	short locret_4FEF
push	di
dec	al
sub	al, ds:476Ah
cbw
shl	ax, 1
shl	ax, 1
add	di, ax
mov	word ptr [di], 8Fh ; '�'
pop	di

locret_4FEF:
retn
test	byte ptr [si+0Fh], 40h
jnz	short loc_4F9A
retn



sub_4FF7 proc near
mov	byte ptr ds:476Bh, 0
mov	byte ptr ds:476Ah, 0
mov	ax, 7F80h
mov	ds:10CAh, ax
mov	ds:10BAh, ax
mov	ds:10AAh, ax
mov	ds:109Ah, ax
mov	bx, ds:6
cmp	bl, 80h	; '�'
jnz	short locret_503D
mov	di, ds:114Eh
mov	dx, ds:4
mov	bp, 316Eh
call	sub_84D3
cmp	byte ptr [di+8], 21h ; '!'
jnz	short loc_503A
mov	ds:10A8h, dx
mov	ds:10AAh, bx
push	di
call	sub_41E8
pop	di

loc_503A:
call	sub_51EE

locret_503D:
retn
sub_4FF7 endp

mov	al, [si+3]
mov	ah, 2
test	al, 20h
jz	short loc_5051
cmp	byte ptr [di+8], 28h ; '('
jb	short loc_5060
inc	ah
jmp	short loc_5060

loc_5051:
test	byte ptr [si+10h], 80h
jnz	short locret_503D
cmp	byte ptr ds:2Bh, 0
jz	short loc_5060
dec	ah

loc_5060:
cmp	ah, dl
jnz	short locret_503D
test	byte ptr [si+10h], 80h
jnz	short loc_5099
mov	bp, 10B8h
mov	di, 4756h
cmp	al, 80h	; '�'
jnb	short loc_50BD
mov	bp, 10C8h
mov	di, 4758h
and	byte ptr ds:476Ah, 7
mov	al, ds:476Ah
inc	byte ptr ds:476Ah
xor	ah, ah
cmp	si, 8E0h
jnz	short loc_5093
inc	ax
mov	ds:476Bh, al
dec	ax

loc_5093:
shl	ax, 1
add	di, ax
jmp	short loc_50BD

loc_5099:
mov	bp, 1098h
mov	di, 4768h
mov	al, [si+3]
and	al, 10h
and	byte ptr [bp+0Fh], 0EFh
or	[bp+0Fh], al
mov	word ptr ds:0EEh, 0
or	al, al
mov	al, 0FFh
jnz	short loc_50BA
mov	al, [si+15h]

loc_50BA:
mov	ds:0EDh, al

loc_50BD:
mov	[di], si
mov	[bp+0],	dx
mov	[bp+2],	bx
retn



sub_50C6 proc near
call	sub_10140
mov	di, [si+4]
mov	ds:2Ch,	di
mov	al, [si]
mov	ds:2Eh,	al
mov	al, [si+3]
mov	ds:30h,	al
and	ax, 0Fh
mov	ds:2Fh,	al
add	ax, 18h
mov	ds:11F3h, ax
call	sub_5197
call	sub_516D
mov	ds:48h,	ax
mov	ax, [si+10h]
mov	ds:32h,	ax
mov	ax, [si+12h]
mov	ds:34h,	ax
and	ax, 0Fh
mov	ds:31h,	al
add	ax, 0
mov	ds:11FFh, ax
call	sub_8DCD
mov	ds:36h,	al
mov	al, [si+16h]
mov	ds:38h,	al
call	sub_51E0
mov	ds:11F7h, ax
mov	al, [si+17h]
mov	ds:39h,	al
call	sub_51E0
mov	ds:11F9h, ax
mov	al, [si+18h]
mov	ds:3Ah,	al
call	sub_51E0
mov	ds:11FBh, ax
mov	ax, [si+0Ch]
mov	ds:44h,	ax
mov	ax, [si+0Eh]
mov	ds:46h,	ax
xor	ah, ah
add	ax, 0E8h ; '�'
mov	ds:11F1h, ax
call	sub_880B
mov	bp, ax
mov	al, [bp+si+16h]
mov	ds:37h,	al
mov	al, [si+19h]
mov	ds:3Bh,	al
mov	al, [si+1Ah]
mov	ds:3Ch,	al
call	sub_3995
sub	al, [si+14h]
mov	ds:40h,	al
call	sub_51EE
call	sub_10153
retn
sub_50C6 endp




sub_516D proc near
cmp	byte ptr [si+3], 0
jz	short loc_517A
xor	ax, ax
and	word ptr [si+10h], 0FFF3h
retn

loc_517A:
mov	ax, ds:42h
or	ax, ax
jz	short loc_5191
mov	cx, ax
mov	ax, [si+0Eh]
xor	dx, dx
div	cx
shl	dx, 1
cmp	cx, dx
adc	ax, 0

loc_5191:
mov	ds:4Ah,	ax
jmp	sub_8F5A
sub_516D endp




sub_5197 proc near
mov	ax, ds:2
sub	ax, [si+0Ah]
mov	ds:42h,	ax
mov	dx, ax
mov	cl, 4
shr	ax, cl
mov	ds:41h,	al
mov	ax, 74h	; 't'
test	byte ptr [si+3], 10h
jnz	short loc_51DC
mov	ax, 70h	; 'p'
cmp	dx, 3
jb	short loc_51DC
inc	ax
cmp	dx, 10h
jb	short loc_51DC
inc	ax
cmp	dx, 20h	; ' '
jb	short loc_51DC
inc	ax
push	ax
push	si
mov	si, ax
call	sub_EE40
call	sub_EF0C
mov	ax, dx
mov	cl, 4
shr	ax, cl
call	sub_101B3
pop	si
pop	ax

loc_51DC:
mov	ds:11F5h, ax
retn
sub_5197 endp




sub_51E0 proc near
xor	ah, ah
shr	ax, 1
shr	ax, 1
shr	ax, 1
shr	ax, 1
add	ax, 0D1h ; '�'
retn
sub_51E0 endp




sub_51EE proc near
mov	ds:11CEh, di
push	si
push	di
mov	ah, [di]
mov	al, [di+1]
mov	ds:4Eh,	ax
mov	bx, 1141h
xlat
mov	ds:50h,	al
mov	al, [di+0Ah]
mov	ds:51h,	al
mov	al, [di+12h]
mov	ds:52h,	al
mov	al, [di+1Bh]
mov	ds:54h,	al
mov	al, [di+8]
mov	ds:4Dh,	al
push	ds
pop	es
push	di
lea	si, [di+14h]
mov	di, 55h	; 'U'
mov	cx, 7
rep movsb
pop	di
call	sub_528E
call	sub_5375
call	sub_9DF7
mov	di, 46FEh
mov	al, 0FFh
mov	cx, 7

loc_523B:
cmp	byte ptr [di], 1
rcl	al, 1
inc	di
loop	loc_523B
not	al
mov	cl, 1
shl	al, cl
mov	ds:53h,	al
pop	di
call	sub_5255
call	sub_7144
pop	si
retn
sub_51EE endp




sub_5255 proc near
mov	byte ptr ds:0F7h, 0
cmp	di, ds:1150h
jz	short locret_528D
mov	ax, di
sub	ax, 100h
mov	bl, 1Ch
div	bl
inc	ax
mov	bh, al
mov	bl, 80h	; '�'
mov	si, 1018h
call	sub_527D
mov	si, 1028h
call	sub_527D
mov	si, 1048h
sub_5255 endp




sub_527D proc near
cmp	bx, [si+2]
jnz	short locret_528D
mov	cl, [si+0Eh]
mov	al, 1
shl	al, cl
or	ds:0F7h, al

locret_528D:
retn
sub_527D endp




sub_528E proc near
xor	ax, ax
mov	ds:94h,	ax
mov	ds:96h,	ax
mov	ds:5Ch,	ax
mov	ds:5Eh,	ax
mov	bp, 3406h
call	sub_84D3
call	sub_52A9
mov	ds:9Ch,	al
retn
sub_528E endp




sub_52A9 proc near
mov	ax, ds:96h
mov	dx, ds:94h
cmp	ax, dx
pushf
jnb	short loc_52B6
xchg	ax, dx

loc_52B6:
mov	cx, dx
jcxz	short loc_52CD
xor	dx, dx
xchg	ah, dl
xchg	al, ah
cmp	dx, cx
jnb	short loc_52CD
div	cx
shr	ax, 1
cmp	ax, 0FCh ; '�'
jb	short loc_52D0

loc_52CD:
mov	ax, 0FCh ; '�'

loc_52D0:
popf
jnb	short locret_52D5
neg	al

locret_52D5:
retn
sub_52A9 endp

test	byte ptr [si+3], 20h
jnz	short locret_52FC
call	sub_52FD
test	byte ptr [si+10h], 80h
jnz	short loc_52F8
add	ds:96h,	ax
mov	ax, [si+10h]
or	ds:5Ch,	ax
mov	ax, [si+12h]
or	ds:5Eh,	ax
retn

loc_52F8:
add	ds:94h,	ax

locret_52FC:
retn



sub_52FD proc near
call	sub_8DCD
xor	ah, ah
add	al, al
add	al, [si+17h]
jnb	short loc_530B
mov	al, 0FFh

loc_530B:
mul	byte ptr [si+1Ah]
shr	ax, 1
shr	ax, 1
shr	ax, 1
shr	ax, 1
mov	dx, ax
mov	bl, [si+19h]
shl	bl, 1
shl	bl, 1
shl	dx, 1
shl	bl, 1
jnb	short loc_5329
add	ax, dx
jb	short loc_5347

loc_5329:
shl	dx, 1
shl	bl, 1
jnb	short loc_5333
add	ax, dx
jb	short loc_5347

loc_5333:
shl	dx, 1
shl	bl, 1
jnb	short loc_533D
add	ax, dx
jb	short loc_5347

loc_533D:
shl	dx, 1
shl	bl, 1
jnb	short loc_534A
add	ax, dx
jnb	short loc_534A

loc_5347:
mov	ax, 0FFFFh

loc_534A:
mov	al, ah
xor	ah, ah
or	ax, ax
jnz	short locret_5359
cmp	byte ptr [si+1Ah], 1
cmc
adc	al, ah

locret_5359:
retn
sub_52FD endp




sub_535A proc near
call	sub_8DCD
xor	ah, ah
add	al, al
add	al, [si+16h]
jnb	short loc_5368
mov	al, 0FFh

loc_5368:
mul	byte ptr [si+1Ah]
shr	ax, 1
shr	ax, 1
shr	ax, 1
shr	ax, 1
jmp	short loc_534A
sub_535A endp




sub_5375 proc near
push	si
push	ds
pop	es
push	di
mov	di, 60h	; '`'
mov	cx, 33h	; '3'
xor	al, al
rep stosb
pop	di
mov	bp, 34D0h
call	sub_8509
mov	al, ds:60h
add	al, ds:7Eh
mov	ds:91h,	al
mov	al, ds:61h
add	al, ds:7Fh
mov	ds:92h,	al
pop	si
retn
sub_5375 endp

test	byte ptr [si+3], 20h
jnz	short locret_53EA
mov	al, [si+3]
mov	dx, 61h	; 'a'
test	al, 40h
jz	short loc_53B3
mov	dx, 7Fh	; ''

loc_53B3:
mov	bx, dx
test	byte ptr [si+10h], 80h
jnz	short loc_53C0
dec	bx
cmp	al, 80h	; '�'
jz	short loc_53EB

loc_53C0:
inc	byte ptr [bx]
mov	ah, al
and	ax, 30Fh
cmp	ah, 3
jnz	short loc_53CE
and	al, 0FCh

loc_53CE:
xor	ah, ah
mov	bx, dx
add	bx, ax
inc	byte ptr [bx+1]
cmp	bx, 7Fh	; ''
jnb	short locret_53EA
mov	ax, [si+12h]
and	ax, 0Fh
mov	bx, 71h	; 'q'
add	bx, ax
inc	byte ptr [bx]

locret_53EA:
retn

loc_53EB:
inc	byte ptr ds:90h
retn
cmp	byte ptr ds:47A7h, 0
jnz	short locret_53EA
mov	al, [si+0Eh]
xor	ah, ah
push	si
call	sub_B5C1
pop	si
jnb	short loc_5412
mov	ax, ds:47C4h
mov	di, ds:114Eh
call	sub_497F
jnb	short locret_547C
call	loc_49D0
; START	OF FUNCTION CHUNK FOR sub_49FA

loc_5412:
mov	ax, ds:47C4h
mov	di, ds:114Eh
call	sub_4921
mov	byte ptr ds:0E7h, 0
; END OF FUNCTION CHUNK	FOR sub_49FA



sub_5421 proc near
inc	byte ptr ds:47A7h
cmp	byte ptr ds:23h, 3
jnz	short loc_5442
mov	bp, 1F92h
mov	bx, 97CFh
call	sub_F1F3
mov	word ptr ds:1BEAh, 0
mov	word ptr ds:1BF8h, 0
retn

loc_5442:
cmp	byte ptr ds:23h, 4
jnz	short loc_5465
mov	bp, 1F9Eh
and	byte ptr [bp+0Bh], 0BFh
mov	bx, 97CFh
call	sub_F1F3
mov	word ptr ds:1BEAh, 0
mov	word ptr ds:1BF8h, 0
jmp	sub_4ECB

loc_5465:
cmp	byte ptr ds:4774h, 0
jnz	short locret_547C
cmp	byte ptr ds:23h, 64h ; 'd'
jnb	short locret_547C
mov	ax, ds:47C4h
call	sub_B2AF
call	sub_F150

locret_547C:
retn
sub_5421 endp




sub_547D proc near
cmp	byte ptr ds:11C9h, 0
jnz	short loc_54B9
xor	ax, ax
mov	ds:1Ah,	al
mov	ds:47A7h, al
xchg	al, ds:47A6h
or	al, al
jnz	short locret_547C
inc	byte ptr ds:1Ah
cmp	byte ptr ds:0Bh, 8
jnz	short loc_54B3
mov	ax, ds:0C0h
and	ax, ds:1158h
jz	short loc_54B3
test	word ptr ds:12h, 8
jz	short loc_54B3
call	sub_4436

loc_54B3:
mov	bp, 3520h
jmp	loc_55BE

loc_54B9:
xor	ax, ax
mov	ds:1Ah,	al
mov	ds:47A7h, al
mov	ds:23h,	al
xchg	al, ds:47A6h
or	al, al
jnz	short locret_547C
cmp	word ptr ds:1152h, 0FFFFh
jz	short loc_5507
call	sub_5FC9
call	sub_6052
cmp	byte ptr ds:23h, 0
jz	short locret_5506
call	sub_553F
js	short locret_5506
call	sub_FA82
call	sub_555B
push	ax
mov	ax, 4Bh	; 'K'
call	sub_10257
pop	ax
push	ax
call	sub_B5A8
pop	ax
jb	short locret_5506
mov	cl, 10h
mul	cl
add	ax, 0FD8h
mov	si, ax
call	sub_5421

locret_5506:
retn

loc_5507:
call	sub_6052
cmp	byte ptr ds:23h, 0
jz	short locret_5506
call	sub_FA82
call	sub_626F
mov	cx, 200Ch
mov	dx, 66h	; 'f'
mov	bx, 4Eh	; 'N'
mov	ax, 0BFh ; '�'
call	sub_F064
call	sub_DFC4
call	sub_E3AD
call	sub_699A
mov	bp, 1F9Eh
or	byte ptr [bp+0Bh], 40h
mov	bx, 4ABEh
call	sub_F1F3
jmp	sub_4ECB
sub_547D endp




sub_553F proc near
mov	ax, ds:1152h
cmp	ax, 0FFFFh
jz	short loc_5558
cmp	ah, 0FFh
jz	short loc_5556
test	word ptr ds:0, 80h
jnz	short loc_5556
xchg	al, ah

loc_5556:
xor	ah, ah

loc_5558:
or	ax, ax
retn
sub_553F endp




sub_555B proc near
call	sub_10140
or	byte ptr ds:4728h, 1
mov	bl, ds:11C9h
and	bl, 3
cmp	bl, 2
jz	short loc_559B
dec	bl
jnz	short loc_5597
mov	byte ptr ds:473Eh, 1
mov	byte ptr ds:47A4h, 1
push	ax
mov	al, 34h	; '4'
call	sub_E1C2
call	sub_DFC4
call	sub_E2E2
pop	ax
or	ax, ax
js	short loc_5594
mov	ds:47C4h, ax
call	sub_B65E

loc_5594:
call	sub_E3AD

loc_5597:
call	sub_10153
retn

loc_559B:
call	sub_69BB
call	sub_E344
jmp	short loc_5597
sub_555B endp




sub_55A3 proc near
cmp	byte ptr ds:23h, 0
jz	short locret_55BD
call	sub_B782
mov	byte ptr ds:47A7h, 0
mov	bp, 3520h
call	loc_55BE
mov	byte ptr ds:23h, 0

locret_55BD:
retn
sub_55A3 endp


loc_55BE:
push	bx
push	dx
mov	si, 0FD8h
mov	cx, 10h
mov	bx, ds:6
mov	dx, ds:4

loc_55CE:
cmp	bx, [si+2]
jnz	short loc_55EB
cmp	dx, [si]
jnz	short loc_55EB
pop	dx
pop	bx
push	bx
push	dx
push	cx
push	si
push	bp
call	bp
byte_55E0 db 5Dh
pop	si
pop	cx
mov	bx, ds:6
mov	dx, ds:4

loc_55EB:
add	si, 10h
loop	loc_55CE
pop	dx
pop	bx
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_6. PRESS KEYPAD "+" TO EXPAND]
; START	OF FUNCTION CHUNK FOR sub_4D22

loc_55F3:
and	byte ptr ds:4735h, 7Fh
sub	al, 94h	; '�'
jb	short nullsub_6
test	al, 0Fh
jnz	short nullsub_6
push	ax
call	sub_FA82
call	sub_DF4C
call	sub_567D
call	sub_E3AD
pop	ax
xor	ah, ah
mov	cl, 4
shr	ax, cl
inc	ax
cmp	al, 0Ah
jb	short loc_561B
mov	al, 0Ah

loc_561B:
xchg	al, ah
call	sub_10257
cmp	byte ptr ds:4735h, 37h ; '7'
jb	short loc_567A
call	sub_2D47
mov	cx, 5
call	sub_2EA9
mov	bp, 0C0ADh
mov	al, 34h	; '4'
call	sub_DFD8
call	sub_1F56
mov	bp, 1A0Fh
call	sub_DF67
mov	si, ds:1150h
mov	byte ptr ds:47A6h, 0FFh
mov	bp, 401Fh
call	sub_DF67
mov	dx, ds:4
mov	bx, ds:6
cmp	dh, 21h	; '!'
jnb	short loc_5666
mov	dl, 2
cmp	dh, 20h	; ' '
jnz	short loc_5666
mov	dl, 0Ah

loc_5666:
mov	bp, 4057h
mov	al, 34h	; '4'
mov	byte ptr ds:47A6h, 0FFh
call	sub_DFD8
inc	byte ptr ds:0E7h
jmp	sub_547D

loc_567A:
jmp	sub_4C81
; END OF FUNCTION CHUNK	FOR sub_4D22



sub_567D proc near
mov	al, 22h	; '"'
jmp	sub_E1C2
sub_567D endp




sub_5682 proc near
call	sub_B7B6
sub_5682 endp




sub_5685 proc near

; FUNCTION CHUNK AT 39EC SIZE 00000087 BYTES

call	sub_6BD0
mov	word ptr ds:472Dh, 0
call	sub_7A78
call	sub_E302
mov	ax, 0FFFFh
cmp	ds:8, al
jz	short loc_56A5
mov	dx, ds:4
call	sub_5DCE
lodsb

loc_56A5:
or	ax, ax
js	short loc_56AC
jmp	loc_58BC

loc_56AC:
call	sub_59B9
or	byte ptr ds:47A4h, 1
test	byte ptr ds:11C9h, 3
jnz	short sub_56C4
sub_5685 endp




sub_56BB proc near

; FUNCTION CHUNK AT 4D06 SIZE 00000051 BYTES

call	sub_56DC
call	sub_6CE2
jmp	loc_6BD6
sub_56BB endp




sub_56C4 proc near
mov	byte ptr ds:4728h, 0
call	sub_6858
call	sub_692A
mov	ax, ds:487Eh
call	sub_E8EB
call	dword ptr ds:3959h
jmp	sub_575D
sub_56C4 endp




sub_56DC proc near
mov	byte ptr ds:22E3h, 1
call	sub_575D
mov	si, ds:1150h
mov	ax, 1972h
call	sub_7D1F
mov	bx, ax
mov	dx, ds:4
mov	ax, ds:6
cmp	al, 80h	; '�'
mov	al, 0
jz	short loc_5704
cmp	dx, [si+2]
jnz	short loc_571A
mov	al, ah

loc_5704:
cmp	al, [bx+5]
jnb	short loc_571A
add	al, [bx]
cmp	al, 7Fh	; ''
jnz	short loc_5717
mov	ah, [si]
shr	ah, 1
add	al, ah
sub	al, 5

loc_5717:
jmp	sub_E1C2

loc_571A:
mov	di, ds:1150h
test	byte ptr [di+0Ah], 1
jnz	short loc_5742
call	sub_5F4E
call	sub_D45B
dec	di
mov	cx, 4

loc_572E:
mov	al, es:[di]
inc	di
and	al, 30h
cmp	al, 10h
jz	short loc_5742
loop	loc_572E
mov	bx, 13h
mov	cx, 42h	; 'B'
jmp	short loc_5748

loc_5742:
mov	bx, 0Ah
mov	cx, 88h	; '�'

loc_5748:
mov	ax, ds:6
xchg	al, ah
xor	ax, ds:4
inc	ax
xor	dx, dx
div	bx
mov	ax, dx
add	ax, cx
jmp	sub_E1C2
sub_56DC endp




sub_575D proc near
mov	byte ptr ds:46DFh, 1
call	sub_582C
cmp	byte ptr ds:46D7h, 0
jz	short loc_577D
cmp	ds:46D6h, bl
jz	short locret_5783

loc_5772:
mov	byte ptr ds:46D7h, 30h ; '0'
call	sub_5841
jmp	sub_5889

loc_577D:
call	sub_5841
call	sub_585C

locret_5783:
retn
sub_575D endp




sub_5784 proc near
call	sub_575D
mov	ax, 28h	; '('
call	sub_E00E
xor	ax, ax
mov	bp, 14h
xor	bx, bx
mov	cx, 4

loc_5797:
xor	dx, dx
push	cx
push	bp

loc_579B:
push	ax
call	sub_E1CD
pop	ax
add	dx, 28h	; '('
cmp	dx, 140h
jb	short loc_579B
pop	bp
pop	cx
inc	ax
add	bx, bp
loop	loc_5797

locret_57B0:
retn
sub_5784 endp




sub_57B1 proc near
cmp	byte ptr ds:46DFh, 0
jz	short locret_57B0
call	sub_582C
cmp	ds:46D6h, bl
jz	short locret_57B0
sub_57B1 endp




sub_57C1 proc near
call	sub_5841
call	sub_5889
mov	al, 40h	; '@'
xchg	al, ds:46D7h
or	al, al
jnz	short locret_57B0

loc_57D1:
mov	si, 3916h
mov	bp, 10h
jmp	sub_F8F5
sub_57C1 endp




sub_57DA proc near
cmp	byte ptr ds:46D7h, 0
jz	short locret_57B0
call	sub_57E6
jmp	short sub_57DA
sub_57DA endp




sub_57E6 proc near
cmp	byte ptr ds:46DFh, 0
jz	short sub_5820

loc_57ED:
mov	cx, 1C5h
mov	bx, 0DBh ; '�'
cmp	byte ptr ds:22E3h, 0
jnz	short loc_5800
mov	cx, 0F0h ; '�'
mov	bx, 180h

loc_5800:
mov	al, ds:46D7h
push	ax
call	dword ptr ds:3951h
pop	ax
cmp	byte ptr ds:227Dh, 0
jnz	short loc_581A
mov	cx, 30h	; '0'
mov	bx, 2D0h
call	dword ptr ds:3951h

loc_581A:
dec	byte ptr ds:46D7h
jnz	short nullsub_7
sub_57E6 endp




sub_5820 proc near
mov	byte ptr ds:46D7h, 0
mov	si, 3916h
jmp	sub_F92F
sub_5820 endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_7. PRESS KEYPAD "+" TO EXPAND]



sub_582C proc near
mov	ax, ds:2

loc_582F:
mov	ah, al
shr	ah, 1
shr	ah, 1
and	ax, 1C0Fh
mov	bx, 2280h
xlat
add	al, ah
mov	bl, al
retn
sub_582C endp




sub_5841 proc near
mov	ax, 28h	; '('
add	al, ds:22E3h

loc_5848:
mov	ds:0DBB4h, al
call	sub_E00E
mov	al, bl
xor	ah, ah
mov	ds:46D6h, al
call	sub_E0C4
lea	dx, [si+6]
retn
sub_5841 endp




sub_585C proc near
mov	cx, 1C5h
mov	bx, 0DBh ; '�'
cmp	byte ptr ds:22E3h, 0
jnz	short loc_586F
mov	cx, 0F0h ; '�'
mov	bx, 180h

loc_586F:
push	cx
call	dword ptr ds:38BDh
pop	cx
add	dx, cx
cmp	byte ptr ds:227Dh, 0
jnz	short locret_5888
mov	cx, 30h	; '0'
mov	bx, 2D0h
call	dword ptr ds:38BDh

locret_5888:
retn
sub_585C endp




sub_5889 proc near
mov	cx, 1C5h
mov	bx, 0DBh ; '�'
cmp	byte ptr ds:22E3h, 0
jnz	short loc_589C
mov	cx, 0F0h ; '�'
mov	bx, 180h

loc_589C:
push	cx
call	dword ptr ds:394Dh
pop	cx
add	dx, cx
cmp	byte ptr ds:227Dh, 0
jnz	short locret_58B5
mov	cx, 30h	; '0'
mov	bx, 2D0h
call	dword ptr ds:394Dh

locret_58B5:
retn
sub_5889 endp




sub_58B6 proc near
mov	si, 0C0B6h
jmp	sub_F92F
sub_58B6 endp

; START	OF FUNCTION CHUNK FOR sub_5685

loc_58BC:
mov	byte ptr ds:22E3h, 1
push	ax
call	sub_59B9
mov	ax, ds:4
cmp	ax, 2005h
jz	short loc_58ED
cmp	ax, 1005h
jz	short loc_58E8
dec	al
jnz	short loc_58F0
cmp	ah, 21h	; '!'
jnz	short loc_58E3
pop	ax
mov	di, ds:114Eh
mov	al, [di]
push	ax

loc_58E3:
call	sub_56BB
jmp	short loc_58F0

loc_58E8:
mov	byte ptr ds:22E3h, 0

loc_58ED:
call	sub_5784

loc_58F0:
pop	ax
call	sub_5A29
cmp	byte ptr ds:46DFh, 0
jz	short sub_594C
cmp	byte ptr ds:4, 1
jnz	short sub_594C
cmp	byte ptr ds:4731h, 0FFh
jz	short locret_594B
mov	cl, ds:46FFh
xor	ch, ch
jcxz	short locret_594B
mov	ax, 388Dh
push	ax
mov	byte ptr ds:4731h, 0
test	byte ptr ds:47A4h, 81h
jnz	short locret_594B
mov	ax, 33h	; '3'
call	sub_E00E
call	sub_5965
mov	ax, dx
add	ax, 0Ch
mov	ds:472Dh, ax
mov	ax, bx
add	ax, 8
mov	ds:472Fh, ax

loc_593A:
push	cx
push	bx
push	dx
call	sub_5979
pop	dx
pop	bx
pop	cx
; END OF FUNCTION CHUNK	FOR sub_5685



sub_5943 proc near
add	dx, 46h	; 'F'
add	bx, 0Ah
loop	loc_593A

locret_594B:
retn
sub_5943 endp




sub_594C proc near
call	sub_58B6
mov	ax, ds:4
cmp	al, 4
jnz	short locret_5964
cmp	ah, 20h	; ' '
jnb	short locret_5964
mov	si, 0C0B6h
mov	bp, 0Ch
call	sub_F8F5

locret_5964:
retn
sub_594C endp




sub_5965 proc near
mov	dx, 95h	; '�'
mov	bx, 39h	; '9'
cmp	byte ptr ds:5, 20h ; ' '
jb	short locret_5978
mov	dx, 0CAh ; '�'
mov	bx, 49h	; 'I'

locret_5978:
retn
sub_5965 endp




sub_5979 proc near
xor	ax, ax
call	sub_E1D5
add	dx, 6
add	bx, 1Eh
mov	ax, 1
call	sub_E1D5
sub	dx, 2
add	bx, 14h
mov	al, ds:4731h
xor	ah, ah
push	ax
sub	al, 0Fh
jnb	short loc_599C
xor	ax, ax

loc_599C:
cmp	al, 5
jbe	short loc_59A2
mov	al, 5

loc_59A2:
add	al, 2
call	sub_E1D5
sub	dx, 55h	; 'U'
sub	bx, 35h	; '5'
pop	ax
cmp	al, 0Eh
jb	short loc_59B4
mov	al, 0Eh

loc_59B4:
add	al, 8
jmp	sub_E1DD
sub_5979 endp




sub_59B9 proc near
push	ax
push	ds
pop	es
mov	cx, 2Eh	; '.'
mov	ax, 0FFFFh
mov	di, 47F8h
rep stosw
pop	ax
retn
sub_59B9 endp




sub_59C9 proc near
cmp	byte ptr ds:2Bh, 0
jz	short loc_59D3
jmp	sub_E30E

loc_59D3:
cmp	byte ptr ds:47A4h, 0
js	short locret_5A28
mov	ax, ds:47C4h
cmp	al, 0Fh
jnz	short loc_59E5
add	al, ds:476Ch

loc_59E5:
mov	di, ax
shl	di, 1
shl	di, 1
mov	dx, [di+47F8h]
or	dx, dx
js	short locret_5A28
push	word ptr [di+47FAh]
push	dx
or	byte ptr ds:47A4h, 80h
call	sub_5685
pop	dx
pop	bx
cmp	dx, 0F0h ; '�'
jb	short loc_5A0B
mov	dx, 0F0h ; '�'

loc_5A0B:
cmp	bx, 71h	; 'q'
jb	short loc_5A13
mov	bx, 71h	; 'q'

loc_5A13:
mov	es, word ptr ds:0DBDEh
push	ds
mov	ds, word ptr ds:0DBDAh
mov	bp, 6
call	dword ptr ss:seg_11380+3949h
pop	ds
jmp	sub_E30E

locret_5A28:
retn
sub_59C9 endp




sub_5A29 proc near

; FUNCTION CHUNK AT 3D12 SIZE 0000001D BYTES

sub	sp, 18h
mov	ds:47F6h, sp
xor	ah, ah
dec	ax
push	ax
mov	cl, 4
shr	ax, cl
jz	short loc_5A40
add	ax, 13h
call	sub_E00E

loc_5A40:
pop	ax
and	ax, 0Fh
shl	ax, 1
mov	si, 0BC6Eh
add	si, ax
mov	si, [si]
call	sub_5C53

loc_5A50:
lodsw
cmp	ax, 0FFFFh
jz	short loc_5A85
js	short loc_5A8F
mov	di, ax
shr	ah, 1
and	ah, 1
lodsb
mov	dx, ax
lodsb
xor	ah, ah
mov	bx, ax
lodsb
push	si
mov	cs:byte_E0EA, al
mov	ax, di
and	ax, 0FDFFh
dec	ax
and	di, 1FFh
cmp	di, 1
jnz	short loc_5A7F
jmp	loc_5BE2

loc_5A7F:
call	sub_E0FF
pop	si
jmp	short loc_5A50

loc_5A85:
mov	cs:byte_E0EA, 0
add	sp, 18h
retn

loc_5A8F:
cmp	ah, 0C0h ; '�'
jz	short loc_5A99
call	sub_5AB9
jmp	short loc_5A50

loc_5A99:
push	ax

loc_5A9A:
mov	es, word ptr ds:0DBDAh
lodsw
mov	dx, ax
lodsw
mov	bx, ax
lodsw
mov	di, ax
lodsw
mov	cx, ax
pop	ax
push	si
mov	bp, 0FFFFh
mov	si, 1470h
call	dword ptr ds:3901h
pop	si
jmp	short loc_5A50
sub_5A29 endp




sub_5AB9 proc near
mov	word ptr ds:22D9h, 4C60h
push	ds
pop	es
mov	al, [si-2]
mov	ds:47EDh, al
mov	al, [si-1]
mov	ds:47ECh, al
lodsb
cbw
shl	ax, 1
shl	ax, 1
shl	ax, 1
shl	ax, 1
mov	ds:22DBh, ax
lodsb
cbw
shl	ax, 1
shl	ax, 1
shl	ax, 1
shl	ax, 1
mov	ds:22DDh, ax
lodsw
mov	dx, ax
lodsw
mov	bx, ax
mov	ds:47EEh, dx
mov	ds:47F0h, bx

loc_5AF5:
lodsw
push	ax
and	ax, 3FFFh
mov	di, ax
lodsw
mov	cx, ax
call	sub_5CE3
mov	dx, di
mov	bx, cx
pop	ax
test	ax, 4000h
jz	short loc_5AF5
mov	ds:47F2h, di
mov	ds:47F4h, cx
mov	dx, ds:47EEh
mov	bx, ds:47F0h
mov	word ptr ds:22D9h, 4C62h
test	ax, 8000h
jnz	short loc_5B41

loc_5B27:
lodsw
push	ax
and	ax, 3FFFh
mov	di, ax
lodsw
mov	cx, ax
call	sub_5CE3
mov	dx, di
mov	bx, cx
pop	ax
or	ax, ax
jns	short loc_5B27
mov	dx, di
mov	bx, cx

loc_5B41:
mov	di, ds:47F2h
mov	cx, ds:47F4h
call	sub_5CE3
mov	es, word ptr ds:0DBDAh
push	si
mov	bx, ds:47F0h
mov	bp, ds:47F4h
sub	bp, bx
lea	si, ds:4C60h
mov	cx, bp
mov	bp, 0
mov	ah, ds:47ECh
and	ah, 3Eh
jz	short loc_5B70
mov	bp, 1

loc_5B70:
mov	al, 2
mov	ds:22DFh, ax
mov	ah, ds:47EDh
xor	al, al
test	byte ptr ds:47ECh, 1
jnz	short loc_5BB0

loc_5B82:
push	cx
push	ax
lodsw
mov	dx, ax
lodsw
mov	cx, ax
pop	ax
cmp	dx, cx
jb	short loc_5B91
xchg	dx, cx

loc_5B91:
inc	cx
sub	cx, dx
jz	short loc_5BA6
push	si
push	bx
mov	si, ds:22DFh
mov	di, ds:22DBh
call	dword ptr ds:3945h
pop	bx
pop	si

loc_5BA6:
add	ax, ds:22DDh
inc	bx
pop	cx
loop	loc_5B82
pop	si
retn

loc_5BB0:
push	cx
push	ax
lodsw
mov	dx, ax
lodsw
mov	cx, ax
pop	ax
cmp	dx, cx
jnb	short loc_5BBF
xchg	dx, cx

loc_5BBF:
dec	cx
sub	cx, dx
jz	short loc_5BD8
neg	cx
push	si
push	bx
mov	si, ds:22DFh
mov	di, ds:22DBh
std
call	dword ptr ds:3945h
pop	bx
pop	si
cld

loc_5BD8:
add	ax, ds:22DDh
inc	bx
pop	cx
loop	loc_5BB0
pop	si
retn
sub_5AB9 endp

; START	OF FUNCTION CHUNK FOR sub_5A29

loc_5BE2:
test	byte ptr ds:47A4h, 81h
jnz	short loc_5BFB
mov	di, ds:47F6h
dec	word ptr ds:47F6h
cmp	byte ptr [di], 0FFh
jz	short loc_5BFB
mov	al, [di]
call	sub_5BFF

loc_5BFB:
pop	si
jmp	loc_5A50
; END OF FUNCTION CHUNK	FOR sub_5A29



sub_5BFF proc near
push	word ptr ds:2784h
push	ax
xor	ah, ah
mov	di, ax
shl	di, 1
shl	di, 1
mov	[di+47F8h], dx
mov	[di+47FAh], bx
mov	ax, 26h	; '&'
call	sub_E00E
pop	ax
mov	ch, ah
cmp	al, 0Fh
jb	short loc_5C28
sub	al, 0Fh
mov	ds:476Ch, al
mov	al, 0Fh

loc_5C28:
call	sub_AFF3
call	sub_314C
jnb	short loc_5C35
mov	al, 11h
add	bx, 35h	; '5'

loc_5C35:
cmp	al, 0Ch
jnz	short loc_5C42
test	byte ptr ds:10A7h, 10h
jz	short loc_5C42
mov	al, 12h

loc_5C42:
mov	ah, ch
shl	al, 1
push	ax
call	sub_E1CD
pop	ax
inc	ax
call	sub_E0FF
pop	ax
jmp	sub_E00E
sub_5BFF endp




sub_5C53 proc near
push	ds
pop	es
mov	ax, 0FFFFh
mov	cx, 17h
mov	di, ds:47F6h
rep stosb
mov	di, ds:47F6h
cmp	byte ptr ds:4774h, 0
jz	short loc_5C80
mov	ax, ds:4778h
or	ax, ax
jz	short loc_5C80
push	si
mov	si, ax
lods	byte ptr cs:[si]
mov	cl, al
rep movs byte ptr es:[di], byte	ptr cs:[si]
pop	si
jmp	short loc_5CB5

loc_5C80:
mov	dx, ds:12h
xor	dx, ds:10h
mov	cl, [si]
or	cl, cl
jz	short loc_5CB5
mov	ch, ds:0C5h
and	ch, 0Fh
mov	ax, 0FFFFh

loc_5C98:
inc	ax
shr	dx, 1
jnb	short loc_5CA0
call	sub_5CC4

loc_5CA0:
or	dx, dx
jnz	short loc_5C98
mov	dl, ds:476Ah
dec	dx
jle	short loc_5CB5
mov	ax, 0Fh

loc_5CAE:
inc	ax
call	sub_5CC4
dec	dx
jnz	short loc_5CAE

loc_5CB5:
lodsb
xor	ah, ah
mov	di, ds:47F6h
dec	ax
add	di, ax
mov	ds:47F6h, di
retn
sub_5C53 endp




sub_5CC4 proc near
mov	bx, ax
add	bl, ch

loc_5CC8:
sub	bl, cl
jnb	short loc_5CC8
add	bl, cl
cmp	byte ptr [bx+di], 0FFh
jz	short loc_5CE0
mov	bx, 0FFFFh

loc_5CD6:
inc	bx
cmp	bl, cl
jnb	short locret_5CE2
cmp	byte ptr [bx+di], 0FFh
jnz	short loc_5CD6

loc_5CE0:
mov	[bx+di], al

locret_5CE2:
retn
sub_5CC4 endp




sub_5CE3 proc near
push	bx
push	cx
push	dx
push	di
mov	ds:47E8h, dx
mov	ds:47EAh, bx
sub	bx, cx
sub	dx, di
neg	bx
neg	dx
call	sub_5D50
pop	di
pop	dx
pop	cx
pop	bx
retn
sub_5CE3 endp

; START	OF FUNCTION CHUNK FOR sub_5D50

loc_5CFF:
mov	bx, ds:47EAh
mov	cx, dx
mov	dx, ds:47E8h
add	ds:47E8h, cx
jnb	short loc_5D11
add	dx, cx

loc_5D11:
mov	di, ds:22D9h
mov	ax, dx
stosw
add	di, 2
mov	ds:22D9h, di
pop	si
pop	di
retn

loc_5D22:
mov	cx, bx
mov	bx, ds:47EAh
mov	dx, ds:47E8h
or	ax, ax
jns	short loc_5D38
sub	ds:47EAh, cx
sub	bx, cx
jmp	short loc_5D3C

loc_5D38:
add	ds:47EAh, cx

loc_5D3C:
inc	cx
mov	di, ds:22D9h
mov	ax, dx

loc_5D43:
stosw
add	di, 2
loop	loc_5D43
mov	ds:22D9h, di
pop	si
pop	di
retn
; END OF FUNCTION CHUNK	FOR sub_5D50


; Attributes: bp-based frame

sub_5D50 proc near

arg_0= word ptr	 6

; FUNCTION CHUNK AT 3E2F SIZE 00000051 BYTES

push	di
push	si
or	bx, bx
jz	short loc_5CFF
mov	ax, 1
jns	short loc_5D5F
neg	bx
neg	ax

loc_5D5F:
or	dx, dx
jz	short loc_5D22
mov	cx, 1
jns	short loc_5D6C
neg	cx
neg	dx

loc_5D6C:
push	ax
push	cx
push	ax
push	cx
mov	bp, sp
mov	si, bx
mov	di, dx
xor	ax, ax
cmp	dx, bx
jbe	short loc_5D81
mov	[bp+2],	ax
jmp	short loc_5D8A

loc_5D81:
or	bx, bx
jz	short loc_5DC8
xchg	di, si
mov	[bp+0],	ax

loc_5D8A:
mov	ax, di
mov	cx, di
shr	ax, 1

loc_5D90:
add	ax, si
cmp	ax, di
jb	short loc_5DA0
sub	ax, di
mov	dx, [bp+4]
mov	bx, [bp+arg_0]
jmp	short loc_5DA6

loc_5DA0:
mov	dx, [bp+0]
mov	bx, [bp+2]

loc_5DA6:
add	dx, ds:47E8h
cmp	bx, 1
jnz	short loc_5DC2
push	di
push	ax
mov	di, ds:22D9h
mov	ax, ds:47E8h
stosw
add	di, 2
mov	ds:22D9h, di
pop	ax
pop	di

loc_5DC2:
mov	ds:47E8h, dx
loop	loc_5D90

loc_5DC8:
add	sp, 8
pop	si
pop	di
retn
sub_5D50 endp ;	sp =  8




sub_5DCE proc near
mov	al, dh
xor	ah, ah
shl	ax, 1
mov	si, ax
mov	si, [si+13C4h]
mov	al, dl
dec	al
mov	ah, 5
mul	ah
add	si, ax

locret_5DE4:
retn
sub_5DCE endp

; START	OF FUNCTION CHUNK FOR sub_B0E5

loc_5DE5:
mov	bp, 1
jmp	short sub_5DF7
; END OF FUNCTION CHUNK	FOR sub_B0E5
mov	bp, 2
jmp	short sub_5DF7
mov	bp, 3
jmp	short sub_5DF7
mov	bp, 4



sub_5DF7 proc near
push	bp
call	sub_F18D
call	sub_CB00
call	sub_C675
pop	bp
mov	byte ptr ds:47A9h, 0
mov	byte ptr ds:26h, 0
mov	dx, ds:4
mov	bx, ds:6
cmp	bl, 80h	; '�'
jz	short loc_5E37
mov	al, ds:4735h
and	al, 7Fh
inc	al
jns	short loc_5E24
dec	al

loc_5E24:
or	al, 80h
mov	ds:4735h, al
cmp	byte ptr ds:0F4h, 14h
jnb	short loc_5E34
inc	byte ptr ds:0F4h

loc_5E34:
jmp	loc_5EC5

loc_5E37:
call	sub_5DCE
mov	dl, [bp+si]
or	dl, dl
jz	short locret_5DE4
js	short loc_5EA2
cmp	byte ptr ds:0Bh, 1
jnz	short loc_5E54
call	sub_10140
mov	cl, 2
call	sub_D259
call	sub_10153

loc_5E54:
mov	si, ds:114Eh
test	byte ptr [si+0Ah], 10h
jnz	short loc_5E7A
or	byte ptr [si+0Ah], 10h
cmp	dh, 20h	; ' '
adc	byte ptr ds:25h, 0
mov	byte ptr ds:26h, 0FFh
call	sub_10140
mov	cl, 3
call	sub_D259
call	sub_10153

loc_5E7A:
mov	ds:0Ch,	dl
mov	byte ptr ds:23h, 1
call	sub_C094
push	bx
push	dx
call	sub_55A3
pop	dx
pop	bx
call	sub_C0B2
jz	short loc_5E93
retn

loc_5E93:
push	bx
push	dx
call	sub_CAA5
pop	dx
pop	bx
mov	byte ptr ds:23h, 5
jmp	sub_5F27

loc_5EA2:
mov	byte ptr ds:0E7h, 0
xor	dh, dh
neg	dl
mov	bp, dx
xor	si, si
xchg	si, ds:114Eh
mov	dx, [si+2]
mov	bx, [si+4]
xor	bh, bh
mov	byte ptr ds:8, 0FFh
mov	byte ptr ds:9, 0FFh

loc_5EC5:
shl	bp, 1
mov	ax, [bp+1454h]
call	sub_D49F
or	bh, bh
jnz	short sub_5F27
sub_5DF7 endp

; START	OF FUNCTION CHUNK FOR sub_6DDC

loc_5ED2:
mov	ax, bx
cbw
mov	bx, ax
call	sub_D402
xor	bh, bh
test	al, 40h
jz	short sub_5F27
call	sub_5F6A
jnz	short sub_5F27
cmp	dx, [si+2]
jnz	short sub_5F27
mov	ax, bx
cbw
mov	bx, ax
mov	byte ptr ds:4735h, 0
mov	ds:114Eh, si
mov	ds:1150h, si
mov	di, si
call	sub_6F0C
mov	word ptr ds:9Ah, 0
mov	word ptr ds:98h, 0
call	sub_612B
call	sub_5F7E
mov	ds:8, dh
mov	ds:9, bh
cmp	dh, 20h	; ' '
jb	short loc_5F24
or	byte ptr [si+0Ah], 10h

loc_5F24:
call	sub_4040
; END OF FUNCTION CHUNK	FOR sub_6DDC



sub_5F27 proc near
call	sub_5F93
mov	ds:4, dx
mov	al, dl
xchg	al, ds:0Bh
mov	ds:0Dh,	al
mov	ds:6, bx
cmp	byte ptr ds:46EBh, 0
js	short locret_5F69
cmp	dx, 3002h
jnz	short loc_5F4B
jmp	loc_35CC

loc_5F4B:
jmp	loc_4C8F
sub_5F27 endp




sub_5F4E proc near
mov	dx, ds:4
mov	bx, ds:6
cmp	bl, 80h	; '�'
jnz	short loc_5F66
mov	si, ds:114Eh
mov	dx, [si+2]
mov	bx, [si+4]
retn

loc_5F66:
xchg	ax, bx
cbw
xchg	ax, bx

locret_5F69:
retn
sub_5F4E endp




sub_5F6A proc near
mov	si, 0E4h ; '�'

loc_5F6D:
add	si, 1Ch
cmp	word ptr [si], 0FFFFh
jz	short loc_5F7B
cmp	di, [si+6]
jnz	short loc_5F6D
retn

loc_5F7B:
or	si, si
retn
sub_5F6A endp




sub_5F7E proc near
mov	ax, di
sub	ax, 100h
mov	bl, 1Ch
div	bl
mov	bh, al
inc	bh
mov	bl, 80h	; '�'
mov	dh, [di+8]
mov	dl, 1
retn
sub_5F7E endp




sub_5F93 proc near
mov	bp, 40C9h
jmp	loc_55BE
sub_5F93 endp

test	byte ptr [si+0Fh], 40h
jz	short locret_5FA4
mov	[si], dx
mov	[si+2],	bx

locret_5FA4:
retn



sub_5FA5 proc near
mov	byte ptr ds:23h, 7
call	sub_55A3
call	sub_6994
mov	bp, 40E6h
jmp	loc_55BE
sub_5FA5 endp




sub_5FB6 proc near
test	byte ptr [si+0Fh], 40h
jz	short locret_5FC8
test	byte ptr [si+0Fh], 2
jz	short locret_5FC8
call	sub_B426
call	sub_B525

locret_5FC8:
retn
sub_5FB6 endp




sub_5FC9 proc near
test	byte ptr ds:11C9h, 3
jnz	short loc_5FD1
retn

loc_5FD1:
cmp	word ptr ds:10h, 0
jz	short locret_6051
call	sub_5F4E
mov	cx, 9
mov	ax, 9
call	sub_D43C
mov	cx, 51h	; 'Q'

loc_5FE7:
lodsb
test	al, 40h
jz	short loc_604C
mov	di, [si]
push	cx
push	si
call	sub_5F6A
jnz	short loc_604A
test	byte ptr [si+0Ah], 80h
jz	short loc_604A
mov	al, ds:2Ah
cmp	al, [si+0Bh]
jb	short loc_604A
mov	di, si
call	sub_6FF4
jb	short loc_604A
sub	al, ds:11C7h
add	al, 60h	; '`'
cmp	al, 0C0h ; '�'
jnb	short loc_604A
xor	ah, ah
mov	cx, 0CEh ; '�'
cmp	al, 60h	; '`'
jb	short loc_6022
inc	ah
add	cx, 2

loc_6022:
mov	ds:11F5h, cx
mov	ds:0E1h, ah
call	sub_8101
add	ax, 48h	; 'H'
mov	ds:11F3h, ax
mov	byte ptr ds:23h, 3
call	sub_612B
call	sub_6814
call	sub_FA82
call	sub_4DCB
call	sub_4ECB
call	sub_F267

loc_604A:
pop	si
pop	cx

loc_604C:
add	si, 2
loop	loc_5FE7

locret_6051:
retn
sub_5FC9 endp




sub_6052 proc near
mov	al, ds:11C9h
and	al, 3
dec	al
jnz	short locret_6051
cmp	byte ptr ds:11CBh, 0
jnz	short loc_606B
mov	di, ds:11C5h
call	sub_7C06
jb	short loc_6095

loc_606B:
call	sub_5F4E
call	sub_D402
and	al, 30h
cmp	al, 30h	; '0'
jb	short loc_6095
cmp	byte ptr ds:4726h, 0
jnz	short loc_6083
mov	byte ptr ds:23h, 4

loc_6083:
mov	al, 40h	; '@'
call	sub_609C
sub	byte ptr ds:4726h, 20h ; ' '
jnz	short locret_6051
mov	byte ptr ds:46D9h, 2
retn

loc_6095:
mov	byte ptr ds:4726h, 0
xor	al, al
sub_6052 endp




sub_609C proc near
mov	ds:21FDh, al
cmp	word ptr ds:1F12h, 4FFBh
jnz	short locret_60AA
mov	ds:1F11h, al

locret_60AA:
retn
sub_609C endp

; START	OF FUNCTION CHUNK FOR sub_60B1

loc_60AB:
dec	byte ptr ds:196Ch
clc
retn
; END OF FUNCTION CHUNK	FOR sub_60B1



sub_60B1 proc near

; FUNCTION CHUNK AT 41DB SIZE 00000006 BYTES

cmp	byte ptr ds:196Ch, 0
jnz	short loc_60AB
mov	al, ds:11C7h
add	al, 20h	; ' '
test	al, 40h
mov	cx, 1
mov	ax, 8
jz	short loc_60C8
xchg	ax, cx

loc_60C8:
call	sub_D43C
mov	cx, 8

loc_60CE:
lodsb
test	al, 40h
jnz	short loc_60DA

loc_60D3:
add	si, 2
loop	loc_60CE
clc
retn

loc_60DA:
mov	di, [si]
push	cx
push	si
call	sub_5F6A
jnz	short loc_6127
test	byte ptr [si+0Ah], 80h
jz	short loc_60F1
mov	al, ds:2Ah
cmp	al, [si+0Bh]
jb	short loc_6127

loc_60F1:
mov	di, si
call	sub_6FF4
jb	short loc_6127
sub	al, ds:11C7h
add	al, 20h	; ' '
cmp	al, 40h	; '@'
jnb	short loc_6127
sub	al, 20h	; ' '
cbw
shl	ax, 1
shl	ax, 1
shl	ax, 1
shl	ax, 1
shl	ax, 1
mov	ds:1968h, ax
xor	ax, ax
call	sub_7D1F
mov	bx, 196Dh
xlat
mov	ds:196Ah, ax
pop	si
pop	cx
mov	byte ptr ds:196Ch, 6
stc
retn

loc_6127:
pop	si
pop	cx
jmp	short loc_60D3
sub_60B1 endp




sub_612B proc near
test	byte ptr [di+0Ah], 80h
jz	short locret_6154
and	byte ptr [di+0Ah], 7Fh
mov	byte ptr [di+0Bh], 0
cmp	byte ptr [di+8], 20h ; ' '
jnb	short locret_6154
inc	byte ptr ds:27h
cmp	word ptr [di], 603h
jnz	short locret_6154
call	sub_10140
mov	al, 10h
call	sub_30EF
call	sub_10153

locret_6154:
retn
sub_612B endp




sub_6155 proc near
mov	di, 15Fh
cmp	word ptr cs:[di+2], 0
jnz	short loc_617A
push	cs
pop	es
assume es:seg000
mov	si, 0BEh ; '�'
call	sub_10F89
mov	si, 15Fh
mov	di, 0AA66h
push	ds
pop	es
assume es:nothing
mov	cx, 4
rep movs word ptr es:[di], word	ptr cs:[si]
add	word ptr cs:[si], 167h

loc_617A:
mov	word ptr ds:487Eh, 1
mov	byte ptr ds:473Eh, 0
mov	byte ptr ds:11C9h, 8
mov	si, cs:word_2037
add	si, cs:[si]
mov	ds:0AA6Eh, si
mov	ax, 39h	; '9'
call	sub_E00E
call	dword ptr ds:3935h
retn
sub_6155 endp

call	sub_B782
call	sub_6155
jmp	short loc_61D5
mov	dx, ds:4
mov	bx, ds:6
mov	dl, 1
call	sub_5F27
call	loc_373B
; START	OF FUNCTION CHUNK FOR sub_B0E5

loc_61B9:
call	sub_B782
call	sub_57B1
mov	ax, 24h	; '$'
call	sub_E00E
mov	byte ptr ds:473Eh, 1
mov	byte ptr ds:11C9h, 4
mov	word ptr ds:487Eh, 2

loc_61D5:
mov	bp, 212Eh
call	sub_68BA

loc_61DB:
mov	bx, 4415h
call	sub_F1F3
mov	ax, 1AC8h
call	sub_F82E
call	sub_699A
mov	word ptr ds:46FCh, 0
call	sub_7A2D
mov	byte ptr ds:46EBh, 1
mov	si, 1CCAh
call	sub_F5FB
mov	si, 149Ch
mov	di, 46E3h
call	sub_F97A
call	sub_7A69
call	sub_626F
mov	ax, 2BCh
call	sub_CA1F
call	sub_6528
mov	word ptr ds:46EDh, 4377h
call	sub_7A63
call	sub_D593
call	sub_E007
call	sub_7C9E
cmp	byte ptr ds:473Eh, 0
jz	short loc_623E
mov	ax, 24h	; '$'
call	sub_E00E
mov	si, 14C0h
call	sub_E0EB
call	sub_DFC4

loc_623E:
call	sub_E3AD
call	sub_632D
jmp	sub_F150
; END OF FUNCTION CHUNK	FOR sub_B0E5
call	sub_DF4C
call	sub_7A63
call	sub_D593
call	sub_E007
call	sub_7C9E
cmp	byte ptr ds:473Eh, 0
jz	short loc_6269
mov	ax, 24h	; '$'
call	sub_E00E
mov	si, 14C0h
call	sub_E0EB

loc_6269:
call	sub_E3BD
jmp	sub_632D



sub_626F proc near
call	sub_DF4C
cmp	byte ptr ds:473Eh, 0
jnz	short loc_629C
mov	ax, 24h	; '$'
call	sub_E00E
call	sub_E36A
call	sub_E2E2
call	dword ptr ds:3935h
call	sub_7A39
mov	si, 14A4h
mov	al, 0F5h ; '�'
mov	es, word ptr ds:0DBDAh
call	dword ptr ds:38DDh
jmp	sub_E3AD

loc_629C:
cmp	byte ptr ds:2Bh, 0
jnz	short loc_62A6
call	sub_5784

loc_62A6:
mov	ax, 24h	; '$'
call	sub_E00E
mov	si, 14B4h
call	sub_E0EB
retn
sub_626F endp




sub_62B3 proc near
cmp	byte ptr ds:473Eh, 0
jnz	short loc_62CC
cmp	word ptr ds:0DBEAh, 0
jnz	short loc_62DF
mov	si, 14ACh
push	si
call	sub_E316
pop	si
jmp	sub_E3C0

loc_62CC:
cmp	byte ptr ds:6, 80h ; '�'
jnz	short loc_62DF
call	sub_575D
call	sub_E30E
call	sub_E3AD
jmp	sub_DFC4

loc_62DF:
call	sub_698E
jmp	sub_DFC4
sub_62B3 endp

xor	al, al
xchg	al, ds:46EBh
or	al, al
jnz	short loc_62F0
retn

loc_62F0:
mov	word ptr ds:0A5C0h, 0
call	sub_F973
mov	si, 44ABh
call	sub_F92F
call	sub_656B
call	sub_7A70
call	sub_62B3
call	sub_DFC4
cmp	word ptr ds:11C5h, 0
jnz	short loc_6317
mov	byte ptr ds:11C9h, 0

loc_6317:
call	sub_F82B
call	sub_F5E7
call	sub_4ECB
cmp	byte ptr ds:4728h, 0
jle	short loc_632A
call	sub_68A4

loc_632A:
jmp	sub_6994



sub_632D proc near
mov	si, 44ABh
call	sub_F92F
call	sub_5F4E
call	sub_81A6
jnb	short loc_6342
mov	word ptr ds:4749h, 0
retn

loc_6342:
call	sub_E007
mov	ax, 4Ch	; 'L'
call	sub_E0C4
lods	word ptr es:[si]
and	ah, 0Fh
mov	bp, ax
lods	word ptr es:[si]
xor	ah, ah
sub	bx, ax
sub	dx, 0Dh
add	bp, dx
add	ax, bx
mov	di, 4749h
mov	[di], dx
mov	[di+2],	bx
mov	[di+4],	bp
mov	[di+6],	ax
mov	si, 44ABh
mov	bp, 12Ch
call	sub_F8F5
mov	byte ptr ds:4751h, 0
inc	byte ptr ds:4751h
push	word ptr ds:0DBDAh
call	sub_DF5E
call	sub_7A63
call	sub_E007
mov	si, 4749h
call	sub_FA44
mov	dx, [si]
mov	bx, [si+2]
mov	bp, [si+4]
mov	ax, [si+6]
mov	si, 0D834h
cmp	bp, [si+4]
jb	short loc_63A8
mov	bp, [si+4]

loc_63A8:
cmp	ax, [si+6]
jb	short loc_63B0
mov	ax, [si+6]

loc_63B0:
cmp	dx, [si]
jnb	short loc_63B6
mov	dx, [si]

loc_63B6:
cmp	bx, [si+2]
jnb	short loc_63BE
mov	bx, [si+2]

loc_63BE:
call	sub_E3CB
mov	bl, ds:4751h
shr	bl, 1
jnb	short loc_63D7
mov	ax, 4Ch	; 'L'
mov	dx, ds:4749h
mov	bx, ds:474Bh
call	sub_E1DD

loc_63D7:
pop	word ptr ds:0DBDAh
jmp	sub_FA37
sub_632D endp

test	byte ptr ds:11C9h, 0Fh
jz	short locret_6403
push	bx
push	dx
call	sub_6456
pop	dx
pop	bx
mov	di, ds:46FCh
or	di, di
jz	short locret_6403
js	short loc_6404
test	byte ptr ds:11C9h, 3
jnz	short loc_6404
cmp	di, ds:114Eh
jnz	short loc_6404

locret_6403:
retn

loc_6404:
push	bx
push	dx
push	di
call	sub_643C
call	sub_CA15
pop	di
mov	cx, 9

loc_6411:
push	cx
push	di
mov	ax, 14h
call	sub_10270
push	di
xor	di, di
call	sub_64AE
pop	di
mov	ax, 0Ah
call	sub_10270
call	sub_64AE
pop	di
pop	cx
loop	loc_6411
push	di
call	sub_CA79
pop	di
pop	dx
pop	bx
mov	byte ptr ds:4732h, 80h ; '�'
jmp	loc_65D3



sub_643C proc near
mov	ax, di
cmp	ah, 0FFh
jz	short loc_6452
mov	ax, [di]
dec	ax
shl	al, 1
shl	al, 1
shl	al, 1
shl	al, 1
or	al, ah
xor	ah, ah

loc_6452:
add	ax, 2BCh
retn
sub_643C endp




sub_6456 proc near
call	sub_7BED
mov	di, 0
jnb	short loc_64A3
mov	al, 0FFh
call	sub_7D3D
cmp	ax, 9
jb	short loc_64A3
mov	di, 0FFFFh
mov	dx, ds:4749h
or	dx, dx
jz	short loc_64A3
add	dx, 0Bh
sub	dx, ds:0DC36h
neg	dx
mov	bx, ds:0DC38h
sub	bx, ds:474Fh
call	loc_701E
add	al, 3
mov	ah, al
and	ah, 1Fh
cmp	ah, 6
mov	di, 0FFFFh
jnb	short loc_64A3
rol	al, 1
rol	al, 1
rol	al, 1
and	al, 7
or	ax, 0FFF0h
mov	di, ax

loc_64A3:
mov	ax, di
xchg	ax, ds:46FCh
cmp	ax, di
jnz	short sub_64AE
retn
sub_6456 endp




sub_64AE proc near
push	word ptr ds:0DBDAh
call	sub_DF5E
call	sub_FA82
call	sub_EF45
mov	dx, 55h	; 'U'
mov	bx, 22h	; '"'
mov	cx, 0F5FEh
cmp	byte ptr ds:473Eh, 0
jz	short loc_64D0
add	bx, 4
mov	ch, 20h	; ' '

loc_64D0:
or	di, di
jz	short loc_64FA
call	sub_656B
cmp	di, 0FFF0h
jb	short loc_6506
mov	ax, 0A4h ; '�'
call	sub_F064
sub	di, 0FFF0h
cmp	di, 8
jnb	short loc_6511
mov	al, 20h	; ' '
call	word ptr ds:2518h
mov	ax, di
add	ax, 0DAh ; '�'
call	sub_F06B
jmp	short loc_6511

loc_64FA:
call	sub_6528
mov	ds:0DBE4h, cx
call	sub_EF1E
jmp	short loc_6511

loc_6506:
push	cx
call	sub_816D
call	sub_EF2F
pop	cx
call	sub_8176

loc_6511:
cmp	word ptr ds:0D82Ch, 0EDh ; '�'
ja	short loc_6521
mov	al, 20h	; ' '
call	word ptr ds:2518h
jmp	short loc_6511

loc_6521:
pop	word ptr ds:0DBDAh
jmp	sub_FABC
sub_64AE endp




sub_6528 proc near
cmp	word ptr ds:473Fh, 0
jnz	short locret_656A
call	sub_10140
mov	si, 57h	; 'W'
call	sub_EE40
mov	word ptr ds:4741h, es
mov	ds:473Fh, si
mov	word ptr ds:4743h, 55h ; 'U'
mov	cx, 0F561h
mov	ax, 22h	; '"'
cmp	byte ptr ds:473Eh, 0
jz	short loc_6557
add	al, 4
mov	ch, 20h	; ' '

loc_6557:
mov	ds:4745h, ax
mov	ds:4747h, cx
mov	si, 46B5h
mov	bp, 18h
call	sub_F8F5
call	sub_10153

locret_656A:
retn
sub_6528 endp




sub_656B proc near
cmp	word ptr ds:473Fh, 0
jz	short locret_6584
mov	word ptr ds:473Fh, 0
call	sub_10140
mov	si, 46B5h
call	sub_F92F
call	sub_10153

locret_6584:
retn
sub_656B endp


loc_6585:
les	si, ds:473Fh
mov	al, es:[si]
or	al, al
js	short locret_65D2
inc	word ptr ds:473Fh
mov	si, 14A4h
call	sub_FA44
push	word ptr ds:0DBDAh
call	sub_DF5E
mov	dx, ds:4743h
mov	bx, ds:4745h
call	sub_EF1E
mov	cx, ds:4747h
mov	ds:0DBE4h, cx
call	sub_EF45
push	ax
call	sub_EFFF
call	sub_EF2F
mov	ds:4743h, dx
mov	ds:4745h, bx
pop	ax
pop	word ptr ds:0DBDAh
call	sub_FA37
cmp	al, 20h	; ' '
jz	short loc_6585

locret_65D2:
retn

loc_65D3:
call	sub_6814
call	sub_57B1
mov	al, ds:11C9h
push	ax
shr	al, 1
shr	al, 1
or	ds:11C9h, al
call	sub_CC2E
cmp	byte ptr ds:2Bh, 0
jz	short loc_65F7
mov	byte ptr ds:2Bh, 0
call	sub_29F1

loc_65F7:
call	sub_F1BA
call	sub_6BD0
pop	ax
test	al, 3
jnz	short loc_665F
mov	word ptr ds:472Bh, 0
push	ax
call	loc_6095
mov	al, ds:11C9h
and	al, 3
dec	al
jnz	short loc_6618
call	sub_36EE

loc_6618:
call	sub_E344
call	sub_5FA5
pop	ax
mov	bl, ds:11C7h
push	bx
call	sub_6665
pop	ax
mov	ds:11C7h, al
mov	byte ptr ds:8, 0FFh
call	sub_6A0B
mov	word ptr ds:114Eh, 0
mov	word ptr ds:4729h, 0
cmp	byte ptr ds:46EBh, 0
js	short loc_6649
call	loc_4C8F

loc_6649:
call	sub_6988
mov	al, ds:11C9h
and	al, 3
dec	al
jnz	short loc_665F
mov	di, ds:1150h
dec	byte ptr [di+15h]
jmp	sub_CAE4

loc_665F:
call	sub_4D82
jmp	sub_DFC4



sub_6665 proc near
cmp	byte ptr ds:46EBh, 0
js	short locret_669D
cmp	al, 4
jz	short loc_669E
call	sub_B77F
mov	byte ptr ds:0CEE8h, 0
mov	al, 50h	; 'P'
call	sub_30EF
mov	byte ptr ds:0E8h, 0
call	sub_3667
mov	al, 10h
mov	bp, 4913h
call	sub_DFD8
mov	byte ptr ds:227Dh, 1
call	sub_67EC
mov	byte ptr ds:227Dh, 0
jmp	sub_CAE4

locret_669D:
retn

loc_669E:
call	sub_ED23
xor	al, al
xchg	al, ds:4732h
shl	al, 1
jnb	short locret_669D
call	sub_36EE
mov	byte ptr ds:4731h, 0FFh
call	sub_DF4C
call	sub_5682
call	sub_E2E2
call	sub_7A70
mov	byte ptr ds:4731h, 0
mov	al, 6
call	sub_C9E5
mov	cl, 1
sub_6665 endp




sub_66CB proc near
mov	bp, 4821h
mov	ax, 14h
call	sub_10223
add	ds:4731h, cl
mov	al, ds:4731h
cmp	al, 1Ah
jnz	short loc_66E6
or	cl, cl
js	short loc_66E6
call	sub_CB00

loc_66E6:
call	sub_CCD4
cmp	byte ptr ds:4731h, 21h ; '!'
jb	short sub_66CB
retn
sub_66CB endp

push	cx
call	sub_E30E
mov	ax, 2Ah	; '*'
call	sub_E00E
call	sub_DFC4
call	sub_DF4C
call	sub_5965
mov	al, ds:4731h
cmp	al, 0Dh
jnz	short loc_6710
push	ax
call	sub_CB00
pop	ax

loc_6710:
sub	al, 0Eh
jbe	short loc_672D
pop	cx
push	cx
or	cl, cl
mov	cx, 5
jns	short loc_671F
neg	cx

loc_671F:
mov	ah, al

loc_6721:
sub	dx, cx
dec	ah
jnz	short loc_6721
mul	al
sar	ax, 1
sub	bx, ax

loc_672D:
call	sub_5979
call	sub_5965
mov	cl, ds:46FFh
xor	ch, ch
jcxz	short loc_674B
mov	al, ds:4731h
push	ax
mov	byte ptr ds:4731h, 0
call	sub_5943
pop	ax
mov	ds:4731h, al

loc_674B:
call	sub_E3AD
cmp	byte ptr ds:46D7h, 0
jz	short loc_6758
call	sub_57E6

loc_6758:
pop	cx
retn



sub_675A proc near
mov	ax, 6
mov	si, ds:114Eh
call	sub_7D1F
cmp	al, 8
jnb	short loc_67B5
mov	bx, ax
call	sub_FA82
mov	byte ptr ds:4728h, 80h ; '�'

loc_6772:
push	bx
call	sub_E930
xor	ax, ax
call	sub_6D96
pop	bx
cmp	word ptr ds:0DC00h, 2
jnz	short loc_6772
mov	ax, 3Ch	; '<'
cmp	bx, 6
jz	short loc_6790
mov	ax, 16h

loc_6790:
cmp	ax, ds:0DBEAh
jnz	short loc_6772
call	sub_ED1B

loc_6799:
call	sub_E930
call	sub_EB55
jz	short loc_6799

loc_67A1:
dec	byte ptr ds:46E0h

loc_67A5:
mov	byte ptr ds:4732h, 0
jmp	sub_4C44

loc_67AD:
mov	bp, 0C4CDh
call	sub_E7CB
jmp	short loc_67A1

loc_67B5:
cmp	al, 9
jz	short loc_67AD
mov	byte ptr ds:4731h, 0FFh
call	sub_DF4C
call	sub_7A70
call	sub_5682
call	sub_DFC4
call	sub_E2E2
mov	byte ptr ds:4731h, 1Fh
mov	al, 7
call	sub_C9E5
mov	cl, 0FFh
call	sub_66CB
mov	byte ptr ds:4731h, 0
jmp	short loc_67A5
sub_675A endp

mov	ax, 0Eh
call	sub_E8EB
jmp	sub_575D



sub_67EC proc near
call	sub_DF5E
call	sub_DFC4
mov	al, 8
call	sub_C9E5
call	sub_CCD4

loc_67FA:
call	sub_E8B8
jz	short loc_6804
call	sub_6807
jz	short loc_67FA

loc_6804:
jmp	sub_DF4C
sub_67EC endp




sub_6807 proc near
mov	ax, ds:0DBE8h
cmp	al, 0Bh
jnz	short loc_6811
call	sub_CB00

loc_6811:
jmp	sub_EB55
sub_6807 endp




sub_6814 proc near
call	sub_6F8E
cmp	di, 0FFF0h
jb	short loc_6835
dec	byte ptr ds:11CBh
call	sub_D4C9
mov	cx, bx
mov	di, dx
call	sub_5F4E
call	sub_7003
mov	di, ds:1150h
mov	cl, 1
jmp	short loc_683A

loc_6835:
call	sub_6FF4
xor	cx, cx

loc_683A:
mov	ds:11C5h, di
mov	ds:11C8h, cl
mov	byte ptr ds:11C7h, 0
jmp	sub_6FE9
sub_6814 endp

call	sub_B7B6
mov	bp, 212Eh
mov	byte ptr ds:4728h, 1
jmp	loc_61DB



sub_6858 proc near
mov	word ptr ds:46FCh, 0
call	sub_7A2D
mov	si, 148Ah
mov	di, 46E3h
call	sub_7A69
mov	word ptr ds:46EDh, 49A0h
sub_6858 endp




sub_6870 proc near
call	sub_DF55
call	sub_7A63
mov	byte ptr ds:46EBh, 1
call	sub_D593
call	sub_7A39
call	sub_E007
call	sub_7C9E
mov	si, ds:11C5h
or	si, si
jz	short loc_689C
call	sub_8199
jb	short loc_689C
dec	bx
dec	dx
mov	ax, 2Eh	; '.'
call	sub_E0FF

loc_689C:
mov	byte ptr ds:46EBh, 0
jmp	sub_DF4C
sub_6870 endp




sub_68A4 proc near
call	sub_6858
jmp	short loc_68B3
sub_68A4 endp




sub_68A9 proc near
cmp	byte ptr ds:46EBh, 0
js	short loc_68B6
call	sub_6870

loc_68B3:
jmp	short sub_692A
;align 2

loc_68B6:
jmp	word ptr ds:46EDh
sub_68A9 endp




sub_68BA proc near
mov	byte ptr ds:4728h, 0
push	cs
pop	es
assume es:seg000
mov	di, 0E40Ch
mov	ax, 800h

loc_68C7:
stosw
stosw
cmp	di, 0E85Ch
jb	short loc_68C7
retn
sub_68BA endp




sub_68D0 proc near
push	cs
pop	es
mov	di, ds:149Ah
mov	ax, dx
stosw
mov	ax, bx
stosw
cmp	di, 0E85Ch
jb	short loc_68E5
mov	di, 0E40Ch

loc_68E5:
mov	ds:149Ah, di
retn
sub_68D0 endp




sub_68EA proc near
cmp	byte ptr ds:4728h, 0
js	short locret_6929
mov	si, 148Ah
call	sub_FA44
mov	si, ds:149Ah
cmp	si, 0E40Ch
jnz	short loc_6904
mov	si, 0E85Ch

loc_6904:
sub	si, 4
lods	word ptr cs:[si]
mov	dx, ax
lods	word ptr cs:[si]
mov	bx, ax
dec	ah
jns	short locret_6929
call	sub_81A6
jb	short locret_6929
dec	bx
dec	dx
call	sub_E007
mov	ax, 2Fh	; '/'
call	sub_DF55
call	sub_E0FF
call	sub_DF4C

locret_6929:
retn
sub_68EA endp




sub_692A proc near
call	sub_E007
push	word ptr ds:0DBDAh
call	sub_DF55
mov	si, ds:149Ah

loc_6938:
lods	word ptr cs:[si]
mov	dx, ax
lods	word ptr cs:[si]
mov	bx, ax
dec	ah
jns	short loc_6969
push	si
call	sub_81A6
jb	short loc_6968
dec	bx
dec	dx
cmp	dx, 0CCh ; '�'
jl	short loc_6968
cmp	bx, 4
jl	short loc_6968
cmp	dx, 13Ah
jge	short loc_6968
cmp	bx, 3Ah	; ':'
jge	short loc_6968
mov	ax, 2Fh	; '/'
call	sub_E0FF

loc_6968:
pop	si

loc_6969:
cmp	si, 0E85Ch
jb	short loc_6972
mov	si, 0E40Ch

loc_6972:
cmp	si, ds:149Ah
jnz	short loc_6938
pop	word ptr ds:0DBDAh
retn
sub_692A endp


loc_697D:
xor	byte ptr ds:4728h, 80h
js	short locret_6987
call	sub_68A4

locret_6987:
retn



sub_6988 proc near
mov	byte ptr ds:4727h, 0FFh
retn
sub_6988 endp




sub_698E proc near
call	sub_56C4
call	sub_E3AD
sub_698E endp




sub_6994 proc near
mov	byte ptr ds:11CAh, 0
retn
sub_6994 endp




sub_699A proc near
mov	byte ptr ds:11CAh, 1
retn
sub_699A endp

call	nullsub_14
mov	ah, 0FCh ; '�'
jmp	short loc_69AC
call	nullsub_14
mov	ah, 4

loc_69AC:
shr	al, 1
jnb	short locret_69BA
mov	byte ptr ds:11C8h, 1
mov	al, ah
call	sub_6FE9

locret_69BA:
retn



sub_69BB proc near
mov	ax, 39h	; '9'
call	sub_E00E
call	sub_DF4C
call	sub_6C3C
call	sub_69FB
jmp	sub_E3AD
sub_69BB endp

; START	OF FUNCTION CHUNK FOR sub_EB66

loc_69CD:
cmp	byte ptr ds:227Dh, 0
jnz	short sub_69E6
call	sub_69FB
mov	es, word ptr ds:0DBD8h
assume es:nothing
mov	si, ds:0DBD6h
call	dword ptr ds:38FDh
jmp	loc_FAB3
; END OF FUNCTION CHUNK	FOR sub_EB66



sub_69E6 proc near
mov	ax, ds:0DBD8h
mov	si, ds:0DBD6h
cmp	ax, si
jz	short locret_69FA
add	ax, 1E0h
mov	es, ax
call	dword ptr ds:38FDh

locret_69FA:
retn
sub_69E6 endp




sub_69FB proc near

; FUNCTION CHUNK AT DBCA SIZE 00000019 BYTES

cmp	byte ptr ds:4728h, 0
js	short loc_6A08
mov	si, 1492h
call	sub_E33F

loc_6A08:
jmp	loc_FA9A
sub_69FB endp




sub_6A0B proc near
inc	word ptr ds:472Bh
test	word ptr ds:472Bh, 0Fh
jnz	short loc_6A1D
mov	cx, 1
call	sub_2EA9

loc_6A1D:
call	sub_5F4E
call	sub_70D6
call	sub_5F93
mov	ds:4, dx
mov	ds:6, bx
retn
sub_6A0B endp




sub_6A2F proc near
mov	si, 1470h
mov	ax, dx
add	ax, ds:487Ah
cmp	dx, [si]
jge	short loc_6A3E
mov	dx, [si]

loc_6A3E:
cmp	dx, [si+4]
jle	short loc_6A46
mov	dx, [si+4]

loc_6A46:
mov	ds:4860h, dx
cmp	ax, [si]
jge	short loc_6A50
mov	ax, [si]

loc_6A50:
cmp	ax, [si+4]
jle	short loc_6A58
mov	ax, [si+4]

loc_6A58:
mov	ds:4864h, ax
mov	ax, bx
add	ax, ds:487Ch
cmp	bx, [si+2]
jge	short loc_6A69
mov	bx, [si+2]

loc_6A69:
cmp	bx, [si+6]
jle	short loc_6A71
mov	bx, [si+6]

loc_6A71:
mov	ds:4862h, bx
cmp	ax, [si+2]
jge	short loc_6A7D
mov	ax, [si+2]

loc_6A7D:
cmp	ax, [si+6]
jle	short loc_6A85
mov	ax, [si+6]

loc_6A85:
mov	ds:4866h, ax
retn
sub_6A2F endp

call	sub_F2EB
cmp	word ptr ds:47C6h, 0
jnz	short locret_6AAE
cmp	bp, 1F0Eh
jnz	short locret_6AAE
mov	si, 4860h
call	sub_E316
call	sub_6AAF
mov	si, 4860h
call	sub_FA44
call	sub_E3C0
call	sub_FA37

locret_6AAE:
retn



sub_6AAF proc near
mov	ax, ds:485Eh
call	sub_E00E
mov	ax, ds:4878h
xor	ah, ah
add	ax, ds:4874h
mov	ds:4878h, ax
mov	al, ah
cbw
add	ds:4870h, ax
mov	ax, ds:4876h
xor	ah, ah
add	ax, ds:4872h
mov	ds:4876h, ax
mov	al, ah
cbw
add	ds:486Eh, ax
mov	dx, ds:486Eh
mov	bx, ds:4870h
call	sub_6A2F
mov	si, ds:486Ah
mov	ds, word ptr ss:0DBB2h
cmp	byte ptr [si], 0FFh
jnz	short loc_6AF9
mov	si, ss:4868h

loc_6AF9:
lodsb
xor	ah, ah
or	al, al
jz	short loc_6B0E
cmp	al, 1
jnz	short loc_6B07
mov	ah, al
lodsb

loc_6B07:
push	si
call	sub_6B15
pop	si
jmp	short loc_6AF9

loc_6B0E:
push	ss
pop	ds
assume ds:seg001
mov	ds:486Ah, si
retn
sub_6AAF endp




sub_6B15 proc near
sub	ax, 2
shl	ax, 1
mov	bp, ax
mov	si, ss:486Ch
add	si, ds:[bp+si]

loc_6B24:
lodsb
or	al, al
jz	short locret_6B61
xor	ah, ah
mov	bp, ax
lodsb
mov	dx, ax
lodsb
mov	bx, ax
add	dx, ss:486Eh
add	bx, ss:4870h
push	si
dec	bp
mov	es, word ptr ss:0DBDAh
mov	si, ss:0DBB0h
shl	bp, 1
add	si, ds:[bp+si]
lodsw
mov	di, ax
lodsw
xor	ah, ah
mov	cx, ax
mov	bp, 4860h
call	dword ptr ss:seg_11380+38CDh
pop	si
jmp	short loc_6B24

locret_6B61:
retn
sub_6B15 endp

; START	OF FUNCTION CHUNK FOR sub_6C27

loc_6B62:
push	ds
push	ax
xor	ah, ah
mov	ds:485Eh, ax
mov	ds:486Eh, dx
mov	ds:4870h, bx
mov	ds:4872h, bp
mov	ds:4874h, cx
mov	word ptr ds:4876h, 0
mov	word ptr ds:4878h, 0
call	sub_E00E
push	ds
pop	es
assume es:seg001
lds	si, ds:0DBB0h
assume ds:nothing
mov	bx, [si]
add	si, [bx+si-2]
mov	di, 4860h
add	si, 4
lodsw
mov	dx, ax
lodsw
mov	bx, ax
lodsw
sub	ax, dx
mov	ss:487Ah, ax
lodsw
sub	ax, bx
mov	ss:487Ch, ax
mov	ax, si
add	ax, 2
mov	ss:486Ch, ax
add	si, [si]
pop	ax
mov	al, ah
xor	ah, ah
shl	ax, 1
mov	bp, ax
add	si, ds:[bp+si]
mov	ss:4868h, si
mov	ss:486Ah, si
pop	ds
retn
; END OF FUNCTION CHUNK	FOR sub_6C27



sub_6BD0 proc near
mov	si, 4BB9h
jmp	sub_F92F
sub_6BD0 endp

; START	OF FUNCTION CHUNK FOR sub_56BB

loc_6BD6:
mov	byte ptr ds:0F6h, 0
mov	di, ds:1150h
mov	dx, [di+2]
cmp	dx, ds:4
jnz	short locret_6C26
mov	ax, ds:4733h
or	ah, ah
jz	short locret_6C26
mov	bx, ds:6
cmp	bl, [di+4]
jnz	short locret_6C26
cmp	bh, ah
ja	short locret_6C26
push	ax
push	bx
inc	byte ptr ds:0F6h
mov	ah, 1
call	sub_6C27
call	sub_6AAF
call	sub_E2E2
pop	bx
pop	ax
cmp	bh, al
ja	short locret_6C26
mov	al, 5
call	sub_C9E5
xor	ah, ah
call	sub_6C27
mov	si, 4BB9h
mov	bp, 10h
call	sub_F8F5

locret_6C26:
retn
; END OF FUNCTION CHUNK	FOR sub_56BB



sub_6C27 proc near

; FUNCTION CHUNK AT 4C92 SIZE 0000006E BYTES

mov	al, 31h	; '1'
mov	dx, 5
shl	bh, 1
shl	bh, 1
add	dl, bh
mov	bx, 29h	; ')'
xor	bp, bp
xor	cx, cx
jmp	loc_6B62
sub_6C27 endp




sub_6C3C proc near
mov	si, ds:0AA6Eh
cmp	byte ptr cs:[si], 0FFh
jnz	short loc_6C52
mov	si, cs:word_2037
add	si, cs:[si]
mov	ds:0AA6Eh, si

loc_6C52:
push	cs
pop	ds
assume ds:seg000

loc_6C54:
lodsb
xor	ah, ah
or	al, al
jz	short loc_6C69
cmp	al, 1
jnz	short loc_6C62
mov	ah, al
lodsb

loc_6C62:
push	si
call	sub_6C70
pop	si
jmp	short loc_6C54

loc_6C69:
push	ss
pop	ds
assume ds:seg001
mov	ds:0AA6Eh, si
retn
sub_6C3C endp




sub_6C70 proc near
sub	ax, 2
shl	ax, 1
mov	bp, ax
mov	si, 169h
add	si, cs:[bp+si]

loc_6C7D:
lodsb
or	al, al
jz	short locret_6CBC
xor	ah, ah
mov	bp, ax
lodsb
mov	dx, ax
lodsb
mov	bx, ax
add	dx, ss:0AA66h
add	bx, ss:0AA68h
push	si
push	ds
dec	bp
mov	es, word ptr ss:0DBDAh
assume es:nothing
lds	si, ss:0DBB0h
assume ds:nothing
shl	bp, 1
add	si, ds:[bp+si]
lodsw
mov	di, ax
lodsw
xor	ah, ah
mov	cx, ax
mov	bp, 0AA66h
call	dword ptr ss:seg_11380+38CDh
pop	ds
pop	si
jmp	short loc_6C7D

locret_6CBC:
retn
sub_6C70 endp




sub_6CBD proc near
xor	cx, cx
mov	bp, 4E04h
push	si
call	sub_84ED
mov	ch, [di+14h]
mov	ds:4733h, cx
push	es
call	sub_9DF7
pop	es
pop	si
retn
sub_6CBD endp

cmp	byte ptr [si+3], 0
jnz	short locret_6CE1
test	byte ptr [si+19h], 80h
jz	short locret_6CE1
inc	cx

locret_6CE1:
retn



sub_6CE2 proc near
mov	word ptr ds:4733h, 0
call	sub_5F4E
call	sub_D402
push	ax
call	sub_6D96
mov	word ptr ds:196Ah, 0
pop	ax
test	al, 40h
jz	short loc_6D48
call	sub_5F6A
jnz	short loc_6D48
cmp	byte ptr ds:6, 80h ; '�'
jz	short loc_6D48
mov	ax, [si+2]
sub	ax, dx
add	ax, 4
cmp	ax, 8
jnb	short loc_6D48
mov	ds:1968h, ax
inc	ax
mov	ds:1964h, ax
sub	ax, 2
mov	ds:1960h, ax
xor	ax, ax
call	sub_7D1F
mov	bx, 196Dh
xlat
cmp	al, 13h
jb	short loc_6D3E
sub	cl, 28h	; '('
and	cl, 0FBh
add	al, cl
cmp	al, 17h
jb	short loc_6D3E
mov	al, 17h

loc_6D3E:
mov	ds:196Ah, ax
xchg	si, di
call	sub_6CBD
xchg	si, di

loc_6D48:
mov	ax, ds:196Ah
or	ax, ax
jz	short locret_6D5C
mov	cx, ds:4733h
mov	cl, ds:46FFh
xor	ch, ch
jcxz	short locret_6D5C
nop

locret_6D5C:
retn
sub_6CE2 endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_14. PRESS	KEYPAD "+" TO EXPAND]
; START	OF FUNCTION CHUNK FOR sub_6DDC

loc_6D5E:
mov	dx, ds:4
mov	bx, ds:6
push	word ptr ds:11CCh
call	sub_70D6
call	sub_70D6
call	sub_70D6
call	sub_70D6
call	sub_70D6
call	sub_70D6
call	sub_D402
push	ax
call	sub_70D6
pop	ax
pop	word ptr ds:11CCh
push	ax
call	sub_D402
push	ax
call	sub_60B1
pop	ax
pop	bx
add	al, bl
shr	al, 1
; END OF FUNCTION CHUNK	FOR sub_6DDC



sub_6D96 proc near
push	bx
mov	bx, ds:487Eh
cmp	bx, 2
jb	short loc_6DBD
and	al, 0Fh
cmp	al, 8
mov	ax, ds:0DC00h
jnb	short loc_6DC3
cmp	ax, 2
jbe	short loc_6DBD
mov	bx, 5
cmp	ax, 4
jbe	short loc_6DBD
mov	bx, 2
mov	ds:487Eh, bx

loc_6DBD:
mov	ds:0DC02h, bx
pop	bx
retn

loc_6DC3:
mov	bx, 3
cmp	ax, 2
jbe	short loc_6DD3
cmp	ax, 5
jz	short loc_6DD3
mov	bx, 4

loc_6DD3:
mov	ds:0DC02h, bx
pop	bx
retn
sub_6D96 endp

call	sub_6994



sub_6DDC proc near

; FUNCTION CHUNK AT 16FC SIZE 0000000B BYTES
; FUNCTION CHUNK AT 4002 SIZE 00000055 BYTES
; FUNCTION CHUNK AT 4E8E SIZE 00000038 BYTES

cmp	byte ptr ds:4727h, 0
jz	short locret_6E03
cmp	byte ptr ds:11CAh, 0
jnz	short locret_6E03
mov	word ptr ds:1C06h, 80h ; '�'
mov	ax, 0DBECh
push	ax
call	sub_E930
mov	ax, ds:0CE7Ah
sub	ax, ds:4729h
cmp	ax, 300h
jnb	short loc_6E04

locret_6E03:
retn

loc_6E04:
mov	ax, ds:0CE7Ah
mov	ds:4729h, ax
call	sub_6A0B
call	sub_68EA
call	sub_5F4E
call	sub_68D0
call	sub_D45B
mov	si, ds:11C5h
cmp	di, [si+6]
jz	short loc_6E80
call	sub_4D22
cmp	byte ptr ds:47A7h, 0
jnz	short locret_6E03
cmp	byte ptr ds:4728h, 0
js	short loc_6E7D
jz	short loc_6E40
mov	byte ptr ds:4728h, 0
call	sub_7A2D
call	sub_68A9

loc_6E40:
call	sub_5F4E
call	sub_81A6
jb	short loc_6E7D
cmp	dx, 0D6h ; '�'
jl	short loc_6E5E
cmp	bx, 0Ah
jl	short loc_6E5E
cmp	dx, 132h
jge	short loc_6E5E
cmp	bx, 36h	; '6'
jl	short loc_6E65

loc_6E5E:
mov	byte ptr ds:4728h, 1
jmp	short loc_6E7D

loc_6E65:
cmp	byte ptr ds:11CAh, 0
jnz	short loc_6E7D
dec	bx
dec	dx
call	sub_E007
mov	ax, 30h	; '0'
call	sub_DF55
call	sub_E0FF
call	sub_DF4C

loc_6E7D:
jmp	loc_6D5E

loc_6E80:
mov	word ptr ds:1C06h, 0
mov	al, ds:11C9h
and	al, 1
mov	ds:4732h, al
jnz	short loc_6E93
call	sub_E8D1

loc_6E93:
call	sub_1029C
mov	ds:0C5h, al
xor	al, al
mov	ds:4727h, al
xchg	al, ds:11C9h
and	al, 3
dec	al
jnz	short loc_6EAF
mov	di, ds:11C5h
inc	byte ptr [di+15h]

loc_6EAF:
call	sub_6994
call	sub_FA82
call	sub_F5E7
mov	di, ds:11C5h
mov	bx, [di+4]
mov	dx, [di+2]
mov	word ptr ds:11C5h, 0
jmp	loc_5ED2
sub_6DDC endp

mov	word ptr ds:1C06h, 0
call	sub_E8D1
mov	byte ptr ds:11C8h, 0
mov	cx, 0C8h ; '�'

loc_6EDC:
push	cx
call	sub_6A0B
call	sub_5F4E
call	sub_D45B
mov	si, ds:11C5h
cmp	di, [si+6]
jz	short loc_6F09
mov	byte ptr ds:23h, 0
call	sub_6052
cmp	byte ptr ds:23h, 0
pop	cx
loope	loc_6EDC
jz	short loc_6E93
add	byte ptr ds:4726h, 20h ; ' '
jmp	sub_4D22

loc_6F09:
pop	cx
jmp	short loc_6E93



sub_6F0C proc near
mov	byte ptr ds:0FDh, 0
mov	byte ptr ds:2Bh, 0
test	byte ptr [di+0Ah], 2
jnz	short loc_6F28
call	sub_7C06
jb	short locret_6F51
call	sub_6F68
or	dx, dx
jz	short loc_6F4A

loc_6F28:
inc	byte ptr ds:2Bh
call	sub_8014
mov	al, [di+8]
mov	ah, 2Fh	; '/'
cmp	al, 20h	; ' '
jb	short loc_6F45
inc	ah
cmp	al, 30h	; '0'
jz	short loc_6F45
sub	al, 28h	; '('
jb	short loc_6F45
add	ah, 3

loc_6F45:
mov	ds:11DDh, ah
retn

loc_6F4A:
jcxz	short locret_6F51
mov	byte ptr ds:46D9h, 4

locret_6F51:
retn
sub_6F0C endp

test	byte ptr [si+3], 20h
jnz	short locret_6F65
test	byte ptr [si+10h], 80h
jnz	short loc_6F66
cmp	byte ptr [si+3], 6
jnz	short locret_6F65
inc	dx

locret_6F65:
retn

loc_6F66:
inc	cx
retn



sub_6F68 proc near
mov	bp, 5082h
xor	cx, cx
xor	dx, dx
jmp	sub_84D3
sub_6F68 endp

call	sub_F1B2
mov	ax, ds:0DC00h
call	sub_E8EB
mov	di, ds:1150h
call	sub_5F4E
call	loc_6835
call	sub_6994
call	sub_6F8E
jmp	sub_4D82



sub_6F8E proc near
mov	byte ptr ds:11CBh, 0
retn
sub_6F8E endp

call	sub_5F4E
call	sub_7214
call	sub_6814
call	sub_6994
mov	byte ptr ds:11C8h, 0
call	sub_6F8E
jmp	sub_4D82
mov	word ptr ds:487Eh, 2
mov	byte ptr ds:473Eh, 1
mov	al, 4
jmp	short loc_6FBF
call	sub_6155
mov	al, 8

loc_6FBF:
mov	di, ds:46F8h
push	di
push	ax
call	sub_F18D
call	sub_68BA
mov	dx, ds:4
mov	bx, ds:6
pop	ax
push	ax
cmp	al, 4
jnz	short loc_6FDB
mov	dl, 1

loc_6FDB:
call	sub_5F27
call	loc_373B
pop	ax
mov	ds:11C9h, al
pop	di
jmp	loc_65D3



sub_6FE9 proc near
add	ds:11C7h, al
mov	word ptr ds:11CCh, 80h ; '�'
retn
sub_6FE9 endp




sub_6FF4 proc near
push	di
call	sub_5F4E
mov	cx, [di+4]
mov	di, [di+2]
call	sub_7003
pop	di
retn
sub_6FF4 endp




sub_7003 proc near
sub	bx, cx
neg	bx
sub	dx, di
neg	dx
cmp	bx, 0FF80h
jl	short loc_7016
cmp	bx, 80h	; '�'
jl	short loc_701A

loc_7016:
sar	bx, 1
sar	dx, 1

loc_701A:
mov	bh, bl
xor	bl, bl

loc_701E:
or	bx, bx
mov	ax, bx
jns	short loc_7026
neg	ax

loc_7026:
or	dx, dx
mov	di, dx
mov	cx, dx
jns	short loc_7030
neg	cx

loc_7030:
cmp	cx, ax
jb	short loc_7050
cmp	cx, 1
jb	short locret_704F
mov	ax, 20h	; ' '
mov	cx, dx
imul	bx
idiv	cx
mov	dx, di
or	cx, cx
js	short loc_704C
add	al, 40h	; '@'
clc
retn

loc_704C:
add	al, 0C0h ; '�'
clc

locret_704F:
retn

loc_7050:
cmp	ax, 1
jb	short locret_704F
mov	ax, 20h	; ' '
imul	dx
idiv	bx
mov	dx, di
or	bx, bx
js	short loc_7064
sub	al, 80h	; '�'

loc_7064:
neg	al
clc
retn
sub_7003 endp




sub_7068 proc near
mov	bx, ax
add	bl, 20h	; ' '
mov	bh, bl
and	bh, 7Fh
cmp	bh, 40h	; '@'
jb	short loc_708A
mov	dx, 20h	; ' '
sub	al, 40h	; '@'
or	bl, bl
jns	short loc_7086
neg	dx
sub	al, 80h	; '�'
neg	al

loc_7086:
cbw
mov	bx, ax
retn

loc_708A:
or	bl, bl
mov	bx, 0FFE0h
jns	short loc_7097
sub	al, 80h	; '�'
neg	al
neg	bx

loc_7097:
cbw
mov	dx, ax
retn
sub_7068 endp




sub_709B proc near
cmp	byte ptr ds:11CBh, 0
jnz	short loc_70A9
cmp	byte ptr ds:11C8h, 0
jz	short loc_70C5

loc_70A9:
cmp	bx, 0FFB3h
jl	short loc_70B3
cmp	bx, 4Dh	; 'M'
jle	short locret_70D5

loc_70B3:
mov	al, ds:11C7h
mov	ah, al
sub	ah, 40h	; '@'
xor	ah, bh
js	short locret_70D5
and	al, 80h
or	al, 40h
jmp	short loc_70D2

loc_70C5:
mov	di, ds:11C5h
push	bx
push	dx
call	sub_6FF4
pop	dx
pop	bx
jb	short locret_70D5

loc_70D2:
mov	ds:11C7h, al

locret_70D5:
retn
sub_709B endp




sub_70D6 proc near
call	sub_709B
mov	al, ds:11C7h
push	dx
push	bx
shl	bx, 1
jns	short loc_70E4
neg	bx

loc_70E4:
mov	bp, [bx+4880h]
call	sub_7068
mov	cx, 20h	; ' '
mov	ax, bp
imul	dx
idiv	cx
xchg	ax, bx
imul	bp
idiv	cx
mov	dx, bx
mov	bx, ax
or	ax, ax
jns	short loc_7103
neg	ax

loc_7103:
add	ax, ds:11CCh
cmp	ah, 1
jbe	short loc_711E
mov	cx, ax
mov	ax, dx
cwd
mov	dl, ah
mov	ah, al
xor	al, al
idiv	cx
mov	dx, ax
mov	ax, 100h

loc_711E:
mov	ds:11CCh, al
mov	al, ah
cbw
or	bx, bx
jns	short loc_712A
neg	ax

loc_712A:
pop	bx
add	bx, ax
pop	ax
add	dx, ax
mov	ax, bx
add	ax, 60h	; '`'
cmp	ax, 0C0h ; '�'
jb	short locret_7143
add	byte ptr ds:11C7h, 80h ; '�'
add	dx, 8000h

locret_7143:
retn
sub_70D6 endp




sub_7144 proc near
mov	dx, [di+2]
mov	bx, [di+4]
push	si
mov	ax, 0FFFFh
mov	ds:0CAh, ax
mov	ds:0D0h, ax
mov	ds:0D6h, ax
mov	ds:0DCh, ax
mov	ds:0E2h, ax
mov	si, 100h

loc_7160:
cmp	word ptr [si], 0FFFFh
jz	short loc_71CB
cmp	si, di
jz	short loc_71C6
mov	cx, [si+2]
sub	cx, dx
jns	short loc_7172
neg	cx

loc_7172:
mov	ax, [si+4]
sub	ax, bx
jns	short loc_717B
neg	ax

loc_717B:
mov	cl, ch
xor	ch, ch
cmp	cl, al
jnb	short loc_7185
mov	cx, ax

loc_7185:
cmp	byte ptr [si+8], 28h ; '('
jb	short loc_7199
mov	bp, 0E2h ; '�'
test	byte ptr [si+0Ah], 80h
jnz	short loc_71AD
mov	bp, 0DCh ; '�'
jmp	short loc_71AD

loc_7199:
mov	bp, 0D0h ; '�'
test	byte ptr [si+0Ah], 80h
jz	short loc_71AD
mov	al, ds:2Ah
cmp	al, [si+0Bh]
jb	short loc_71C6
mov	bp, 0D6h ; '�'

loc_71AD:
cmp	cx, [bp+0]
jnb	short loc_71B8
mov	[bp+0],	cx
mov	[bp+2],	si

loc_71B8:
cmp	cx, ds:0CAh
jnb	short loc_71C6
mov	ds:0CAh, cx
mov	ds:0CCh, si

loc_71C6:
add	si, 1Ch
jmp	short loc_7160

loc_71CB:
push	di
mov	bp, 0DEh ; '�'
call	sub_71F3
mov	bp, 0E4h ; '�'
call	sub_71F3
mov	bp, 0D8h ; '�'
call	sub_71F3
add	ax, 0DAh ; '�'
mov	ds:11FDh, ax
mov	bp, 0CCh ; '�'
call	sub_71F3
mov	bp, 0D2h ; '�'
call	sub_71F3
pop	di
pop	si
retn
sub_7144 endp




sub_71F3 proc near
push	bx
push	dx
mov	di, [bp+0]
mov	cx, [di+4]
mov	di, [di+2]
push	bp
call	sub_7003
pop	bp
add	al, 10h
rol	al, 1
rol	al, 1
rol	al, 1
and	ax, 7
mov	[bp+2],	al
pop	dx
pop	bx
retn
sub_71F3 endp




sub_7214 proc near
push	si
mov	bp, 0FFFFh
mov	si, 100h

loc_721B:
cmp	word ptr [si], 0FFFFh
jz	short loc_724F
test	byte ptr [si+0Ah], 80h
jnz	short loc_724A
mov	cx, [si+2]
sub	cx, dx
jns	short loc_722F
neg	cx

loc_722F:
mov	ax, [si+4]
sub	ax, bx
jns	short loc_7238
neg	ax

loc_7238:
mov	cl, ch
xor	ch, ch
cmp	cl, al
jnb	short loc_7242
mov	cx, ax

loc_7242:
cmp	cx, bp
jnb	short loc_724A
mov	bp, cx
mov	di, si

loc_724A:
add	si, 1Ch
jmp	short loc_721B

loc_724F:
pop	si
retn
sub_7214 endp

push	si
mov	bp, 0FFFFh
mov	si, 100h

loc_7258:
cmp	word ptr [si], 0FFFFh
jz	short loc_724F
mov	cx, [si+2]
sub	cx, dx
jns	short loc_7266
neg	cx

loc_7266:
mov	ax, [si+4]
sub	ax, bx
jns	short loc_726F
neg	ax

loc_726F:
mov	cl, ch
xor	ch, ch
cmp	cl, al
jnb	short loc_7279
mov	cx, ax

loc_7279:
cmp	cx, bp
jnb	short loc_7281
mov	bp, cx
mov	di, si

loc_7281:
add	si, 1Ch
jmp	short loc_7258
push	si
mov	bp, 0FFFFh
mov	si, 100h

loc_728D:
cmp	word ptr [si], 0FFFFh
jz	short loc_724F
cmp	byte ptr [si+8], 28h ; '('
jb	short loc_72BC
mov	cx, [si+2]
sub	cx, dx
jns	short loc_72A1
neg	cx

loc_72A1:
mov	ax, [si+4]
sub	ax, bx
jns	short loc_72AA
neg	ax

loc_72AA:
mov	cl, ch
xor	ch, ch
cmp	cl, al
jnb	short loc_72B4
mov	cx, ax

loc_72B4:
cmp	cx, bp
jnb	short loc_72BC
mov	bp, cx
mov	di, si

loc_72BC:
add	si, 1Ch
jmp	short loc_728D
mov	byte ptr ds:4722h, 0
test	byte ptr ds:46EBh, 40h
jz	short loc_72D0
jmp	sub_77CA

loc_72D0:
mov	word ptr ds:4720h, 1E6Eh



sub_72D6 proc near
mov	dx, ds:11C1h
mov	bx, ds:11C3h
mov	ds:4710h, dx
mov	ds:4712h, bx
call	sub_7ABB
call	sub_7E49
call	sub_98AE
sub_72D6 endp




sub_72EF proc near
push	word ptr ds:197Ch
push	word ptr ds:197Eh
pop	word ptr ds:1982h
pop	word ptr ds:1980h
sub_72EF endp




sub_72FF proc near
mov	word ptr ds:46FCh, 0
mov	word ptr ds:479Eh, 0
call	sub_744B
mov	di, 46E3h
add	dx, 5
add	bx, 7
mov	[di], dx
mov	[di+2],	bx
add	dx, 0A0h ; '�'
mov	[di+4],	dx
add	bx, 59h	; 'Y'
mov	[di+6],	bx
mov	si, 4710h
add	dx, 5
mov	[si+4],	dx
add	bx, 0Ch
mov	[si+6],	bx
call	near ptr byte_E00B
call	sub_744B
mov	ax, 8Dh	; '�'
call	sub_E0FF
call	sub_DF4C
call	sub_7A5D
push	word ptr ds:0DD00h
mov	ax, 3Ah	; ':'
call	sub_E00E
call	sub_7454
push	word ptr ds:0DBB2h
pop	word ptr ds:0DD00h
mov	byte ptr ds:46EBh, 40h ; '@'
call	sub_D56A
call	sub_D593
pop	word ptr ds:0DD00h
call	sub_77B4
call	sub_E007
call	sub_7C9E
call	sub_74D5
call	sub_750E
mov	word ptr ds:2772h, 5555h
mov	dx, ds:1980h
mov	bx, ds:1982h
call	sub_D517
mov	cx, bx
mov	di, dx
sub	bx, 14h
add	cx, 13h
sub	dx, 28h	; '('
add	di, 27h	; '''
mov	ax, ds:4710h
add	ax, 5
cmp	dx, ax
jge	short loc_73AA
mov	dx, ax

loc_73AA:
cmp	di, ax
jge	short loc_73B0
mov	di, ax

loc_73B0:
add	ax, 9Fh	; '�'
cmp	dx, ax
jbe	short loc_73B9
mov	dx, ax

loc_73B9:
cmp	di, ax
jbe	short loc_73BF
mov	di, ax

loc_73BF:
mov	ax, ds:4712h
add	ax, 7
cmp	bx, ax
jge	short loc_73CB
mov	bx, ax

loc_73CB:
cmp	cx, ax
jge	short loc_73D1
mov	cx, ax

loc_73D1:
add	ax, 58h	; 'X'
cmp	bx, ax
jbe	short loc_73DA
mov	bx, ax

loc_73DA:
cmp	cx, ax
jbe	short loc_73E0
mov	cx, ax

loc_73E0:
cmp	bx, cx
jz	short loc_73ED
cmp	dx, di
jz	short loc_73ED
mov	al, 0FBh ; '�'
call	sub_E430

loc_73ED:
mov	word ptr ds:2772h, 0FFFFh
mov	si, 4710h
mov	di, 0DBE0h
cmp	word ptr [di], 0
jz	short loc_7405
cmp	[di], si
jz	short loc_7405
mov	di, 0DBE2h

loc_7405:
mov	[di], si
cmp	di, 0DBE2h
pushf
xor	di, di
xchg	di, ds:4720h
or	di, di
jz	short loc_741D
xchg	si, di
mov	al, 6
call	sub_DFB8

loc_741D:
popf
jnz	short loc_7428
call	sub_81C2
call	sub_A00E
jmp	short loc_742B

loc_7428:
call	sub_81E4

loc_742B:
mov	si, 4710h
call	sub_E3C0
call	sub_D56A
mov	byte ptr ds:46EBh, 0C0h	; '�'
mov	si, 1482h
mov	di, 46E3h
call	sub_7A69
call	sub_7A5D

loc_7445:
mov	si, 4710h
jmp	sub_F97A
sub_72FF endp




sub_744B proc near
mov	dx, ds:4710h
mov	bx, ds:4712h
retn
sub_744B endp




sub_7454 proc near
xor	ax, ax
xchg	ax, ds:115Ah
or	ax, ax
jz	short locret_748F
call	sub_10140
push	ds
push	es
mov	cl, 0Ch

loc_7465:
shr	ax, 1
jnb	short loc_7488
push	ax
push	cx
mov	bl, 0Dh
sub	bl, cl
mov	di, 100h

loc_7472:
cmp	[di], bl
jnz	short loc_747B
call	sub_7C06
jnb	short loc_7486

loc_747B:
add	di, 1Ch
cmp	byte ptr [di], 0FFh
jnz	short loc_7472
call	sub_7490

loc_7486:
pop	cx
pop	ax

loc_7488:
loop	loc_7465
pop	es
pop	ds
call	sub_10153

locret_748F:
retn
sub_7454 endp




sub_7490 proc near
mov	si, 100h

loc_7493:
cmp	[si], bl
jnz	short loc_749D
mov	al, [si+10h]
call	sub_74AD

loc_749D:
add	si, 1Ch
cmp	byte ptr [si], 0FFh
jnz	short loc_7493
mov	al, 42h	; 'B'
cmp	bl, 7
jz	short sub_74AD
retn
sub_7490 endp




sub_74AD proc near
push	ds
or	al, al
jz	short loc_74D3
les	di, ds:0DBB0h
mov	ds, word ptr ds:0DD00h
mov	cx, 0C5F9h

loc_74BD:
repne scasb
jnz	short loc_74D3
mov	ah, [di-1]
and	ah, 30h
cmp	ah, 30h	; '0'
jnz	short loc_74D0
and	byte ptr [di-1], 0EFh

loc_74D0:
inc	cx
loop	loc_74BD

loc_74D3:
pop	ds
retn
sub_74AD endp




sub_74D5 proc near
sub	sp, 8
mov	si, 4710h
mov	di, sp
push	ds
pop	es
lodsw
add	ax, 6
stosw
lodsw
add	ax, 62h	; 'b'
stosw
lodsw
sub	ax, 6
stosw
lodsw
sub	ax, 2
stosw
lea	si, [di-8]
mov	al, 0F5h ; '�'
mov	es, word ptr ds:0DBDAh
call	dword ptr ds:38DDh
mov	byte ptr ds:4724h, 0FFh
call	sub_EF45
add	sp, 8
jmp	sub_744B
sub_74D5 endp




sub_750E proc near
add	bx, 62h	; 'b'
add	dx, 6
mov	cx, 0F5FEh
mov	ds:4725h, cl
cmp	byte ptr ds:4722h, 0
jnz	short loc_755C
push	dx
mov	ax, 65h	; 'e'
call	sub_F064
pop	ax
add	ax, 53h	; 'S'
mov	ds:0D82Ch, ax
mov	al, 2Dh	; '-'
call	word ptr ds:2518h
add	word ptr ds:0D82Ch, 41h	; 'A'
mov	al, 2Bh	; '+'
call	word ptr ds:2518h
call	near ptr byte_E00B
call	sub_744B
add	dx, 5Fh	; '_'
add	bx, 63h	; 'c'
mov	ax, 80h	; '�'
call	sub_E1CD
add	dx, 3Ch	; '<'
mov	ax, 81h	; '�'
jmp	sub_E0FF

loc_755C:
mov	ax, 68h	; 'h'
jmp	sub_F064
sub_750E endp




sub_7562 proc near

; FUNCTION CHUNK AT 571A SIZE 0000000E BYTES

push	di
call	sub_74D5
pop	di
or	di, di
jz	short sub_750E
add	bx, 62h	; 'b'
add	dx, 6
mov	cx, 0F5FEh
call	sub_816D
call	sub_EF2F
mov	cx, 0F5FEh
call	sub_8176
cmp	di, 138h
jb	short locret_75E9
cmp	byte ptr [di+8], 21h ; '!'
jz	short locret_75E9
xor	bx, bx
xor	cx, cx
mov	bp, 5728h
call	sub_8509
mov	dx, ds:4710h
add	dx, 71h	; 'q'
mov	ax, cx
or	ax, bx
jz	short loc_75EA
call	near ptr byte_E00B
sub	byte ptr ds:0DBE4h, 3
xor	ax, ax
call	sub_75BD
mov	bl, ch
mov	ax, 1
call	sub_75BD
mov	bl, cl
mov	ax, 2
sub_7562 endp




sub_75BD proc near
or	bl, bl
jz	short locret_75E9
push	cx
push	dx
push	bx
mov	bx, ds:4712h
add	bx, 62h	; 'b'
add	ax, 82h	; '�'
call	sub_E1CD
add	dx, 6
call	sub_EF1E
mov	al, 3Ah	; ':'
call	word ptr ds:2518h
pop	ax
add	al, 30h	; '0'
call	word ptr ds:2518h
pop	dx
pop	cx
add	dx, 12h

locret_75E9:
retn
sub_75BD endp

; START	OF FUNCTION CHUNK FOR sub_7562

loc_75EA:
push	dx
call	sub_EF2F
pop	dx
mov	cx, 0F5FBh
mov	ax, 66h	; 'f'
jmp	sub_F064
; END OF FUNCTION CHUNK	FOR sub_7562
jnb	short locret_7615
mov	al, [si+3]
and	al, 0Fh
cmp	al, 2
jz	short locret_7615
shr	al, 1
shr	al, 1
jnz	short loc_760C
inc	bl
retn

loc_760C:
cmp	al, 1
jnz	short loc_7613
inc	ch
retn

loc_7613:
inc	cl

locret_7615:
retn



sub_7616 proc near

; FUNCTION CHUNK AT 57AD SIZE 00000005 BYTES

mov	di, 4710h
call	sub_F5CE
jnb	short sub_7682
mov	ax, ds:4716h
sub	ax, 0Ah
cmp	bx, ax
jnb	short loc_767D
call	sub_7682
cmp	byte ptr ds:4722h, 0
jnz	short nullsub_15
mov	es, word ptr ds:0DBD8h
call	dword ptr ds:3965h
sub	al, 50h	; 'P'
cmp	al, 10h
jb	short loc_7642
mov	al, 0FFh

loc_7642:
mov	ah, al
xchg	al, ds:4724h
cmp	al, ah
jz	short nullsub_15
call	sub_FA82
call	sub_765B
mov	al, ah
call	sub_765B
call	sub_FABC
sub_7616 endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_15. PRESS	KEYPAD "+" TO EXPAND]



sub_765B proc near
or	al, al
js	short nullsub_15
push	ax
call	sub_744B
add	dx, 5Eh	; '^'
add	bx, 62h	; 'b'
xor	ah, ah
shl	ax, 1
shl	ax, 1
add	dx, ax
mov	si, 5
mov	cx, 7
call	dword ptr ds:3961h
pop	ax
retn
sub_765B endp

; START	OF FUNCTION CHUNK FOR sub_7616

loc_767D:
mov	cx, 0FEF5h
jmp	short loc_7685
; END OF FUNCTION CHUNK	FOR sub_7616



sub_7682 proc near
mov	cx, 0F5FEh

loc_7685:
mov	al, cl
xchg	al, ds:4725h
cmp	al, cl
jz	short nullsub_15
push	bx
push	dx
call	sub_DF5E
call	sub_744B
add	bx, 62h	; 'b'
add	dx, 6
mov	ax, 65h	; 'e'
cmp	byte ptr ds:4722h, 0
jz	short loc_76AA
mov	ax, 68h	; 'h'

loc_76AA:
call	sub_FA82
call	sub_F064
pop	dx
pop	bx
jmp	sub_DF4C
sub_7682 endp




sub_76B5 proc near
call	sub_10140
push	es
mov	ax, 3Ah	; ':'
call	sub_E00E
push	ds
pop	es
mov	di, bp
mov	al, 70h	; 'p'
mov	cx, 100h
rep stosb
cmp	byte ptr ds:4722h, 0
jnz	short loc_770F
mov	si, 100h
mov	di, bp
xor	bx, bx

loc_76D8:
mov	al, [si+0Ah]
test	al, 80h
jnz	short loc_7702
mov	bl, [si+10h]
test	al, 40h
pushf
mov	al, 75h	; 'u'
test	byte ptr ds:2942h, 2
jz	short loc_76F0
mov	al, 78h	; 'x'

loc_76F0:
popf
jz	short loc_7700
mov	al, [si+12h]
shr	al, 1
shr	al, 1
shr	al, 1
shr	al, 1
add	al, 50h	; 'P'

loc_7700:
mov	[bx+di], al

loc_7702:
add	si, 1Ch
cmp	byte ptr [si], 0FFh
jnz	short loc_76D8
pop	es
call	sub_10153
retn

loc_770F:
mov	di, 100h

loc_7712:
mov	al, [di+0Ah]
test	al, 80h
jnz	short loc_7731
push	bp
xor	bx, bx
xor	cx, cx
mov	bp, 5728h
call	sub_8509
pop	bp
call	sub_773E
mov	al, [di+10h]
xor	ah, ah
mov	si, ax
mov	[bp+si], bh

loc_7731:
add	di, 1Ch
cmp	byte ptr [di], 0FFh
jnz	short loc_7712
pop	es
call	sub_10153
retn
sub_76B5 endp




sub_773E proc near
xor	ax, ax
or	bl, bl
jz	short loc_7746
mov	al, 1

loc_7746:
or	ch, ch
jz	short loc_774C
add	al, 2

loc_774C:
or	cl, cl
jz	short loc_7752
add	al, 4

loc_7752:
shl	ax, 1
mov	si, ax
jmp	cs:off_775B[si]
off_775B dw offset loc_776B
dw offset loc_776E
dw offset loc_7771
dw offset loc_7774
dw offset loc_7781
dw offset loc_7784
dw offset loc_7791
dw offset loc_779E

loc_776B:
xor	bh, bh
retn

loc_776E:
mov	bh, 55h	; 'U'
retn

loc_7771:
mov	bh, 0AAh ; '�'
retn

loc_7774:
mov	bh, 66h	; 'f'
cmp	bl, ch
jz	short locret_7780
mov	bh, 9Ah	; '�'
jb	short locret_7780
not	bh

locret_7780:
retn

loc_7781:
mov	bh, 0FFh
retn

loc_7784:
mov	bh, 77h	; 'w'
cmp	bl, cl
jz	short locret_7790
mov	bh, 0DFh ; '�'
jb	short locret_7790
mov	bh, 75h	; 'u'

locret_7790:
retn

loc_7791:
mov	bh, 0BBh ; '�'
cmp	ch, cl
jz	short locret_779D
mov	bh, 0EFh ; '�'
jb	short locret_779D
mov	bh, 0BAh ; '�'

locret_779D:
retn

loc_779E:
cmp	bl, ch
jnb	short loc_77AB
mov	bh, 0DEh ; '�'
cmp	ch, cl
jb	short locret_77AA
mov	bh, 9Bh	; '�'

locret_77AA:
retn

loc_77AB:
mov	bh, 7Bh	; '{'
cmp	bl, cl
jb	short locret_77B3
mov	bh, 67h	; 'g'

locret_77B3:
retn
sub_773E endp




sub_77B4 proc near
sub	sp, 100h
mov	bp, sp
call	sub_76B5
mov	bh, ds:4722h
call	dword ptr ds:395Dh
add	sp, 100h
retn
sub_77B4 endp




sub_77CA proc near
test	byte ptr ds:46EBh, 40h
jz	short locret_77F2
call	sub_10140
and	byte ptr ds:46EBh, 0BFh
mov	di, 0DBE0h
cmp	word ptr [di], 4710h
jz	short loc_77E5
mov	di, 0DBE2h

loc_77E5:
xor	si, si
xchg	si, [di]
call	sub_E57D
call	sub_79A9
call	sub_10153

locret_77F2:
retn
sub_77CA endp


loc_77F3:
call	sub_7814
push	bx
call	sub_7AD3
pop	bx
mov	di, ds:46FCh
or	di, di
jz	short locret_77F2
and	byte ptr ds:46EBh, 0BFh
mov	word ptr ds:0DBE0h, 0
call	sub_7A25
jmp	sub_A720



sub_7814 proc near
mov	ax, bx
sub	ax, ds:4712h
sub	ax, 7
jb	short loc_7825
sub	ax, 59h	; 'Y'
jnb	short loc_783D
retn

loc_7825:
add	sp, 2
mov	ax, dx
sub	ax, ds:4710h
sub	ax, 0Ah
jnb	short loc_7848
call	sub_A170
jz	short loc_783A
jmp	short sub_77CA

loc_783A:
jmp	sub_F1B2

loc_783D:
add	sp, 2
xor	byte ptr ds:4722h, 0FFh
jmp	sub_72FF

loc_7848:
call	sub_A170
jz	short locret_786E
mov	byte ptr ds:4723h, 1

loc_7852:
call	sub_10140
mov	dx, ds:11C1h
mov	bx, ds:11C3h
mov	si, 0AAh ; '�'
mov	cx, 6Ch	; 'l'
mov	es, word ptr ds:0DBD8h
call	dword ptr ds:3961h
call	sub_10153

locret_786E:
retn
sub_7814 endp ;	sp =  2


loc_786F:
xor	al, al
xchg	al, ds:4723h
or	al, al
jz	short locret_78D2
call	sub_744B
cmp	dx, ds:11C1h
jnz	short loc_7888
cmp	bx, ds:11C3h
jz	short loc_7852

loc_7888:
mov	word ptr ds:0DBE0h, 0
jmp	sub_79E0
cmp	byte ptr ds:4723h, 0
jz	short locret_78D2
cmp	bx, 98h	; '�'
jnb	short loc_786F
call	loc_7852
mov	si, 11C1h
mov	ax, [si]
add	ax, di
sub	ax, 5
cmp	ax, 8Ch	; '�'
jb	short loc_78B7
jl	short loc_78B5
sub	ax, 8Ch	; '�'

loc_78B5:
sub	di, ax

loc_78B7:
add	[si], di
mov	ax, [si+2]
add	ax, cx
sub	ax, 5
cmp	ax, 18h
jb	short loc_78CD
jl	short loc_78CB
sub	ax, 18h

loc_78CB:
sub	cx, ax

loc_78CD:
add	[si+2],	cx
jmp	short loc_7852

locret_78D2:
retn
call	sub_AB5A
inc	byte ptr ds:46F3h
call	sub_87BB
mov	ds:1954h, al
not	byte ptr ds:0FBh
call	sub_78EA
jmp	loc_A555



sub_78EA proc near
mov	byte ptr ds:28E7h, 1
call	sub_378A
call	sub_7A2D
mov	bp, 5A56h
mov	al, 34h	; '4'
mov	dx, 0FFFFh
call	sub_DFD8
cmp	byte ptr ds:46F3h, 0
jnz	short loc_790A
call	sub_7A80

loc_790A:
jmp	sub_36B6
sub_78EA endp


loc_790D:
mov	byte ptr ds:0FBh, 0FFh
call	near ptr byte_E00B
call	dword ptr ds:3935h
mov	bp, 5A56h
mov	al, 2
xor	dx, dx
call	sub_DFD8
jmp	sub_CCD4
cmp	byte ptr ds:46EBh, 0
js	short loc_796A
call	sub_F18D
call	sub_699A
call	sub_D800
mov	si, 6B34h
mov	bp, 0Fh
call	sub_F8F5
mov	si, 1482h
mov	di, 46E3h
call	sub_7A69
call	sub_7A39
call	sub_3667
mov	byte ptr ds:46EBh, 80h ; '�'
call	sub_CC2E
mov	word ptr ds:2786h, 0C835h
mov	ax, 5A9Ah
mov	ds:46EDh, ax
call	ax ; loc_5A9A
call	sub_F662
jmp	loc_F5E2

loc_796A:
call	sub_DF4C
call	sub_7A5D
mov	al, 80h	; '�'
xchg	al, ds:46EBh
push	ax
call	sub_D593
call	near ptr byte_E00B
call	sub_7C9E
call	sub_81E4
call	sub_E2E2
mov	word ptr ds:3CBEh, 0
call	sub_85E5
mov	si, 46E3h
call	sub_E57D
call	sub_A65C
pop	ax
mov	ds:46EBh, al
and	al, 40h
jz	short sub_79A3
call	sub_72D6



sub_79A3 proc near
mov	ax, 1A9Eh
call	sub_F82E
sub_79A3 endp




sub_79A9 proc near
mov	si, 46E3h
jmp	sub_F97A
sub_79A9 endp




sub_79AF proc near
call	sub_9A06
xor	ax, ax
mov	ds:46EBh, al
mov	ds:46F3h, al
mov	ds:3CBEh, ax
mov	ds:0A5C0h, ax
mov	ds:0DBE0h, ax
mov	ds:0DBE2h, ax
mov	ds:1954h, ax
mov	word ptr ds:2786h, 0C827h
mov	si, 6B34h
jmp	sub_F92F
sub_79AF endp

call	sub_A170
jnz	short loc_79DD
jmp	sub_72EF

loc_79DD:
call	sub_7A2D



sub_79E0 proc near
call	sub_A720
test	byte ptr ds:46EBh, 40h
jz	short locret_79ED
jmp	loc_7445

locret_79ED:
retn
sub_79E0 endp

mov	byte ptr ds:1955h, 3
mov	si, 8E0h
mov	dx, [si+6]
mov	bx, [si+8]
push	si
call	loc_7A30
call	sub_79E0
pop	si
cmp	word ptr ds:1176h, 1
ja	short loc_7A1A
test	byte ptr [si+3], 40h
jnz	short locret_7A21
mov	di, [si+4]
cmp	di, ds:114Eh
jnz	short locret_7A21

loc_7A1A:
test	byte ptr ds:46EBh, 40h
jz	short loc_7A22

locret_7A21:
retn

loc_7A22:
jmp	loc_A59C



sub_7A25 proc near
mov	dx, [di+2]
mov	bx, [di+4]
jmp	short loc_7A30
sub_7A25 endp




sub_7A2D proc near
call	sub_5F4E

loc_7A30:
mov	ds:197Eh, bx
mov	ds:197Ch, dx
retn
sub_7A2D endp




sub_7A39 proc near
mov	si, 46E3h
mov	al, 0FCh ; '�'

loc_7A3E:
mov	dx, [si]
mov	bx, [si+2]
mov	di, [si+4]
mov	cx, [si+6]
mov	bp, 4

loc_7A4C:
push	ax
push	bp
dec	dx
dec	bx
call	sub_E430
pop	bp
pop	ax
inc	di
inc	cx
sub	al, 2
dec	bp
jnz	short loc_7A4C
retn
sub_7A39 endp




sub_7A5D proc near
mov	di, 0D83Ch
call	sub_7A66
sub_7A5D endp




sub_7A63 proc near
mov	di, 0D834h
sub_7A63 endp




sub_7A66 proc near
mov	si, 46E3h
sub_7A66 endp




sub_7A69 proc near
push	ds
pop	es
movsw
movsw
movsw
movsw
retn
sub_7A69 endp




sub_7A70 proc near
mov	si, 1470h
mov	di, 0D83Ch
jmp	short sub_7A69
sub_7A70 endp




sub_7A78 proc near
mov	si, 1470h
mov	di, 0D834h
jmp	short sub_7A69
sub_7A78 endp




sub_7A80 proc near
call	sub_DF5E
mov	si, 194Ah
mov	ds:0DBE0h, si
call	sub_99EB
call	sub_EF38
mov	si, 0E2h ; '�'
call	sub_EE40
call	sub_EF0C
mov	al, ds:28h
xor	ah, ah
call	sub_101B3
mov	dx, ds:194Ah
mov	bx, ds:194Ch
add	dx, 0Ah
add	bx, 8
mov	cx, 0F0h ; '�'
mov	ax, 0E2h ; '�'
call	sub_F064
jmp	sub_DF4C
sub_7A80 endp




sub_7ABB proc near
cmp	word ptr ds:0DBE0h, 194Ah
jnz	short locret_7AD2
call	sub_10140
xor	si, si
xchg	si, ds:0DBE0h
call	sub_E57D
call	sub_10153

locret_7AD2:
retn
sub_7ABB endp




sub_7AD3 proc near
mov	di, ds:0DBE0h
cmp	di, 194Ah
jnz	short loc_7AF2
mov	ax, ds:0CE7Ah
sub	ax, ds:0DC5Ah
cmp	ax, 3E8h
jb	short loc_7AF2
call	sub_FA82
call	sub_7ABB
jmp	sub_FABC

loc_7AF2:
cmp	di, 4710h
jz	short loc_7B02
mov	di, ds:0DBE2h
cmp	di, 4710h
jnz	short locret_7B45

loc_7B02:
call	sub_F5CE
jnb	short loc_7B1B
mov	byte ptr ds:46EBh, 40h ; '@'
mov	al, 0FFh
call	sub_7D3D
mov	byte ptr ds:46EBh, 0C0h	; '�'
cmp	ax, 9
jb	short loc_7B1D

loc_7B1B:
xor	di, di

loc_7B1D:
mov	ax, di
xchg	ax, ds:46FCh
cmp	ax, di
jz	short loc_7B3E
push	bx
push	dx
push	di
push	word ptr ds:0DBDAh
call	sub_FA82
call	sub_DF5E
call	sub_7562
pop	word ptr ds:0DBDAh
pop	di
pop	dx
pop	bx

loc_7B3E:
or	di, di
jnz	short locret_7B45
call	sub_7616

locret_7B45:
retn
sub_7AD3 endp

call	sub_7ABB
call	near ptr byte_E00B
mov	di, ds:0DBE0h
or	di, di
jz	short loc_7B65
call	sub_F5CE
jnb	short loc_7B65
cmp	di, 4710h
jnz	short loc_7B62
jmp	loc_77F3

loc_7B62:
jmp	loc_9D67

loc_7B65:
mov	di, ds:0DBE2h
or	di, di
jz	short loc_7B75
call	sub_F5CE
jnb	short loc_7B75
jmp	loc_9D88

loc_7B75:
cmp	byte ptr ds:46F5h, 0
jz	short loc_7B7F
jmp	sub_F1B2

loc_7B7F:
call	sub_8816
jnb	short loc_7B87
jmp	loc_A5FC

loc_7B87:
mov	al, 31h	; '1'
call	sub_7D3D
cmp	ax, 14h
jnb	short loc_7B9A
cmp	di, ds:46F8h
jz	short loc_7B9A
jmp	loc_7E80

loc_7B9A:
call	sub_7E49
call	sub_98AE
call	sub_77CA
cmp	byte ptr ds:1954h, 0
jz	short locret_7BB3
call	sub_F1E6
call	sub_A633
call	sub_F150

locret_7BB3:
retn
call	sub_7ABB
call	near ptr byte_E00B
cmp	word ptr ds:0DBE2h, 0
jnz	short locret_7BB3
mov	di, ds:0DBE0h
or	di, di
jz	short loc_7BD4
cmp	di, 18DFh
jnz	short locret_7BB3
call	sub_F5CE
jb	short loc_7BEA

loc_7BD4:
call	sub_8816
jnb	short locret_7BB3
mov	si, [si+0Ah]
cmp	si, ds:46FAh
jz	short loc_7BEA
push	si
call	sub_9A06
pop	si
jmp	loc_978C

loc_7BEA:
jmp	sub_98AE



sub_7BED proc near
cmp	dx, ds:46E3h
cmc
jnb	short locret_7C05
cmp	dx, ds:46E7h
jnb	short locret_7C05
cmp	bx, ds:46E5h
cmc
jnb	short locret_7C05
cmp	bx, ds:46E9h

locret_7C05:
retn
sub_7BED endp




sub_7C06 proc near
cmp	byte ptr [di+8], 28h ; '('
jb	short locret_7C13
test	byte ptr [di+0Ah], 8
jz	short locret_7C13
stc

locret_7C13:
retn
sub_7C06 endp

; START	OF FUNCTION CHUNK FOR sub_9386

loc_7C14:
test	byte ptr ds:11C9h, 3
jz	short sub_7C20
or	byte ptr ds:4728h, 1
; END OF FUNCTION CHUNK	FOR sub_9386



sub_7C20 proc near
push	si
push	di
test	byte ptr [di+0Ah], 80h
jnz	short loc_7C3A
cmp	byte ptr ds:46EBh, 0
jz	short loc_7C3A
mov	si, di
call	sub_8199
jb	short loc_7C3A
inc	byte ptr ds:46ECh

loc_7C3A:
pop	di
pop	si
retn
sub_7C20 endp




sub_7C3D proc near
mov	byte ptr ds:46ECh, 0
cmp	byte ptr ds:46EBh, 0
js	short loc_7C52
jz	short locret_7C9D
call	sub_FA82
jmp	word ptr ds:46EDh

loc_7C52:
call	sub_DF4C
call	sub_FA82
call	sub_7A5D
mov	al, 80h	; '�'
xchg	al, ds:46EBh
push	ax
push	word ptr ds:46EFh
call	sub_D593
call	near ptr byte_E00B
call	sub_7C9E
call	sub_81E4
call	sub_E2E2
mov	word ptr ds:3CBEh, 0
call	sub_85E5
mov	si, 46E3h
call	sub_E57D
pop	si
or	si, si
jz	short loc_7C8C
call	sub_884C

loc_7C8C:
call	sub_3AE8
pop	ax
mov	ds:46EBh, al
and	al, 40h
jz	short loc_7C9A
call	sub_72FF

loc_7C9A:
jmp	near ptr byte_E00B

locret_7C9D:
retn
sub_7C3D endp




sub_7C9E proc near
mov	al, ds:46EBh
or	al, al
jns	short loc_7CAA
push	ax
call	sub_820B
pop	ax

loc_7CAA:
mov	di, 0A5C0h
and	al, 40h
jz	short loc_7CC1
sub	di, 6

loc_7CB4:
add	di, 6
cmp	word ptr [di], 0
jz	short loc_7CC1
test	[di+5],	al
jz	short loc_7CB4

loc_7CC1:
mov	si, 100h

loc_7CC4:
cmp	word ptr [si], 0FFFFh
jz	short loc_7D0D
test	byte ptr [si+0Ah], 80h
jnz	short loc_7D08
call	sub_8199
jb	short loc_7D08
mov	[di], si
mov	[di+2],	dx
mov	bh, ds:46EBh
mov	[di+4],	bx
xor	bh, bh
call	sub_7D12
cmp	cl, 20h	; ' '
jnb	short loc_7CFE
push	ax
push	bx
push	dx
push	si
call	sub_9B5F
cmp	ax, ds:1176h
pop	si
pop	dx
pop	bx
pop	ax
jbe	short loc_7CFE
add	ax, 5

loc_7CFE:
push	si
push	di
call	sub_E213
pop	di
pop	si
add	di, 6

loc_7D08:
add	si, 1Ch
jmp	short loc_7CC4

loc_7D0D:
mov	word ptr [di], 0
retn
sub_7C9E endp




sub_7D12 proc near
mov	ax, 3Ah	; ':'
test	byte ptr ds:46EBh, 80h
jz	short sub_7D1F
mov	ax, 7Ah	; 'z'
sub_7D12 endp




sub_7D1F proc near
mov	cl, [si+8]
cmp	cl, 20h	; ' '
jb	short locret_7D3A
inc	ax
cmp	cl, 21h	; '!'
jb	short locret_7D3A
inc	ax
cmp	cl, 28h	; '('
jb	short locret_7D3A
inc	ax
cmp	cl, 30h	; '0'
jb	short locret_7D3A
inc	ax

locret_7D3A:
retn
sub_7D1F endp

mov	al, 20h	; ' '


; Attributes: bp-based frame

sub_7D3D proc near

var_8= word ptr	-8
var_6= word ptr	-6
var_4= word ptr	-4
var_2= word ptr	-2

push	si
mov	bp, sp
sub	sp, 8
mov	[bp+var_8], 0FFFFh
mov	[bp+var_6], dx
mov	[bp+var_4], bx
mov	[bp+var_2], 0
mov	si, 0A5BAh

loc_7D56:
add	si, 6
mov	di, [si]
or	di, di
jz	short loc_7D8F
cmp	[di+8],	al
jnb	short loc_7D56
mov	bx, [si+4]
cmp	bh, ds:46EBh
jnz	short loc_7D56
xor	bh, bh
mov	dx, [si+2]
sub	dx, [bp+var_6]
jns	short loc_7D79
neg	dx

loc_7D79:
sub	bx, [bp+var_4]
jns	short loc_7D80
neg	bx

loc_7D80:
add	dx, bx
cmp	dx, [bp+var_8]
jnb	short loc_7D56
mov	[bp+var_8], dx
mov	[bp+var_2], di
jmp	short loc_7D56

loc_7D8F:
mov	di, [bp+var_2]
mov	ax, [bp+var_8]
mov	dx, [bp+var_6]
mov	bx, [bp+var_4]
add	sp, 8
pop	si
retn
sub_7D3D endp




sub_7DA0 proc near
mov	bp, 0A5BAh

loc_7DA3:
add	bp, 6
mov	ax, [bp+0]
cmp	ax, di
jz	short locret_7DB3
or	ax, ax
jnz	short loc_7DA3
or	bp, bp

locret_7DB3:
retn
sub_7DA0 endp




sub_7DB4 proc near
call	sub_7DA0
jnz	short locret_7DB3
mov	si, 1668h
call	sub_8122
mov	bx, ax
inc	ax
cmp	di, ds:46F8h
jnz	short loc_7DE2
cmp	al, ds:46F7h
jnz	short loc_7DD1
jmp	sub_99EB

loc_7DD1:
call	sub_10140
mov	byte ptr ds:46D8h, 1
call	sub_7E61
call	sub_DF5E
call	sub_10153

loc_7DE2:
mov	ds:46F7h, al
mov	cl, [bx+11D0h]
xor	ch, ch
mov	dx, [bp+2]
mov	bx, [bp+4]
or	bh, bh
jns	short locret_7DB3

loc_7DF5:
xor	bh, bh
push	bx
push	dx
mov	ax, cx
shr	ax, 1
sub	bx, ax
cmp	bx, 4
jge	short loc_7E07
mov	bx, 4

loc_7E07:
mov	ax, 94h	; '�'
sub	ax, cx
cmp	bx, ax
jl	short loc_7E12
mov	bx, ax

loc_7E12:
add	dx, 0Fh
cmp	dx, 0D2h ; '�'
jl	short loc_7E1F
sub	dx, 82h	; '�'

loc_7E1F:
mov	[si], dx
mov	[si+2],	bx
add	dx, 6Ah	; 'j'
mov	[si+4],	dx
add	bx, cx
mov	[si+6],	bx
mov	ds:0DBE0h, si
pop	dx
pop	bx
mov	ax, 0Ah
sub	dx, ax
sub	bx, ax
mov	di, 0D816h
mov	[di], dx
mov	[di+2],	bx
mov	al, 6
jmp	sub_99DF
sub_7DB4 endp




sub_7E49 proc near
xor	ax, ax
xchg	ax, ds:46F8h
or	ax, ax
jz	short locret_7E60
call	sub_F2EB
mov	al, [bp+0]
inc	al
jz	short sub_7E61
jmp	sub_F1B2

locret_7E60:
retn
sub_7E49 endp




sub_7E61 proc near
mov	word ptr ds:46F8h, 0
mov	byte ptr ds:46F7h, 0
mov	si, 1668h

loc_7E6F:
call	sub_DF4C
mov	word ptr ds:0DBE0h, 0
call	sub_E57D
mov	al, 8
jmp	sub_99FB
sub_7E61 endp


loc_7E80:
call	sub_77CA
call	sub_9A06
cmp	di, ds:114Eh
jz	short sub_7EDE
cmp	byte ptr ds:8, 0FFh
jz	short loc_7EC9
cmp	byte ptr ds:0Bh, 2
jbe	short loc_7EA8
cmp	byte ptr ds:8, 20h ; ' '
jnb	short sub_7EDE
cmp	byte ptr ds:8, 28h ; '('
jnb	short sub_7EDE

loc_7EA8:
push	di
mov	di, ds:114Eh
call	sub_9DF7
pop	di
mov	bp, 20DAh
mov	ax, [bp+2]
and	ah, 1Fh
cmp	byte ptr ds:46FFh, 0
jnz	short loc_7EC4
or	ah, 40h

loc_7EC4:
mov	[bp+2],	ax
jmp	short loc_7ED3

loc_7EC9:
test	byte ptr ds:0Ah, 40h
jz	short sub_7EDE
mov	bp, 20E6h

loc_7ED3:
push	bp
call	sub_7EDE
pop	bp
mov	bx, 5F91h
jmp	sub_F1F3



sub_7EDE proc near
call	sub_DF5E
push	di
call	sub_7DB4
pop	di
mov	ds:46F8h, di
call	sub_EF38
mov	cl, 9Ah	; '�'
mov	ch, ds:1671h
mov	dx, ds:1668h
mov	bx, ds:166Ah
add	dx, 0Ch
add	bx, 4
call	sub_816D
mov	cl, 96h	; '�'
sub	dx, 8
add	bx, 9
call	sub_8176
call	sub_8122
cmp	al, 2
jz	short loc_7F29
test	byte ptr ds:0Ah, 20h
jz	short loc_7F26
or	al, al
jnz	short loc_7F26
push	ax
call	sub_7F2C
pop	ax

loc_7F26:
call	sub_7F7C

loc_7F29:
jmp	sub_DF4C
sub_7EDE endp




sub_7F2C proc near
call	sub_EF45
mov	cl, 90h	; '�'
add	bx, 0Ah
mov	dx, ds:1668h
add	dx, 4
mov	ax, 6Ch	; 'l'
call	sub_F064
mov	al, [di+1Bh]
mov	si, 75h	; 'u'
mov	bp, 6Dh	; 'm'
test	byte ptr [di+0Ah], 20h
jz	short loc_7F6D
push	cx
push	ax
push	si
call	sub_10165
pop	ax
pop	cx
add	bx, 7
mov	dx, ds:1668h
add	dx, 4
mov	bp, ds:166Ch
push	bx
call	sub_804A
pop	bx
pop	cx
retn

loc_7F6D:
mov	ax, bp
add	bx, 7
mov	dx, ds:1668h
add	dx, 0Ah
jmp	sub_F064
sub_7F2C endp




sub_7F7C proc near
call	near ptr byte_E00B
call	sub_EF38
mov	cl, 9Ah	; '�'
mov	dx, ds:1668h
add	bx, 0Ch
add	dx, 4
call	sub_814E
jb	short loc_7FA6
mov	ax, 6Eh	; 'n'
call	sub_F064
add	bx, 0Ah
lea	si, [di+14h]
mov	bp, ds:166Eh
jmp	sub_9D0D

loc_7FA6:
mov	ax, 4Ch	; 'L'
call	sub_F064
add	bx, 6
add	dx, 2Fh	; '/'
push	bx
push	dx
call	sub_7FC8
xor	ah, ah
add	ax, 0Fh
mov	cl, 5
shr	ax, cl
add	ax, 8Eh	; '�'
pop	dx
pop	bx
jmp	sub_E0FF
sub_7F7C endp




sub_7FC8 proc near
xor	bx, bx
xor	cx, cx
xor	dx, dx
mov	ds:0D81Ch, dx
mov	bp, 6155h
call	sub_84D3
xor	ax, ax
add	bx, dx
jz	short loc_7FE4
xchg	ah, dl
xchg	dh, dl
div	bx

loc_7FE4:
mov	bx, ax
xor	ax, ax
mov	dx, ds:0D81Ch
add	cx, dx
jz	short loc_7FF6
xchg	ah, dl
xchg	dh, dl
div	cx

loc_7FF6:
mov	cx, ax
mov	si, bx
cmp	si, cx
jnb	short loc_8000
mov	si, cx

loc_8000:
mov	ax, bx
sub	ax, cx
or	si, si
jz	short loc_800F
cwd
xchg	al, ah
xchg	al, dl
idiv	si

loc_800F:
sar	ax, 1
add	al, 80h	; '�'
retn
sub_7FC8 endp




sub_8014 proc near
call	sub_10140
push	es
call	sub_7FC8
or	al, 1
mov	ds:0FDh, al
pop	es
call	sub_10153
retn
sub_8014 endp

xor	ax, ax
mov	al, [si+1Ah]
test	byte ptr [si+10h], 80h
jz	short loc_8035
add	ds:0D81Ch, ax
retn

loc_8035:
cmp	byte ptr [si+3], 6
jnz	short locret_8049
test	byte ptr [si+3], 20h
jnz	short loc_8043
add	dx, ax

loc_8043:
add	cx, [si+0Ch]
add	bx, [si+0Eh]

locret_8049:
retn



sub_804A proc near
and	cx, 0FFh
jz	short locret_80A2
push	bx
push	di
push	ax
push	dx
call	sub_E0C4
mov	di, bp
sub	di, dx
mov	bp, es:[si]
and	bp, 0FFFh
add	bp, 2
mov	ax, di
xor	dx, dx
div	cx
cmp	ax, bp
jnb	short loc_8085
sub	di, bp
mov	ax, di
xor	dx, dx
div	cx
mov	bp, ax
cmp	bp, 2
jnb	short loc_8085
mov	bp, 2
mov	cx, di
shr	cx, 1

loc_8085:
pop	dx
pop	ax

loc_8087:
push	ax
push	bx
push	cx
push	dx
push	bp
call	sub_E0FF
pop	bp
pop	dx
pop	cx
pop	bx
pop	ax
add	dx, bp
loop	loc_8087
pop	di
pop	bx
call	sub_E0C4
add	bl, es:[si+2]
inc	bx

locret_80A2:
retn
sub_804A endp




sub_80A3 proc near
and	cx, 0FFh
jz	short locret_80A2
push	bx
push	di
push	ax
push	dx
call	sub_E0C4
mov	di, bp
sub	di, bx
mov	bp, es:[si+2]
and	bp, 0FFh
add	bp, 2
mov	ax, di
xor	dx, dx
div	cx
cmp	ax, bp
jnb	short loc_80DF
sub	di, bp
mov	ax, di
xor	dx, dx
div	cx
mov	bp, ax
cmp	bp, 2
jnb	short loc_80DF
mov	bp, 2
mov	cx, di
shr	cx, 1

loc_80DF:
pop	dx
pop	ax

loc_80E1:
push	ax
push	bx
push	cx
push	dx
push	bp
call	sub_E0FF
pop	bp
pop	dx
pop	cx
pop	bx
pop	ax
add	bx, bp
loop	loc_80E1
pop	di
pop	bx
call	sub_E0C4
mov	ax, es:[si]
and	ah, 0Fh
add	dx, ax
inc	dx
retn
sub_80A3 endp




sub_8101 proc near
push	bx
mov	bl, [di+8]
xor	ax, ax
cmp	bl, 20h	; ' '
jb	short loc_8120
inc	ax
cmp	bl, 21h	; '!'
jb	short loc_8120
inc	ax
cmp	bl, 28h	; '('
jb	short loc_8120
inc	ax
cmp	bl, 30h	; '0'
jb	short loc_8120
sub	al, 2

loc_8120:
pop	bx
retn
sub_8101 endp




sub_8122 proc near
call	sub_814E
jb	short loc_814A
call	sub_7C06
mov	ax, 2
jb	short loc_8130
retn

loc_8130:
test	byte ptr [di+0Ah], 10h
jz	short locret_814D
call	sub_8101
or	ax, ax
jz	short locret_814D
cmp	al, 3
jnz	short loc_8144
xor	ax, ax
retn

loc_8144:
cmp	al, 2
mov	al, 2
jnz	short locret_814D

loc_814A:
mov	ax, 1

locret_814D:
retn
sub_8122 endp




sub_814E proc near
call	sub_10140
test	byte ptr [di+0Ah], 2
jnz	short loc_8163
call	sub_7C06
jb	short loc_8168
call	sub_6F68
or	dx, dx
jz	short loc_8168

loc_8163:
call	sub_10153
stc
retn

loc_8168:
call	sub_10153
clc
retn
sub_814E endp




sub_816D proc near
call	sub_8101
add	ax, 44h	; 'D'
jmp	sub_F064
sub_816D endp




sub_8176 proc near
mov	al, [di]
xor	ah, ah
add	ax, 0
call	sub_F064
cmp	byte ptr [di+1], 3
mov	al, 20h	; ' '
jb	short loc_818A
mov	al, 2Dh	; '-'

loc_818A:
call	word ptr ds:2518h
mov	al, [di+1]
xor	ah, ah
add	ax, 0Ch
jmp	sub_F06B
sub_8176 endp




sub_8199 proc near
cmp	byte ptr ds:46EBh, 1
jb	short locret_81C1
mov	dx, [si+2]
mov	bx, [si+4]
sub_8199 endp




sub_81A6 proc near
call	sub_D517
cmp	dx, ds:46E3h
jb	short locret_81C1
cmp	dx, ds:46E7h
cmc
jb	short locret_81C1
cmp	bx, ds:46E5h
jb	short locret_81C1
cmp	bx, ds:46E9h
cmc

locret_81C1:
retn
sub_81A6 endp




sub_81C2 proc near
call	sub_87BB
test	byte ptr [si+3], 40h
jnz	short loc_81D6
mov	si, [si+4]

loc_81CE:
call	sub_8199
mov	ax, 36h	; '6'
jmp	short loc_81F2

loc_81D6:
mov	dx, [si+6]
mov	bx, [si+8]
call	sub_81A6
mov	ax, 36h	; '6'
jmp	short loc_81F2
sub_81C2 endp




sub_81E4 proc near
call	sub_5F4E
call	sub_81A6
mov	ax, 4Ch	; 'L'
pushf
sub	dx, 0Dh
popf

loc_81F2:
jb	short locret_81C1
push	word ptr ds:2784h
push	ax
call	sub_E007
pop	ax
call	sub_E0C4
sub	bl, es:[si+2]
call	sub_E1DD
pop	ax
jmp	sub_E00E
sub_81E4 endp




sub_820B proc near
mov	dx, ds:197Ch
mov	bx, ds:197Eh
sub	bx, 12h

loc_8216:
call	sub_821D
inc	bx
jnb	short loc_8216
retn
sub_820B endp




sub_821D proc near
push	bx
push	dx
call	sub_81A6
pop	si
pop	cx
jb	short locret_8239
push	bx
push	cx
push	dx
push	si
call	sub_823A
pop	si
pop	dx
pop	cx
pop	bx
push	cx
push	si
call	sub_826A
pop	dx
pop	bx
clc

locret_8239:
retn
sub_821D endp




sub_823A proc near
xchg	dx, si
xchg	bx, cx
call	sub_D45B
xchg	dx, si
mov	bx, cx

loc_8245:
mov	ax, es:[di]
and	ax, 3030h
cmp	al, 10h
jz	short loc_8265

loc_824F:
add	dx, 4
cmp	dx, ds:46E7h
jnb	short locret_8264
inc	di
inc	si
cmp	si, bp
jb	short loc_8245
sub	si, bp
sub	di, bp
jmp	short loc_8245

locret_8264:
retn

loc_8265:
call	sub_8297
jmp	short loc_824F
sub_823A endp




sub_826A proc near
xchg	dx, si
xchg	bx, cx
call	sub_D45B
xchg	dx, si
mov	bx, cx

loc_8275:
mov	ax, es:[di]
and	ax, 3030h
cmp	al, 10h
jz	short loc_8292

loc_827F:
sub	dx, 4
cmp	dx, ds:46E3h
jb	short locret_8264
dec	di
dec	si
jns	short loc_8275
add	si, bp
add	di, bp
jmp	short loc_8275

loc_8292:
call	sub_8297
jmp	short loc_827F
sub_826A endp




sub_8297 proc near
push	bx
push	dx
push	si
push	di
push	bp
push	es
cmp	ah, 10h
mov	ax, 78h	; 'x'
jnz	short loc_82A6
inc	ax

loc_82A6:
add	bp, di
and	di, 3
shr	bp, 1
shr	bp, 1
and	bp, 3
add	bx, di
add	dx, bp
call	sub_E213
pop	es
pop	bp
pop	di
pop	si
pop	dx
pop	bx
retn
sub_8297 endp




sub_82C0 proc near

; FUNCTION CHUNK AT 65B6 SIZE 0000004D BYTES

cmp	byte ptr ds:46DEh, 0
jz	short locret_82FD
mov	es, word ptr ds:0DD00h
mov	di, 100h

loc_82CE:
mov	al, [di+0Ah]
test	al, 20h
jz	short loc_82F2
mov	bl, [di+1Bh]
mov	bh, 0FAh ; '�'
cmp	bl, bh
jnb	short loc_82F2
mov	si, [di+6]
call	sub_82FE
shr	dx, 1
inc	dx
add	bl, dl
cmp	bl, bh
jb	short loc_82EF
mov	bl, bh

loc_82EF:
mov	[di+1Bh], bl

loc_82F2:
add	di, 1Ch
cmp	word ptr [di], 0FFFFh
jnz	short loc_82CE
jmp	loc_8486

locret_82FD:
retn
sub_82C0 endp




sub_82FE proc near
mov	cx, 3
dec	si
xor	dx, dx

loc_8304:
lods	word ptr es:[si]
and	ax, 3030h
cmp	ah, 10h
jnz	short loc_830F
inc	dx

loc_830F:
cmp	al, 10h
jnz	short loc_8314
inc	dx

loc_8314:
loop	loc_8304
retn
sub_82FE endp




sub_8317 proc near
mov	byte ptr ds:4739h, 30h ; '0'
jmp	short loc_8328
sub_8317 endp




sub_831E proc near
mov	byte ptr ds:4739h, 20h ; ' '
xor	cx, cx
mov	cl, [di+0Bh]

loc_8328:
mov	cs:word_83BD, 646Fh
mov	dx, [di+2]
mov	bx, [di+4]
mov	ds:0D81Ch, dx
mov	ds:0D818h, bx
jmp	short sub_8382
sub_831E endp

add	bx, ds:0D818h
cmp	bx, 5Dh	; ']'
jg	short locret_8381
cmp	bx, 0FFA3h
jl	short locret_8381
push	dx
mov	dx, ds:0D81Ch
call	sub_D45B
pop	ax
add	di, ax
add	dx, ax
jns	short loc_8362

loc_835C:
add	di, bp
add	dx, bp
js	short loc_835C

loc_8362:
mov	al, es:[di]
mov	ah, al
and	ah, 30h
cmp	ah, 10h
jz	short loc_8375
xor	al, ah
or	al, ds:4739h

loc_8375:
stosb
inc	dx
cmp	dx, bp
jb	short loc_837F
sub	dx, bp
sub	di, bp

loc_837F:
loop	loc_8362

locret_8381:
retn



sub_8382 proc near
xor	bx, bx
mov	dx, bx
mov	di, dx
sub	bx, cx
mov	si, cx
dec	si
mov	ax, cx
xor	bp, bp
jmp	short loc_8396

loc_8393:
inc	bp
inc	dx
dec	di

loc_8396:
sub	ax, bp
jns	short loc_8393
call	sub_83BF
inc	bx
dec	si
add	ax, cx
js	short loc_83A5
loop	loc_8393

loc_83A5:
inc	bp
dec	cx
jmp	short loc_83AE

loc_83A9:
inc	dx
dec	di
sub	ax, bp
inc	bp

loc_83AE:
call	sub_83BF
inc	bx
dec	si
add	ax, cx
jb	short loc_83B9
loop	loc_83AE

loc_83B9:
dec	cx
jns	short loc_83A9
retn
sub_8382 endp

word_83BD dw 0



sub_83BF proc near
push	ax
push	bx
push	cx
push	dx
push	si
push	di
push	bp
mov	cx, dx
sub	cx, di
inc	cx
mov	dx, di
push	si
push	cx
push	dx
call	cs:word_83BD
pop	dx
pop	cx
pop	bx
call	cs:word_83BD
pop	bp
pop	di
pop	si
pop	dx
pop	cx
pop	bx
pop	ax
retn
sub_83BF endp




sub_83E5 proc near
call	sub_7C20
mov	byte ptr ds:4736h, 44h ; 'D'
xor	cx, cx
mov	cl, [di+0Bh]
mov	cs:word_83BD, 653Ah
mov	ax, [di+0Ch]
mov	ds:0D81Ch, ax
mov	ax, [di+0Eh]
cbw
mov	ds:0D818h, ax
call	sub_8382
retn
sub_83E5 endp

add	bx, ds:0D818h
cmp	bx, 56h	; 'V'
jg	short locret_8483
cmp	bx, 0FFAAh
jl	short locret_8483
push	dx
mov	dx, ds:0D81Ch
call	sub_D45B
pop	ax
add	di, ax
add	dx, ax
jns	short loc_842D

loc_8427:
add	di, bp
add	dx, bp
js	short loc_8427

loc_842D:
mov	al, es:[di]
mov	ah, al
and	al, 30h
cmp	al, 10h
mov	al, ah
jz	short loc_8477
test	al, 40h
jz	short loc_8463
call	sub_5F6A
jnz	short loc_8463
mov	byte ptr [si+12h], 0
call	sub_10140
push	es
mov	di, si
call	sub_7C06
jb	short loc_845F
cmp	di, 138h
jb	short loc_845F
and	byte ptr [di+0Ah], 7Fh
call	loc_9313

loc_845F:
pop	es
call	sub_10153

loc_8463:
and	ax, 0ECFh
or	al, 20h
cmp	ah, 8
jnb	short loc_8477
rol	byte ptr ds:4736h, 1
jnb	short loc_8477
and	al, 0CFh
or	al, 10h

loc_8477:
stosb
inc	dx
cmp	dx, bp
jb	short loc_8481
sub	dx, bp
sub	di, bp

loc_8481:
loop	loc_842D

locret_8483:
retn
word_8484 dw 1
; START	OF FUNCTION CHUNK FOR sub_82C0

loc_8486:
mov	es, word ptr ds:0DD00h
mov	si, cs:word_8484
xor	bp, bp
mov	cx, 46h	; 'F'

loc_8494:
shr	si, 1
jnb	short loc_849C
xor	si, 402h

loc_849C:
mov	di, si

loc_849E:
mov	al, es:[di]
mov	ah, al
and	ah, 30h
cmp	ah, 10h
jnz	short loc_84B2
and	al, 0CFh
or	al, 20h
stosb
dec	di
inc	bp

loc_84B2:
add	di, 7FFh
cmp	di, 0C5F9h
jb	short loc_849E
loop	loc_8494
mov	cs:word_8484, si
or	bp, bp
jz	short locret_84D2
cmp	byte ptr ds:46EBh, 0
jns	short locret_84D2
inc	byte ptr ds:46ECh

locret_84D2:
retn
; END OF FUNCTION CHUNK	FOR sub_82C0



sub_84D3 proc near
push	si
mov	al, [di+9]

loc_84D7:
or	al, al
jz	short loc_84EB
call	sub_87D6
push	si
push	di
push	bp
call	bp
pop	bp
pop	di
pop	si
mov	al, [si+1]
jmp	short loc_84D7

loc_84EB:
pop	si
retn
sub_84D3 endp




sub_84ED proc near
push	si
mov	al, [di+9]

loc_84F1:
or	al, al
jz	short loc_8507
call	sub_87D6
jnb	short loc_8502
push	si
push	di
push	bp
call	bp
pop	bp
pop	di
pop	si

loc_8502:
mov	al, [si+1]
jmp	short loc_84F1

loc_8507:
pop	si
retn
sub_84ED endp




sub_8509 proc near
call	sub_84D3
push	si
mov	si, 8AAh

loc_8510:
mov	al, [si+3]
test	al, 40h
jz	short loc_8535
push	bx
mov	bx, [si+4]
and	al, 3
cmp	al, 3
jnz	short loc_8524
mov	bx, [si+0Ch]

loc_8524:
cmp	bx, di
pop	bx
jnz	short loc_8535
push	si
push	di
push	bp
cmp	byte ptr [si+3], 80h ; '�'
call	bp
pop	bp
pop	di
pop	si

loc_8535:
add	si, 1Bh
cmp	si, 0FBBh
jb	short loc_8510
pop	si
retn
sub_8509 endp

mov	bl, [si+3]
and	bl, 0EFh
xor	cx, cx
mov	bp, 667Dh
jmp	short sub_84D3
mov	al, [si+3]
and	al, 0EFh
cmp	al, bl
jnz	short locret_855E
add	cx, [si+0Eh]
jnb	short locret_855E
mov	cx, 0FFFFh

locret_855E:
retn



sub_855F proc near
test	byte ptr [si+3], 20h
jnz	short locret_8580
test	byte ptr [si+10h], 80h
jnz	short locret_8580
or	byte ptr [si+3], 20h
mov	byte ptr [si+19h], 0
mov	ax, ds:2
mov	[si+0Ah], ax
push	di
mov	al, 4
call	sub_8E80
pop	di

locret_8580:
retn
sub_855F endp




sub_8581 proc near
call	sub_A45C
push	si
push	di
call	sub_87E7
jnz	short loc_858E
call	sub_E45A

loc_858E:
pop	di
pop	si
mov	word ptr [si+4], 0FBCh
mov	byte ptr [si+3], 0A0h ;	'�'
mov	byte ptr [si+1Ah], 0
retn
sub_8581 endp




sub_859E proc near
test	byte ptr [si+3], 80h
jz	short locret_85E4
test	byte ptr [si+10h], 80h
jnz	short locret_85E4
inc	byte ptr ds:28h
mov	al, ds:28h
cmp	al, ds:1178h
jb	short loc_85BE
push	si
mov	al, 4Ch	; 'L'
call	sub_30EF
pop	si

loc_85BE:
mov	al, 1
call	sub_8E48
and	byte ptr [si+3], 20h
or	byte ptr [si+3], 2
call	sub_89F5
call	sub_3995
mov	[si+14h], al
mov	di, [si+4]
cmp	byte ptr [di+0Bh], 0
jnz	short locret_85E4
mov	byte ptr [di+0Bh], 2
call	sub_831E

locret_85E4:
retn
sub_859E endp




sub_85E5 proc near
mov	bp, 0A5C0h

loc_85E8:
mov	di, [bp+0]
or	di, di
jz	short loc_8607
mov	al, [di+9]
or	al, al
jz	short loc_8602

loc_85F6:
push	bp
call	sub_8627
pop	bp
mov	al, [si+1]
or	al, al
jnz	short loc_85F6

loc_8602:
add	bp, 6
jmp	short loc_85E8

loc_8607:
mov	si, 88Fh

loc_860A:
add	si, 1Bh
cmp	si, 0FBBh
jnb	short locret_8626
test	byte ptr [si+10h], 10h
jnz	short loc_860A
test	byte ptr [si+3], 40h
jz	short loc_860A
mov	al, [si]
call	sub_8627
jmp	short loc_860A

locret_8626:
retn
sub_85E5 endp




sub_8627 proc near
call	sub_87D6
call	sub_873E
jb	short locret_863D
call	sub_8640
cmp	bp, 1
jb	short locret_863D
push	si
call	sub_E49F
pop	si
clc

locret_863D:
retn
sub_8627 endp

stc
retn



sub_8640 proc near
test	byte ptr [si+10h], 10h
jnz	short loc_865F
mov	al, [si+3]
test	byte ptr [si+10h], 80h
jnz	short loc_8662
or	al, al
jns	short loc_8662
mov	bp, [si+4]
test	byte ptr [bp+0Ah], 10h
mov	bp, 181Fh
jnz	short locret_8661

loc_865F:
xor	bp, bp

locret_8661:
retn

loc_8662:
test	al, 40h
jz	short loc_8669
jmp	sub_86F7

loc_8669:
test	al, 30h
jz	short loc_8695
and	ax, 0Fh
mov	bp, ax
shl	bp, 1
mov	bp, [bp+16B6h]
or	ax, ax
jnz	short locret_8694
mov	al, [si+19h]
and	al, 0C0h
jz	short locret_8694
mov	bp, 1813h
cmp	al, 80h	; '�'
jz	short locret_8694
mov	bp, 1817h
cmp	al, 40h	; '@'
jz	short locret_8694
mov	bp, 181Bh

locret_8694:
retn

loc_8695:
and	ax, 0Fh
jz	short loc_86DA

loc_869A:
mov	bp, ax
shl	bp, 1
mov	bp, [bp+179Ch]
cmp	bp, 1774h
jz	short loc_86BD
cmp	bp, 1732h
jnz	short locret_8661
mov	bp, [si+4]
test	byte ptr [bp+0Ah], 2
mov	bp, 16AAh
jnz	short locret_8661
mov	bp, 1732h

loc_86BD:
mov	al, [si+2]
dec	al
and	al, 7
cmp	al, 3
jb	short locret_86D9
add	bp, 0Ah
cmp	al, 3
jz	short locret_86D9
add	bp, 0Ah
cmp	al, 4
jz	short locret_86D9
add	bp, 0Ah

locret_86D9:
retn

loc_86DA:
test	byte ptr [si+19h], 0C0h
jz	short loc_869A
mov	al, [si+19h]
and	al, 0C0h
mov	bp, 17BCh
cmp	al, 80h	; '�'
jz	short locret_86F6
mov	bp, 17C9h
cmp	al, 40h	; '@'
jz	short locret_86F6
mov	bp, 1806h

locret_86F6:
retn
sub_8640 endp




sub_86F7 proc near
push	bx
push	dx
push	di
mov	di, [si+4]
mov	ax, [di+2]
mov	bx, [di+4]
sub	ax, [si+6]
mov	al, ah
cbw
mov	dx, ax
mov	di, dx
jns	short loc_8711
neg	di

loc_8711:
sub	bx, [si+8]
mov	cx, bx
jns	short loc_871A
neg	cx

loc_871A:
mov	bp, 2
cmp	di, cx
jb	short loc_8724
dec	bp
xchg	dx, bx

loc_8724:
or	bx, bx
jns	short loc_872B
xor	bp, 2

loc_872B:
call	sub_880B
shl	ax, 1
shl	ax, 1
add	bp, ax
shl	bp, 1
mov	bp, [bp+18BFh]
pop	di
pop	dx
pop	bx
retn
sub_86F7 endp




sub_873E proc near
cmp	byte ptr ds:46EBh, 80h ; '�'
jb	short locret_877E
test	byte ptr [si+3], 40h
jnz	short loc_877F
mov	bl, [si+2]
dec	bx
push	di
mov	di, [si+4]
test	byte ptr [di+0Ah], 2
jz	short loc_875C
xor	bl, 8

loc_875C:
pop	di
and	bx, 0Fh
add	bx, bx
mov	al, [bx+1672h]
cbw
mov	dx, ax
mov	al, [bx+1673h]
cbw
add	dx, [bp+2]
mov	bx, [bp+4]
cmp	bh, 80h	; '�'
jb	short locret_877E
xor	bh, bh
add	bx, ax
clc

locret_877E:
retn

loc_877F:
mov	dx, [si+6]
mov	bx, [si+8]
call	sub_D517
cmp	dx, 0FFF0h
jle	short loc_87A0
cmp	bx, 0FFF0h
jle	short loc_87A0
cmp	dx, 148h
jge	short loc_87A0
cmp	bx, 0A0h ; '�'
jge	short loc_87A0
clc
retn

loc_87A0:
stc
retn
sub_873E endp




sub_87A2 proc near
xor	cx, cx
mov	bp, 68DAh
jmp	sub_84D3
sub_87A2 endp

test	byte ptr [si+10h], 10h
jz	short locret_87BA

loc_87B0:
and	byte ptr [si+10h], 0EFh
inc	cx
push	cx
call	loc_A33C
pop	cx

locret_87BA:
retn



sub_87BB proc near
mov	al, ds:1954h
cmp	byte ptr ds:46EBh, 80h ; '�'
jnb	short sub_87D6
mov	al, ds:476Ch
xor	ah, ah
add	ax, ax
mov	si, ax
mov	si, [si+4758h]
mov	al, [si]
jmp	short loc_87E2
sub_87BB endp




sub_87D6 proc near
mov	si, ax
dec	al
mov	ah, 1Bh
mul	ah
add	ax, 8AAh
xchg	ax, si

loc_87E2:
cmp	byte ptr [si+3], 80h ; '�'
retn
sub_87D6 endp




sub_87E7 proc near
cmp	byte ptr ds:46EBh, 0
mov	di, 3CAFh
jns	short loc_8808
mov	cx, ds:3CBEh

loc_87F5:
jcxz	short loc_8808

loc_87F7:
add	di, 11h
cmp	[di+0Ah], si
loopne	loc_87F7
jnz	short locret_8807
test	byte ptr [di+0Ch], 40h
jnz	short loc_87F5

locret_8807:
retn

loc_8808:
or	di, di
retn
sub_87E7 endp




sub_880B proc near
mov	al, [si+3]
and	ax, 0Fh
shr	ax, 1
shr	ax, 1
retn
sub_880B endp




sub_8816 proc near
mov	si, 3CBEh
lodsw
mov	cx, ax
jcxz	short loc_8842
mov	al, 11h
mul	cl
add	si, ax

loc_8824:
sub	si, 11h
cmp	[si], dx
jge	short loc_8840
cmp	[si+2],	bx
jge	short loc_8840
cmp	dx, [si+4]
jge	short loc_8840
test	byte ptr [si+0Ch], 40h
jnz	short loc_8840
cmp	bx, [si+6]
jl	short loc_8844

loc_8840:
loop	loc_8824

loc_8842:
clc
retn

loc_8844:
mov	di, [si+0Ah]
cmp	byte ptr [di+3], 80h ; '�'
retn
sub_8816 endp




sub_884C proc near
call	sub_87E7
jnz	short locret_8872
test	byte ptr [si+3], 40h
jnz	short loc_885F
mov	di, [si+4]
call	sub_7DA0
jnz	short locret_8872

loc_885F:
call	sub_873E
jb	short locret_8872
mov	bp, 18FDh
call	sub_E49F
or	byte ptr [di+0Ch], 40h
mov	ds:4752h, di

locret_8872:
retn
sub_884C endp




sub_8873 proc near
push	di
xor	di, di
xchg	di, ds:4752h
or	di, di
jz	short loc_8881
call	sub_E45A

loc_8881:
pop	di
retn
sub_8873 endp

call	sub_87BB
mov	bp, 215Ah
mov	al, [si+3]
and	al, 0Fh
cmp	al, 2
jz	short loc_88D7
call	sub_880B
mov	bp, 216Eh
cmp	ax, 1
jb	short loc_88C6
mov	bp, 21A6h
jnz	short loc_88C6
mov	bp, 2182h
and	word ptr ds:2188h, 0BFFFh
cmp	word ptr ds:0E2h, 1Eh
jb	short loc_88B8
or	word ptr ds:2188h, 4000h

loc_88B8:
mov	al, [si+3]
and	al, 0Fh
cmp	al, 5
jnz	short loc_88C6
mov	bp, 219Ah
jmp	short loc_88F5

loc_88C6:
and	word ptr [bp+2], 0BFFFh
cmp	byte ptr ds:2Ah, 10h
jnb	short loc_88D7
or	word ptr [bp+2], 4000h

loc_88D7:
lea	bx, [bp-2]

loc_88DA:
add	bx, 4
mov	ax, [bx]
and	ax, 0FFFh
jz	short loc_88F5
cmp	ax, 77h	; 'w'
jnz	short loc_88DA
test	byte ptr ds:0Ah, 20h
jnz	short loc_88F3
or	ax, 4000h

loc_88F3:
mov	[bx], ax

loc_88F5:
mov	bx, 0F66h
jmp	sub_F1F3
mov	al, 1
jmp	short loc_8905
mov	al, 2
jmp	short loc_8905



sub_8903 proc near
mov	al, 3

loc_8905:
push	ax
call	sub_87BB
pop	ax
mov	cl, [si+3]
and	cl, 0Ch
or	cl, al
jmp	short loc_8959
db 90h,	0B0h, 1, 0E8h, 0EBh, 0FFh, 0C6h
db 6, 0D8h, 46h, 1, 0E8h, 99h, 0FEh, 80h
db 64h,	10h, 0BFh, 8Bh,	7Ch, 4,	0E8h, 0C2h
db 0C8h, 8Bh, 3Eh, 0E4h, 0, 0E8h, 77h, 18h
db 75h,	60h, 0E8h, 8, 1Dh, 0E9h, 3Bh, 1Ah
db 0E8h, 2, 1Dh, 0EBh, 55h, 90h, 0E8h, 77h
db 0FEh, 32h, 0C9h, 81h, 0FEh, 0E0h, 8,	75h
db 0Dh,	41h, 0E8h, 9, 0, 0E9h, 3Ch, 0C4h
db 0B1h, 4, 0EBh, 2, 0B1h, 8

loc_8959:
call	sub_87BB
mov	al, [si+3]
and	al, 0Fh
cmp	al, cl
jz	short loc_8985
push	word ptr [si+3]
push	si
push	word ptr [si+12h]
call	loc_899B
call	sub_C094
mov	al, 0Ah
call	sub_9A89
call	sub_C0B2
pop	ax
pop	si
pop	cx
jz	short loc_8988
mov	[si+12h], ax
call	loc_899B

loc_8985:
jmp	sub_F1B2

loc_8988:
call	sub_880B
or	al, al
jz	short loc_8985
and	byte ptr [si+19h], 7Fh
jmp	short loc_8985
sub_8903 endp




sub_8995 proc near
mov	cl, [si+3]
and	cl, 0FCh

loc_899B:
mov	al, [si+3]
and	al, 0Fh
cmp	al, cl
jz	short locret_89F4
sub_8995 endp




sub_89A4 proc near
mov	di, [si+4]
cmp	cl, 8
jnz	short loc_89BA
cmp	di, 7C8h
jnz	short loc_89BA
cmp	byte ptr [di+1Ah], 0
jnz	short loc_89BA
mov	cl, 0Ah

loc_89BA:
mov	[si+3],	cl
and	byte ptr [si+12h], 0CFh
and	word ptr [si+10h], 0FEFFh
call	sub_8AE5
jb	short loc_89D0
or	word ptr [si+10h], 100h

loc_89D0:
call	sub_A331
call	sub_89F5
cmp	byte ptr [si+3], 2
jz	short loc_89E9
call	sub_880B
mov	cl, al
mov	ax, 2000h
shl	ax, cl
or	[si+12h], ax

loc_89E9:
mov	al, [si]
cmp	al, ds:1954h
jnz	short locret_89F4
call	sub_9717

locret_89F4:
retn
sub_89A4 endp




sub_89F5 proc near
mov	ax, ds:2
mov	[si+0Ah], ax
xor	ax, ax
mov	[si+0Ch], ax
mov	[si+0Eh], ax
retn
sub_89F5 endp

inc	byte ptr ds:46F6h
mov	al, ds:46F6h
and	al, 3
jz	short loc_8A1B
mov	cx, 1
mov	di, ds:4752h
or	di, di
jnz	short loc_8A25
retn

loc_8A1B:
mov	si, 3CBEh
lodsw
mov	cx, ax
jcxz	short locret_8A59
mov	di, si

loc_8A25:
test	byte ptr [di+0Ch], 1
jz	short loc_8A54
mov	si, [di+0Dh]
lodsb
or	al, al
jnz	short loc_8A3D
mov	si, [di+0Fh]
lodsb
test	byte ptr [di+0Ch], 2
jnz	short loc_8A54

loc_8A3D:
xor	ah, ah
mov	[di+8],	ax
lodsb
cbw
mov	dx, ax
lodsb
cbw
mov	bx, ax
mov	[di+0Dh], si
push	cx
push	di
call	sub_E531
pop	di
pop	cx

loc_8A54:
add	di, 11h
loop	loc_8A25

locret_8A59:
retn



sub_8A5A proc near
mov	ah, [di+0Ah]
and	ah, 41h
cmp	ah, 1
cmc
jmp	short loc_8A86
sub_8A5A endp




sub_8A66 proc near
test	word ptr [si+10h], 200h
stc
jnz	short loc_8A86
test	word ptr [si+12h], 30h
stc
jnz	short loc_8A86
cmp	byte ptr [di+12h], 1
jb	short loc_8A86
mov	al, [di+0Ah]
xor	al, 40h
and	al, 41h
jz	short loc_8A86
stc

loc_8A86:
pushf
sbb	ah, ah
mov	al, [si+3]
and	ax, 1010h
cmp	al, ah
jz	short loc_8AA5
xor	byte ptr [si+3], 10h
push	ax
push	di
call	sub_A331
pop	di
pop	ax
test	al, 10h
jz	short loc_8AA5
call	sub_89F5

loc_8AA5:
popf
retn
sub_8A66 endp




sub_8AA7 proc near
test	word ptr [si+12h], 30h
stc
jnz	short loc_8A86
cmp	byte ptr [di+1Bh], 1
jb	short loc_8A86
test	byte ptr [di+0Ah], 20h
stc
jz	short loc_8A86
mov	al, [si+19h]
and	al, 2
cmp	al, 1
jmp	short loc_8A86
sub_8AA7 endp

off_8AC5 dw offset sub_8A66
dw offset sub_8A5A
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset sub_8AA7
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1



sub_8AE5 proc near
mov	di, [si+4]
mov	bl, [si+3]
and	bx, 0Fh
shl	bx, 1
clc
jmp	cs:off_8AC5[bx]
sub_8AE5 endp

off_8AF6 dw offset sub_8EB5
dw offset sub_8F9C
dw offset nullsub_1
dw offset nullsub_1
dw offset sub_90BF
dw offset sub_9180
dw offset sub_926E
dw offset nullsub_1
dw offset sub_9563
dw offset sub_95E1
dw offset sub_954D
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1
dw offset nullsub_1



sub_8B16 proc near
mov	al, ds:2Ah
sub	al, 2Dh	; '-'
cmp	al, 3
jnb	short locret_8B3E
test	word ptr ds:10h, 10h
jnz	short locret_8B3E
mov	di, ds:473Ch
or	di, di
jz	short locret_8B3E
call	sub_51EE
cmp	byte ptr ds:66h, 0
jz	short locret_8B3E
mov	al, 30h	; '0'
jmp	sub_30EF

locret_8B3E:
retn
sub_8B16 endp




sub_8B3F proc near
xor	si, si
mov	ax, ds:101Ah
cmp	al, 80h	; '�'
jnz	short loc_8B53
mov	al, 1Ch
dec	ah
mul	ah
add	ax, 100h
mov	si, ax

loc_8B53:
mov	ds:473Ch, si
call	sub_8B16
mov	byte ptr ds:4737h, 0
mov	si, 8AAh

loc_8B62:
test	word ptr [si+12h], 430h
jnz	short loc_8BA3
cmp	byte ptr [si+1Ah], 14h
jnb	short loc_8B74
call	sub_8BE9
jb	short loc_8B93

loc_8B74:
mov	al, [si+3]
test	al, 0A0h
jnz	short loc_8B93
test	al, 40h
jnz	short loc_8BBD
and	ax, 0Fh
mov	bx, ax
shl	bx, 1
push	si
mov	di, [si+4]
call	cs:off_8AF6[bx]
pop	si
call	sub_8C4B

loc_8B93:
add	si, 1Bh
cmp	si, 0FBBh
jb	short loc_8B62
mov	al, ds:4737h
mov	ds:0FAh, al
retn

loc_8BA3:
test	byte ptr [si+3], 40h
jnz	short loc_8BBD
cmp	byte ptr ds:0FAh, 0
jz	short loc_8B93
and	byte ptr [si+12h], 0CFh
test	word ptr [si+12h], 400h
jnz	short loc_8B93
jmp	short loc_8B62

loc_8BBD:
mov	al, [si]
cmp	al, ds:1954h
jz	short loc_8B93
push	si
call	sub_A1D8
pop	si
jmp	short loc_8B93
sub_8B3F endp




sub_8BCC proc near
cmp	byte ptr [di+8], 20h ; ' '
jnb	short locret_8BE8
cmp	byte ptr [di+0Bh], 0Ch
jnb	short locret_8BE8
test	byte ptr [di+0Ah], 1
jnz	short locret_8BE8
inc	byte ptr [di+0Bh]
push	si
push	di
call	sub_831E
pop	di
pop	si

locret_8BE8:
retn
sub_8BCC endp




sub_8BE9 proc near
test	byte ptr [si+3], 0E3h
jnz	short locret_8C2E
test	byte ptr [si+10h], 80h
jnz	short locret_8C2E
cmp	si, 8E0h
jz	short locret_8C2E
mov	di, [si+4]
xor	bx, bx
mov	cl, [si+1Ah]
not	cl
mov	dx, si
mov	bp, 6D5Fh
call	sub_84ED
or	bx, bx
jz	short locret_8C2E
mov	al, [si+1Ah]
add	[bx+1Ah], al
mov	al, [si+19h]
mov	ah, al
and	al, [bx+19h]
mov	[si+19h], al
or	[bx+19h], ah
or	word ptr [bx+12h], 200h
call	sub_8581
stc

locret_8C2E:
retn
sub_8BE9 endp

test	byte ptr [si+3], 0A0h
jnz	short locret_8C4A
cmp	si, 8E0h
jz	short locret_8C4A
cmp	si, dx
jz	short locret_8C4A
mov	al, [si+1Ah]
cmp	cl, al
jb	short locret_8C4A
mov	bx, si
mov	cl, al

locret_8C4A:
retn



sub_8C4B proc near
test	word ptr ds:2, 3Fh
jz	short loc_8C54
retn

loc_8C54:
call	sub_880B
mov	cl, al
mov	ax, 0C000h
rol	ax, cl
and	ax, [si+12h]
jz	short locret_8C8A
shl	ax, 1
jnb	short loc_8C70
cmp	byte ptr [si+18h], 0
jz	short loc_8C70
dec	byte ptr [si+18h]

loc_8C70:
shl	ax, 1
jnb	short loc_8C7D
cmp	byte ptr [si+17h], 0
jz	short loc_8C7D
dec	byte ptr [si+17h]

loc_8C7D:
shl	ax, 1
jnb	short locret_8C8A
cmp	byte ptr [si+16h], 0
jz	short locret_8C8A
dec	byte ptr [si+16h]

locret_8C8A:
retn
sub_8C4B endp




sub_8C8B proc near
push	si
call	sub_5F7E
mov	si, 0FD8h
mov	cx, 0Ch

loc_8C95:
cmp	bx, [si+2]
jnz	short loc_8CA6
mov	ax, [si]
mov	ah, dh
cmp	al, 1
jz	short loc_8CA4
mov	al, 2

loc_8CA4:
mov	[si], ax

loc_8CA6:
add	si, 10h
loop	loc_8C95
cmp	bx, ds:6
jnz	short loc_8CCB
or	byte ptr ds:473Bh, 80h
mov	ax, ds:4
mov	ah, dh
cmp	al, 1
jz	short loc_8CC1
mov	al, 2

loc_8CC1:
mov	ds:4, ax
mov	ds:0Bh,	al
mov	ds:8, ah

loc_8CCB:
pop	si
mov	bp, 6E0Fh
call	sub_84D3
sub_8C8B endp




sub_8CD2 proc near
xor	cx, cx
mov	bp, 764Dh
call	sub_84D3
or	cx, cx
jnz	short sub_8CD2
retn
sub_8CD2 endp

test	word ptr [si+10h], 20h
jz	short locret_8CEF
and	word ptr [si+10h], 0FFDFh
or	word ptr [si+12h], 1000h

locret_8CEF:
retn



sub_8CF0 proc near
cmp	byte ptr ds:46DEh, 0
jnz	short loc_8CF8
retn

loc_8CF8:
test	byte ptr [di+0Ah], 8
jz	short loc_8D1B
call	sub_3995
sub	al, [di+0Bh]
cmp	al, 0FEh ; '�'
jnb	short locret_8D51
and	byte ptr [di+0Ah], 0F7h
and	byte ptr [di+8], 7
inc	byte ptr ds:27h
call	sub_8C8B
mov	byte ptr [di+0Bh], 5

loc_8D1B:
call	sub_8BCC
call	sub_3995
sub	al, [si+14h]
cmp	al, 8
jbe	short loc_8D2D
mov	al, 1
call	sub_8E63

loc_8D2D:
mov	al, [si]
cmp	al, [di+9]
jnz	short locret_8D51
xor	dx, dx
mov	bp, 6E82h
call	sub_84ED
cmp	dl, 3
jnz	short locret_8D51
mov	bp, 6EA8h
call	sub_84ED
mov	ax, 302h
push	si
push	di
call	sub_48C0
pop	di
pop	si

locret_8D51:
retn
sub_8CF0 endp

cmp	di, ds:114Eh
jz	short locret_8D77
cmp	byte ptr [di+8], 21h ; '!'
jnb	short locret_8D77
cmp	byte ptr [si+15h], 28h ; '('
jnb	short locret_8D77
mov	al, [si+3]
and	al, 2Fh
jnz	short locret_8D77
mov	dh, 1
test	byte ptr [si+12h], 80h
jz	short loc_8D75
shl	dh, 1

loc_8D75:
or	dl, dh

locret_8D77:
retn
cmp	byte ptr [si+15h], 28h ; '('
jnb	short locret_8D8E
mov	al, [si+3]
and	al, 2Fh
and	al, 0FBh
jnz	short locret_8D8E
call	sub_8F55
or	byte ptr [si+12h], 10h

locret_8D8E:
retn



sub_8D8F proc near
push	di
mov	di, [si+4]
mov	bp, 6ECBh
call	sub_84ED
pop	di
retn
sub_8D8F endp

test	byte ptr [si+12h], 10h
jz	short locret_8DAA
mov	cl, [si+3]
and	cl, 0Fh
jmp	sub_89A4

locret_8DAA:
retn
; START	OF FUNCTION CHUNK FOR sub_90BF

loc_8DAB:
mov	al, 1
; END OF FUNCTION CHUNK	FOR sub_90BF



sub_8DAD proc near
mov	dl, [bx+si+16h]
add	al, dl
cmp	al, 5Fh	; '_'
jbe	short loc_8DB8
mov	al, 5Fh	; '_'

loc_8DB8:
mov	[bx+si+16h], al
xor	al, dl
and	al, 0F0h
jz	short locret_8DCC
mov	ax, [si+10h]
and	al, 0FCh
inc	bx
or	al, bl
mov	[si+10h], ax

locret_8DCC:
retn
sub_8DAD endp




sub_8DCD proc near
mov	ah, [si+3]
and	ah, 0Fh
mov	al, [si+15h]
cmp	byte ptr ds:0FAh, 0
jz	short loc_8DDF
add	al, 14h

loc_8DDF:
cmp	ah, 6
jnz	short loc_8DF3
push	di
mov	di, [si+4]
cmp	di, ds:114Eh
pop	di
jnz	short loc_8E01
add	al, 1Eh
jmp	short loc_8DFB

loc_8DF3:
and	ah, 0FEh
cmp	ah, 8
jz	short loc_8DFF

loc_8DFB:
cmp	al, 64h	; 'd'
jb	short loc_8E01

loc_8DFF:
mov	al, 64h	; 'd'

loc_8E01:
cmp	byte ptr ds:2Ah, 64h ; 'd'
jb	short locret_8E17
cmp	byte ptr ds:2Ah, 68h ; 'h'
jnb	short locret_8E17
sub	al, 28h	; '('
cmp	al, 0Ah
jge	short locret_8E17
mov	al, 0Ah

locret_8E17:
retn
sub_8DCD endp




sub_8E18 proc near
add	[si+15h], al
cmp	byte ptr [si+15h], 64h ; 'd'
jbe	short locret_8E25
mov	byte ptr [si+15h], 64h ; 'd'

locret_8E25:
retn
sub_8E18 endp




sub_8E26 proc near
push	si
mov	si, 8AAh

loc_8E2A:
test	byte ptr [si+3], 0A0h
jnz	short loc_8E3D
add	[si+15h], al
cmp	byte ptr [si+15h], 64h ; 'd'
jbe	short loc_8E3D
mov	byte ptr [si+15h], 64h ; 'd'

loc_8E3D:
add	si, 1Bh
cmp	si, 0FBBh
jb	short loc_8E2A
pop	si
retn
sub_8E26 endp




sub_8E48 proc near
mov	ah, ds:29h
add	al, ah
cmp	al, 0C8h ; '�'
jbe	short loc_8E54
mov	al, 0C8h ; '�'

loc_8E54:
mov	ds:29h,	al
and	ax, 0FCFCh
sub	al, ah
shr	al, 1
shr	al, 1
jnz	short sub_8E26
retn
sub_8E48 endp




sub_8E63 proc near
sub	[si+15h], al
jnb	short loc_8E6C
mov	byte ptr [si+15h], 0

loc_8E6C:
cmp	byte ptr [si+15h], 5
jnb	short locret_8E7F
mov	byte ptr [si+15h], 4
push	ax
call	sub_8F55
or	word ptr [si+12h], 20h
pop	ax

locret_8E7F:
retn
sub_8E63 endp




sub_8E80 proc near
mov	ah, al
mov	al, ds:29h
sub	al, ah
ja	short loc_8E8B
mov	al, 1

loc_8E8B:
mov	ah, al
xchg	al, ds:29h
and	ax, 0FCFCh
sub	al, ah
shr	al, 1
shr	al, 1
jnz	short loc_8E9D
retn

loc_8E9D:
push	si
mov	si, 8AAh

loc_8EA1:
test	byte ptr [si+3], 0A0h
jnz	short loc_8EAA
call	sub_8E63

loc_8EAA:
add	si, 1Bh
cmp	si, 0FBBh
jb	short loc_8EA1
pop	si
retn
sub_8E80 endp




sub_8EB5 proc near
call	sub_8CF0
test	word ptr [si+10h], 200h
jnz	short loc_8F2C
call	sub_8A66
jnb	short loc_8EC7
jmp	loc_8F4B

loc_8EC7:
call	sub_901C

loc_8ECA:
or	word ptr [si+10h], 100h
call	sub_8F5A
push	ax
mov	dx, [si+0Eh]
add	ax, dx
mov	[si+0Eh], ax
xor	ax, dx
and	ax, 0FF80h
jz	short loc_8EE9
mov	al, 1
xor	bx, bx
call	sub_8DAD

loc_8EE9:
pop	ax
push	ax
add	ax, ds:46E1h
xor	dx, dx
mov	cx, 0Ah
div	cx
mov	ds:46E1h, dx
add	ds:0A0h, ax
pop	ax
add	al, [di+13h]
adc	ah, 0
mov	cl, [di+11h]
div	cl
mov	[di+13h], ah
mov	ah, [di+12h]
and	ah, 0Fh
cmp	al, ah
jbe	short loc_8F22
test	byte ptr ds:46EBh, 40h
jz	short loc_8F22
inc	byte ptr ds:46ECh

loc_8F22:
sub	[di+12h], al
jnb	short locret_8F2B
mov	byte ptr [di+12h], 0

locret_8F2B:
retn

loc_8F2C:
mov	ax, ds:2
mov	ah, [si]
and	ax, 0F0Fh
cmp	al, ah
jnz	short loc_8F44
and	word ptr [si+10h], 0FDFFh
call	sub_8A66
jb	short locret_8F2B
jmp	short loc_8ECA

loc_8F44:
mov	word ptr [si+0Ch], 0
jmp	short sub_8F55

loc_8F4B:
mov	word ptr [si+0Ch], 0
mov	word ptr [si+0Eh], 0
sub_8EB5 endp




sub_8F55 proc near
or	byte ptr [si+3], 10h
retn
sub_8F55 endp




sub_8F5A proc near
call	sub_8DCD
mov	ah, [si+16h]
and	ah, 0F0h
add	al, ah
mul	byte ptr [si+1Ah]
test	byte ptr [si+19h], 80h
jnz	short loc_8F72
shr	ax, 1
shr	ax, 1

loc_8F72:
mov	al, [di+12h]
and	al, 0F0h
inc	ax
mul	ah
xchg	al, ah
rol	ax, 1
and	ah, 1
mov	dx, ax
xchg	dx, [si+0Ch]
sub	dx, ax
jz	short locret_8F9B
mov	bl, 8
jb	short loc_8F90
mov	bl, 4

loc_8F90:
mov	cx, [si+10h]
and	cl, 0F3h
or	cl, bl
mov	[si+10h], cx

locret_8F9B:
retn
sub_8F5A endp




sub_8F9C proc near
mov	al, [di+0Ah]
test	al, 2
jnz	short locret_8FDF
test	al, 40h
jnz	short loc_8FF6
call	sub_8A5A
jb	short locret_8FDF
mov	ax, [si+0Ch]
or	ax, ax
jnz	short loc_8FC7
mov	al, [di+11h]
mov	cl, 4
shl	ax, cl
mov	cl, [si+15h]
add	cl, [si+16h]
div	cl
xor	ah, ah
mov	[si+0Ch], ax

loc_8FC7:
mov	cx, ds:2
sub	cx, [si+0Ah]
cmp	ax, cx
jbe	short loc_8FE0
jcxz	short locret_8FDF
mov	dx, 64h	; 'd'
xchg	ax, cx
mul	dx
div	cx
mov	[si+0Eh], ax

locret_8FDF:
retn

loc_8FE0:
xor	bx, bx
mov	al, 2
call	sub_8DAD
or	byte ptr [di+0Ah], 40h
test	byte ptr ds:46EBh, 40h
jz	short loc_8FF6
inc	byte ptr ds:46ECh

loc_8FF6:
mov	al, [si+3]
push	ax
call	sub_8A5A
mov	word ptr [si+0Eh], 64h ; 'd'
pop	ax
cmp	si, ds:46EFh
jz	short locret_8FDF
cmp	word ptr ds:11D3h, 0
jnz	short loc_9019
test	al, 10h
jnz	short locret_8FDF
mov	al, 0Eh
jmp	short sub_9082
db 90h

loc_9019:
jmp	sub_A376
sub_8F9C endp




sub_901C proc near

; FUNCTION CHUNK AT 71A4 SIZE 0000000E BYTES

test	byte ptr ds:0Ah, 1
jz	short locret_908B
test	byte ptr [si+19h], 80h
jz	short locret_908B
mov	ax, ds:2
mov	ah, [si]
and	ax, 0F0Fh
cmp	al, ah
jnz	short locret_908B
call	sub_908C
call	sub_1029C
mov	al, [di]
mov	bx, 1141h
xlat
cmp	al, ah
jb	short locret_908B
or	word ptr [si+10h], 4000h
test	byte ptr [si+19h], 40h
jnz	short locret_908B
and	ah, 3
jz	short locret_908B
cmp	ah, 2
ja	short loc_9074
jz	short sub_906C
or	word ptr [si+10h], 2000h
sub	byte ptr [si+1Ah], 2
ja	short locret_908B
add	byte ptr [si+1Ah], 2
retn
sub_901C endp




sub_906C proc near
or	word ptr [si+10h], 200h
jmp	sub_8F55
sub_906C endp

; START	OF FUNCTION CHUNK FOR sub_901C

loc_9074:
or	word ptr [si+10h], 1000h
and	byte ptr [si+19h], 7Fh
dec	byte ptr [di+14h]
mov	al, 6
; END OF FUNCTION CHUNK	FOR sub_901C



sub_9082 proc near
mov	ah, 0Fh
push	si
push	di
call	sub_48C0
pop	di
pop	si

locret_908B:
retn
sub_9082 endp




sub_908C proc near
cmp	byte ptr ds:2Ah, 35h ; '5'
jb	short locret_90BE
test	word ptr [si+12h], 40h
jz	short locret_90BE
rol	word ptr ds:0, 1
rol	word ptr ds:0, 1
rol	word ptr ds:0, 1
test	word ptr ds:0, 7
jnz	short locret_90BE
call	sub_906C
or	word ptr [si+10h], 8000h
or	byte ptr [di+0Ah], 4
mov	al, 3
jmp	short sub_9082

locret_90BE:
retn
sub_908C endp




sub_90BF proc near

; FUNCTION CHUNK AT 6EDB SIZE 00000002 BYTES

call	sub_8CF0
and	word ptr [si+10h], 0FDFFh
test	byte ptr [di+0Ah], 4
jnz	short loc_912F
dec	word ptr [si+0Ch]
js	short loc_90D3
retn

loc_90D3:
cmp	di, ds:473Ch
jnz	short loc_90E2
or	word ptr [si+10h], 800h
mov	al, 0A0h ; '�'
jmp	short loc_90EB

loc_90E2:
call	sub_9168
mov	ax, dx
jcxz	short loc_90EB
div	cl

loc_90EB:
xor	ah, ah
sub	al, [si+17h]
jnb	short loc_90F4
xor	al, al

loc_90F4:
shl	ax, 1
mov	cx, ax
call	sub_8DCD
xor	ah, ah
cmp	al, 1Eh
jnb	short loc_9103
mov	al, 1Eh

loc_9103:
add	cx, ax
mov	bl, [si+19h]
mov	ax, 0C8h ; '�'
test	bl, 0Ch
jnz	short loc_9122
mov	al, 0FAh ; '�'
test	bl, 10h
jnz	short loc_9122
mov	ax, 12Ch
test	bl, 20h
jnz	short loc_9122
mov	ax, 190h

loc_9122:
xor	dx, dx
div	cx
mov	[si+0Ch], ax
mov	bx, 1
jmp	loc_8DAB

loc_912F:
mov	ax, [si+0Eh]
cmp	ah, 0FFh
jz	short loc_913D
mov	ax, 0FF40h
sub	al, [si+17h]

loc_913D:
dec	al
jns	short loc_9149
call	sub_914D
or	[si+12h], cx
xor	ax, ax

loc_9149:
mov	[si+0Eh], ax
retn
sub_90BF endp




sub_914D proc near
and	byte ptr [di+0Ah], 0FBh
mov	bp, 7289h
xor	cx, cx
jmp	sub_84ED
sub_914D endp

test	word ptr [si+12h], 40h
jz	short locret_9167
and	word ptr [si+12h], 0FFBFh
mov	cx, 100h

locret_9167:
retn



sub_9168 proc near
mov	bp, 72A2h
xor	cx, cx
xor	dx, dx
jmp	sub_84ED
sub_9168 endp

cmp	byte ptr [si+3], 4
jnz	short locret_917F
inc	cx
add	dl, [si+17h]
adc	dh, 0

locret_917F:
retn



sub_9180 proc near
mov	bx, ds:2
sub	bx, [si+0Ah]
test	byte ptr [si+10h], 40h
jnz	short loc_91C7
mov	al, 50h	; 'P'
sub	al, [si+17h]
cbw
sar	ax, 1
mov	bp, ax
sar	ax, 1
cmp	ax, bx
jge	short loc_91C7
cmp	word ptr [si+0Ch], 0
jnz	short loc_91AF
push	bx
push	bp
call	sub_87A2
pop	bp
pop	bx
jcxz	short loc_91C3
mov	[si+0Ch], cx

loc_91AF:
cmp	bp, bx
jge	short loc_91C7
push	bx
call	sub_528E
pop	bx
mov	ax, ds:94h
xor	dx, dx
div	word ptr [si+0Ch]
mov	[si+0Eh], ax

loc_91C3:
or	byte ptr [si+10h], 40h

loc_91C7:
mov	al, [si]
cmp	al, [di+9]
jz	short locret_91E6
mov	al, [si+17h]
xor	ah, ah
shr	ax, 1
cmp	ax, bx
jnb	short locret_91E6
call	sub_1029C
and	al, 3Fh
cmp	al, [si+17h]
jb	short locret_91E6
jmp	sub_855F

locret_91E6:
retn
sub_9180 endp

mov	byte ptr ds:473Ah, 1
mov	di, ds:114Eh
call	sub_528E
mov	ax, ds:94h
mov	ds:98h,	ax
mov	ax, ds:96h
mov	ds:9Ah,	ax
call	sub_1029C
cmp	al, ds:9Ch
mov	bp, 7516h
jnb	short loc_920E
mov	bp, 7419h

loc_920E:
mov	cx, 10h

loc_9211:
push	cx
mov	di, ds:114Eh
push	bp
call	sub_528E
pop	bp
call	sub_84D3
pop	cx
cmp	word ptr ds:94h, 0
jz	short loc_922F
cmp	word ptr ds:96h, 0
jz	short loc_922F
loop	loc_9211

loc_922F:
call	sub_528E
mov	ax, ds:94h
sub	ds:98h,	ax
mov	ax, ds:96h
sub	ds:9Ah,	ax
mov	cx, 14h

loc_9243:
push	cx
mov	bx, 201h
call	sub_10287
or	al, al
mov	al, 0Bh
jz	short loc_9252
mov	al, 11h

loc_9252:
mov	ds:485Dh, al
mov	al, ah
xor	ah, ah
add	al, 28h	; '('
call	sub_FC80
pop	cx
loop	loc_9243
mov	byte ptr ds:473Ah, 0
jmp	loc_3A5D
mov	byte ptr [si+3], 4
retn



sub_926E proc near

; FUNCTION CHUNK AT 751D SIZE 00000035 BYTES

or	byte ptr ds:11BCh, 1
cmp	di, 11Ch
jnz	short loc_92A9
inc	byte ptr ds:0C2h
mov	bp, 7399h
call	sub_84ED
call	sub_8CD2
les	di, ds:0DCFEh
xor	di, di
mov	cx, 0C5F9h

loc_928F:
mov	al, es:[di]
mov	ah, al
and	ah, 30h
cmp	ah, 30h	; '0'
jnz	short loc_929E
and	al, 0EFh

loc_929E:
stosb
loop	loc_928F
mov	al, 0Ah
mov	di, 11Ch
jmp	sub_9082

loc_92A9:
call	sub_528E
cmp	word ptr ds:94h, 0
jz	short loc_92F9
call	sub_1029C
cmp	al, ds:9Ch
jb	short loc_92BF
jmp	loc_93ED

loc_92BF:
call	sub_6F68
push	cx
call	sub_52FD
pop	cx
jcxz	short loc_92CD
xor	dx, dx
div	cx

loc_92CD:
mov	dl, al
inc	dl
jnz	short loc_92D5
dec	dl

loc_92D5:
xor	dh, dh
xor	cx, cx
xor	bx, bx
mov	bp, 7552h
call	sub_84D3
add	[si+0Ch], cx
or	bx, bx
jz	short loc_92F9
retn
cmp	byte ptr [si+3], 6
jnz	short locret_92F8
cmp	word ptr ds:94h, 0
jz	short loc_92F9
jmp	short loc_92BF

locret_92F8:
retn

loc_92F9:
cmp	di, ds:114Eh
jz	short loc_9304
mov	al, 7
call	sub_9082

loc_9304:
cmp	byte ptr [di+8], 28h ; '('
jnb	short loc_9313
and	byte ptr [di+0Ah], 0FDh
mov	bp, 75AFh
jmp	short loc_9349

loc_9313:
push	si
push	di
mov	byte ptr [di+0Bh], 5
call	sub_831E
pop	di
pop	si
call	sub_3995
add	al, 2
mov	[di+0Bh], al
mov	al, 4
call	sub_8E48
mov	al, 1
call	sub_8E26
or	byte ptr [di+0Ah], 8
push	cx
mov	cl, [di]
mov	ax, 8000h
rol	ax, cl
mov	ds:115Ah, ax
pop	cx
mov	bp, 75AFh
call	sub_84D3
mov	bp, 75EAh

loc_9349:
call	sub_84D3
xor	dx, dx
test	word ptr ds:0, 3
jnz	short loc_9357
inc	dx

loc_9357:
xor	cx, cx
mov	bp, 762Ah
call	sub_84D3
cmp	cx, dx
ja	short loc_9357
push	si
push	di
call	sub_3BAA
cmp	dl, 1
ja	short loc_9381
mov	byte ptr ds:0C2h, 1
and	byte ptr ds:0FF7h, 0FDh
and	byte ptr ds:1007h, 0FDh
pop	di
call	sub_952E
push	di

loc_9381:
pop	di
pop	si
jmp	sub_7C20
sub_926E endp




sub_9386 proc near

; FUNCTION CHUNK AT 5D44 SIZE 0000000C BYTES

and	byte ptr [di+0Ah], 0FDh
cmp	di, ds:114Eh
jz	short loc_93D0
mov	al, [di+8]
cmp	al, 28h	; '('
jnb	short loc_93BB
and	al, 7
add	al, 28h	; '('
mov	[di+8],	al
dec	byte ptr ds:27h
push	si
call	sub_5F7E
mov	dl, 3
mov	si, 0FD8h
mov	cx, 9

loc_93AE:
cmp	bx, [si+2]
jnz	short loc_93B5
mov	[si], dx

loc_93B5:
add	si, 10h
loop	loc_93AE
pop	si

loc_93BB:
mov	bp, 7506h
call	sub_84D3
push	di
mov	cx, 5
call	sub_8317
pop	di
and	byte ptr [di+0Ah], 0F6h
jmp	loc_7C14

loc_93D0:
mov	byte ptr ds:46D9h, 6
retn
sub_9386 endp

test	byte ptr [si+10h], 80h
jz	short loc_93E1
or	byte ptr [si+10h], 10h
retn

loc_93E1:
or	byte ptr [si+3], 20h
retn
cmp	byte ptr [si+3], 6
jz	short loc_93ED
retn
; START	OF FUNCTION CHUNK FOR sub_926E

loc_93ED:
mov	ax, ds:94h
xor	dx, dx
xor	cx, cx
mov	cl, ds:60h
jcxz	short loc_93FC
div	cx

loc_93FC:
mov	dx, ax
call	sub_945D
add	[si+0Eh], ax
sub	[si+1Ah], al
ja	short locret_9421
mov	bx, 7Fh	; ''
call	sub_10287
add	al, 1Eh
mov	[si+1Ah], al
call	sub_855F
call	sub_6F68
or	dx, dx
jnz	short locret_9421
call	sub_9386

locret_9421:
retn
; END OF FUNCTION CHUNK	FOR sub_926E
test	byte ptr [si+10h], 80h
jz	short locret_945C
inc	bx
call	sub_945D
add	cx, ax
sub	[si+1Ah], al
ja	short locret_945C
or	byte ptr [si+3], 20h
or	byte ptr [si+10h], 10h
dec	bx
push	bx
push	cx
push	dx
mov	bx, 3
call	sub_10287
jnz	short loc_9451
mov	di, [si+4]
and	byte ptr [si+19h], 0FBh
call	sub_9E45

loc_9451:
call	sub_87E7
jnz	short loc_9459
call	sub_E45A

loc_9459:
pop	dx
pop	cx
pop	bx

locret_945C:
retn



sub_945D proc near
push	dx
mov	ax, dx
mov	dx, 0FFh
sub	dl, [si+17h]
sub	dl, [si+17h]
mul	dx
mov	al, ah
xor	ah, ah
or	dx, dx
jz	short loc_9475
mov	al, 0FFh

loc_9475:
pop	dx
cmp	al, [si+1Ah]
jbe	short locret_947E
mov	al, [si+1Ah]

locret_947E:
retn
sub_945D endp

jnb	short locret_94B2
cmp	si, 8E0h
jz	short loc_94B3
test	byte ptr [si+3], 20h
jnz	short loc_94AE
or	word ptr [si+10h], 400h
cmp	byte ptr [di+8], 28h ; '('
jb	short loc_949C
or	word ptr [si+10h], 20h

loc_949C:
mov	al, 4
call	sub_8E18
mov	bx, 1
mov	al, 3
call	sub_8DAD
mov	cl, 4
jmp	loc_899B

loc_94AE:
mov	byte ptr [si+3], 22h ; '"'

locret_94B2:
retn

loc_94B3:
and	byte ptr [si+3], 0DFh
jmp	sub_8A5A
jb	short locret_951C
test	byte ptr [si+10h], 80h
jz	short locret_951C
call	sub_A45C
and	byte ptr [si+10h], 7Fh
call	sub_A3EF
cmp	cl, 8
jnb	short loc_9525
mov	byte ptr [si+3], 0A0h ;	'�'
mov	bx, 0F7Fh
call	sub_10287
add	ax, 1464h
mov	[si+1Ah], al
mov	[si+15h], ah
mov	bx, 1F1Fh
call	sub_10287
add	ax, 0A0Ah
mov	[si+16h], al
mov	[si+17h], ah
mov	byte ptr [si+19h], 0
jmp	loc_87B0
jb	short locret_951C
test	byte ptr [si+10h], 80h
jz	short locret_951C
cmp	cx, dx
jnb	short loc_9525
mov	byte ptr [si+3], 0ACh ;	'�'
or	byte ptr [si+10h], 10h
mov	byte ptr [si+1Ah], 0
mov	word ptr [si+0Ch], 0
mov	byte ptr [si+19h], 0
inc	cx

locret_951C:
retn
jb	short locret_952D
test	byte ptr [si+10h], 80h
jz	short locret_952D

loc_9525:
push	cx
push	dx
call	sub_8581
pop	dx
pop	cx
inc	cx

locret_952D:
retn



sub_952E proc near
call	sub_10140
mov	si, 100h
xor	cx, cx

loc_9536:
add	cl, [si+19h]
add	si, 1Ch
cmp	byte ptr [si], 0FFh
jnz	short loc_9536
sub	cl, 0Ah
jb	short loc_9549
add	[di+19h], cl

loc_9549:
call	sub_10153
retn
sub_952E endp




sub_954D proc near
cmp	byte ptr [di+1Ah], 0
jnz	short loc_955D
inc	byte ptr ds:0ECh
jnz	short locret_9562
mov	byte ptr [di+1Ah], 10h

loc_955D:
mov	cl, 8
jmp	loc_899B

locret_9562:
retn
sub_954D endp




sub_9563 proc near
test	byte ptr [si+3], 10h
jnz	short locret_95D6
call	sub_8AA7
jb	short locret_95D6
mov	byte ptr ds:4737h, 0FFh
or	word ptr [si+10h], 100h
test	byte ptr [di+0Ah], 1
jnz	short loc_959B
or	byte ptr [di+0Ah], 1
mov	byte ptr [di+12h], 0
mov	dx, [di+2]
mov	bx, [di+4]
mov	[di+0Ch], dx
xor	bh, bh
mov	[di+0Eh], bx
mov	byte ptr [di+0Bh], 4
jmp	sub_83E5

loc_959B:
call	sub_8CF0
mov	al, [si+18h]
shr	al, 1
shr	al, 1
jnz	short loc_95A8
inc	ax

loc_95A8:
add	[di+0Fh], al
jnb	short locret_95D6
mov	bx, 2
mov	al, 1
call	sub_8DAD
sub	byte ptr [di+1Bh], 0Ch
jb	short loc_95D7
cmp	byte ptr [di+0Bh], 0Ch
jnb	short loc_95C4
inc	byte ptr [di+0Bh]

loc_95C4:
mov	ax, [di+0Eh]
cbw
sub	ax, 2
cmp	ax, 0FFAEh
jl	short loc_95D3
mov	[di+0Eh], al

loc_95D3:
call	sub_83E5

locret_95D6:
retn

loc_95D7:
mov	byte ptr [di+1Bh], 0
call	sub_8F55
jmp	sub_A331
sub_9563 endp




sub_95E1 proc near
test	byte ptr [di+0Ah], 20h
jnz	short loc_9601
mov	al, 1
call	sub_8E18
call	sub_535A
add	[di+1Bh], al
jb	short loc_95F5
retn

loc_95F5:
or	byte ptr [di+0Ah], 20h
or	byte ptr [di+8], 8
mov	byte ptr [di+1Bh], 5

loc_9601:
jmp	sub_8995
sub_95E1 endp

call	sub_87BB
mov	al, [si+19h]
mov	bx, 2
mov	cl, 20h	; ' '
test	al, cl
jz	short loc_9650
inc	bx
shr	cl, 1
test	al, cl
jz	short loc_9650
inc	bx
shr	cl, 1
test	al, cl
jz	short loc_9650
inc	bx
shr	cl, 1
test	al, cl
jz	short loc_9650
mov	al, 0Fh
jmp	short loc_969A
call	sub_87BB
mov	al, [si+19h]
mov	bx, 6
test	al, 2
jz	short loc_9650
mov	al, 0Fh
jmp	short loc_969A
call	sub_87BB
mov	al, [si+19h]
xor	bx, bx
test	al, 80h
jz	short loc_9650
inc	bx
test	al, 40h
mov	al, 0Fh
jnz	short loc_969A

loc_9650:
push	si
mov	ax, bx
add	ax, 0E8h ; '�'
mov	ds:1203h, ax
call	sub_96A7
jb	short loc_9662
pop	si
jmp	loc_9C51

loc_9662:
call	sub_9E60
pop	si
cmp	word ptr ds:470Ch, 0FFFFh
jz	short loc_9698
mov	cl, bl
mov	bh, 80h	; '�'
shr	bh, cl
push	bx
push	si
push	word ptr ds:470Eh
call	sub_8903
pop	di
pop	si
pop	ax
call	sub_C0B2
jnz	short loc_96A4
mov	[si+0Eh], ax
mov	ax, [si+4]
mov	[si+0Ch], ax
call	sub_A376
mov	byte ptr ds:46D8h, 1
jmp	sub_A640

loc_9698:
mov	al, 0Eh

loc_969A:
push	ax
push	si
call	loc_F1CD
pop	si
pop	ax
call	sub_9A89

loc_96A4:
jmp	near ptr byte_E00B



sub_96A7 proc near
call	sub_87BB
mov	di, [si+4]
push	bx
push	si
call	sub_9DF7
pop	si
pop	bx
mov	al, 1
cmp	bx, 1
jnz	short loc_96C3
cmp	di, ds:1150h
jnz	short loc_96C3
inc	al

loc_96C3:
cmp	[bx+46FEh], al
jb	short locret_96D9
mov	al, [si+19h]
mov	ds:3Dh,	al
mov	al, 80h	; '�'
mov	cl, bl
shr	al, cl
or	[si+19h], al
clc

locret_96D9:
retn
sub_96A7 endp




sub_96DA proc near
call	sub_9B33
mov	bp, 2122h
cmp	ax, ds:1176h
ja	short loc_970E
mov	al, [si+3]
test	al, 20h
jz	short loc_96F1
cmp	al, 22h	; '"'
jnz	short loc_970E

loc_96F1:
mov	bp, 214Ah
test	byte ptr [si+3], 40h
jnz	short loc_970E
mov	bp, 210Ah
mov	ax, 52h	; 'R'
cmp	byte ptr ds:46F3h, 1
adc	ax, 0
mov	[bp+12h], ax
call	sub_9717

loc_970E:
mov	bx, 8751h
call	sub_F1F3
jmp	near ptr byte_E00B
sub_96DA endp




sub_9717 proc near
mov	word ptr ds:2110h, 404Fh
or	byte ptr ds:2115h, 40h
or	byte ptr ds:2119h, 40h
test	word ptr [si+12h], 400h
jnz	short locret_978B
mov	al, [si+3]
and	al, 0Fh
cmp	al, 1
jz	short loc_973C
and	byte ptr ds:2111h, 0BFh

loc_973C:
cmp	al, 2
jnz	short loc_9746
mov	byte ptr ds:2110h, 56h ; 'V'
retn

loc_9746:
cmp	byte ptr ds:2Ah, 5
jb	short loc_9752
and	byte ptr ds:2119h, 0BFh

loc_9752:
cmp	byte ptr ds:2Ah, 4
jb	short locret_978B
test	word ptr [si+10h], 200h
jnz	short locret_978B
mov	di, [si+4]
test	byte ptr [di+0Ah], 8
jnz	short loc_976F
cmp	byte ptr [di+8], 28h ; '('
jnb	short locret_978B

loc_976F:
push	si
call	sub_9DF7
mov	si, 46FEh
mov	cx, 7
xor	al, al

loc_977B:
or	al, [si]
inc	si
loop	loc_977B
pop	si
or	al, [si+19h]
jz	short locret_978B
and	byte ptr ds:2115h, 0BFh

locret_978B:
retn
sub_9717 endp


loc_978C:
mov	di, [si+4]
call	sub_9B33
cmp	ax, ds:1176h
jnb	short locret_978B
call	sub_87E7
jnz	short locret_978B
call	sub_DF5E
mov	ds:46FAh, si
push	si
mov	si, 18DFh
mov	bx, [di+2]
mov	dx, [di]
mov	cx, 64h	; 'd'
call	loc_7DF5
pop	si
mov	al, [si]
mov	ds:1955h, al



sub_97B9 proc near
call	sub_87E7
jz	short loc_97C1
jmp	sub_98AE

loc_97C1:
call	sub_DF5E
call	sub_50C6
add	word ptr ds:11F3h, 0Ch
mov	si, 18DFh
call	sub_99EB
call	sub_EF45
mov	cl, 9Ah	; '�'
mov	ch, ds:18E8h
mov	dx, ds:18DFh
mov	bx, ds:18E1h
add	dx, 0Ch
add	bx, 4
mov	ax, 3Ah	; ':'
test	byte ptr ds:30h, 40h
jz	short loc_97F4
inc	ax

loc_97F4:
call	sub_A735
mov	cl, 96h	; '�'
sub	dx, 8
add	bx, 9
mov	di, ds:2Ch
call	sub_8176
mov	cl, 9Ah	; '�'
add	bx, 0Ah
mov	al, ds:30h
test	al, 20h
jz	short loc_981C
cmp	al, 22h	; '"'
mov	ax, 41h	; 'A'
jnz	short loc_9886
inc	ax
jmp	short loc_9886

loc_981C:
mov	ax, 3Ch	; '<'
call	sub_A735
add	bx, 0Fh
cmp	byte ptr ds:30h, 2
jz	short loc_988C
mov	al, ds:2Fh
shr	al, 1
and	ax, 6
add	ax, 11F7h
mov	si, ax
mov	ax, [si]
call	sub_F064
add	bx, 0Ah
test	byte ptr ds:30h, 40h
jnz	short loc_988C
mov	ax, 3Fh	; '?'
test	word ptr ds:32h, 200h
jnz	short loc_9886
mov	ax, 40h	; '@'
test	word ptr ds:32h, 100h
jz	short loc_9886
test	word ptr ds:34h, 30h
jnz	short loc_9886
mov	ax, 3Dh	; '='
cmp	byte ptr ds:30h, 0
jz	short loc_9886
mov	ax, 43h	; 'C'
cmp	byte ptr ds:2Fh, 1
jz	short loc_9886
mov	ax, 3Eh	; '>'
cmp	byte ptr ds:30h, 6
jz	short loc_9886
jmp	short loc_988C

loc_9886:
call	sub_A735
add	bx, 11h

loc_988C:
add	bx, 4
mov	ax, 6Eh	; 'n'
mov	cl, 96h	; '�'
call	sub_F064
add	bx, 8
mov	si, ds:46FAh
call	sub_9DCB
mov	si, 4705h
mov	bp, ds:18E5h
call	sub_9D0D

loc_98AB:
jmp	sub_DF4C
sub_97B9 endp




sub_98AE proc near
xor	ax, ax
xchg	ax, ds:46FAh
or	ax, ax
jz	short loc_98AB
mov	si, 18DFh
jmp	loc_7E6F
sub_98AE endp




sub_98BE proc near
mov	ds:46EFh, si
call	sub_87E7
mov	si, 18E9h
jnz	short loc_98EE
mov	ax, 1Eh
mov	bx, 5
cmp	word ptr [di+2], 4Ch ; 'L'
jge	short loc_98DC
mov	ax, 0Eh
mov	bx, 50h	; 'P'

loc_98DC:
mov	[si+2],	bx
add	bx, 43h	; 'C'
mov	[si+6],	bx
mov	word ptr ds:4710h, 5Ch ; '\'
mov	ds:4712h, ax

loc_98EE:
mov	ds:0DBE0h, si
mov	al, 2
call	sub_99DF
mov	di, 18E9h
mov	si, 18F3h
mov	dx, [di]
mov	bx, [di+2]
mov	ax, dx
add	ax, 49h	; 'I'
mov	ds:2244h, ax
add	bx, 3
mov	ds:2246h, bx
xor	ax, ax
mov	ds:4784h, ax
mov	word ptr ds:4786h, 5
mov	ds:4788h, ax
inc	ax
mov	ds:478Ah, ax
add	dx, 4
mov	[si], dx
mov	[si+2],	bx
add	dx, 3Dh	; '='
add	bx, 3Dh	; '='
mov	[si+4],	dx
mov	[si+6],	bx
call	sub_99EB
mov	si, ds:46EFh
test	byte ptr [si+3], 20h
jz	short loc_9966
mov	di, [si+4]
test	byte ptr [di+0Ah], 2
jnz	short loc_9952
call	sub_7C06
jb	short loc_9966

loc_9952:
mov	ax, 0Ch
mov	ds:47C4h, ax
call	sub_B070
call	sub_DFC4
mov	ax, 0Ch
mov	bp, 0
jmp	short loc_9991

loc_9966:
mov	ax, 0Fh
mov	ds:47C4h, ax
mov	ds:4758h, si
mov	byte ptr ds:476Ch, 0
call	sub_B070
call	sub_DFC4
mov	ax, ds:22A6h
sub	ax, 0Eh
shl	ax, 1
shl	ax, 1
mov	bl, ds:47D0h
dec	bl
xor	bh, bh
shl	bx, 1
mov	bp, bx

loc_9991:
mov	si, 22B9h
add	si, ax
lodsw
mov	ds:46D2h, ax
lodsw
mov	ds:46D4h, ax
push	ds
mov	si, ss:47CAh
mov	ds, word ptr ss:0DBB2h
add	si, ds:[bp+si]
mov	dx, word ptr ss:seg_11380+18F3h
mov	bx, word ptr ss:seg_11380+18F5h
inc	bx
inc	dx
mov	ss:47D4h, dx
mov	ss:47D6h, bx
add	dx, 3Bh	; ';'
add	bx, 3Bh	; ';'
mov	ss:47D8h, dx
mov	ss:47DAh, bx
call	sub_BC3A
pop	ds
mov	si, 47D4h
call	sub_E37A
jmp	near ptr byte_E00B
sub_98BE endp




sub_99DF proc near
mov	byte ptr ds:46D8h, 0
push	si
xchg	si, di
call	sub_DFB8
pop	si
sub_99DF endp




sub_99EB proc near
mov	es, word ptr ds:0DBDAh
mov	al, [si+9]
push	si
call	dword ptr ds:38DDh
pop	si
jmp	sub_E421
sub_99EB endp




sub_99FB proc near
cmp	byte ptr ds:46D8h, 0
jnz	short locret_9A05
jmp	sub_DFB8

locret_9A05:
retn
sub_99FB endp




sub_9A06 proc near
push	si
push	di
mov	byte ptr ds:46D8h, 1
mov	byte ptr ds:0DCE6h, 80h	; '�'
call	sub_A640
call	sub_7E49
call	sub_98AE
mov	byte ptr ds:0DCE6h, 0
mov	byte ptr ds:46F4h, 0
pop	di
pop	si
retn
sub_9A06 endp




sub_9A28 proc near
mov	word ptr ds:1BEAh, 0
mov	byte ptr ds:46F4h, 0
xor	si, si
mov	byte ptr ds:4Ch, 0
xchg	si, ds:46EFh
or	si, si
jz	short locret_9A72
cmp	byte ptr ds:4Ch, 0
jnz	short loc_9A5C
call	sub_3D8E
and	word ptr [si+10h], 3F0h
and	word ptr [si+12h], 0E5FFh
call	sub_3995
mov	[si+14h], al

loc_9A5C:
call	sub_C675
mov	si, 18E9h
xor	ax, ax
mov	ds:0DBE0h, ax
mov	ds:47BAh, ax
call	sub_E57D
mov	al, 4
call	sub_99FB

locret_9A72:
retn
sub_9A28 endp




sub_9A73 proc near
call	sub_DF5E
cmp	si, ds:46EFh
jz	short locret_9A88
push	si
mov	ds:46F1h, si
call	sub_98BE
call	sub_BE10
pop	si

locret_9A88:
retn
sub_9A73 endp




sub_9A89 proc near
push	ax
call	sub_50C6
pop	ax

loc_9A8E:
mov	ds:46F1h, si
mov	ds:23h,	al
mov	word ptr ds:47BAh, 0
call	sub_DF5E
mov	ax, 0Fh
call	sub_B5C1
jb	short loc_9AA9
call	sub_BDCD

loc_9AA9:
mov	si, ds:46F1h
jmp	short loc_9B26
sub_9A89 endp

;align 2



sub_9AB0 proc near

; FUNCTION CHUNK AT 7E97 SIZE 00000021 BYTES
; FUNCTION CHUNK AT 7EDE SIZE 00000003 BYTES

cmp	si, ds:46EFh
jz	short loc_9AB7
retn

loc_9AB7:
mov	word ptr ds:47BAh, 0
cmp	byte ptr ds:46F4h, 0
jz	short loc_9ACE
cmp	byte ptr ds:46F5h, 0
jz	short loc_9ACE
jmp	loc_9D67

loc_9ACE:
mov	si, ds:46EFh
sub_9AB0 endp




sub_9AD2 proc near
call	sub_9A73
call	sub_50C6
mov	di, [si+4]
call	sub_4D68
call	sub_9B33
cmp	ax, ds:1176h
jbe	short loc_9AFD
mov	byte ptr ds:4Ch, 0FFh
mov	di, ds:4752h
or	di, di
jz	short loc_9AFD
mov	ax, 1916h
mov	[di+0Dh], ax
mov	[di+0Fh], ax

loc_9AFD:
call	sub_B5E9
mov	si, ds:46EFh
jb	short loc_9AFD
push	si
call	sub_BDCD
pop	si
mov	byte ptr ds:46F4h, 0
cmp	byte ptr ds:47A5h, 80h ; '�'
jnz	short loc_9B26
inc	byte ptr ds:46F4h
call	sub_9DCB
push	si
call	sub_9CEE
pop	si
jmp	short loc_9B26
;align 2

loc_9B26:
cmp	byte ptr ds:46EBh, 0
jns	short loc_9B30
call	sub_B7D1

loc_9B30:
jmp	sub_DF4C
sub_9AD2 endp




sub_9B33 proc near
push	si
call	sub_5F4E
pop	si
mov	bp, bx
shl	bp, 1
jns	short loc_9B40
neg	bp

loc_9B40:
mov	bp, [bp+4880h]
mov	ax, [si+6]
sub	ax, dx
jns	short loc_9B4D
neg	ax

loc_9B4D:
xor	dx, dx
div	bp
sub	bx, [si+8]
jns	short loc_9B58
neg	bx

loc_9B58:
cmp	ax, bx
jnb	short locret_9B5E
mov	ax, bx

locret_9B5E:
retn
sub_9B33 endp




sub_9B5F proc near
push	si
call	sub_5F4E
pop	si
mov	bp, bx
shl	bp, 1
jns	short loc_9B6C
neg	bp

loc_9B6C:
mov	bp, [bp+4880h]
mov	ax, [si+2]
sub	ax, dx
jns	short loc_9B79
neg	ax

loc_9B79:
xor	dx, dx
div	bp
sub	bx, [si+4]
jns	short loc_9B84
neg	bx

loc_9B84:
cmp	ax, bx
jnb	short locret_9B8A
mov	ax, bx

locret_9B8A:
retn
sub_9B5F endp

mov	byte ptr ds:46F5h, 1
mov	bp, 2012h
mov	bx, 7D68h
call	sub_F1F3
call	near ptr byte_E00B
cmp	byte ptr ds:46F4h, 0
jnz	short loc_9BC1
mov	si, ds:46EFh
call	sub_9AB0
call	sub_9AD2
cmp	byte ptr ds:46F4h, 0
jnz	short loc_9BC1
call	sub_9AD2
cmp	byte ptr ds:46F4h, 0
jnz	short loc_9BC1
call	sub_9AD2

loc_9BC1:
call	sub_9CA9
call	sub_87BB
mov	al, [si+19h]
mov	ds:3Dh,	al
call	sub_9DCB
mov	di, [si+4]
call	sub_9DF7
mov	word ptr ds:1BEAh, 0



sub_9BDC proc near
call	sub_DF5E
mov	si, 1936h
call	sub_99EB
mov	si, 1940h
call	sub_99EB
call	sub_9CEE
push	ds
pop	es
mov	si, 4C60h
mov	di, 4C7Ch
mov	cx, 0Eh
rep movsw
mov	bx, ds:1942h
add	bx, 4
mov	dx, ds:1940h
add	dx, 50h	; 'P'
mov	si, 46FEh
mov	bp, ds:1946h
mov	cx, ds:1948h
mov	ds:0DBE4h, cx
call	sub_9D0D
mov	cx, ds:1948h
mov	dx, ds:1940h
add	dx, 8
mov	ax, 6Fh	; 'o'
call	sub_F064
call	sub_10140
call	sub_F150
call	sub_10153
jmp	sub_DF4C
sub_9BDC endp

mov	byte ptr ds:46F5h, 0
xor	si, si
mov	word ptr ds:0DBE2h, 0
mov	si, 1940h
call	sub_E57D
call	sub_87BB
call	sub_9DE1

loc_9C51:
call	sub_A331
mov	ah, [si+19h]
mov	al, ds:3Dh
mov	bl, al
xor	bl, ah
and	ah, bl
mov	ds:3Dh,	ah
and	al, bl
mov	ds:3Eh,	al
mov	byte ptr ds:3Fh, 0
test	ah, 40h
jz	short loc_9C81
mov	di, [si+4]
cmp	di, ds:1150h
jnz	short loc_9C81
mov	byte ptr ds:3Fh, 40h ; '@'

loc_9C81:
mov	al, [si+3]
and	al, 0Fh
cmp	al, 8
jnz	short loc_9C8D
call	sub_8AE5

loc_9C8D:
mov	al, 0Ch
call	sub_9A89
mov	byte ptr ds:46F4h, 0
cmp	word ptr ds:1BEAh, 0
jnz	short locret_9CA8
mov	si, ds:46EFh
call	sub_9AB0
call	sub_9AD2

locret_9CA8:
retn



sub_9CA9 proc near
mov	si, 18E9h
mov	di, 1936h
mov	bp, 1940h
mov	ds:0DBE2h, bp
mov	ax, [si]
add	ax, 30h	; '0'
mov	[bp+0],	ax
add	ax, 4Dh	; 'M'
mov	[di], ax
mov	ax, [si+4]
mov	[di+4],	ax
mov	[bp+4],	ax
mov	ax, [si+2]
add	ax, 2Bh	; '+'
mov	[di+2],	ax
mov	ax, [si+6]
mov	[di+6],	ax
inc	ax
cmp	ax, 70h	; 'p'
jb	short loc_9CE4
sub	ax, 6Dh	; 'm'

loc_9CE4:
mov	[bp+2],	ax
add	ax, 28h	; '('
mov	[bp+6],	ax
retn
sub_9CA9 endp




sub_9CEE proc near
call	sub_EF38
mov	si, 4705h
mov	dx, ds:18E9h
mov	bx, ds:18EBh
add	dx, 80h	; '�'
add	bx, 2Dh	; '-'
mov	bp, ds:18EFh
mov	word ptr ds:0DBE4h, 0F0h ; '�'
sub_9CEE endp




sub_9D0D proc near
call	near ptr byte_E00B
push	di
push	ds
pop	es
mov	di, 4C60h
mov	cx, 0Eh
xor	ax, ax
rep stosw
mov	di, si
mov	cx, 7
xor	al, al
repe scasb
jnz	short loc_9D39
add	bx, 5
add	dx, 0Ch
call	sub_EF1E
mov	ax, 69h	; 'i'
call	sub_F06B
pop	di
retn

loc_9D39:
xor	di, di

loc_9D3B:
mov	al, [si]
or	al, al
jz	short loc_9D5E
mov	cl, al
push	si
push	di
push	bp
mov	al, [di+192Fh]
xor	ah, ah
shl	di, 1
shl	di, 1
mov	[di+4C60h], dx
call	sub_80A3
mov	[di+4C62h], dx
pop	bp
pop	di
pop	si

loc_9D5E:
inc	si
inc	di
cmp	di, 7
jb	short loc_9D3B
pop	di
retn
sub_9D0D endp

; START	OF FUNCTION CHUNK FOR sub_9AB0

loc_9D67:
cmp	byte ptr ds:46F5h, 0
jz	short nullsub_16
mov	di, 1936h
call	sub_F5CE
jnb	short nullsub_16
mov	si, 4C7Ch
call	sub_9DB2
jnb	short nullsub_16
dec	byte ptr [di+4705h]
inc	byte ptr [di+46FEh]
jmp	short loc_9DAE
; END OF FUNCTION CHUNK	FOR sub_9AB0

loc_9D88:
cmp	byte ptr ds:46F5h, 0
jz	short nullsub_16
mov	di, 1940h
call	sub_F5CE
jnb	short nullsub_16
mov	si, 4C60h
call	sub_9DB2
jnb	short nullsub_16
cmp	byte ptr [di+4705h], 0
jnz	short nullsub_16
inc	byte ptr [di+4705h]
dec	byte ptr [di+46FEh]
; START	OF FUNCTION CHUNK FOR sub_9AB0

loc_9DAE:
call	sub_9BDC
; END OF FUNCTION CHUNK	FOR sub_9AB0
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_16. PRESS	KEYPAD "+" TO EXPAND]



sub_9DB2 proc near
xor	di, di

loc_9DB4:
lodsw
or	ax, ax
jz	short loc_9DC1
cmp	dx, ax
jb	short loc_9DC1
cmp	dx, [si]
jb	short nullsub_16

loc_9DC1:
add	si, 2
inc	di
cmp	di, 7
jb	short loc_9DB4
retn
sub_9DB2 endp




sub_9DCB proc near
push	di
push	ds
pop	es
mov	di, 4705h
mov	ah, [si+19h]

loc_9DD4:
xor	al, al
rol	ax, 1
stosb
cmp	di, 470Ch
jb	short loc_9DD4
pop	di
retn
sub_9DCB endp




sub_9DE1 proc near
push	si
mov	si, 470Bh
std
xor	ax, ax

loc_9DE8:
lodsb
ror	ax, 1
cmp	si, 4705h
jnb	short loc_9DE8
pop	si
cld
mov	[si+19h], ah
retn
sub_9DE1 endp




sub_9DF7 proc near
mov	bx, 46FEh

loc_9DFA:
push	di
push	ds
pop	es
mov	al, [di+9]
lea	si, [di+14h]
mov	di, bx
mov	cx, 7
rep movsb

loc_9E0A:
or	al, al
jz	short loc_9E2D
call	sub_87D6
mov	al, [si+19h]
mov	di, bx
shl	al, 1
jnb	short loc_9E21

loc_9E1A:
sub	byte ptr [di], 1
jnb	short loc_9E21
inc	byte ptr [di]

loc_9E21:
inc	di
shl	al, 1
jb	short loc_9E1A
jnz	short loc_9E21
mov	al, [si+1]
jmp	short loc_9E0A

loc_9E2D:
pop	di
retn
sub_9DF7 endp




sub_9E2F proc near
mov	al, [si+19h]
push	di
add	di, 14h
shl	al, 1
jnb	short loc_9E3C

loc_9E3A:
inc	byte ptr [di]

loc_9E3C:
inc	di
shl	al, 1
jb	short loc_9E3A
jnz	short loc_9E3C
pop	di
retn
sub_9E2F endp




sub_9E45 proc near
mov	al, [si+19h]
push	di
add	di, 14h
shl	al, 1
jnb	short loc_9E57

loc_9E50:
sub	byte ptr [di], 1
jnb	short loc_9E57
inc	byte ptr [di]

loc_9E57:
inc	di
shl	al, 1
jb	short loc_9E50
jnz	short loc_9E57
pop	di
retn
sub_9E45 endp



; Attributes: bp-based frame

sub_9E60 proc near

arg_0= word ptr	 2
arg_2= word ptr	 4

mov	di, [si+4]
push	di
push	word ptr [di+4]
push	word ptr [di+2]
mov	bp, sp
mov	word ptr ds:470Ch, 0FFFFh
mov	di, 138h

loc_9E75:
cmp	word ptr [di], 0FFFFh
jz	short loc_9EE4
test	byte ptr [di+0Ah], 80h
jnz	short loc_9EDF
cmp	byte ptr [di+8], 28h ; '('
jnb	short loc_9EDF
cmp	di, [bp+arg_2]
jz	short loc_9EDF
mov	dx, [di+2]
sub	dx, [bp+0]
jns	short loc_9E95
neg	dx

loc_9E95:
mov	ax, [di+4]
sub	ax, [bp+arg_0]
jns	short loc_9E9F
neg	ax

loc_9E9F:
mov	dl, dh
xor	dh, dh
cmp	dl, al
jnb	short loc_9EA9
mov	dx, ax

loc_9EA9:
cmp	dl, 32h	; '2'
jnb	short loc_9EDF
cmp	byte ptr [di+8], 21h ; '!'
jb	short loc_9EB8
shr	dx, 1
shr	dx, 1

loc_9EB8:
cmp	dx, ds:470Ch
jnb	short loc_9EDF
push	bx
mov	bx, 4C60h
call	loc_9DFA
pop	bx
cmp	byte ptr [bx+4C60h], 0
jz	short loc_9EDF
call	sub_9EE8
cmp	byte ptr [bx+4C60h], 0
jz	short loc_9EDF
mov	ds:470Ch, dx
mov	ds:470Eh, di

loc_9EDF:
add	di, 1Ch
jmp	short loc_9E75

loc_9EE4:
add	sp, 6
retn
sub_9E60 endp




sub_9EE8 proc near
mov	si, 88Fh

loc_9EEB:
add	si, 1Bh
cmp	si, 0FBBh
jnb	short loc_9F1C
mov	al, [si+3]
test	al, 40h
jz	short loc_9EEB
and	al, 3
cmp	al, 3
jnz	short loc_9EEB
cmp	di, [si+4]
jnz	short loc_9EEB
cmp	di, [si+0Ch]
jz	short loc_9EEB
cmp	bl, [si+0Eh]
jnz	short loc_9EEB
dec	byte ptr [bx+4C60h]
jns	short loc_9EEB
inc	byte ptr [bx+4C60h]
jmp	short loc_9EEB

loc_9F1C:
cmp	di, ds:1150h
jnz	short locret_9F33
cmp	byte ptr ds:2Ah, 50h ; 'P'
jnb	short locret_9F33
dec	byte ptr ds:4C61h
jns	short locret_9F33
inc	byte ptr ds:4C61h

locret_9F33:
retn
sub_9EE8 endp

mov	ax, 1AACh
call	sub_F82E
call	sub_87BB
cmp	si, 8E0h
jz	short loc_9F52
mov	ax, 54h	; 'T'
call	sub_9FAF
mov	bp, 212Eh
mov	bx, 824Dh
jmp	sub_F1F3

loc_9F52:
push	ds
pop	es
mov	di, 4718h
mov	si, 11D3h
movsw
movsw
movsw
sub	di, 6
xor	ax, ax
mov	cx, 4
repne scasw
sub	cx, 3
neg	cx
mov	ds:4738h, cl
mov	ax, 55h	; 'U'
call	sub_9FAF
call	sub_9F7C
jmp	loc_F1FF



sub_9F7C proc near
mov	bp, 2136h
and	byte ptr [bp+3], 0BFh
xor	cx, cx
mov	al, ds:4738h
dec	al
cmp	al, 2
jb	short loc_9F93
or	byte ptr [bp+3], 40h
inc	cx

loc_9F93:
mov	bx, 824Dh
retn
sub_9F7C endp

retn



sub_9F98 proc near
mov	byte ptr ds:4738h, 0
xor	ax, ax
mov	ds:4718h, ax
mov	ds:471Ah, ax
mov	ds:471Ch, ax
retn
sub_9F98 endp

call	sub_9F98
jmp	loc_A156



sub_9FAF proc near
push	ax
call	sub_DF5E
call	sub_AEA1
pop	bx
mov	si, 2244h
mov	ax, [si+2]
push	ax
push	word ptr [si+6]
push	bx
cmp	ax, 32h	; '2'
jb	short loc_9FCA
add	ax, 26h	; '&'

loc_9FCA:
mov	[si+2],	ax
mov	word ptr [si+6], 19h
call	sub_BE52
pop	ax
call	sub_A77F
cmp	byte ptr ds:4774h, 0
jnz	short loc_9FEE
mov	ax, 10Ah
add	ax, ds:0D810h
add	ds:4780h, ax
call	sub_BDCD

loc_9FEE:
pop	word ptr ds:224Ah
pop	word ptr ds:2246h
call	sub_DF4C
mov	word ptr ds:4720h, 18F3h
mov	byte ptr ds:4722h, 0
call	sub_72EF
mov	word ptr ds:1BEAh, 0
retn
sub_9FAF endp




sub_A00E proc near
sub	sp, 30h
mov	di, sp
call	sub_87BB
mov	dx, [si+6]
mov	bx, [si+8]
call	sub_A0A7
cmp	si, 8E0h
jnz	short loc_A03A
mov	si, 4718h

loc_A028:
lodsw
or	ax, ax
jz	short loc_A046
mov	bx, ax
mov	dx, [bx+2]
mov	bx, [bx+4]
call	sub_A0A7
jmp	short loc_A028

loc_A03A:
mov	bx, [si+4]
mov	dx, [bx+2]
mov	bx, [bx+4]
call	sub_A0A7

loc_A046:
mov	si, sp

loc_A048:
lodsw
mov	dx, ax
lodsw
mov	bx, ax
lodsw
mov	di, [si]
cmp	di, 8000h
jz	short loc_A0A3
push	si
mov	cx, [si+2]
sub	ax, [si+4]
mov	si, dx
sub	si, di
xor	ax, si
jns	short loc_A090
mov	ax, si
or	ax, ax
jns	short loc_A06E
neg	ax

loc_A06E:
cmp	ax, 50h	; 'P'
jb	short loc_A090
cmp	dx, ds:46E3h
jl	short loc_A085
cmp	dx, ds:46E7h
jge	short loc_A085
xchg	dx, di
xchg	bx, cx
neg	si

loc_A085:
mov	ax, 190h
or	si, si
js	short loc_A08E
neg	ax

loc_A08E:
add	dx, ax

loc_A090:
mov	es, word ptr ds:0DBDAh
mov	al, 0Ch
mov	bp, 5555h
mov	si, 46E3h
call	dword ptr ds:3901h
pop	si
jmp	short loc_A048

loc_A0A3:
add	sp, 30h
retn
sub_A00E endp




sub_A0A7 proc near
mov	[di+4],	dx
push	di
call	sub_D517
pop	di
mov	[di], dx
mov	[di+2],	bx
add	di, 6
mov	word ptr [di], 8000h
retn
sub_A0A7 endp

call	near ptr byte_E00B
mov	di, ds:0DBE2h
call	sub_F5CE
jnb	short loc_A116
call	sub_7814
mov	byte ptr ds:46EBh, 40h ; '@'
mov	al, 0FFh
call	sub_7D3D
mov	byte ptr ds:46EBh, 0C0h	; '�'
cmp	ax, 9
jnb	short locret_A11C
call	sub_A126
jb	short locret_A11C
call	sub_A187
call	sub_87BB
cmp	si, 8E0h
jnz	short loc_A105
push	si
mov	si, 4718h
mov	di, 11D3h
push	ds
pop	es
movsw
movsw
movsw
pop	si
mov	di, ds:11D3h
or	di, di
jz	short loc_A116

loc_A105:
call	sub_A1AA
jnz	short loc_A116
call	sub_A376
call	loc_F1CD
call	sub_A120
jmp	sub_A65C

loc_A116:
call	sub_F1B2
jmp	near ptr byte_E00B

locret_A11C:
retn
call	sub_A187



sub_A120 proc near
call	sub_79A3
jmp	near ptr byte_E00B
sub_A120 endp




sub_A126 proc near
call	sub_87BB
cmp	si, 8E0h
jnz	short loc_A16E
mov	al, [di+8]
cmp	al, 20h	; ' '
jb	short loc_A13C
test	byte ptr [di+0Ah], 8
jz	short loc_A166

loc_A13C:
cmp	byte ptr ds:4738h, 3
jb	short loc_A146
call	sub_9F98

loc_A146:
xor	bx, bx
mov	bl, ds:4738h
inc	byte ptr ds:4738h
shl	bx, 1
mov	[bx+4718h], di

loc_A156:
call	sub_72FF
call	sub_9F7C
call	loc_F20A
cmp	byte ptr ds:4738h, 3
jnb	short loc_A168

loc_A166:
stc
retn

loc_A168:
mov	ax, 32h	; '2'
call	sub_10270

loc_A16E:
clc
retn
sub_A126 endp




sub_A170 proc near
call	sub_F2EB
cmp	bp, 212Eh
jz	short loc_A17D
cmp	bp, 2136h

loc_A17D:
jnz	short locret_A186
mov	al, ds:46EBh
not	al
test	al, 40h

locret_A186:
retn
sub_A170 endp




sub_A187 proc near
test	byte ptr ds:46EBh, 40h
jz	short locret_A1A9
call	sub_77CA
call	sub_10140
call	sub_DF5E
mov	si, 18E9h
call	sub_E421
call	sub_87BB
call	sub_9AB0
call	sub_DF4C
call	sub_10153

locret_A1A9:
retn
sub_A187 endp




sub_A1AA proc near
push	di
push	si
mov	bp, [si+4]
cmp	si, 8E0h
jz	short loc_A1BB
mov	al, 10h
cmp	di, bp
jz	short loc_A1CA

loc_A1BB:
push	bp
mov	[si+4],	di
call	sub_50C6
call	sub_4D68
pop	word ptr [si+4]
mov	al, 0Bh

loc_A1CA:
call	sub_BE52
call	sub_C094
call	loc_9A8E
pop	si
pop	di
jmp	sub_C0B2
sub_A1AA endp




sub_A1D8 proc near

; FUNCTION CHUNK AT C653 SIZE 0000000E BYTES

mov	cx, 4
test	byte ptr [si+19h], 40h
jz	short loc_A1E3
mov	cl, 8

loc_A1E3:
push	cx
call	sub_A4D4
pop	cx
mov	ax, bx
or	ax, dx
jz	short sub_A227
add	[si+6],	dx
add	[si+8],	bx
loop	loc_A1E3
call	sub_873E
jb	short loc_A203
call	sub_87E7
jnz	short loc_A20C
jmp	loc_E523

loc_A203:
call	sub_87E7
jnz	short locret_A20B
jmp	sub_E45A

locret_A20B:
retn

loc_A20C:
call	sub_86F7
call	sub_E49F
mov	si, di
jmp	sub_E57D
sub_A1D8 endp




sub_A217 proc near
push	si
push	di
mov	di, 11D3h
lea	si, [di+2]
push	ds
pop	es
movsw
movsw
movsw
pop	di
pop	si
retn
sub_A217 endp




sub_A227 proc near

; FUNCTION CHUNK AT 841F SIZE 00000035 BYTES

cmp	si, 8E0h
jnz	short loc_A238
mov	ax, ds:11D3h
cmp	ax, [si+4]
jnz	short loc_A238
call	sub_A217

loc_A238:
mov	al, [si+3]
and	al, 0Fh
mov	di, [si+4]
mov	dx, [di+2]
mov	bx, [di+4]
mov	[si+6],	dx
mov	[si+8],	bx
test	byte ptr [di+0Ah], 2
jnz	short loc_A257
call	sub_7C06
jb	short loc_A277

loc_A257:
push	ax
call	sub_A28C
pop	ax
cmp	al, 5
jz	short loc_A26A
mov	al, [si]
cmp	al, [di+9]
jnz	short sub_A2CD
jmp	loc_92F9

loc_A26A:
test	byte ptr [di+0Ah], 80h
jz	short sub_A2CD
and	byte ptr [di+0Ah], 7Fh
jmp	loc_7C14

loc_A277:
cmp	al, 5
jb	short loc_A286
cmp	al, 6
ja	short loc_A286
push	di
call	sub_8995
pop	di
xor	al, al

loc_A286:
and	al, 3
cmp	al, 3
jz	short loc_A2EF
sub_A227 endp




sub_A28C proc near
call	sub_A3EF
and	byte ptr [si+3], 0BFh
call	sub_A49C
call	sub_9E2F
mov	cl, [si+3]
or	cl, cl
js	short locret_A2CC
and	cl, 0Fh
call	sub_89A4
mov	di, [si+4]
cmp	di, ds:114Eh
jnz	short locret_A2CC
call	sub_F2EB
cmp	bp, 1F0Eh
jnz	short locret_A2CC
mov	al, 1
cmp	byte ptr ds:2Bh, 1
adc	al, 0
cmp	ds:0Bh,	al
jnz	short locret_A2CC
or	byte ptr ds:473Bh, 1

locret_A2CC:
retn
sub_A28C endp




sub_A2CD proc near
mov	bp, 8403h
jmp	sub_84ED
sub_A2CD endp

test	byte ptr [si+3], 20h
jnz	short locret_A2EB
mov	al, [si+3]
and	al, 0Fh
cmp	al, 1
jz	short loc_A2EC
cmp	al, 6
jz	short locret_A2EB
mov	cl, 6
call	loc_899B

locret_A2EB:
retn

loc_A2EC:
jmp	sub_8F55
; START	OF FUNCTION CHUNK FOR sub_A227

loc_A2EF:
mov	di, [si+4]
cmp	di, [si+0Ch]
jz	short loc_A31D
push	si
call	sub_9DF7
pop	si
mov	bx, [si+0Eh]
mov	cx, bx
xor	bh, bh
cmp	byte ptr [bx+46FEh], 0
jz	short loc_A312
dec	byte ptr [bx+di+14h]
or	[si+19h], ch
xor	ch, ch

loc_A312:
mov	[si+0Eh], cx
mov	di, [si+0Ch]
mov	[si+4],	di
jmp	short sub_A331

loc_A31D:
and	byte ptr [si+3], 0FCh
jmp	sub_A28C
; END OF FUNCTION CHUNK	FOR sub_A227
call	sub_8995
call	sub_A3EF
and	byte ptr [si+3], 0BFh
jmp	sub_9E2F



sub_A331 proc near
call	sub_87E7
jz	short loc_A337
retn

loc_A337:
push	si
call	sub_E45A
pop	si

loc_A33C:
push	si
test	byte ptr [si+3], 40h
jnz	short loc_A34B
mov	di, [si+4]
call	sub_7DA0
jnz	short loc_A35B

loc_A34B:
mov	al, [si]
call	sub_8627
jb	short loc_A35B
mov	si, di
push	di
call	sub_E57D
pop	di

loc_A359:
pop	si
retn

loc_A35B:
xor	di, di
jmp	short loc_A359
sub_A331 endp




sub_A35F proc near
mov	di, ds:11D3h
cmp	[si+4],	di
jnz	short loc_A373
test	byte ptr [si+3], 40h
jnz	short loc_A373
call	sub_A217
jmp	short sub_A35F

loc_A373:
or	di, di
retn
sub_A35F endp




sub_A376 proc near
cmp	si, 8E0h
jnz	short loc_A382
call	sub_A35F
jnz	short loc_A382
retn

loc_A382:
test	byte ptr [si+3], 40h
jz	short loc_A39A
mov	[si+4],	di
mov	al, 3
and	al, [si+3]
cmp	al, 3
jnz	short loc_A398
and	byte ptr [si+3], 0FCh

loc_A398:
jmp	short sub_A331

loc_A39A:
call	sub_8D8F
push	di
call	sub_A45C
pop	di
cmp	byte ptr [si+3], 6
jnz	short loc_A3D1
push	di
mov	di, [si+4]
test	byte ptr [di+0Ah], 2
jz	short loc_A3BF
call	sub_6F68
jcxz	short loc_A3BF
dec	dx
jg	short loc_A3BF
push	si
call	sub_9386
pop	si

loc_A3BF:
pop	di
cmp	byte ptr [di+8], 28h ; '('
jnb	short loc_A3D1
test	byte ptr [di+0Ah], 2
jnz	short locret_A3EE
mov	al, 3
call	sub_8E63

loc_A3D1:
xchg	di, [si+4]
or	byte ptr [si+3], 40h
mov	byte ptr [si+2], 0
call	sub_9E45
call	sub_A331
test	byte ptr [si+10h], 10h
jnz	short locret_A3EE
mov	cx, 7
jmp	loc_A1E3

locret_A3EE:
retn
sub_A376 endp




sub_A3EF proc near
mov	ah, [si]
mov	al, [di+9]
or	al, al
jnz	short loc_A410
mov	[di+9],	ah
mov	cx, 1
mov	[si+2],	cl
test	word ptr [si+10h], 80h
jz	short locret_A40F
add	byte ptr [si+2], 8
add	cl, 8

locret_A40F:
retn

loc_A410:
push	di
push	ds
pop	es
sub	sp, 1Eh
mov	di, sp
mov	cx, 1Eh
push	ax
xor	al, al
rep stosb
pop	ax
mov	di, sp
push	si
xor	bx, bx

loc_A426:
call	sub_87D6
mov	bl, [si+2]
mov	byte ptr [bx+di-1], 0FFh
mov	al, [si+1]
or	al, al
jnz	short loc_A426
mov	[si+1],	ah
mov	cx, 1Eh
pop	si
test	word ptr [si+10h], 80h
jz	short loc_A44B
sub	cx, 8
add	di, 8

loc_A44B:
xor	al, al
repne scasb
sub	cx, 1Eh
neg	cx
add	sp, 1Eh
pop	di
mov	[si+2],	cl
retn
sub_A3EF endp




sub_A45C proc near
mov	bp, si
mov	al, [si]
mov	di, [si+4]
push	di
test	byte ptr [si+3], 40h
jnz	short loc_A48A
cmp	al, [di+9]
jz	short loc_A492
mov	cl, al
mov	al, [di+9]

loc_A474:
call	sub_87D6
mov	al, [si+1]
mov	di, si
or	al, al
jz	short loc_A48A
cmp	al, cl
jnz	short loc_A474
mov	ah, [bp+1]
mov	[si+1],	ah

loc_A48A:
mov	si, bp
mov	byte ptr [si+1], 0
pop	di
retn

loc_A492:
xor	ah, ah
xchg	ah, [si+1]
pop	di
mov	[di+9],	ah
retn
sub_A45C endp




sub_A49C proc near
test	word ptr [si+10h], 80h
jnz	short locret_A4D3
cmp	byte ptr [si+2], 8
jbe	short locret_A4D3
call	sub_A45C
push	si
mov	al, [di+9]

loc_A4B0:
or	al, al
jz	short loc_A4CF
call	sub_87D6
mov	al, [si+1]
test	byte ptr [si+10h], 80h
jnz	short loc_A4B0
test	byte ptr [si+3], 20h
jz	short loc_A4B0
call	sub_10140
call	sub_8581
call	sub_10153

loc_A4CF:
pop	si
call	sub_A3EF

locret_A4D3:
retn
sub_A49C endp




sub_A4D4 proc near
push	si
mov	di, [si+4]
mov	dx, [di+2]
mov	bx, [si+8]
mov	bp, bx
shl	bp, 1
jns	short loc_A4E6
neg	bp

loc_A4E6:
mov	bp, [bp+4880h]
sub	bx, [di+4]
neg	bx
mov	di, 1
jns	short loc_A4F8
neg	di
neg	bx

loc_A4F8:
sub	dx, [si+6]
mov	ax, dx
jns	short loc_A501
neg	ax

loc_A501:
mov	si, dx
xor	dx, dx
div	bp
mov	dx, si
xchg	bx, di
cmp	ax, di
jb	short loc_A536
cmp	ax, 7
jb	short loc_A530
or	di, di
jnz	short loc_A51A
xor	bx, bx

loc_A51A:
or	dx, dx
jns	short loc_A520
neg	bp

loc_A520:
shr	ax, 1
jz	short loc_A52E
mov	dx, bp
rol	word ptr ds:0, 1
jb	short loc_A52E
xor	bx, bx

loc_A52E:
pop	si
retn

loc_A530:
xor	bx, bx
xor	dx, dx
pop	si
retn

loc_A536:
cmp	di, 7
jb	short loc_A530
or	ax, ax
jz	short loc_A52E
or	dx, dx
jns	short loc_A545
neg	bp

loc_A545:
shr	di, 1
jz	short loc_A52E
mov	dx, bp
rol	word ptr ds:0, 1
jb	short loc_A52E
xor	dx, dx
pop	si
retn
sub_A4D4 endp


loc_A555:
mov	byte ptr ds:46D8h, 1
call	sub_8873
call	sub_9A28
call	sub_7E49
call	sub_98AE
call	sub_77CA
mov	al, ds:1954h
cmp	al, 43h	; 'C'
ja	short locret_A588
call	sub_87D6
jnb	short locret_A588
mov	ds:1955h, al
push	si
call	sub_884C
pop	si
push	si
call	sub_96DA
pop	si
mov	di, [si+4]
call	sub_9AD2

locret_A588:
retn

loc_A589:
mov	di, ds:114Eh
mov	al, [di+9]
mov	ds:1954h, al
call	sub_7A2D
call	word ptr ds:46EDh
jmp	short loc_A555

loc_A59C:
call	sub_7ABB
cmp	byte ptr ds:28h, 0
jz	short locret_A588
cmp	word ptr ds:1176h, 2
jb	short loc_A589
mov	ax, ds:1954h
or	al, al
jnz	short loc_A5CA
mov	al, ah
or	al, al
jz	short loc_A5CA
mov	ds:1954h, al
call	sub_87D6
call	sub_87E7
jz	short loc_A555
mov	byte ptr ds:1954h, 0

loc_A5CA:
mov	si, 3CBEh
lodsw
mov	cx, ax
jcxz	short locret_A588
mov	al, ds:1954h
mov	bh, 0FFh
xor	di, di

loc_A5D9:
mov	bp, [si+0Ah]
cmp	byte ptr [bp+3], 80h ; '�'
jnb	short loc_A5F1
mov	ah, [bp+0]
sub	ah, al
jz	short loc_A5F1
cmp	ah, bh
ja	short loc_A5F1
mov	bh, ah
mov	di, si

loc_A5F1:
add	si, 11h
loop	loc_A5D9
or	di, di
jz	short locret_A588
mov	si, di

loc_A5FC:
mov	si, [si+0Ah]
mov	al, [si]
cmp	word ptr ds:1176h, 2
jnb	short loc_A611
mov	di, [si+4]
cmp	di, ds:114Eh
jnz	short locret_A620

loc_A611:
cmp	al, ds:1954h
jz	short loc_A61D
mov	ds:1954h, al
jmp	loc_A555

loc_A61D:
jmp	sub_9AD2

locret_A620:
retn
cmp	byte ptr ds:1954h, 0
jz	short locret_A65B
call	sub_8873
mov	byte ptr ds:1954h, 0
jmp	sub_9A28



sub_A633 proc near
cmp	byte ptr ds:46F3h, 0
jz	short sub_A640
call	sub_A640
jmp	loc_373B
sub_A633 endp




sub_A640 proc near
cmp	byte ptr ds:1954h, 0
jz	short locret_A65B
call	sub_10140
mov	byte ptr ds:46F3h, 0
call	sub_A65C
mov	word ptr ds:1BEAh, 0
call	sub_10153

locret_A65B:
retn
sub_A640 endp




sub_A65C proc near
mov	word ptr ds:47BAh, 0
mov	ax, 40A7h
cmp	byte ptr ds:8, 0FFh
jz	short loc_A690
cmp	byte ptr ds:8, 20h ; ' '
jb	short loc_A67A
cmp	byte ptr ds:0Bh, 3
jnb	short loc_A690

loc_A67A:
push	di
mov	di, ds:114Eh
call	sub_9DF7
pop	di
mov	ax, 0A7h ; '�'
cmp	byte ptr ds:46FFh, 0
jnz	short loc_A690
or	ah, 40h

loc_A690:
mov	bp, 20F2h
mov	[bp+0Eh], ax
or	byte ptr [bp+0Bh], 40h
mov	word ptr [bp+12h], 0
cmp	byte ptr ds:2Ah, 5
jb	short loc_A6AF
and	byte ptr [bp+0Bh], 0BFh
mov	word ptr [bp+12h], 67h ; 'g'

loc_A6AF:
cmp	word ptr ds:1176h, 2
jnb	short loc_A6D6
mov	word ptr [bp+6], 4093h
mov	di, ds:114Eh
or	di, di
jz	short loc_A6E6
mov	al, [di+9]
or	al, al
jz	short loc_A6E6
call	sub_87D6
jnb	short loc_A6E6
and	word ptr [bp+6], 0BFFFh
jmp	short loc_A6E6

loc_A6D6:
mov	ax, 62h	; 'b'
cmp	word ptr ds:3CBEh, 0
jnz	short loc_A6E3
or	ah, 40h

loc_A6E3:
mov	[bp+6],	ax

loc_A6E6:
mov	bx, 0F66h
call	sub_F208
jmp	near ptr byte_E00B
sub_A65C endp

mov	si, 146Ah
jmp	short loc_A701
mov	si, 1462h
jmp	short loc_A701
mov	si, 145Eh
jmp	short loc_A701
mov	si, 1466h

loc_A701:
test	al, 1
jz	short locret_A727
cmp	byte ptr ds:46EBh, 0
jns	short loc_A716
test	byte ptr ds:46EBh, 40h
jnz	short loc_A728
call	sub_7ABB

loc_A716:
lodsw
add	ds:197Ch, ax
lodsw
add	ds:197Eh, ax



sub_A720 proc near
call	sub_9A06
call	word ptr ds:46EDh

locret_A727:
retn
sub_A720 endp


loc_A728:
lodsw
add	ds:1980h, ax
lodsw
add	ds:1982h, ax
jmp	sub_72FF



sub_A735 proc near
call	sub_10140
mov	si, ax
mov	ds:0DBE4h, cx
call	sub_EF1E
call	sub_EE40
call	sub_A7C1
mov	di, 0A6B0h
push	di
call	sub_A814
pop	si
push	ds
pop	es
call	sub_F08B
call	sub_10153
retn
sub_A735 endp

; START	OF FUNCTION CHUNK FOR sub_A7A2

loc_A758:
cmp	byte ptr ds:46D9h, 0
jnz	short loc_A7B1
mov	word ptr ds:479Eh, 1

loc_A765:
mov	al, ds:0FBh
not	al
and	al, 80h
mov	ds:1C06h, al
push	ds
pop	es
mov	di, 1BE2h
xor	ax, ax
stosw
stosw
stosw
stosw
mov	al, 80h	; '�'
stosw
retn
; END OF FUNCTION CHUNK	FOR sub_A7A2
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_8. PRESS KEYPAD "+" TO EXPAND]



sub_A77F proc near
or	ax, ax
jz	short nullsub_8
mov	ds:4780h, ax
mov	byte ptr ds:47E0h, 0
test	byte ptr ds:46EBh, 40h
jz	short loc_A79A
and	byte ptr ds:46EBh, 0BFh
jmp	sub_9FAF

loc_A79A:
mov	si, ax
call	sub_EE40
call	sub_A7C1
sub_A77F endp




sub_A7A2 proc near

; FUNCTION CHUNK AT 8888 SIZE 00000026 BYTES

mov	di, 0A6B0h
push	di
call	sub_A814
pop	si
cmp	byte ptr ds:28E7h, 2
jnb	short loc_A758

loc_A7B1:
lodsb
or	al, al
js	short locret_A7C0
dec	si
call	sub_A9E1
cmp	byte ptr [si], 0FEh ; '�'
jnb	short locret_A7C0
nop

locret_A7C0:
retn
sub_A7A2 endp




sub_A7C1 proc near
push	ds
push	es
pop	ds
pop	es
mov	di, 0A840h

loc_A7C8:
lodsb
cmp	al, 0FFh
jz	short loc_A80D
cmp	al, 0FEh ; '�'
jz	short loc_A7D5
cmp	al, 0E0h ; '�'
jnb	short loc_A7E0

loc_A7D5:
stosb
mov	al, 0FFh
cmp	di, 0A9CFh
jnb	short loc_A80D
jmp	short loc_A7C8

loc_A7E0:
and	al, 0Fh
mov	ch, al
lodsw
mov	cl, ah
and	ax, 3FFFh
shr	cl, 1
shr	cl, 1
and	cl, 30h
or	cl, ch
xor	ch, ch
push	si
mov	si, ss:47B4h
add	si, ax
rep movsb
pop	si
cmp	byte ptr [si], 0FFh
jz	short loc_A80C
mov	byte ptr es:[di], 20h ;	' '
inc	di
jmp	short loc_A7C8

loc_A80C:
lodsb

loc_A80D:
stosb
mov	si, 0A840h
push	ss
pop	ds
assume ds:seg001
retn
sub_A7C1 endp




sub_A814 proc near
sub	sp, 32h
mov	bp, sp
push	ds
pop	es
assume es:seg001

loc_A81B:
cmp	byte ptr [si], 20h ; ' '
jnz	short loc_A823
inc	si
jmp	short loc_A81B

loc_A823:
lodsb
or	al, al
js	short loc_A82B
stosb
jmp	short loc_A823

loc_A82B:
mov	ds:477Fh, al
cmp	al, 0F0h ; '�'
jnb	short loc_A880
cmp	al, 0D0h ; '�'
jnb	short loc_A86B
cmp	al, 0A0h ; '�'
jnb	short loc_A87D
cmp	al, 90h	; '�'
jb	short loc_A840
jmp	short loc_A8B4

loc_A840:
cmp	al, 80h	; '�'
jnz	short loc_A849
lodsw
xchg	ah, al
jmp	short loc_A854

loc_A849:
and	ax, 0Fh
shl	ax, 1
mov	bx, ax
mov	ax, [bx+11EBh]

loc_A854:
mov	[bp+0],	si
mov	word ptr [bp+2], ds
add	bp, 4
mov	si, ax
call	sub_A90B
push	es
call	sub_EE40
push	es
pop	ds
pop	es
assume es:nothing
jmp	short loc_A823

loc_A86B:
stosb
movsb
cmp	al, 0D2h ; '�'
jb	short loc_A873
jmp	short loc_A823

loc_A873:
movsb
cmp	al, 0D0h ; '�'
jnz	short loc_A87A
jmp	short loc_A823

loc_A87A:
movsw
jmp	short loc_A823

loc_A87D:
stosb
jmp	short loc_A823

loc_A880:
mov	bx, sp
cmp	bp, bx
jz	short loc_A891
sub	bp, 4
mov	si, [bp+0]
mov	ds, word ptr [bp+2]
assume ds:nothing
jmp	short loc_A823

loc_A891:
stosb
cmp	al, 0FFh
jnz	short loc_A898
xor	si, si

loc_A898:
mov	ds:47B6h, si
mov	word ptr ds:47B8h, ds
add	sp, 32h
test	byte ptr ds:47DEh, 10h
jz	short locret_A8B3
mov	bx, 3
call	sub_10287
call	sub_A993

locret_A8B3:
retn

loc_A8B4:
push	bp
mov	bl, al
lodsb
xor	ah, ah
mov	bp, ax
mov	ax, [bp+0]
cmp	bl, 92h	; '�'
jz	short loc_A8C7
xor	ah, ah

loc_A8C7:
push	ax
call	sub_A99C
pop	ax
call	sub_A8F3
xchg	ax, bx
mov	cx, 5
jmp	short loc_A8DD

loc_A8D5:
mov	al, dh
mov	dh, dl
mov	dl, bh
mov	bh, bl

loc_A8DD:
or	al, al
loope	loc_A8D5
inc	cx

loc_A8E2:
add	al, 30h	; '0'
stosb
mov	al, dh
mov	dh, dl
mov	dl, bh
mov	bh, bl
loop	loc_A8E2
pop	bp
jmp	loc_A823
sub_A814 endp




sub_A8F3 proc near
xor	dx, dx
mov	cx, 2710h
div	cx
mov	bl, al
mov	cx, 64h	; 'd'
mov	ax, dx
xor	dx, dx
div	cx
aam
xchg	ax, dx
aam
retn
sub_A8F3 endp




sub_A90B proc near
test	byte ptr ds:47DEh, 10h
jnz	short loc_A913
retn

loc_A913:
push	bx
mov	bh, ds:477Fh
cmp	bh, 8Bh	; '�'
jnz	short loc_A922
sub	ax, 108h
jmp	short loc_A98E

loc_A922:
cmp	bh, 84h	; '�'
jnz	short loc_A939
sub	ax, 48h	; 'H'
jz	short loc_A98E
dec	ax
cmp	al, 3
jb	short loc_A98E
sub	ax, 0FFCFh
cmp	ax, 0Ch
jmp	short loc_A98C

loc_A939:
cmp	bh, 83h	; '�'
jz	short loc_A941
cmp	bh, 8Ch	; '�'

loc_A941:
jnz	short loc_A94A
sub	ax, 0E8h ; '�'
cmp	al, 7
jmp	short loc_A98C

loc_A94A:
mov	bl, bh
sub	bl, 86h	; '�'
cmp	bl, 3
jnb	short loc_A967
mov	bl, ds:47DEh
and	bl, 0Fh
cmp	bl, 1
jnz	short loc_A991
sub	ax, 0D1h ; '�'
cmp	al, 7
jmp	short loc_A98C

loc_A967:
cmp	bh, 85h	; '�'
jnz	short loc_A982
mov	bl, ds:47DEh
and	bl, 0Fh
cmp	bl, 1
jnz	short loc_A991
cmp	ax, 74h	; 't'
mov	al, 0
jnz	short loc_A98E
inc	ax
jmp	short loc_A98E

loc_A982:
cmp	bh, 89h	; '�'
jnz	short loc_A991
sub	ax, 0DAh ; '�'
cmp	al, 8

loc_A98C:
jnb	short loc_A991

loc_A98E:
call	sub_A993

loc_A991:
pop	bx

locret_A992:
retn
sub_A90B endp




sub_A993 proc near
mov	ds:47E0h, al
and	byte ptr ds:47DEh, 0EFh
retn
sub_A993 endp




sub_A99C proc near
test	byte ptr ss:47DEh, 10h
jz	short locret_A992
push	bx
lea	bp, [bp+0]
cmp	bp, 0CFh ; '�'
jz	short loc_A9CF
cmp	bp, 55h	; 'U'
jz	short loc_A9D7
cmp	bp, 61h	; 'a'
jz	short loc_A9D7
cmp	bp, 44h	; 'D'
jnz	short loc_A991
mov	bh, ss:47DEh
and	bh, 0Fh
cmp	bh, 1
jnz	short loc_A991
dec	ax

loc_A9CF:
cmp	al, 8
jbe	short loc_A98E
mov	al, 8
jmp	short loc_A98E

loc_A9D7:
dec	ax
cmp	al, 4
jbe	short loc_A98E
mov	al, 4
jmp	short loc_A98E
sub_A99C endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_9. PRESS KEYPAD "+" TO EXPAND]



sub_A9E1 proc near
push	si
call	sub_AB5A
pop	si
call	sub_AB9D
jb	short nullsub_9
call	sub_ADF8
call	sub_ACC0
mov	dx, ds:4791h
mov	bx, ds:4793h
call	sub_EF1E
mov	bp, 0A9D0h
mov	word ptr ds:479Ah, 0Ah
mov	al, ds:4799h
and	al, 0Ch
jz	short loc_AA5B
cmp	al, 8
jnb	short loc_AA36
mov	bx, [bp+0]
xor	dx, dx
mov	ax, ds:478Dh
sub	ax, 8
dec	bx
jz	short loc_AA25
div	bx
mov	ds:479Ah, ax
jmp	short loc_AA5B

loc_AA25:
shr	ax, 1
mov	bx, ax
mov	dx, ds:0D82Ch
add	bx, ds:0D82Eh
call	sub_EF1E
jmp	short loc_AA5B

loc_AA36:
pushf
mov	ax, [bp+0]
mov	ah, 0Ah
mul	ah
mov	bx, ds:478Dh
sub	bx, ax
jnb	short loc_AA48
xor	bx, bx

loc_AA48:
mov	ds:478Dh, ax
popf
jnz	short loc_AA50
shr	bx, 1

loc_AA50:
mov	dx, ds:0D82Ch
add	bx, ds:0D82Eh
call	sub_EF1E

loc_AA5B:
mov	dx, [bp+0]
add	bp, 2

loc_AA61:
push	dx
mov	cx, [bp+0]
add	bp, 2
mov	dx, [bp+0]
mov	bx, [bp+2]
add	bp, 4
jcxz	short loc_AADC
test	byte ptr ds:4799h, 2
jz	short loc_AAA1
mov	al, dl
mov	dl, cl
dec	dl
jz	short loc_AA84
mul	dl

loc_AA84:
add	al, bl
mov	dl, al
mov	al, cl
dec	al
xor	ah, ah
shl	ax, 1
sub	dx, ax
shl	ax, 1
sub	dx, ax
shr	dx, 1
add	ds:0D82Ch, dx
and	byte ptr ds:4799h, 0FEh

loc_AAA1:
pop	ax
push	ax
cmp	ax, 1
jz	short loc_AAAF
test	byte ptr ds:4799h, 1
jnz	short loc_AAB5

loc_AAAF:
mov	dx, 6
mov	bx, 0

loc_AAB5:
mov	ds:479Ch, bx

loc_AAB9:
lodsb
or	al, al
js	short loc_AAF6
cmp	al, 20h	; ' '
jz	short loc_AAE9
cmp	al, 0Dh
jz	short loc_AAE9
cmp	al, 6
jz	short loc_AADF
cmp	al, 8
jz	short loc_AAE4
cmp	al, 1
jnz	short loc_AB11
mov	ax, ds:0DBE4h
xchg	ah, al
mov	ds:0DBE4h, ax
jmp	short loc_AAB9

loc_AADC:
jmp	short loc_AB17
db 90h

loc_AADF:
call	sub_EF45
jmp	short loc_AAB9

loc_AAE4:
call	sub_EF38
jmp	short loc_AAB9

loc_AAE9:
cmp	byte ptr [si], 20h ; ' '
jz	short loc_AAF3
cmp	byte ptr [si], 0Dh
jnz	short loc_AAF6

loc_AAF3:
inc	si
jmp	short loc_AAE9

loc_AAF6:
dec	cx
jz	short loc_AB17
push	dx
add	dx, ds:0D82Ch
cmp	word ptr ds:479Ch, 0
jz	short loc_AB0A
inc	dx
dec	word ptr ds:479Ch

loc_AB0A:
mov	ds:0D82Ch, dx
pop	dx
jmp	short loc_AAB9

loc_AB11:
call	word ptr ds:2518h
jmp	short loc_AAB9

loc_AB17:
mov	dx, ds:0D830h
mov	bx, ds:0D832h
mov	ax, ds:479Ah
add	bx, ax
sub	ds:478Dh, ax
jnb	short loc_AB30
mov	word ptr ds:478Dh, 0

loc_AB30:
call	sub_EF1E
pop	dx
dec	dx
jz	short loc_AB3A
jmp	loc_AA61

loc_AB3A:
mov	dx, ds:0D830h
mov	bx, ds:0D832h
mov	ds:4791h, dx
mov	ds:4793h, bx
dec	si
cmp	word ptr ds:479Eh, 223Ch
jnz	short locret_AB59
call	sub_AF16
jmp	sub_DF4C

locret_AB59:
retn
sub_A9E1 endp




sub_AB5A proc near
xor	ax, ax
xchg	ax, ds:479Eh
cmp	ax, 2
jb	short locret_AB9C
mov	si, 1470h
cmp	byte ptr ds:28E7h, 0
jz	short loc_AB85
mov	bp, 1BE2h
mov	si, 4C60h
mov	es, word ptr ds:0DBDEh
call	dword ptr ds:391Dh
mov	si, 1BE2h
mov	word ptr [si+8], 0

loc_AB85:
call	sub_E316
mov	si, ds:47C8h
or	si, si
jz	short loc_AB99
mov	word ptr ds:4540h, 0
call	sub_BA7C

loc_AB99:
call	sub_E3AD

locret_AB9C:
retn
sub_AB5A endp




sub_AB9D proc near
mov	byte ptr ds:4799h, 9
mov	word ptr ds:0DBE4h, 0F0h ; '�'
cmp	byte ptr ds:46EBh, 0
jz	short loc_ABCB
cmp	word ptr ds:46EFh, 0
jnz	short loc_ABC5
call	sub_10140
push	es
mov	si, ds:46F1h
call	sub_98BE
pop	es
call	sub_10153

loc_ABC5:
mov	bp, 2244h
jmp	loc_ACAB

loc_ABCB:
cmp	word ptr ds:47C4h, 0FFFFh
jnz	short loc_ABEB
mov	ax, 48h	; 'H'
mov	ds:4784h, ax
mov	al, 10h
mov	ds:4786h, ax
mov	al, 8
mov	ds:4788h, ax
mov	ds:478Ah, ax
mov	bp, 224Ch
jmp	loc_ACAB

loc_ABEB:
cmp	byte ptr ds:0C6h, 0
jz	short loc_AC13
mov	bp, 2265h
mov	ax, 3Ch	; '<'
mov	ds:4784h, ax
mov	al, 32h	; '2'
mov	ds:4786h, ax
mov	al, 0Ah
mov	ds:4788h, ax
mov	ds:478Ah, ax
mov	byte ptr ds:0DBE4h, 64h	; 'd'
call	sub_EF52
jmp	loc_ACAB

loc_AC13:
cmp	byte ptr ds:227Dh, 0
jz	short loc_AC32
mov	byte ptr ds:0DBE4h, 6
mov	bp, 2275h
xor	ax, ax
mov	ds:4788h, ax
mov	ds:478Ah, ax
mov	ds:4784h, ax
mov	ds:4786h, ax
jmp	short loc_ACAB

loc_AC32:
cmp	byte ptr ds:28E7h, 0
jnz	short loc_AC5A
mov	byte ptr ds:4799h, 1
mov	byte ptr ds:0DBE4h, 0Fh
mov	bp, 223Ch
xor	ax, ax
mov	ds:478Ah, ax
inc	ax
mov	ds:4788h, ax
mov	ax, 10h
mov	ds:4784h, ax
mov	ds:4786h, ax
jmp	short loc_ACAB

loc_AC5A:
mov	bp, 2224h
mov	cx, 3

loc_AC60:
mov	ax, [bp+4]
sub	ax, ds:4784h
sub	ax, ds:4786h
mov	ds:478Fh, ax
push	si
push	cx
call	sub_ACE6
pop	cx
pop	si
mov	ax, ds:0A9D0h
mov	ah, 0Ah
mul	ah
add	ax, ds:4788h
add	ax, ds:478Ah
cmp	ax, [bp+6]
jb	short loc_AC9D
add	bp, 8
loop	loc_AC60
sub	bp, 8
xor	ax, ax
mov	ds:4788h, ax
xchg	ax, ds:478Ah
or	ax, ax
retn

loc_AC9D:
dec	cx
jz	short loc_ACBE
mov	bx, 1
call	sub_10287
jz	short loc_ACBE
add	bp, 8

loc_ACAB:
mov	ax, [bp+4]
sub	ax, ds:4784h
sub	ax, ds:4786h
mov	ds:478Fh, ax
push	si
call	sub_ACE6
pop	si

loc_ACBE:
clc
retn
sub_AB9D endp




sub_ACC0 proc near
test	byte ptr ds:4799h, 1
jz	short locret_ACE5
push	si
mov	si, 0A9D0h
lodsw
mov	cx, ax

loc_ACCE:
lodsw
or	ax, ax
jz	short loc_ACD8
cmp	word ptr [si], 1Eh
jnb	short loc_ACDF

loc_ACD8:
add	si, 4
loop	loc_ACCE
pop	si
retn

loc_ACDF:
and	byte ptr ds:4799h, 0FEh
pop	si

locret_ACE5:
retn
sub_ACC0 endp




sub_ACE6 proc near
push	ds
pop	es
mov	byte ptr ds:478Ch, 0
mov	di, 0A9D2h
xor	dh, dh
mov	bx, ds:478Fh
xor	dl, dl

loc_ACF8:
mov	al, [si]
or	al, al
js	short loc_AD44
cmp	al, 0Dh
jz	short loc_AD09
cmp	al, 20h	; ' '
jnz	short loc_AD1B
inc	si
jmp	short loc_ACF8

loc_AD09:
call	sub_AD6E
mov	word ptr [di-4], 6
mov	word ptr [di-2], 0
xor	dl, dl
inc	si
jmp	short loc_ACF8

loc_AD1B:
call	sub_ADA3
or	cx, cx
jz	short loc_ACF8
add	cx, 6

loc_AD25:
sub	bx, cx
jb	short loc_AD2D
inc	dl
jmp	short loc_ACF8

loc_AD2D:
add	bx, 6
js	short loc_AD39
inc	dl
call	sub_AD6E
jmp	short loc_ACF8

loc_AD39:
or	dl, dl
jz	short loc_AD67
add	bx, cx
call	sub_AD6E
jmp	short loc_AD25

loc_AD44:
or	dl, dl
jz	short loc_AD4B
call	sub_AD6E

loc_AD4B:
mov	word ptr [di-4], 6
mov	word ptr [di-2], 0
mov	word ptr [di], 0
mov	word ptr [di+2], 0
xor	dl, dl
xchg	dh, dl
mov	ds:0A9D0h, dx
retn

loc_AD67:
mov	word ptr ds:0A9D0h, 0C8h ; '�'
retn
sub_ACE6 endp




sub_AD6E proc near
mov	ax, dx
xor	ah, ah
stosw
add	ds:478Ch, al
or	ax, ax
jz	short loc_AD9A
push	dx
mov	ax, bx
mov	bx, dx
xor	bh, bh
xor	dx, dx
dec	bx
jz	short loc_AD89
div	bx

loc_AD89:
add	ax, 6
stosw
mov	ax, dx
stosw
pop	dx
inc	dh
xor	dl, dl
mov	bx, ds:478Fh
retn

loc_AD9A:
stosw
stosw
inc	dh
mov	bx, ds:478Fh
retn
sub_AD6E endp




sub_ADA3 proc near
xor	cx, cx
push	bx
mov	bx, ds:47A0h

loc_ADAA:
lodsb
cmp	al, 20h	; ' '
jz	short loc_ADF5
cmp	al, 0Dh
jz	short loc_ADF5
or	al, al
jz	short loc_ADBD
cmp	al, 9
jb	short loc_ADD9
js	short loc_ADF5

loc_ADBD:
cmp	word ptr ds:2518h, 0D0FFh
jnz	short loc_ADD4
cmp	si, 0A6B1h
jnz	short loc_ADD4
call	sub_EFB3
jb	short loc_ADD4
add	cl, al
jmp	short loc_ADAA

loc_ADD4:
xlat
add	cl, al
jmp	short loc_ADAA

loc_ADD9:
cmp	al, 0Dh
jz	short loc_ADF5
cmp	al, 6
jz	short loc_ADED
cmp	al, 8
jnz	short loc_ADAA
mov	word ptr ds:47A0h, 0CEECh
jmp	short loc_ADAA

loc_ADED:
mov	word ptr ds:47A0h, 0CF6Ch
jmp	short loc_ADAA

loc_ADF5:
dec	si
pop	bx
retn
sub_ADA3 endp




sub_ADF8 proc near

; FUNCTION CHUNK AT 8FF5 SIZE 00000030 BYTES

mov	ds:479Eh, bp
mov	di, 1BE2h
push	ds
pop	es
mov	ax, [bp+0]
stosw
mov	dx, ax
add	ax, ds:4784h
mov	ds:4791h, ax
mov	ds:4795h, ax
mov	ax, [bp+2]
stosw
mov	bx, ax
add	ax, ds:4788h
mov	ds:4793h, ax
mov	ds:4797h, ax
mov	ax, [bp+4]
add	dx, ax
sub	ax, ds:4784h
sub	ax, ds:4786h
mov	ds:478Fh, ax
mov	ax, [bp+6]
add	bx, ax
sub	ax, ds:4788h
sub	ax, ds:478Ah
mov	ds:478Dh, ax
mov	ax, dx
cmp	ax, 140h
jb	short loc_AE4B
mov	ax, 140h

loc_AE4B:
stosw
mov	ax, bx
stosw
cmp	byte ptr ds:46EBh, 0
jnz	short sub_AEA1
cmp	byte ptr ds:0C6h, 0
jnz	short loc_AEC5
cmp	byte ptr ds:227Dh, 0
jnz	short locret_AEA0
cmp	byte ptr ds:46D9h, 0
jnz	short locret_AEA0
cmp	byte ptr ds:28E7h, 0
jz	short loc_AEDB
push	si
mov	si, 4C60h
mov	bp, 1BE2h
mov	ax, 80h	; '�'
mov	[bp+8],	ax
mov	ds:1C06h, ax
mov	word ptr [bp+0Ch], 9468h
mov	es, word ptr ds:0DBDEh
call	dword ptr ds:3919h
call	sub_E007
mov	si, 1BE2h
mov	es, word ptr ds:0DBD6h
mov	ax, 1Ch
call	sub_E240
pop	si

locret_AEA0:
retn
sub_ADF8 endp




sub_AEA1 proc near
push	si
mov	si, 1BE2h
mov	word ptr [si+8], 80h ; '�'
mov	word ptr [si+0Ch], 7BEDh
sub	word ptr [si+2], 2
mov	al, ds:18F2h
mov	es, word ptr ds:0DBDAh
call	dword ptr ds:38DDh
add	word ptr ds:1BE4h, 2
pop	si
retn
sub_AEA1 endp

; START	OF FUNCTION CHUNK FOR sub_ADF8

loc_AEC5:
push	si
mov	ax, 32h	; '2'
call	sub_E00E
mov	ax, 3
mov	si, 2265h
mov	es, word ptr ds:0DBD6h
call	sub_E240
pop	si
retn

loc_AEDB:
mov	di, 4C60h
mov	cx, 5960h
push	ds
pop	es
xor	al, al
rep stosb
mov	ax, 4C6Fh
and	al, 0F0h
mov	ds:22FCh, ax
call	sub_DF55
jmp	loc_A765
; END OF FUNCTION CHUNK	FOR sub_ADF8



sub_AEF5 proc near
mov	cx, ds:4793h
mov	bx, 92h	; '�'
sub	bx, cx
xor	dx, dx
mov	ch, 0FFh
mov	di, 140h
mov	si, ds:22FCh
mov	es, word ptr ds:0DBDAh
mov	ds:4782h, bx
call	dword ptr ds:38C9h
retn
sub_AEF5 endp




sub_AF16 proc near
push	ds
pop	es
mov	ax, ds:4793h
mul	word ptr ds:2240h
mov	cx, ax
mov	di, ds:22FCh
mov	ax, 0F00Fh
xor	bx, bx
cmp	byte ptr ds:0EAh, 0
jle	short loc_AF33
mov	ah, 8

loc_AF33:
repne scasb
jnz	short locret_AF5B
cmp	[di-2],	bl
jnz	short loc_AF3F
mov	[di-2],	ah

loc_AF3F:
cmp	[di], bl
jnz	short loc_AF45
mov	[di], ah

loc_AF45:
cmp	[di-141h], bl
jnz	short loc_AF4F
mov	[di-141h], ah

loc_AF4F:
cmp	[di+13Fh], bl
jnz	short loc_AF33
mov	[di+13Fh], ah
jmp	short loc_AF33

locret_AF5B:
retn
sub_AF16 endp




sub_AF5C proc near
mov	ax, ds:0D83Ah
cmp	ax, ds:4782h
jbe	short locret_AF8C
cmp	word ptr ds:479Eh, 223Ch
jnz	short locret_AF8C
mov	cx, ds:4793h
mov	bx, 92h	; '�'
sub	bx, cx
xor	dx, dx
mov	ch, 0FFh
mov	di, 140h
mov	si, ds:22FCh
mov	es, word ptr ds:0DBDAh
mov	bp, 0D834h
call	dword ptr ds:38CDh

locret_AF8C:
retn
sub_AF5C endp




sub_AF8D proc near
mov	al, [si+0Eh]
cmp	al, 0Ch
jz	short loc_AFA9
test	word ptr ds:12h, 1000h
jz	short loc_AFA9
mov	bx, 9Ch	; '�'
mov	dx, 9584h
test	byte ptr ds:10A7h, 10h
jz	short loc_AFE1

loc_AFA9:
cmp	al, 0Fh
mov	bx, 93h	; '�'
mov	dx, 5A03h
jz	short loc_AFE1
cmp	al, 0Eh
jnz	short loc_AFC7
mov	bx, 96h	; '�'
mov	dx, 95C1h
test	byte ptr ds:0Ah, 10h
jz	short loc_AFE1
inc	bx
jmp	short loc_AFE1

loc_AFC7:
mov	cl, [si+0Fh]
mov	bx, 4091h
test	cl, 80h
jnz	short loc_AFE1
and	bh, 0BFh
mov	dx, 95E2h
test	cl, 40h
jz	short loc_AFE1
inc	bx
mov	dx, 9533h

loc_AFE1:
mov	bp, 1F7Eh
mov	[bp+6],	bx
mov	[bp+8],	dx
call	sub_F1E6
mov	bx, 97CFh
jmp	sub_F208
sub_AF8D endp




sub_AFF3 proc near
cmp	al, 11h
jnb	short loc_B04A
xor	ah, ah
cmp	al, 0Dh
jb	short loc_B043
jnz	short loc_B00B
mov	di, ds:114Eh
mov	ah, [di]
shr	ah, 1
inc	ah
jmp	short loc_B043

loc_B00B:
mov	si, ds:4756h
cmp	al, 0Eh
jz	short loc_B025
cmp	byte ptr ds:2Ah, 0C8h ;	'�'
jz	short loc_B043
mov	al, ds:476Ch
shl	ax, 1
mov	si, ax
mov	si, [si+4758h]

loc_B025:
mov	al, [si]
push	dx
mov	dl, 3
div	dl
mov	dl, 0Fh
or	ah, ah
jz	short loc_B034
mov	dl, 11h

loc_B034:
cmp	al, dl
jb	short loc_B03C
sub	al, dl
jmp	short loc_B034

loc_B03C:
pop	dx
xchg	al, ah
add	al, 0Eh

loc_B041:
inc	ah

loc_B043:
mov	ds:47D0h, ah
xor	ah, ah
retn

loc_B04A:
mov	ax, ds:2
shl	ax, 1
shl	ax, 1
cmp	ah, 8
jb	short loc_B058
mov	ah, 8

loc_B058:
shl	ah, 1
cmp	byte ptr ds:0F4h, 10h
cmc
adc	ah, 0
mov	al, 2Dh	; '-'
jmp	short loc_B041
sub_AFF3 endp




sub_B067 proc near
mov	ax, ds:47C4h
cmp	ax, 0FFFFh
jnz	short sub_B070
retn
sub_B067 endp




sub_B070 proc near
mov	word ptr ds:0F0h, 0
cmp	ax, 0Ch
jnz	short loc_B088
test	byte ptr ds:10A7h, 10h
jz	short loc_B088
mov	word ptr ds:0F0h, 0Ah

loc_B088:
call	sub_AFF3
cmp	ax, ds:22A6h
jz	short sub_B0DF
push	ax
call	sub_B782
pop	ax
mov	ds:22A6h, ax
mov	si, ax
call	sub_B0DF
mov	al, [si+22A8h]
xor	ah, ah
mov	ds:2224h, ax
mov	ds:222Ch, ax
mov	ds:2234h, ax
push	ds
push	ds
pop	es
lds	si, ds:0DBB0h
mov	bx, [si]
add	si, [bx+si-2]
add	si, 4
mov	di, 1BF0h
movsw
movsw
movsw
movsw
mov	ax, si
add	ax, 2
mov	ss:47CCh, ax
add	si, [si]
mov	bx, [si]
mov	di, si
add	di, [bx+si-2]
pop	ds
mov	ds:47CAh, si
mov	ds:47D2h, di
retn
sub_B070 endp




sub_B0DF proc near
add	ax, 2
jmp	sub_E00E
sub_B0DF endp




sub_B0E5 proc near

; FUNCTION CHUNK AT 3F15 SIZE 00000005 BYTES
; FUNCTION CHUNK AT 42E9 SIZE 0000008E BYTES
; FUNCTION CHUNK AT 9381 SIZE 0000005E BYTES
; FUNCTION CHUNK AT 945B SIZE 00000098 BYTES

call	sub_F2EB
cmp	bp, 1F0Eh
jnz	short loc_B118
cmp	byte ptr ds:11C9h, 0
jnz	short locret_B151
call	sub_B155
jnb	short loc_B133
cmp	cl, 2Fh	; '/'
jz	short loc_B152
cmp	cl, 0Fh
jnb	short loc_B110

loc_B104:
mov	al, 10h
mul	cl
add	ax, 0FD8h
mov	si, ax
jmp	word ptr [si+4]

loc_B110:
sub	cl, 0Fh
mov	al, cl
jmp	loc_B251

loc_B118:
cmp	bp, 1F7Eh
jnz	short locret_B151
call	sub_B199
jnb	short locret_B151
cmp	cx, ds:47C4h
jnz	short loc_B12C
jmp	loc_B32B

loc_B12C:
push	cx
call	sub_F18D
pop	cx
jmp	short loc_B104

loc_B133:
cmp	byte ptr ds:0Bh, 1
jnz	short locret_B151
cmp	bx, 98h	; '�'
jnb	short locret_B151
cmp	byte ptr ds:8, 21h ; '!'
jz	short locret_B151
cmp	byte ptr ds:2Bh, 0
jnz	short locret_B151
jmp	loc_5DE5

locret_B151:
retn

loc_B152:
jmp	loc_61B9
sub_B0E5 endp




sub_B155 proc near

; FUNCTION CHUNK AT 92EB SIZE 00000007 BYTES

cmp	bx, 98h	; '�'
jnb	short sub_B199
mov	si, 47F8h
mov	cx, 17h

loc_B161:
lodsw
mov	di, ax
lodsw
mov	bp, ax
or	di, di
js	short loc_B179
sub	di, dx
cmp	di, 0FFE0h
jb	short loc_B179
sub	bp, bx
cmp	bp, 0FFB0h
jnb	short loc_B1BB

loc_B179:
loop	loc_B161
mov	ax, ds:472Dh
or	ax, ax
jz	short locret_B198
sub	ax, dx
cmp	ax, 0FFB2h
cmc
jnb	short locret_B198
mov	ax, bx
sub	ax, ds:472Fh
cmp	ax, 3Ch	; '<'
jnb	short locret_B198
mov	cx, 2Fh	; '/'

locret_B198:
retn
sub_B155 endp




sub_B199 proc near
xor	cx, cx
mov	cl, ds:1152h
cmp	cl, 0FFh
jz	short locret_B151
mov	di, 1C0Ch
call	sub_F5CE
jb	short locret_B151
mov	cl, ds:1153h
cmp	cl, 0FFh
jz	short locret_B151
mov	di, 1C1Ah
jmp	sub_F5CE
sub_B199 endp

; START	OF FUNCTION CHUNK FOR sub_B155

loc_B1BB:
sub	cx, 17h
neg	cx
stc
retn
; END OF FUNCTION CHUNK	FOR sub_B155
xor	al, al
jmp	loc_B27A
mov	al, 1
jmp	loc_B27A
mov	al, 2
jmp	loc_B27A
mov	al, 3
jmp	loc_B27A
mov	al, 4
jmp	loc_B27A
mov	al, 5
jmp	loc_B27A
mov	al, 6
jmp	loc_B27A
mov	al, 7
jmp	loc_B27A
mov	al, 8
jmp	loc_B27A
mov	al, 9
jmp	loc_B27A
mov	al, 0Ah
jmp	loc_B27A
mov	al, 0Bh
jmp	short loc_B27A
;align 2
mov	si, ds:4768h
call	sub_50C6
call	sub_5F4E
mov	bp, 44h	; 'D'
cmp	word ptr [bp+0], 0
jnz	short loc_B226
mov	ax, ds:0E2h
cmp	ax, 1Eh
jnb	short loc_B23B
mov	bp, 0E4h ; '�'
mov	si, ds:4768h
mov	ax, [bp+0]
mov	[si+0Ch], ax

loc_B226:
push	word ptr [bp+0]
call	sub_71F3
pop	di
add	ax, 0DAh ; '�'
push	ax
call	sub_51EE
call	sub_4D68
pop	word ptr ds:11FDh

loc_B23B:
mov	al, 0Ch
jmp	short loc_B27A
mov	al, 0Dh
jmp	short loc_B27A
mov	si, ds:4756h
call	sub_50C6
mov	al, 0Eh
jmp	short loc_B27A
sub	ax, 87h	; '�'
; START	OF FUNCTION CHUNK FOR sub_B0E5

loc_B251:
cmp	al, 9
jb	short loc_B257
xor	ax, ax

loc_B257:
cmp	al, 8
jnz	short loc_B264
mov	al, ds:476Bh
dec	al
jns	short loc_B264
xor	ax, ax

loc_B264:
mov	ds:476Ch, al
mov	si, 4758h
xor	ah, ah
add	ax, ax
add	si, ax
mov	si, [si]
call	sub_3D8E
call	sub_50C6
mov	al, 0Fh

loc_B27A:
xor	ah, ah
mov	word ptr ds:47E1h, 0
push	ax
mov	ds:47C4h, ax
call	sub_B070
call	sub_59C9
call	sub_B067
call	sub_B7D8
mov	si, ds:47C8h
mov	word ptr ds:4540h, 0
call	sub_BA7C
call	sub_3704
call	sub_DFC4
call	sub_E3AD
pop	ax
call	sub_B2AF
jmp	loc_B342
; END OF FUNCTION CHUNK	FOR sub_B0E5



sub_B2AF proc near
mov	cl, al
shl	al, 1
shl	al, 1
shl	al, 1
mov	ds:47BEh, ax
mov	ax, 1
shl	ax, cl
or	ds:0Eh,	ax
or	ds:14h,	ax
mov	al, 10h
mul	cl
add	ax, 0FD8h
mov	ds:47A2h, ax
mov	si, ax
mov	word ptr ds:47BAh, 0
call	sub_AF8D
mov	word ptr ds:47B6h, 0
mov	byte ptr ds:47C2h, 80h ; '�'
mov	byte ptr ds:19h, 0
retn
sub_B2AF endp

cmp	byte ptr ds:47A9h, 0
jz	short loc_B2F7
jmp	loc_4863

loc_B2F7:
call	sub_F2EB
cmp	bp, 20C2h
jnz	short loc_B306
call	sub_F1BA
jmp	loc_2D89

loc_B306:
test	byte ptr ds:11C9h, 3
jz	short loc_B317
cmp	byte ptr ds:11CAh, 0
jnz	short loc_B317
jmp	loc_697D

loc_B317:
cmp	word ptr ds:479Eh, 0
jnz	short loc_B328
push	bx
push	dx
call	sub_4C81
pop	dx
pop	bx
jmp	sub_B0E5

loc_B328:
jmp	sub_F1B2
; START	OF FUNCTION CHUNK FOR sub_B0E5

loc_B32B:
cmp	word ptr ds:479Eh, 0
jnz	short loc_B338
mov	ax, ds:47C4h
jmp	loc_B27A

loc_B338:
call	sub_F2EB
cmp	bp, 1FFEh
jnz	short loc_B342
retn

loc_B342:
call	sub_BE10
mov	byte ptr ds:226Dh, 0Ah
mov	byte ptr ds:1Bh, 0
cmp	word ptr ds:47B6h, 0
jnz	short loc_B3AD
mov	si, ds:47BAh
or	si, si
jnz	short loc_B36A
mov	si, ds:47BEh

loc_B362:
mov	ax, si
shl	si, 1
mov	si, [si-558Ah]

loc_B36A:
cmp	si, 0FFFFh
jz	short loc_B389
call	sub_BA19
call	sub_BE6E

loc_B375:
mov	ds:47BAh, si
jnb	short loc_B3AA
mov	ax, ds:47BEh
inc	ax
mov	ds:47BEh, ax
mov	si, ax
and	ax, 3
jnz	short loc_B362

loc_B389:
cmp	word ptr ds:47C4h, 0Dh
jz	short loc_B393
jmp	sub_F1B2

loc_B393:
cmp	si, 0FFFFh
jnz	short loc_B39C
mov	si, ds:47BEh

loc_B39C:
and	si, 0FFF8h
mov	ds:47BEh, si
mov	byte ptr ds:47C2h, 20h ; ' '
jmp	short loc_B362

loc_B3AA:
jmp	sub_F150

loc_B3AD:
lds	si, ds:47B6h
call	sub_A7A2
mov	si, ds:47BAh
add	word ptr ds:4780h, 1000h
call	sub_BF0F
jmp	short loc_B375
; END OF FUNCTION CHUNK	FOR sub_B0E5



sub_B3C3 proc near
cmp	word ptr ds:47C4h, 10h
jnb	short locret_B402
push	si
mov	si, ds:47A2h
mov	al, [si+0Fh]
mov	ds:18h,	al
test	al, 40h
mov	ax, [si+8]
jnz	short loc_B3DF
mov	ax, [si+0Ah]

loc_B3DF:
sub	ax, ds:2
neg	ax
mov	ds:16h,	ax
pop	si
cmp	byte ptr ds:2Ah, 64h ; 'd'
jnb	short locret_B402
cmp	word ptr ds:47C4h, 9
jnb	short locret_B402
mov	di, ds:11DBh
or	di, di
jz	short locret_B402
call	sub_4D68

locret_B402:
retn
sub_B3C3 endp

call	sub_C094
mov	ax, 6
call	sub_BE01
call	sub_BE5B
inc	byte ptr ds:1Bh
call	sub_C0B2
jnz	short locret_B43C
mov	si, ds:47A2h
call	sub_3CD1
jnb	short sub_B426
add	byte ptr ds:0F9h, 10h



sub_B426 proc near
and	byte ptr [si+0Fh], 0BFh
mov	bx, 2
call	sub_B43D
mov	cl, [si+0Eh]
mov	ax, 0FFFEh
rol	ax, cl
and	ds:10h,	ax

locret_B43C:
retn
sub_B426 endp




sub_B43D proc near
mov	bp, bx
xor	bp, 2
mov	ax, ds:2
sub	ax, [bp+si+8]
cmp	ax, 2
jb	short locret_B453
mov	ax, ds:2
mov	[bx+si+8], ax

locret_B453:
retn
sub_B43D endp

mov	si, ds:47A2h
mov	cl, [si+0Eh]
mov	ax, 1
shl	ax, cl
test	ds:0EEh, ax
jnz	short loc_B484
or	ds:0EEh, ax
mov	si, ds:4768h
mov	al, 20h	; ' '
sub	byte ptr [si+15h], 29h ; ')'
sub	byte ptr ds:0EDh, 29h ;	')'
jns	short loc_B484
or	byte ptr [si+3], 10h
or	byte ptr ds:10A7h, 10h

loc_B484:
mov	ax, 85h	; '�'
inc	byte ptr ds:47DCh
call	loc_B5DB
jmp	loc_B5BB
mov	ax, 64h	; 'd'
cmp	word ptr ds:0ACh, 3E8h
jb	short loc_B4AE
sub	al, ds:29h
jb	short loc_B4AE
shr	al, 1
shr	al, 1
cmp	al, ds:36h
jbe	short loc_B4AE
mov	ah, 2

loc_B4AE:
mov	ds:23h,	ah
call	sub_C094
mov	ax, 5
call	sub_BE01
call	sub_BE5B
inc	byte ptr ds:1Bh
mov	byte ptr ds:23h, 0
call	sub_C0B2
jnz	short nullsub_10
mov	si, ds:47A2h
mov	cl, [si+0Eh]
cmp	cl, 0Eh
jz	short loc_B4EB
or	byte ptr [si+0Fh], 40h
xor	bx, bx
call	sub_B43D
mov	ax, 1
shl	ax, cl
or	ds:10h,	ax
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_10. PRESS	KEYPAD "+" TO EXPAND]

loc_B4EB:
mov	si, ds:4756h
push	si
call	sub_859E
call	sub_4DCB
call	loc_4F63
pop	si
cmp	si, 8E0h
jnz	short loc_B509
add	byte ptr [si+15h], 18h
add	byte ptr ds:36h, 18h

loc_B509:
mov	ax, si
mov	cx, 8
push	ds
pop	es
mov	di, 4758h
repne scasw
mov	al, 7
sub	al, cl
mov	ds:476Ch, al
mov	si, 10C8h
call	sub_AF8D
jmp	sub_F150



sub_B525 proc near
mov	cl, [si+0Eh]
mov	di, 1153h
mov	al, 0FFh
cmp	[di], cl
jz	short loc_B539
dec	di
cmp	[di], cl
jnz	short nullsub_10
xchg	al, [di+1]

loc_B539:
mov	[di], al
mov	byte ptr [di+10D0h], 0
jmp	sub_F633
sub_B525 endp




sub_B543 proc near
mov	cl, [si+0Eh]
mov	di, 1152h
cmp	[di], cl
jz	short nullsub_10
cmp	byte ptr [di], 0FFh
jz	short loc_B57B
inc	di
cmp	[di], cl
jz	short nullsub_10
cmp	byte ptr [di], 0FFh
jz	short loc_B57B
dec	di
push	cx
mov	cl, [di]
mov	al, 10h
mul	cl
add	ax, 0FD8h
mov	si, ax
mov	al, [si+0Eh]
add	al, 64h	; 'd'
mov	ds:23h,	al
call	sub_B426
pop	cx
inc	di
mov	al, [di]
mov	[di-1],	al

loc_B57B:
mov	[di], cl
mov	byte ptr [di+10D0h], 10h
jmp	sub_F633
sub_B543 endp




sub_B585 proc near
push	word ptr ds:47C4h
push	word ptr ds:47C2h
mov	word ptr ds:47C4h, 10h
mov	byte ptr ds:47C2h, 80h ; '�'
mov	si, ds:0AB84h
call	sub_BE6E
pop	word ptr ds:47C2h
pop	word ptr ds:47C4h
retn
sub_B585 endp




sub_B5A8 proc near
mov	ds:47C4h, ax
inc	byte ptr ds:47DCh
mov	ax, 10h
call	sub_B5D2
mov	word ptr ds:1BEAh, 0

loc_B5BB:
mov	byte ptr ds:47DCh, 0
retn
sub_B5A8 endp




sub_B5C1 proc near
mov	ds:47C4h, ax
cmp	al, 0Eh
jnz	short sub_B5D2
mov	si, ds:4756h
call	sub_50C6
mov	ax, 0Eh
sub_B5C1 endp




sub_B5D2 proc near
shl	ax, 1
shl	ax, 1
shl	ax, 1
or	ax, 4

loc_B5DB:
mov	si, ax
shl	si, 1
mov	si, [si-558Ah]
call	sub_BE10
jmp	sub_BE5B
sub_B5D2 endp




sub_B5E9 proc near
cmp	byte ptr ds:4Ch, 0
js	short loc_B5FC
mov	si, ds:46EFh
mov	di, [si+4]
mov	al, 0Fh
call	sub_4921

loc_B5FC:
call	sub_BE52
mov	word ptr ds:47C4h, 0Fh
mov	word ptr ds:47A2h, 10C8h
call	sub_C094
mov	si, ds:47BAh
inc	si
jz	short loc_B618
dec	si
jnz	short loc_B61C

loc_B618:
mov	si, ds:0AB6Ah

loc_B61C:
mov	byte ptr ds:47C2h, 20h ; ' '
call	sub_BE6E
mov	ds:47BAh, si
jnb	short locret_B630
mov	word ptr ds:47BAh, 0

locret_B630:
retn
sub_B5E9 endp




sub_B631 proc near
mov	ds:47C4h, ax
cmp	al, 0Eh
jnz	short loc_B642
mov	si, ds:4756h
call	sub_50C6
mov	ax, 0Eh

loc_B642:
shl	ax, 1
shl	ax, 1
shl	ax, 1
or	ax, 7
mov	si, ax
shl	si, 1
mov	si, [si-558Ah]
call	sub_BE10
mov	byte ptr ds:47C2h, 80h ; '�'
jmp	sub_BE6E
sub_B631 endp




sub_B65E proc near
call	sub_699A
mov	ax, ds:47C4h
cmp	ax, 0FFFFh
jz	short locret_B69E
call	sub_B070
call	sub_B7D8
cmp	word ptr ds:479Eh, 0
jz	short loc_B67C
mov	si, 1BE2h
call	sub_E347

loc_B67C:
mov	si, ds:47C8h
or	si, si
jz	short loc_B698
mov	word ptr ds:4540h, 0
call	sub_BA7C
cmp	word ptr ds:479Eh, 223Ch
jnz	short loc_B698
call	sub_AEF5

loc_B698:
call	sub_DFC4
jmp	sub_E3AD

locret_B69E:
retn
sub_B65E endp




sub_B69F proc near
call	sub_C675
cmp	word ptr ds:47C4h, 0FFFFh
jz	short locret_B69E
mov	si, ds:47A2h
or	byte ptr [si+0Fh], 20h
and	byte ptr [si+0Fh], 0FBh
mov	word ptr ds:47E1h, 0
cmp	byte ptr ds:11C9h, 0
jz	short loc_B6DC
call	sub_AB5A
mov	bp, 98B2h
call	sub_DF67
xor	al, al
xchg	al, ds:11CAh
push	ax
call	sub_4ECB
pop	ax
mov	ds:11CAh, al
jmp	sub_698E

loc_B6DC:
call	sub_AB5A
cmp	byte ptr ds:47A4h, 0
mov	si, ds:47A2h
js	short loc_B719
cmp	byte ptr ds:2Bh, 0
jz	short loc_B6F5
mov	ax, 9840h
push	ax

loc_B6F5:
test	byte ptr [si+0Fh], 40h
jz	short loc_B6FE
jmp	sub_B543

loc_B6FE:
call	sub_B525
cmp	byte ptr ds:2Bh, 0
jnz	short locret_B70F
test	byte ptr ds:47A4h, 1
jz	short loc_B749

locret_B70F:
retn
call	sub_BA5B
call	sub_E30E
jmp	sub_E3AD

loc_B719:
mov	word ptr ds:1C06h, 0
test	byte ptr [si+0Fh], 40h
jz	short loc_B728
call	sub_B543

loc_B728:
xor	ax, ax
mov	ds:4540h, ax
mov	ds:479Eh, ax
and	byte ptr ds:47D1h, 3Fh
mov	ds:47C8h, ax
and	byte ptr ds:47A4h, 7Fh
call	sub_BA5B
mov	al, ds:23h
sub	al, 64h	; 'd'
cmp	al, 10h
jb	short loc_B768

loc_B749:
call	sub_4DCB
cmp	byte ptr ds:11C9h, 0
jnz	short loc_B756
call	sub_4F60

loc_B756:
call	sub_5682
call	sub_E2E2
call	sub_DFC4
call	sub_3704
call	sub_E3AD
jmp	sub_36B6

loc_B768:
mov	bp, 37B2h
call	sub_DF67
call	sub_55A3
mov	ax, 0C8h ; '�'
call	sub_10270
mov	word ptr ds:1C06h, 0
jmp	short loc_B728
sub_B69F endp




sub_B77F proc near
call	sub_AB5A
sub_B77F endp




sub_B782 proc near
cmp	byte ptr ds:47C3h, 0
jnz	short locret_B7B5
xor	ax, ax
mov	ds:4540h, ax
and	byte ptr ds:47D1h, 3Fh
xchg	ax, ds:47C8h
or	ax, ax
jz	short locret_B7B5
mov	si, 1BF0h
mov	word ptr [si+8], 0
mov	word ptr ds:1C06h, 0
call	sub_E316
mov	si, 1BF0h
call	sub_E3C0
jmp	sub_BA5B

locret_B7B5:
retn
sub_B782 endp




sub_B7B6 proc near
call	sub_B7C5
mov	ds:47C8h, ax
mov	ds:47AAh, ax
mov	ds:479Eh, ax
jmp	sub_BA5B
sub_B7B6 endp




sub_B7C5 proc near
xor	ax, ax
mov	ds:1C06h, ax
mov	ds:1BF8h, ax
mov	ds:1BEAh, ax
retn
sub_B7C5 endp




sub_B7D1 proc near
mov	word ptr ds:479Eh, 0
retn
sub_B7D1 endp




sub_B7D8 proc near
mov	si, ds:47CAh
mov	es, word ptr ds:0DBB2h
call	sub_B81F
mov	byte ptr ds:47D1h, 0C0h	; '�'
mov	al, ds:478Ch
xor	ah, ah
shl	ax, 1
shl	ax, 1
mov	ds:47CEh, ax
add	si, es:[bp+si]
call	sub_B83C
mov	ds:47C8h, si
xchg	si, ds:47C6h
or	si, si
jnz	short locret_B81E
cmp	byte ptr ds:0EAh, 0
jg	short locret_B81E
mov	ax, ds:47C4h
call	sub_314C
jb	short locret_B81E
sub_B7D8 endp




sub_B815 proc near
mov	si, 99BEh
mov	bp, 10h
call	sub_F8F5

locret_B81E:
retn
sub_B815 endp




sub_B81F proc near
mov	al, ds:47D0h
or	al, al
jnz	short loc_B833
mov	bx, 6
call	sub_10287
mov	bp, ax
add	bp, ds:0F0h
retn

loc_B833:
dec	al
xor	ah, ah
shl	ax, 1
mov	bp, ax
retn
sub_B81F endp




sub_B83C proc near
cmp	byte ptr ds:47D0h, 0
jz	short locret_B851
mov	cx, 20h	; ' '
push	es
pop	ds

loc_B848:
lodsb
or	al, al
jnz	short loc_B848
loop	loc_B848
push	ss
pop	ds
assume ds:seg001

locret_B851:
retn
sub_B83C endp

; START	OF FUNCTION CHUNK FOR sub_B855

loc_B852:
call	sub_B88E
; END OF FUNCTION CHUNK	FOR sub_B855



sub_B855 proc near

; FUNCTION CHUNK AT 9982 SIZE 00000003 BYTES

test	word ptr ds:47CEh, 7
jnz	short loc_B852
retn
sub_B855 endp




sub_B85E proc near
mov	di, 4C60h
mov	si, 1BF0h
mov	cx, 4
call	sub_B882
mov	si, 22A6h
mov	cx, 1
call	sub_B882
mov	si, 4540h
mov	cx, 0C9h ; '�'
call	sub_B882
mov	si, 47C4h
mov	cx, 7
sub_B85E endp




sub_B882 proc near
lodsw
xchg	ax, [di]
mov	[si-2],	ax
add	di, 2
loop	sub_B882
retn
sub_B882 endp




sub_B88E proc near
cmp	byte ptr ds:47C3h, 0
jz	short sub_B8AA
call	sub_B85E
mov	ax, 7
call	sub_B0DF
call	sub_B8AA
call	sub_B85E
mov	ax, 2Dh	; '-'
call	sub_B0DF
sub_B88E endp




sub_B8AA proc near
call	sub_B067
mov	al, ds:47D1h
or	al, al
jns	short locret_B8EC
test	al, 10h
jnz	short loc_B910
mov	si, ds:47C6h
mov	es, word ptr ds:0DBB2h

loc_B8C0:
cmp	byte ptr es:[si], 0FFh
jz	short loc_B8ED

loc_B8C6:
dec	word ptr ds:47CEh
mov	ds:47C8h, si
call	sub_BA81
mov	ds:47C6h, si
cmp	word ptr ds:0D834h, 13Fh
jz	short locret_B8EC
call	sub_AF5C
mov	si, 0D834h
call	sub_FA44
call	sub_E3C0
jmp	sub_FA37

locret_B8EC:
retn

loc_B8ED:
cmp	word ptr ds:47CEh, 0
js	short loc_B90B
mov	si, ds:47CAh
mov	es, word ptr ds:0DBB2h
call	sub_B81F
add	si, es:[bp+si]
call	sub_B83C
mov	ds:47C6h, si
jmp	short loc_B8C0

loc_B90B:
or	byte ptr ds:47D1h, 10h

loc_B910:
mov	si, ds:47C6h
mov	es, word ptr ds:0DBB2h
cmp	word ptr ds:47CEh, 0
jg	short loc_B8C6
call	sub_B984
jb	short loc_B8C6
call	sub_B94B
or	ah, ah
jnz	short locret_B8EC
call	sub_B930
jmp	short loc_B8C6
sub_B8AA endp




sub_B930 proc near
or	al, al
jz	short loc_B944
mov	bx, ax
xor	al, al
mov	cx, 0FFFFh
mov	di, si

loc_B93D:
repne scasb
dec	bx
jnz	short loc_B93D
mov	si, di

loc_B944:
mov	word ptr ds:47CEh, 8
retn
sub_B930 endp




sub_B94B proc near
mov	al, ds:47D0h
mov	bx, 0F18h
or	al, al
jnz	short loc_B96A
mov	al, 5
mov	bx, 0F38h
cmp	word ptr ds:47C4h, 7
jnz	short loc_B96A
cmp	seg_11380+2Ah, 0C8h ; '�'
jb	short loc_B96A
inc	al

loc_B96A:
dec	al
xor	ah, ah
shl	ax, 1
mov	bp, ax
add	bp, word ptr seg_11380+0F0h
mov	si, ds:47CAh
mov	es, word ptr ds:0DBB2h
add	si, es:[bp+si]
jmp	sub_10287
sub_B94B endp




sub_B984 proc near
mov	al, ds:47E1h
or	al, al
jz	short locret_B9D8
js	short loc_B9AB
or	byte ptr ds:47E1h, 80h
call	sub_B9D9
mov	al, ds:47E2h
xor	ah, ah
mov	bp, ax
mov	si, ds:47CAh
add	si, es:[bp+si]
mov	word ptr ds:47CEh, 14h
stc
retn

loc_B9AB:
shr	al, 1
jnb	short locret_B9D8
mov	byte ptr ds:47E1h, 80h ; '�'
call	sub_EF45
mov	si, ds:47E4h
cmp	word ptr [si], 38h ; '8'
jnb	short locret_B9D8
lodsw
mov	cx, ax
lodsw
mov	dx, ax
lodsw
mov	bx, ax
lodsw
xchg	ax, cx
call	sub_A735
call	sub_EF38
call	sub_FA82
call	sub_E3AD
clc

locret_B9D8:
retn
sub_B984 endp




sub_B9D9 proc near
mov	si, ds:47E4h
cmp	word ptr [si], 38h ; '8'
jb	short locret_BA18
mov	ax, word ptr seg_11380+20h
jz	short loc_B9EC
mov	al, seg_11380+9Dh
xor	ah, ah

loc_B9EC:
call	sub_A8F3
mov	cx, ax
les	si, ds:0DBB0h
mov	di, si
mov	bp, 5

loc_B9FA:
and	bx, 0Fh
jz	short loc_BA02
mov	bp, 6

loc_BA02:
add	bx, bp
shl	bx, 1
mov	ax, es:[bx+si]
stosw
mov	bl, dh
mov	dh, dl
mov	dl, ch
mov	ch, cl
mov	cl, 0FFh
cmp	bl, cl
jnz	short loc_B9FA

locret_BA18:
retn
sub_B9D9 endp




sub_BA19 proc near
mov	ax, ds:47E1h
cmp	al, 80h	; '�'
jnz	short loc_BA54
push	si
push	ax
call	sub_B067
pop	ax
mov	al, ah
xor	ah, ah
inc	ax
inc	ax
mov	bp, ax
mov	si, ds:47CAh
mov	es, word ptr ds:0DBB2h
add	si, es:[bp+si]
mov	byte ptr ds:47E1h, 81h ; '�'

loc_BA3E:
push	es
mov	bp, 99F6h
mov	ax, 0Ch
call	sub_10223
pop	es
mov	si, ds:47C6h
cmp	byte ptr es:[si], 0FFh
jnz	short loc_BA3E
pop	si

loc_BA54:
mov	word ptr ds:47E1h, 0
retn
sub_BA19 endp




sub_BA5B proc near
call	sub_C675
xor	ax, ax
mov	byte ptr ds:47C3h, 0
mov	ds:47CEh, ax
and	byte ptr ds:47D1h, 7Fh
xchg	ax, ds:47C6h
or	ax, ax
jz	short locret_BA7B
mov	si, 99BEh
jmp	sub_F92F

locret_BA7B:
retn
sub_BA5B endp




sub_BA7C proc near
push	si
call	sub_B067
pop	si
sub_BA7C endp




sub_BA81 proc near
call	sub_BABE
push	si
cmp	word ptr ds:4540h, 0
jnz	short loc_BA9C
mov	si, 1BF0h
mov	di, 0D834h
call	sub_7A69
mov	word ptr [si], 80h ; '�'
jmp	short loc_BAA7
;align 2

loc_BA9C:
call	sub_BAFD
cmp	word ptr ds:0D834h, 13Fh
jz	short loc_BABC

loc_BAA7:
mov	si, 0D834h
cmp	word ptr [si+6], 98h ; '�'
jb	short loc_BAB6
mov	word ptr [si+6], 98h ; '�'

loc_BAB6:
call	sub_E316
call	sub_BBE6

loc_BABC:
pop	si
retn
sub_BA81 endp ;	sp =  2




sub_BABE proc near
xor	cx, cx
push	ds
pop	es
assume es:seg001
mov	ds, word ptr ss:0DBB2h
assume ds:nothing
mov	di, 460Ah

loc_BACA:
lodsb
xor	ah, ah
or	al, al
jz	short loc_BAF5
cmp	al, 1
jnz	short loc_BAD8
mov	ah, al
lodsb

loc_BAD8:
push	si
sub	ax, 2
shl	ax, 1
mov	bp, ax
mov	si, ss:47CCh
add	si, ds:[bp+si]

loc_BAE8:
lodsb
or	al, al
jz	short loc_BAF2
stosb
movsw
inc	cx
jmp	short loc_BAE8

loc_BAF2:
pop	si
jmp	short loc_BACA

loc_BAF5:
mov	ss:4608h, cx
push	ss
pop	ds
assume ds:seg001
retn
sub_BABE endp




sub_BAFD proc near
mov	word ptr ds:0D834h, 13Fh
mov	word ptr ds:0D836h, 0C7h ; '�'
xor	ax, ax
mov	ds:0D838h, ax
mov	ds:0D83Ah, ax
mov	ax, ds
mov	es, ax
mov	si, 4540h
mov	di, 4608h
call	sub_BB24
mov	si, 4608h
mov	di, 4540h
sub_BAFD endp




sub_BB24 proc near
lodsw
mov	cx, ax

loc_BB27:
push	cx
push	di
mov	cx, [di]
add	di, 2

loc_BB2E:
cmpsw
lahf
cmpsb
mov	al, ah
lahf
and	al, ah
test	al, 40h
jnz	short loc_BB45
sub	si, 3
loop	loc_BB2E
call	sub_BB96
add	si, 3

loc_BB45:
pop	di
pop	cx
loop	loc_BB27
cmp	byte ptr ds:47E1h, 81h ; '�'
jz	short loc_BB76
call	sub_CA9C
jz	short loc_BB76
mov	ax, ds:47C4h
cmp	al, 9
jz	short locret_BB95
cmp	al, 0Ch
jz	short locret_BB95
mov	si, ds:0DC28h
mov	ax, [si+2]
cmp	ax, ds:0D83Ah
jnb	short loc_BB76
mov	ds:0D83Ah, ax
cmp	ax, ds:0D836h
jle	short loc_BB8F

loc_BB76:
cmp	byte ptr ds:47E1h, 80h ; '�'
jnz	short locret_BB95
mov	ax, 4Ch	; 'L'
cmp	ax, ds:0D83Ah
jnb	short locret_BB95
mov	ds:0D83Ah, ax
cmp	ax, ds:0D836h
jg	short locret_BB95

loc_BB8F:
mov	word ptr ds:0D834h, 13Fh

locret_BB95:
retn
sub_BB24 endp




sub_BB96 proc near
push	si
push	ds
xor	ah, ah
lodsb
mov	bp, ax
dec	bp
lodsb
mov	dx, ax
add	dx, word ptr seg_11380+1BF0h
lodsb
mov	bx, ax
add	bx, word ptr seg_11380+1BF2h
lds	si, ds:0DBB0h
assume ds:nothing
shl	bp, 1
add	si, ds:[bp+si]
mov	bp, 0D834h
cmp	[bp+0],	dx
jb	short loc_BBC0
mov	[bp+0],	dx

loc_BBC0:
cmp	[bp+2],	bx
jb	short loc_BBC8
mov	[bp+2],	bx

loc_BBC8:
lodsw
and	ax, 1FFh
add	dx, ax
lodsw
xor	ah, ah
add	bx, ax
cmp	[bp+4],	dx
jnb	short loc_BBDB
mov	[bp+4],	dx

loc_BBDB:
cmp	[bp+6],	bx
jnb	short loc_BBE3
mov	[bp+6],	bx

loc_BBE3:
pop	ds
pop	si
retn
sub_BB96 endp




sub_BBE6 proc near
push	ds
pop	es
assume es:nothing
mov	di, 4540h
mov	si, 4608h
mov	cx, [si]
push	si
mov	ax, cx
shl	cx, 1
add	cx, ax
add	cx, 2
rep movsb
pop	si
sub_BBE6 endp




sub_BBFD proc near
lodsw
mov	cx, ax

loc_BC00:
push	cx
lodsb
xor	ah, ah
mov	bp, ax
lodsb
mov	dx, ax
lodsb
mov	bx, ax
add	dx, ds:1BF0h
add	bx, ds:1BF2h
push	si
dec	bp
mov	es, word ptr ds:0DBDAh
lds	si, ds:0DBB0h
shl	bp, 1
add	si, ds:[bp+si]
lodsw
mov	di, ax
lodsw
xor	ah, ah
mov	cx, ax
mov	bp, 0D834h
call	dword ptr ss:seg_11380+38CDh
push	ss
pop	ds
assume ds:seg001
pop	si
pop	cx
loop	loc_BC00
retn
sub_BBFD endp ;	sp =  2




sub_BC3A proc near
mov	es, word ptr ss:0DBD8h

loc_BC3F:
lodsb
xor	ah, ah
or	al, al
jz	short locret_BC63
cmp	al, 1
jnz	short loc_BC4D
mov	ah, al
lodsb

loc_BC4D:
push	si
sub	ax, 2
shl	ax, 1
mov	bp, ax
mov	si, ss:47CCh
add	si, ds:[bp+si]
call	sub_BC64
pop	si
jmp	short loc_BC3F

locret_BC63:
retn
sub_BC3A endp




sub_BC64 proc near
lodsb
and	ax, 0FFh
jz	short locret_BC63
xor	ah, ah
mov	bp, ax
lodsb
mov	dx, ax
lodsb
mov	bx, ax
add	dx, word ptr ss:seg_11380+1BF0h
add	bx, word ptr ss:seg_11380+1BF2h
sub	dx, ss:46D2h
sub	bx, ss:46D4h
add	dx, ss:47D4h
add	bx, ss:47D6h
push	si
push	ds
dec	bp
lds	si, ss:0DBB0h
assume ds:nothing
shl	bp, 1
add	si, ds:[bp+si]
lodsw
mov	di, ax
lodsw
xor	ah, ah
mov	cx, ax
mov	bp, 47D4h
call	dword ptr ss:seg_11380+38CDh
pop	ds
pop	si
jmp	short sub_BC64
sub_BC64 endp

; START	OF FUNCTION CHUNK FOR sub_C6FE

loc_BCB3:
cmp	word ptr ds:47C4h, 10h
jnb	short locret_BC63
push	ax
push	si
call	sub_B067
pop	si
pop	ax
cmp	byte ptr ds:46EBh, 0
js	short loc_BD45
mov	di, 0D834h
call	sub_7A69
mov	dx, ds:1BF0h
mov	bx, ds:1BF2h
add	[di-8],	dx
add	[di-6],	bx
add	[di-4],	dx
add	[di-2],	bx
mov	si, ds:47D2h
mov	ah, ds:47D0h
dec	ah
js	short loc_BCFD
cmp	word ptr ds:22A6h, 0Dh
jnz	short loc_BCF7
add	al, ah

loc_BCF7:
shl	ah, 1
shl	ah, 1
add	al, ah

loc_BCFD:
xor	ah, ah
shl	ax, 1
add	si, ax
call	sub_BABE
mov	si, 4608h
cmp	byte ptr ds:0EAh, 0
jg	short locret_BD44
cmp	word ptr [si], 2
jb	short loc_BD27
call	sub_BBFD
call	sub_AF5C
mov	si, 0D834h
call	sub_FA44
call	sub_E3C0
jmp	sub_FA37

loc_BD27:
mov	si, 0D834h
call	sub_FA44
push	word ptr ds:0DBDAh
call	sub_DF5E
mov	si, 4608h
call	sub_BBFD
call	sub_AF5C
pop	word ptr ds:0DBDAh
jmp	sub_FA37

locret_BD44:
retn

loc_BD45:
mov	si, ds:47D2h
cmp	word ptr ds:47C4h, 0Ch
jz	short loc_BD5C
mov	ah, ds:47D0h
dec	ah
shl	ah, 1
shl	ah, 1
add	al, ah

loc_BD5C:
xor	ah, ah
shl	ax, 1
add	si, ax
push	si
mov	si, 47D4h
call	sub_FA44
pop	si
push	ds
mov	ds, word ptr ss:0DBB2h
lodsb
xor	ah, ah
sub	al, 2
shl	ax, 1
mov	bp, ax
mov	si, ss:47CCh
add	si, ds:[bp+si]
cmp	byte ptr [si+3], 0
jz	short loc_BD99
mov	es, word ptr ss:0DBD6h
call	sub_BC64
pop	ds
mov	si, 47D4h
call	sub_E3C0
jmp	sub_FA37

loc_BD99:
mov	es, word ptr ss:0DBD8h
call	sub_BC64
pop	ds
jmp	sub_FA37
; END OF FUNCTION CHUNK	FOR sub_C6FE
; START	OF FUNCTION CHUNK FOR sub_35D7

loc_BDA5:
cmp	word ptr ds:47C4h, 10h
jnb	short loc_BDBB
call	sub_B855
cmp	byte ptr ds:47E1h, 81h ; '�'
jnz	short loc_BDBB
mov	byte ptr ds:47E1h, 1

loc_BDBB:
call	sub_E72B
mov	al, ds:47DDh
; END OF FUNCTION CHUNK	FOR sub_35D7



sub_BDC1 proc near
mov	ds:47DCh, al
call	sub_BDCD
mov	byte ptr ds:47DCh, 0

locret_BDCC:
retn
sub_BDC1 endp




sub_BDCD proc near

; FUNCTION CHUNK AT A75C SIZE 0000002D BYTES

mov	al, ds:47DCh
mov	ds:47DDh, al
mov	ax, ds:4780h
mov	bx, ds:47C4h
call	sub_C59C
jnb	short locret_BDCC
cmp	word ptr ds:47C4h, 10h
jnb	short loc_BDE9
call	sub_BDEC

loc_BDE9:
jmp	loc_C62C
sub_BDCD endp




sub_BDEC proc near
call	sub_B067
or	byte ptr ds:47D1h, 10h
call	sub_B94B
xor	ah, ah
call	sub_B930
mov	ds:47C6h, si
retn
sub_BDEC endp




sub_BE01 proc near
mov	si, ds:47BEh
and	si, 0FFF8h
add	si, ax
shl	si, 1
mov	si, [si-558Ah]
sub_BE01 endp




sub_BE10 proc near
mov	ax, ds:47C4h
cmp	ax, 2
jnz	short loc_BE26
cmp	byte ptr ds:0C2h, 4
jnz	short loc_BE26
push	ax
push	si
call	sub_3113
pop	si
pop	ax

loc_BE26:
mov	cl, 10h
mul	cl
add	ax, 0FD8h
mov	ds:47A2h, ax
cmp	byte ptr ds:46EBh, 0
jnz	short sub_BE52
call	sub_DF4C
mov	word ptr ds:4784h, 28h ; '('
mov	word ptr ds:4786h, 10h
mov	word ptr ds:4788h, 10h
mov	word ptr ds:478Ah, 10h
sub_BE10 endp




sub_BE52 proc near
mov	word ptr ds:0DBE4h, 0F0h ; '�'
jmp	sub_EF38
sub_BE52 endp




sub_BE5B proc near
push	word ptr ds:47C2h
mov	byte ptr ds:47C2h, 20h ; ' '
call	sub_BE6E
pop	word ptr ds:47C2h
retn
sub_BE5B endp

; START	OF FUNCTION CHUNK FOR sub_BE6E

loc_BE6C:
stc
retn
; END OF FUNCTION CHUNK	FOR sub_BE6E



sub_BE6E proc near

; FUNCTION CHUNK AT 9F9C SIZE 00000002 BYTES

mov	ds:477Ch, si
call	sub_B3C3
mov	word ptr ds:47BCh, 0A6B0h

loc_BE7B:
mov	ax, [si]
cmp	ax, 0FFFFh
jz	short loc_BE6C
test	al, 80h
jz	short loc_BE90
test	al, 40h
jnz	short loc_BE90
and	al, ds:47C2h
jnz	short loc_BEA3

loc_BE90:
push	si
mov	al, ah
mov	ah, [si+2]
rol	ah, 1
rol	ah, 1
and	ah, 3
call	sub_C266
pop	si
jnz	short loc_BEA8

loc_BEA3:
add	si, 4
jmp	short loc_BE7B

loc_BEA8:
cmp	byte ptr ds:46EBh, 0
jnz	short loc_BEC7
mov	ax, ds:47C4h
cmp	ax, 10h
jnb	short loc_BEC7
push	si
push	ax
call	sub_BFC1
call	sub_36D3
call	sub_59C9
pop	ax
call	sub_B070
pop	si

loc_BEC7:
push	si
lodsw
mov	ds:47DEh, ax
lodsw
xchg	ah, al
and	ax, 3FFh
or	ax, 800h
mov	di, ds:47BCh
cmp	di, 0A6B0h
jz	short loc_BF04
mov	si, ax
call	sub_EE40
cmp	byte ptr es:[si], 80h ;	'�'
jb	short loc_BEF6
pop	ax
sub	ax, 4
push	ax
mov	byte ptr [di-1], 0FFh
jmp	short loc_BEFC
;align 2

loc_BEF6:
call	sub_A7C1
call	sub_A814

loc_BEFC:
mov	si, 0A6B0h
call	sub_A9E1
jmp	short loc_BF0E

loc_BF04:
cmp	byte ptr ds:0C6h, 0
jnz	short loc_BF0E
call	sub_A77F

loc_BF0E:
pop	si
sub_BE6E endp




sub_BF0F proc near
call	sub_E72B
cmp	word ptr ds:47B6h, 0
jnz	short loc_BF7A
mov	al, [si]
and	al, 0Fh
jz	short loc_BF2E
xor	ah, ah
push	si
dec	ax
shl	ax, 1
mov	bx, 0A107h
add	bx, ax
call	word ptr cs:[bx]
pop	si

loc_BF2E:
mov	al, [si+2]
and	al, 0Ch
jz	short loc_BF62
test	byte ptr [si], 80h
jnz	short loc_BF62
mov	ax, si
sub	ax, 0AA78h
shr	ax, 1
shr	ax, 1
mov	bl, ds:47C4h
shl	bl, 1
shl	bl, 1
shl	bl, 1
or	ah, bl
mov	bp, ds:11BDh
mov	cs:[bp+0], ax
mov	word ptr cs:[bp+2], 0
add	word ptr ds:11BDh, 2

loc_BF62:
mov	byte ptr ds:19h, 0FFh
or	byte ptr [si], 80h
add	si, 4
xor	al, al
xchg	al, ds:47A8h
or	al, al
jz	short loc_BF7A
mov	si, 0FFFFh

loc_BF7A:
cmp	byte ptr ds:46EBh, 0
jnz	short loc_BFB2
cmp	word ptr ds:47C4h, 10h
jnb	short loc_BFB2
push	si
call	sub_B65E
pop	si
cmp	byte ptr ds:4774h, 0
jz	short loc_BF99
push	si
call	sub_4D8F
pop	si

loc_BF99:
cmp	byte ptr ds:0EAh, 0
jg	short loc_BFB2
call	sub_10140
call	sub_BDCD
mov	ax, 0F66h
xchg	ax, ds:227Eh
call	ax
call	sub_10153

loc_BFB2:
cmp	byte ptr ds:0FBh, 0
js	short loc_BFBF
mov	al, ds:28E8h
mov	ds:28E7h, al

loc_BFBF:
clc
retn
sub_BF0F endp ;	sp =  2




sub_BFC1 proc near
cmp	byte ptr ds:28E7h, 2
jnz	short locret_BFD3
test	byte ptr [si+2], 10h
jz	short loc_BFD4
mov	byte ptr ds:28E7h, 1

locret_BFD3:
retn

loc_BFD4:
jmp	sub_AB5A
sub_BFC1 endp

db 0D0h, 0A1h, 0D6h, 0A1h, 0F7h, 0A1h, 44h
db 0A2h, 48h, 0A2h, 0E8h, 0A1h,	0DCh, 0A1h
db 25h,	0A1h, 57h, 0A1h, 5Bh, 0A2h, 19h
db 0A2h, 35h, 0A2h, 8Eh, 0A2h, 0EDh, 0A1h
db 72h,	2 dup(0A1h), 0C4h, 47h,	3Dh, 1,	0
db 74h,	59h, 3Dh, 3, 0,	75h, 3,	0E9h, 4
db 81h,	3Dh, 5,	0, 75h,	7, 0C7h, 6, 7Eh
db 22h,	0CFh, 2Ch, 0C3h, 3Dh, 0Ch, 0, 75h
db 8, 8Bh, 3Eh,	0CEh, 11h, 80h,	65h, 0Ah
db 7Fh,	3Dh, 0Dh, 0, 75h, 3, 0E9h, 32h,	82h
db 0C3h, 0A1h, 0C4h, 47h, 3Dh, 3, 0, 75h
db 3, 0E9h, 8Ch, 83h, 3Dh, 5, 0, 75h, 3
db 0E9h, 0C2h, 8Bh, 3Dh, 0Dh, 0, 75h, 0E7h
db 0E9h, 0A7h, 82h, 0A1h, 0C4h,	47h, 3Dh
db 1, 0, 75h, 4, 0FEh, 6, 0F5h,	0, 3Dh,	3
db 0, 75h, 0D3h, 0E9h, 1Dh, 83h, 0F6h, 6
db 0Ah,	0, 2, 74h, 0Ah,	0B0h, 28h, 0E8h
db 0E6h, 0CDh, 0B8h, 0CEh, 0FFh, 0EBh, 13h
db 0A1h, 76h, 11h, 3Dh,	1, 0, 75h, 0Bh,	5
db 0Ah,	0, 0B0h, 0Ah, 0E8h, 0D1h, 0CDh,	0B8h
db 0Ah,	0, 5, 14h, 0, 0A3h, 76h, 11h, 32h
db 0DBh, 3Dh, 64h, 0, 73h, 8, 0B3h, 6, 0F6h
db 0F3h, 0B3h, 80h, 2Ah, 0D8h, 88h, 1Eh
db 0D5h, 0, 0C3h



sub_C094 proc near
mov	byte ptr ds:47A5h, 0FFh
retn
sub_C094 endp

mov	byte ptr ds:47A5h, 0
retn
mov	byte ptr ds:47A5h, 0FFh
retn
mov	byte ptr ds:47A5h, 0
retn
mov	byte ptr ds:47A5h, 80h ; '�'
retn



sub_C0B2 proc near
cmp	byte ptr ds:47A5h, 0FFh
retn
sub_C0B2 endp




sub_C0B8 proc near
inc	byte ptr ds:47A8h
retn
sub_C0B8 endp

test	byte ptr [si], 80h
jnz	short locret_C104
inc	byte ptr ds:0C2h
retn
mov	bl, ds:2Ah
mov	ax, 12F8h
cmp	bl, 14h
jb	short loc_C0E6
mov	ax, 134Fh
cmp	bl, 18h
jb	short loc_C0E6
mov	ax, 1370h
cmp	bl, 30h	; '0'
jb	short loc_C0E6
mov	ax, 12DBh

loc_C0E6:
jmp	sub_3641
test	byte ptr [si], 80h
jnz	short locret_C104
inc	byte ptr ds:2Ah
mov	byte ptr ds:0FFh, 0
call	sub_D04A
cmp	byte ptr ds:2Ah, 1
jnz	short locret_C104
call	sub_2EDB

locret_C104:
retn
test	byte ptr [si], 80h
jnz	short locret_C104
mov	al, ds:2Ah
and	al, 0FCh
add	al, 4
jmp	sub_30EF
xor	al, al
jmp	short loc_C11A
mov	al, 1

loc_C11A:
mov	ds:476Dh, al
mov	byte ptr ds:9Fh, 0
mov	bp, 1FFEh
mov	bx, 0F66h
call	sub_F1F3
push	si
push	ds
pop	es
mov	ax, ds:4780h
mov	bx, 0A01h
mov	di, 197Ch

loc_C137:
add	di, 8
scasw
ja	short loc_C137
jnz	short loc_C15C
cmp	word ptr [di], 38h ; '8'
jnz	short loc_C146
mov	bh, 10h

loc_C146:
mov	al, ds:47D0h
dec	al
js	short loc_C154
shl	al, 1
inc	ax
shl	al, 1
add	bh, al

loc_C154:
mov	ds:47E1h, bx
mov	ds:47E4h, di

loc_C15C:
pop	si
retn
push	si
cmp	word ptr ds:47C4h, 0Eh
jb	short loc_C170
mov	di, ds:47E6h
call	sub_643C
mov	ds:0DC30h, ax

loc_C170:
cmp	byte ptr ds:28E7h, 1
jz	short loc_C15C
mov	ax, ds:47E6h
cmp	ax, ds:114Eh
jz	short loc_C15C
mov	byte ptr ds:47A4h, 0
mov	ax, 21h	; '!'
call	sub_E00E
mov	si, 22E4h
call	sub_E0EB
mov	si, ds:22FCh
mov	cx, 2A80h
add	si, cx
mov	di, 0A5BFh
push	ds
pop	es
std
rep movsb
cld
inc	di
mov	ds:22FCh, di
mov	di, ds:47E6h
push	di
call	sub_7A25
mov	byte ptr ds:46EBh, 1
mov	si, 22F4h
mov	di, 46E3h
call	sub_7A69
call	sub_7A63
call	sub_D593
call	sub_E007
call	sub_7C9E
pop	si
call	loc_81CE
mov	byte ptr ds:46EBh, 0
mov	si, 22ECh
call	sub_E347
pop	si
retn



sub_C1DB proc near
lods	byte ptr es:[si]
cmp	al, 80h	; '�'
jnb	short loc_C1FA
push	bx
mov	bl, es:[si]
inc	si
xor	bh, bh
cmp	al, 1
jz	short loc_C1F2
mov	ax, [bx+0]
pop	bx
retn

loc_C1F2:
mov	al, [bx+0]
xor	ah, ah
pop	bx
retn

loc_C1FA:
jnz	short loc_C201
lods	byte ptr es:[si]
xor	ah, ah
retn

loc_C201:
lods	word ptr es:[si]
retn
sub_C1DB endp




sub_C204 proc near
and	bx, 1Fh
jmp	cs:off_C246[bx]

loc_C20C:
add	dx, ax
retn

loc_C20F:
sub	dx, ax
retn

loc_C212:
and	dx, ax
retn

loc_C215:
or	dx, ax
retn

loc_C218:
cmp	dx, ax
jz	short loc_C242
xor	dx, dx
retn

loc_C21F:
cmp	dx, ax
jb	short loc_C242
xor	dx, dx
retn

loc_C226:
cmp	dx, ax
ja	short loc_C242
xor	dx, dx
retn

loc_C22D:
cmp	dx, ax
jnz	short loc_C242
xor	dx, dx
retn

loc_C234:
cmp	dx, ax
jle	short loc_C242
xor	dx, dx
retn

loc_C23B:
cmp	dx, ax
jge	short loc_C242

loc_C23F:
xor	dx, dx
retn

loc_C242:
mov	dx, 0FFFFh
retn
sub_C204 endp

off_C246 dw offset loc_C218
dw offset loc_C21F
dw offset loc_C226
dw offset loc_C22D
dw offset loc_C234
dw offset loc_C23B
dw offset loc_C20C
dw offset loc_C20F
dw offset loc_C212
dw offset loc_C215
dw offset loc_C23F
dw offset loc_C23F
dw offset loc_C23F
dw offset loc_C23F
dw offset loc_C23F
dw offset loc_C23F



sub_C266 proc near
sub	sp, 32h
mov	bp, sp
shl	ax, 1
les	si, ds:0AA72h
add	si, ax
mov	si, es:[si-2]

loc_C277:
call	sub_C1DB
mov	dx, ax

loc_C27C:
lods	byte ptr es:[si]
cmp	al, 0FFh
jz	short loc_C29B
test	al, 80h
jnz	short loc_C290
mov	bl, al
call	sub_C1DB
call	sub_C204
jmp	short loc_C27C

loc_C290:
mov	[bp+0],	dx
mov	[bp+2],	ax
add	bp, 4
jmp	short loc_C277

loc_C29B:
mov	si, sp
cmp	si, bp
jz	short loc_C2B2
mov	[bp+0],	dx
lodsw
mov	dx, ax

loc_C2A7:
lodsw
mov	bx, ax
lodsw
call	sub_C204
cmp	si, bp
jb	short loc_C2A7

loc_C2B2:
add	sp, 32h
or	dx, dx
retn
sub_C266 endp

;align 10h
mov	ax, 1AD6h
call	sub_F82E
call	sub_F18D

loc_C2C9:
push	word ptr ds:0DBDAh
call	sub_DF5E
mov	ax, 55h	; 'U'
call	sub_E00E
xor	ax, ax
mov	dx, ds:2886h
mov	bx, ds:2888h
call	sub_E0FF
pop	word ptr ds:0DBDAh
call	sub_C396
call	sub_C34D
call	sub_C2FC
call	sub_C31C
call	sub_CB0A
mov	bx, 0A541h
jmp	loc_F1FF



sub_C2FC proc near
mov	ax, 55h	; 'U'
call	sub_E00E
mov	al, ds:0CEEBh

loc_C305:
push	word ptr ds:0DBDAh
call	sub_DF5E
cbw
call	sub_C335
shl	ax, 1
add	al, 1Ch
call	sub_E0FF
pop	word ptr ds:0DBDAh
retn
sub_C2FC endp




sub_C31C proc near
mov	al, ds:28E7h
add	al, 8
jmp	short loc_C305
sub_C31C endp




sub_C323 proc near
sub	dx, ds:2886h
sub	bx, ds:2888h
retn
sub_C323 endp




sub_C32C proc near
add	dx, ds:2886h
add	bx, ds:2888h
retn
sub_C32C endp




sub_C335 proc near
push	ax
mov	dx, ds:28C7h
mov	bx, 28DCh
xlat
mov	bl, 7
mul	bl
mov	bx, ax
add	bx, ds:28C9h
call	sub_C32C
pop	ax
retn
sub_C335 endp




sub_C34D proc near
test	word ptr ds:0DBC8h, 8
jz	short loc_C35B
mov	si, 28A6h
call	sub_C36C

loc_C35B:
test	word ptr ds:0DBC8h, 800h
jz	short locret_C395
mov	si, 28AEh
call	sub_C36C
mov	si, 28B6h
sub_C34D endp




sub_C36C proc near
push	word ptr ds:0DBDAh
call	sub_DF5E
mov	ax, 55h	; 'U'
call	sub_E00E
lodsb
aam
mov	al, ah
xor	ah, ah
add	al, 3
mov	byte ptr [si], 1
inc	si
mov	dx, [si]
mov	bx, [si+2]
call	sub_C32C
call	sub_E0FF
pop	word ptr ds:0DBDAh

locret_C395:
retn
sub_C36C endp




sub_C396 proc near
call	sub_CCFF
jz	short loc_C3AE
mov	si, 288Eh
call	sub_C3D2
test	word ptr ds:0DBC8h, 4
jnz	short loc_C3AE
mov	byte ptr ds:288Fh, 0

loc_C3AE:
call	sub_CCF8
jz	short locret_C410
mov	si, 2896h
call	sub_C3D2
mov	si, 289Eh
call	sub_C3D2
test	word ptr ds:0DBC8h, 400h
jnz	short locret_C410
mov	byte ptr ds:2897h, 0
mov	byte ptr ds:289Fh, 0
retn
sub_C396 endp




sub_C3D2 proc near
push	word ptr ds:0DBDAh
call	sub_DF5E
push	si
mov	ax, 55h	; 'U'
call	sub_E00E
mov	dx, [si+2]
mov	bx, 22h	; '"'
call	sub_C32C
mov	ax, 1
call	sub_E1CD
pop	si
lodsb
mov	byte ptr [si], 1
not	ax
shr	al, 1
shr	al, 1
cbw
add	ax, bx
mov	bx, ax
sub	ax, ds:2888h
mov	[si+3],	ax
mov	ax, 2
call	sub_E0FF
pop	word ptr ds:0DBDAh

locret_C410:
retn
sub_C3D2 endp

mov	al, ds:28E7h
mov	ds:28E8h, al
call	sub_F973
call	sub_F82B
mov	si, 2886h
jmp	sub_E3C0

loc_C423:
call	sub_CCFF
jz	short locret_C410
mov	ax, 4
mov	bx, 5
call	sub_C78C
call	sub_C70F
call	sub_CCB0
mov	byte ptr ds:0DC2Bh, 1
mov	si, 3811h
call	dword ptr ds:3991h
jmp	sub_CA79
mov	di, 2886h
call	sub_F5CE
jb	short loc_C451
jmp	sub_F1B2

loc_C451:
call	sub_C323
mov	di, 28BFh
call	sub_F5CE
jb	short loc_C423
mov	di, 28C7h
call	sub_F5CE
jb	short loc_C480



sub_C464 proc near
call	sub_C542
jnb	short loc_C46F
mov	byte ptr ds:28BEh, 1
retn

loc_C46F:
call	sub_C56F
jnb	short loc_C47A
mov	byte ptr ds:28BEh, 2
retn

loc_C47A:
mov	byte ptr ds:28BEh, 0
retn
sub_C464 endp


loc_C480:
sub	bx, [di+2]
mov	ax, bx
mov	bl, 7
div	bl
mov	bx, 28CFh
xlat
cmp	al, 7
jb	short loc_C49A
jz	short locret_C4AE
sub	al, 8
mov	ds:28E7h, al
jmp	short loc_C4AB

loc_C49A:
cmp	al, ds:0CEEBh
jz	short locret_C4AE
and	byte ptr ds:28E7h, 0FDh
mov	ds:0CEEBh, al
call	loc_EEB4

loc_C4AB:
jmp	loc_C2C9

locret_C4AE:
retn
call	sub_C323
sub	bx, cx
call	sub_C464
cmp	byte ptr ds:28BEh, 1
jz	short loc_C4EA
cmp	byte ptr ds:28BEh, 2
jnz	short locret_C4E9
cmp	ax, 6
jnb	short loc_C4CC
neg	cx

loc_C4CC:
cmp	bp, 5
jb	short loc_C4D3
neg	di

loc_C4D3:
mov	al, 0Ah
add	cx, di
jns	short loc_C4DB
neg	al

loc_C4DB:
add	al, [si]
cmp	al, 0F1h ; '�'
jnb	short locret_C4E9
mov	[si], al
push	word ptr [si+6]
jmp	sub_C36C

locret_C4E9:
retn

loc_C4EA:
jcxz	short locret_C4E9
mov	ax, [si+4]
add	ax, cx
sub	ax, 22h	; '"'
cmp	ax, 40h	; '@'
jnb	short locret_C4E9
shl	ax, 1
shl	ax, 1
not	ax
mov	[si], al
push	word ptr [si+6]
jmp	sub_C3D2



sub_C507 proc near
test	word ptr ds:0DBC8h, 4
jnz	short loc_C514
mov	byte ptr ds:288Eh, 0FFh

loc_C514:
mov	al, ds:288Eh
mov	ah, ds:28A6h
call	dword ptr ds:39A5h
retn
sub_C507 endp




sub_C520 proc near
test	word ptr ds:0DBC8h, 400h
jnz	short loc_C530
mov	al, 0FFh
mov	ds:2896h, al
mov	ds:289Eh, al

loc_C530:
mov	ah, ds:28AEh
mov	al, ds:2896h
cmp	al, 4
jnb	short loc_C53D
mov	al, 4

loc_C53D:
call	dword ptr ds:3985h
retn
sub_C520 endp




sub_C542 proc near
mov	si, 288Eh
call	sub_C555
jb	short locret_C56E
mov	si, 2896h
call	sub_C555
jb	short locret_C56E
mov	si, 289Eh
sub_C542 endp




sub_C555 proc near
cmp	byte ptr [si+1], 1
cmc
jnb	short locret_C56E
mov	ax, dx
sub	ax, [si+2]
mov	bp, bx
sub	bp, [si+4]
cmp	ax, 16h
jnb	short locret_C56E
cmp	bp, 5

locret_C56E:
retn
sub_C555 endp




sub_C56F proc near
mov	si, 28A6h
call	sub_C582
jb	short locret_C59B
mov	si, 28AEh
call	sub_C582
jb	short locret_C59B
mov	si, 28B6h
sub_C56F endp




sub_C582 proc near
cmp	byte ptr [si+1], 1
cmc
jnb	short locret_C59B
mov	ax, dx
sub	ax, [si+2]
mov	bp, bx
sub	bp, [si+4]
cmp	ax, 0Dh
jnb	short locret_C59B
cmp	bp, 0Bh

locret_C59B:
retn
sub_C582 endp




sub_C59C proc near
cmp	bx, 0FFFFh
jnz	short loc_C5B6
mov	ax, 0FFFh
xor	byte ptr cs:loc_C5A1+2,	10h
mov	bx, ds:22A6h
call	sub_C78C
call	sub_C675
jmp	short loc_C610

loc_C5B6:
push	bx
cmp	bl, 0Eh
jb	short loc_C5BE
mov	bl, 0Eh

loc_C5BE:
and	ah, 0F3h
cmp	byte ptr ds:47DCh, 0
jz	short loc_C5D1
sub	ax, ds:0D814h
add	ax, 3E7h
jmp	short loc_C5E0

loc_C5D1:
cmp	byte ptr ds:227Dh, 0
jnz	short loc_C5E0
shl	bx, 1
sub	ax, [bx-280Ch]
shr	bx, 1

loc_C5E0:
cmp	bl, 0Eh
jnz	short loc_C5F7
mov	cx, ax
and	cl, 0FEh
cmp	cl, 2Ch	; ','
jnz	short loc_C5F7
pop	cx
mov	cl, 0Ch
mov	ds:47C4h, cx
push	cx

loc_C5F7:
call	sub_C78C
call	sub_C675
pop	ax
call	sub_AFF3
shl	ax, 1
shl	ax, 1
shl	ax, 1
add	ax, 27FAh
mov	si, ax
mov	ds:0DC28h, si

loc_C610:
mov	byte ptr ds:0DC2Ah, 0FFh
call	sub_C70F
jb	short loc_C624
xor	byte ptr ds:37E2h, 6
call	sub_C70F
jnb	short locret_C62B

loc_C624:
call	sub_CCB0
call	sub_F4E7
stc

locret_C62B:
retn
sub_C59C endp

; START	OF FUNCTION CHUNK FOR sub_BDCD

loc_C62C:
call	sub_B067
mov	bp, 0
mov	si, 0A7C2h
call	sub_F8F5
mov	byte ptr ds:0DC2Bh, 1
mov	si, 3811h
call	dword ptr ds:3991h
mov	ax, ds:0CE7Ah
mov	ds:0DC2Ch, ax
mov	word ptr ds:0DC2Eh, 8000h
call	sub_C6E4
jnb	short locret_C658
call	sub_C6FE

locret_C658:
retn
; END OF FUNCTION CHUNK	FOR sub_BDCD
; START	OF FUNCTION CHUNK FOR sub_C692

loc_C659:
xor	ax, ax
xchg	ax, ds:0DC30h
or	ax, ax
jz	short sub_C675
push	ax
call	sub_C675
pop	ax
add	ax, ds:0D810h
mov	bl, 0Eh
call	sub_C59C
jnb	short locret_C658
jmp	short loc_C62C
; END OF FUNCTION CHUNK	FOR sub_C692



sub_C675 proc near
mov	si, 0A7C2h
call	sub_F92F
mov	word ptr ds:0DC26h, 0
call	sub_F4ED
call	sub_CA9C
jz	short locret_C658
call	sub_CA96
call	sub_C871
jmp	sub_CCBD
sub_C675 endp




sub_C692 proc near

; FUNCTION CHUNK AT A789 SIZE 0000001C BYTES

call	sub_CA9C
jz	short locret_C658
cmp	word ptr ds:0DC26h, 0
jnz	short loc_C6A5
call	sub_C8B7
jnz	short loc_C659
jmp	short loc_C6E1

loc_C6A5:
mov	dx, ds:0CE7Ah
xor	di, di
mov	bx, ds:0DC2Ch
mov	bp, ds:0DC2Eh
mov	cx, ds:2882h
mov	si, ds:2884h
add	bp, si
adc	bx, cx
sub	dx, bx
js	short loc_C6E1

loc_C6C3:
push	di
call	sub_C6E4
pop	di
jnb	short loc_C659
sub	di, si
sbb	dx, cx
jb	short loc_C6D6
add	bp, si
adc	bx, cx
jmp	short loc_C6C3

loc_C6D6:
mov	ds:0DC2Ch, bx
mov	ds:0DC2Eh, bp
call	sub_C6FE

loc_C6E1:
jmp	sub_C889
sub_C692 endp




sub_C6E4 proc near
mov	di, ds:0DC26h
or	di, di
jz	short locret_C6FD
mov	es, word ptr ds:3813h
mov	al, es:[di]
cmp	al, 0FFh
jnb	short locret_C6FD
inc	di
mov	ds:0DC26h, di
stc

locret_C6FD:
retn
sub_C6E4 endp




sub_C6FE proc near

; FUNCTION CHUNK AT 9DE3 SIZE 000000F2 BYTES

cmp	al, ds:0DC2Ah
jz	short locret_C70E
mov	ds:0DC2Ah, al
mov	si, ds:0DC28h
jmp	loc_BCB3

locret_C70E:
retn
sub_C6FE endp




sub_C70F proc near
mov	word ptr ds:0DC26h, 0
call	sub_CCFF
jz	short locret_C74D
call	sub_CAE4
call	sub_C7DB
cmc
jnb	short locret_C74D
les	di, ds:3811h
add	di, 1Ah
cmp	byte ptr es:[di], 5
jnz	short loc_C741
mov	cx, es:[di+1]
add	di, 4
mov	ax, di
add	ax, 2
mov	ds:0DC26h, ax
add	di, cx

loc_C741:
mov	ds:3811h, di
sub	ds:3815h, di
call	sub_C889
stc

locret_C74D:
retn
sub_C70F endp




sub_C74E proc near
pushf
sti
call	sub_CCFF
jz	short loc_C77F
call	sub_CAE4
mov	al, 0Bh
call	sub_CAB9
mov	si, 3811h
call	dword ptr ds:3991h
push	word ptr ds:0CE7Ah

loc_C768:
call	sub_C8B7
jz	short loc_C768
mov	ax, ds:0CE7Ah
pop	bx
sub	ax, bx
mov	cx, 800h
mul	cx
mov	ds:2882h, dx
mov	ds:2884h, ax

loc_C77F:
popf
retn
sub_C74E endp




sub_C781 proc near
and	al, 0Fh
add	al, 30h	; '0'
cmp	al, 39h	; '9'
jbe	short locret_C78B
add	al, 7

locret_C78B:
retn
sub_C781 endp




sub_C78C proc near
mov	di, 37DBh
push	ds
pop	es
push	ax
mov	al, bl
add	al, 41h	; 'A'
stosb
inc	di
inc	di
stosb
pop	bx
mov	cl, 4
mov	al, bh
call	sub_C781
stosb
mov	al, bl
shr	al, cl
call	sub_C781
stosb
mov	al, bl
call	sub_C781
stosb
mov	al, 4Fh	; 'O'
cmp	byte ptr ds:0EAh, 0
jg	short loc_C7CA
cmp	byte ptr ds:6, 80h ; '�'
jnz	short loc_C7CA
cmp	byte ptr ds:4, 1
jz	short loc_C7CA
mov	al, 49h	; 'I'

loc_C7CA:
stosb
mov	al, 20h	; ' '
shr	bh, cl
or	bh, ds:47E0h
jz	short loc_C7D9
mov	al, bh
add	al, 41h	; 'A'

loc_C7D9:
stosb

locret_C7DA:
retn
sub_C78C endp




sub_C7DB proc near
mov	dx, 37DAh
xor	ax, ax
mov	ds:3811h, ax
mov	ds:3817h, ax
mov	ds:381Fh, ax
mov	ds:3823h, al
call	sub_110CB
jb	short locret_C7DA
mov	ds:3821h, bx
sub	cx, 1
sbb	bp, 0
mov	ds:0DBC4h, cx
mov	ds:0DBC6h, bp
mov	ds:0DBC0h, ax
mov	ds:0DBC2h, dx
mov	si, 3811h
les	dx, [si]
sub_C7DB endp




sub_C80F proc near
push	dx
mov	dx, ds:0DBC0h
mov	cx, ds:0DBC2h
mov	ax, 4200h
int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
			; AL = method: offset from beginning of	file
pop	dx
push	si
push	ds
mov	cx, 2000h
mov	ax, ds:0DBC4h
sub	ds:0DBC4h, cx
sbb	word ptr ds:0DBC6h, 0
jnb	short loc_C834
mov	cx, ax
inc	cx

loc_C834:
push	es
pop	ds
mov	ah, 3Fh
int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
			; BX = file handle, CX = number	of bytes to read
			; DS:DX	-> buffer
pop	ds
pop	si
mov	[si+4],	ax
jb	short locret_C888
add	ds:0DBC0h, ax
adc	word ptr ds:0DBC2h, 0
mov	byte ptr ds:376Ah, 0FFh
mov	byte ptr [si+6], 1
mov	bl, ds:3823h
cmp	bl, 3Fh	; '?'
jnb	short loc_C862
inc	byte ptr ds:3823h
inc	bl

loc_C862:
mov	[si+7],	bl
cmp	word ptr ds:0DBC6h, 0
clc
jns	short locret_C888
or	byte ptr [si+7], 80h
sub_C80F endp




sub_C871 proc near
xor	bx, bx
xchg	bx, ds:3821h
or	bx, bx
jz	short loc_C887
cmp	bx, ds:0DBBAh
jz	short loc_C887
push	ax
mov	ah, 3Eh
int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
			; BX = file handle
pop	ax

loc_C887:
clc

locret_C888:
retn
sub_C871 endp




sub_C889 proc near
call	sub_CA73
jz	short locret_C8B6
mov	si, 3811h
cmp	byte ptr ds:3817h, 0
jz	short loc_C8A2
cmp	byte ptr ds:381Fh, 0
jnz	short locret_C8B6
mov	si, 3819h

loc_C8A2:
mov	bx, ds:3821h
les	dx, [si]
add	dx, 6
push	si
call	sub_C80F
pop	si
jb	short locret_C8B6
call	dword ptr ds:39A1h

locret_C8B6:
retn
sub_C889 endp




sub_C8B7 proc near
cmp	byte ptr ds:3817h, 3
jz	short locret_C8C3
cmp	byte ptr ds:381Fh, 3

locret_C8C3:
retn
sub_C8B7 endp




sub_C8C4 proc near
mov	si, ds:3824h
les	di, [si]
add	di, 6
call	sub_C940
call	dword ptr ds:39A1h
mov	ax, 3811h
xor	ax, 3819h
xor	ds:3824h, ax

locret_C8DE:
retn
sub_C8C4 endp




sub_C8DF proc near
mov	ax, ds:0DC1Ch
inc	ax
jz	short locret_C8DE
mov	byte ptr ds:376Ah, 0FFh
call	sub_CAE4
xor	ax, ax
mov	ds:3811h, ax
mov	ds:3817h, ax
mov	ds:381Fh, ax
mov	si, 3811h
les	di, [si]
call	sub_C940
sub	word ptr ds:3815h, 20h ; ' '
mov	cx, ds:3815h
mov	ds:381Dh, cx
add	cx, 6
mov	si, 1Ah
xor	di, di
rep movs byte ptr es:[di], byte	ptr es:[si]
les	di, ds:3819h
mov	cx, ds:3815h
push	ds
lds	si, ds:3811h
movsw
movsw
movsw
mov	al, 80h	; '�'
rep stosb
pop	ds
mov	si, 3819h
mov	ds:3824h, si
call	dword ptr ds:3991h
mov	si, 3811h
call	dword ptr ds:39A1h
retn
sub_C8DF endp




sub_C940 proc near
push	si
push	ds
mov	si, ds:0DC1Ch
mov	ds, word ptr ds:0DBDEh
lodsw
sub	ax, 4
mov	cx, ax
shr	cx, 1
rep movsw
adc	cl, cl
rep movsb
pop	ds
pop	si
mov	[si+4],	ax
mov	byte ptr [si+6], 1
mov	byte ptr [si+7], 41h ; 'A'
retn
sub_C940 endp




sub_C966 proc near
xor	ax, ax
cmp	ds:4774h, ah
jz	short loc_C977
cmp	byte ptr ds:2Ah, 48h ; 'H'
jnz	short locret_C9E4
jmp	short loc_C9E2

loc_C977:
mov	al, 0Dh
cmp	ds:46D9h, ah
jnz	short locret_C9E4
mov	al, 1
cmp	ds:0DD03h, ah
jnz	short locret_C9E4
inc	ax
cmp	ds:0FBh, ah
js	short locret_C9E4
inc	ax
cmp	ds:0C6h, ah
jnz	short locret_C9E4
inc	ax
cmp	ds:0EAh, ah
jg	short locret_C9E4
inc	ax
mov	dx, ds:4
mov	bx, ds:6
cmp	bl, 80h	; '�'
jnz	short loc_C9AF
cmp	dl, 1
jnz	short loc_C9BF

loc_C9AF:
mov	bl, ds:11C9h
and	bl, 3
jz	short locret_C9E4
inc	ax
dec	bl
jz	short locret_C9E4
inc	ax
retn

loc_C9BF:
cmp	dh, 20h	; ' '
jnb	short loc_C9D8
mov	al, 9
cmp	dh, 7
sbb	al, 0
cmp	byte ptr ds:2Ah, 48h ; 'H'
jb	short locret_C9E4
shr	bl, 1
jb	short locret_C9E4
jmp	short loc_C9E2

loc_C9D8:
mov	al, 0Ch
jnz	short locret_C9E4
dec	ax
cmp	dl, 3
jnz	short locret_C9E4

loc_C9E2:
mov	al, 0Ah

locret_C9E4:
retn
sub_C966 endp




sub_C9E5 proc near
call	sub_CA9C
jnz	short locret_CA14
call	sub_CCFF
jz	short locret_CA14
push	es
call	sub_10140
cmp	al, ds:376Ah
jz	short loc_CA05
call	sub_CAE4
or	al, al
jz	short loc_CA10
call	sub_CAB9
jmp	short loc_CA09

loc_CA05:
les	di, ds:3811h

loc_CA09:
mov	si, 3811h
call	dword ptr ds:3991h

loc_CA10:
call	sub_10153
pop	es

locret_CA14:
retn
sub_C9E5 endp




sub_CA15 proc near
call	sub_CCFF
jz	short locret_CA14
push	ax
call	sub_CCB0
pop	ax
sub_CA15 endp




sub_CA1F proc near
mov	byte ptr ds:47E0h, 0
mov	bx, 19h
call	sub_C78C
mov	byte ptr ds:37E2h, 49h ; 'I'
call	sub_CA9C
jnz	short locret_CA14
call	sub_CCFF
jz	short locret_CA14
push	es
call	sub_10140
call	sub_CAE4
call	sub_C7DB
jb	short loc_CA5D
add	word ptr ds:3811h, 1Ah
call	sub_C889
mov	si, 0AB92h
mov	bp, 1
call	sub_F8F5
mov	si, 3811h
call	dword ptr ds:3991h

loc_CA5D:
call	sub_10153
pop	es
retn
sub_CA1F endp ;	sp =  2




sub_CA62 proc near
call	sub_C889
call	sub_CA73
jnz	short locret_CA14
call	sub_CCBD
mov	si, 0AB92h
jmp	sub_F92F
sub_CA62 endp




sub_CA73 proc near
cmp	word ptr ds:3821h, 0
retn
sub_CA73 endp




sub_CA79 proc near
call	sub_CCFF
jz	short locret_CA14
mov	bx, ds:0CE7Ah

loc_CA82:
push	bx
call	sub_CA62
call	sub_CA73
pop	bx
jz	short sub_CA96
mov	ax, ds:0CE7Ah
sub	ax, bx
cmp	ax, 3E8h
jb	short loc_CA82
sub_CA79 endp




sub_CA96 proc near
mov	byte ptr ds:0DC2Bh, 0
retn
sub_CA96 endp




sub_CA9C proc near
cmp	byte ptr ds:0DC2Bh, 0
retn
sub_CA9C endp

; START	OF FUNCTION CHUNK FOR sub_CAA5

loc_CAA2:
call	sub_C692
; END OF FUNCTION CHUNK	FOR sub_CAA5



sub_CAA5 proc near

; FUNCTION CHUNK AT ABD2 SIZE 00000003 BYTES

call	sub_CA9C
jnz	short loc_CAA2
retn
sub_CAA5 endp




sub_CAAB proc near
call	sub_CD96
jb	short locret_CAE3
call	sub_CCFF
stc
jz	short locret_CAE3
call	sub_C871
sub_CAAB endp




sub_CAB9 proc near
mov	word ptr ds:3811h, 0
les	di, ds:3811h
add	word ptr ds:3811h, 1Ah
xor	ah, ah
mov	si, ax
add	si, 0AEh ; '�'
mov	ds:376Ah, al
call	sub_10F89
sub	cx, 1Ah
mov	ds:3815h, cx
mov	word ptr ds:3817h, 8101h

locret_CAE3:
retn
sub_CAB9 endp




sub_CAE4 proc near
push	ax
push	bx
push	cx
push	si
push	di
push	bp
push	es
mov	si, 0AB92h
call	sub_F92F
call	sub_C871
call	dword ptr ds:3995h
pop	es
pop	bp
pop	di
pop	si
pop	cx
pop	bx
pop	ax
retn
sub_CAE4 endp




sub_CB00 proc near
call	dword ptr ds:3999h
retn
sub_CB00 endp

call	dword ptr ds:399Dh
retn



sub_CB0A proc near
mov	bp, 201Ah
or	byte ptr [bp+3], 40h
or	byte ptr [bp+7], 40h
or	byte ptr [bp+0Bh], 40h
mov	cl, 0FFh
call	sub_CCF8
jz	short locret_CB3D
and	byte ptr [bp+3], 0BFh
and	byte ptr [bp+7], 0BFh
and	byte ptr [bp+0Bh], 0BFh
xor	cx, cx
test	byte ptr ds:2943h, 10h
jnz	short locret_CB3D
mov	cl, ds:3810h
and	cl, 1
inc	cx

locret_CB3D:
retn
sub_CB0A endp

and	byte ptr ds:2943h, 0EFh
mov	byte ptr ds:3810h, 0
call	sub_F1B2
jmp	sub_CC2E
mov	bp, 206Ah
mov	bx, 0D917h
mov	cl, ds:3810h
and	cx, 2
shr	cl, 1
jmp	loc_F1FF
or	byte ptr ds:3810h, 3
jmp	short loc_CB7E
or	byte ptr ds:3810h, 1
and	byte ptr ds:3810h, 0FDh
push	ds
pop	es
mov	si, 3804h
mov	di, 37FAh
mov	cx, 9
rep movsb

loc_CB7E:
call	sub_CD87
call	loc_F1CD
call	sub_F1B2
and	byte ptr ds:2943h, 0EFh
jmp	short loc_CBF1
db 90h



sub_CB8F proc near
mov	bp, 37FAh
mov	cx, 12h

loc_CB95:
mov	bx, 8
call	sub_102AF
mov	si, ax
mov	ax, ds:0CE7Ah
xor	ax, cx
add	ds:0D828h, ax
call	sub_102AF
mov	di, ax
mov	al, [bp+si]
xchg	al, [bp+di]
mov	[bp+si], al
loop	loc_CB95
mov	si, bp
retn
sub_CB8F endp




sub_CBB6 proc near
call	sub_CA9C
jnz	short locret_CC06
test	byte ptr ds:3810h, 1
jz	short loc_CC07
cmp	byte ptr ds:227Dh, 0
jnz	short locret_CC06
cmp	byte ptr ds:0DBCDh, 0
js	short locret_CC06
mov	ax, ds:0DBD2h
or	ax, ax
jnz	short loc_CBDD
mov	ax, ds:0CE7Ah
mov	ds:0DBD2h, ax

loc_CBDD:
sub	ax, ds:0CE7Ah
neg	ax
cmp	ax, 0C8h ; '�'
jb	short locret_CC06

loc_CBE8:
mov	si, ds:380Eh
lodsb
or	al, al
jns	short loc_CC00

loc_CBF1:
mov	si, 37FAh
lodsb
test	byte ptr ds:3810h, 2
jz	short loc_CC00
call	sub_CB8F
lodsb

loc_CC00:
mov	ds:380Eh, si
jmp	short loc_CC65

locret_CC06:
retn

loc_CC07:
call	sub_CD96
jb	short locret_CC06
cmp	byte ptr ds:0DBCDh, 0
js	short locret_CC06
sub_CBB6 endp




sub_CC13 proc near
mov	al, ds:0DBCCh
mov	byte ptr ds:0DBCBh, 0
or	al, al
jnz	short loc_CC65
retn
sub_CC13 endp




sub_CC20 proc near
call	sub_CD87
mov	al, 3
jmp	short loc_CC65
sub_CC20 endp




sub_CC27 proc near
call	sub_CD87
mov	al, 6
jmp	short loc_CC65
sub_CC27 endp




sub_CC2E proc near
call	sub_CD96
jb	short locret_CC44
call	sub_C966
cmp	byte ptr ds:3810h, 0
jz	short loc_CC45
cmp	byte ptr ds:0DBCDh, 0
jns	short loc_CBE8

locret_CC44:
retn

loc_CC45:
mov	bx, 375Ch
xlat
or	al, al
jz	short locret_CC8D
or	al, al
js	short loc_CC59
mov	ds:0DBCCh, al
call	dword ptr ds:3979h
retn

loc_CC59:
and	al, 3Fh
mov	ds:0DBCCh, al
cmp	al, ds:0DBCBh
jnz	short sub_CC8E
retn

loc_CC65:
xor	ah, ah
call	sub_CD96
jb	short locret_CC8D
cmp	al, ds:0DBCBh
jz	short locret_CC8D
call	sub_CD32
mov	ds:0DBCBh, al
les	si, ds:0DBB6h
mov	al, ds:3810h
and	al, 1
call	dword ptr ds:3971h
mov	ds:0DBCDh, al
xor	ax, ax
mov	ds:0DBD2h, ax

locret_CC8D:
retn
sub_CC2E endp




sub_CC8E proc near
call	sub_CD96
jb	short locret_CC8D
test	byte ptr ds:3810h, 1
jnz	short locret_CC8D
test	byte ptr ds:0DBCDh, 40h
jnz	short locret_CC8D
push	bx
mov	ax, 12Ch
xor	bx, bx
call	dword ptr ds:397Dh
mov	ds:0DBCDh, al
pop	bx
retn
sub_CC8E endp




sub_CCB0 proc near
mov	ax, 64h	; 'd'
mov	bl, ds:289Eh
mov	bh, ds:28B6h
jmp	short loc_CCC8
sub_CCB0 endp




sub_CCBD proc near
mov	ax, 190h
mov	bl, ds:2896h
mov	bh, ds:28AEh

loc_CCC8:
cmp	bl, 4
jnb	short loc_CCCF
mov	bl, 4

loc_CCCF:
call	dword ptr ds:397Dh
retn
sub_CCBD endp




sub_CCD4 proc near
call	sub_CD96
jb	short locret_CC8D
test	byte ptr ds:3810h, 1
jnz	short locret_CC8D
cmp	byte ptr ds:0DBCDh, 0
jns	short loc_CCEE
test	byte ptr ds:0DBCDh, 40h
jz	short locret_CC8D

loc_CCEE:
call	sub_10140
call	sub_CC13
call	sub_10153
retn
sub_CCD4 endp




sub_CCF8 proc near
test	word ptr ds:0DBC8h, 100h
retn
sub_CCF8 endp




sub_CCFF proc near
push	ax
push	ds
mov	ax, seg	seg001
mov	ds, ax
assume ds:seg001
test	word ptr ds:0DBC8h, 1
pop	ds
assume ds:nothing
pop	ax

locret_CD0E:
retn
sub_CCFF endp




sub_CD0F proc near
call	sub_CCF8
jz	short locret_CD0E
mov	di, 0DBB6h
mov	ax, [di]
or	ax, [di+2]
jnz	short locret_CD0E
mov	cx, 9C40h
jmp	sub_10FC6
sub_CD0F endp




sub_CD24 proc near
call	sub_CCFF
jz	short locret_CD0E
mov	di, 3811h
mov	cx, 4E20h
jmp	sub_10FC6
sub_CD24 endp




sub_CD32 proc near
cmp	al, ds:0DBCAh
jz	short locret_CD54
call	sub_CD87
mov	ds:0DBCAh, al
push	ax
add	ax, 0A4h ; '�'
mov	si, ax
les	di, ds:0DBB6h
mov	ax, es
cmp	ax, ds:0CE68h
jnb	short loc_CD55
call	sub_10F89
pop	ax

locret_CD54:
retn

loc_CD55:
push	word ptr ds:2784h
push	si
mov	cx, 2AFh
call	sub_10FEC
pop	si
inc	byte ptr ds:0CE71h
call	sub_10F89
dec	byte ptr ds:0CE71h
push	ds
push	di
push	es
les	di, ds:0DBB6h
pop	ds
pop	si
call	sub_112D3
pop	ds
pop	ax
call	sub_E00E
pop	ax
retn
sub_CD32 endp

or	byte ptr ds:2943h, 10h
call	sub_F1B2



sub_CD87 proc near
push	ax
mov	byte ptr ds:0DBCBh, 0
call	dword ptr ds:3975h
mov	ds:0DBCDh, al
pop	ax
retn
sub_CD87 endp




sub_CD96 proc near
test	byte ptr ds:2943h, 10h
jnz	short loc_CDA4
call	sub_CCF8
jz	short loc_CDA4
clc
retn

loc_CDA4:
stc
retn
sub_CD96 endp

cmp	byte ptr ds:11C9h, 0
jz	short loc_CDAE
retn

loc_CDAE:
call	sub_378A
call	sub_36EE
call	sub_F973
mov	byte ptr ds:0C6h, 1
call	sub_D189
call	sub_F82B
call	sub_CC2E
mov	al, 34h	; '4'
mov	bp, 0AF26h
call	sub_DFD8
jmp	sub_CCD4



sub_CDD0 proc near
mov	bh, 4

loc_CDD2:
mov	bl, 1Ch
call	sub_D017
mov	ax, 4000h
jz	short loc_CDDE
xor	ah, ah

loc_CDDE:
xor	cx, cx
mov	cl, bh
mov	si, 2034h
add	si, cx
and	word ptr [si], 0BFFFh
or	[si], ax
add	bh, 4
cmp	bh, 0Ch
jbe	short loc_CDD2
retn
sub_CDD0 endp

call	sub_F67D
mov	si, 1E1Ah
call	sub_F5FB
call	sub_CDD0
mov	word ptr ds:2406h, 0
mov	bp, 2032h
mov	bx, 0D917h
xor	cx, cx
call	loc_F20A
or	byte ptr ds:0C6h, 2
call	sub_E302
mov	al, 32h	; '2'
call	sub_E1C2
mov	byte ptr ds:1C30h, 0
jmp	sub_3667
mov	bx, 0
mov	bp, 0
jmp	short loc_CE46
mov	bx, 41Ch
mov	bp, 4
jmp	short loc_CE46
mov	bx, 81Ch
mov	bp, 8
jmp	short loc_CE46
mov	bx, 0C1Ch
mov	bp, 0Ch

loc_CE46:
push	bp
test	byte ptr ds:0C6h, 2
jnz	short loc_CE56
push	bx
call	sub_290E
call	sub_CEF4
pop	bx

loc_CE56:
call	sub_D017
pop	bp
jz	short locret_CE96
mov	ds:2406h, bx
mov	ax, 0A8h ; '�'
test	byte ptr ds:0C6h, 2
jz	short loc_CE6D
add	ax, 2

loc_CE6D:
mov	ds:11BFh, ax
mov	si, 2034h
mov	cx, 4
push	si

loc_CE77:
and	word ptr [si], 7FFFh
add	si, 4
loop	loc_CE77
pop	si
or	word ptr [bp+si], 8000h
mov	cx, 1
mov	dx, 2
test	byte ptr ds:0C6h, 2
jz	short loc_CEB6
xor	dx, dx
jmp	short loc_CEB6

locret_CE96:
retn
test	byte ptr ds:0C6h, 2
jnz	short locret_CE96
test	byte ptr ds:0C6h, 4
jz	short loc_CEB0
add	word ptr ds:11BFh, 2
call	sub_290E
call	sub_CC2E

loc_CEB0:
mov	cx, 1
mov	dx, 0FFFEh

loc_CEB6:
mov	bx, ds:2406h
mov	si, ds:11BFh
call	loc_D020
jz	short loc_CED6
mov	ds:11BFh, di
call	sub_D07F
mov	bp, 0B039h
call	sub_CEFC
call	sub_B7D1
jmp	sub_F267

loc_CED6:
or	dx, dx
js	short sub_CEF4
test	byte ptr ds:0C6h, 4
jnz	short locret_CE96
or	byte ptr ds:0C6h, 4
call	sub_28C5
xor	dx, dx
call	sub_D07F
mov	bp, 1797h
jmp	short sub_CEFC
;align 2



sub_CEF4 proc near
mov	dh, 0FFh
call	sub_D07F
mov	bp, 0AF43h
sub_CEF4 endp




sub_CEFC proc near
call	sub_CAE4
mov	al, 2
call	sub_C9E5
mov	al, 0Eh
jmp	sub_DFD8
sub_CEFC endp




sub_CF09 proc near
and	byte ptr ds:0C6h, 0F9h
mov	si, 0A6B0h
mov	ds:47BCh, si
push	si
mov	si, ds:11BFh
mov	si, cs:[si]
mov	ax, si
call	sub_D124
shr	ah, 1
shr	ah, 1
shr	ah, 1
mov	al, ah
xor	ah, ah
add	ax, 0F3h ; '�'
call	sub_CFF6
and	si, 7FFh
shl	si, 1
shl	si, 1
add	si, 0AA7Ah
mov	ds:477Ch, si
lodsw
pop	si
push	ax
xchg	al, ah
and	ah, 3
or	ah, 8
call	sub_CFF6
mov	di, ds:47BCh
mov	byte ptr [di-1], 0FFh
call	loc_A7B1
mov	si, 2408h
call	sub_E421
call	sub_3667
mov	ax, ds:0D82Eh
mov	bx, 8Ch	; '�'
sub	bx, ax
shr	bx, 1
add	bx, ax
cmp	bx, 8Ah	; '�'
jnb	short loc_CF85
mov	dx, 93h	; '�'
mov	ax, 32h	; '2'
call	sub_E00E
mov	ax, 4
call	sub_E0FF

loc_CF85:
pop	ax
cmp	word ptr ds:11BFh, 0AAh	; '�'
jz	short loc_CFA4
and	ax, 0Ch
shr	ax, 1
shr	ax, 1
add	ax, 103h
mov	bx, 8Bh	; '�'
mov	dx, 0FAh ; '�'
mov	cx, 64h	; 'd'
call	sub_F064

loc_CFA4:
mov	bx, 3
mov	dx, 132h
call	sub_EF1E
mov	word ptr ds:0DBE4h, 53h	; 'S'
mov	ax, ds:11BFh
sub	ax, 0AAh ; '�'
shr	ax, 1
inc	ax
aam
add	ax, 3030h
xchg	al, ah
cmp	al, 30h	; '0'
jnz	short loc_CFC9
mov	al, 20h	; ' '

loc_CFC9:
push	ax
call	sub_EFFF
pop	ax
mov	al, ah
call	sub_EFFF
mov	byte ptr ds:1C30h, 0
mov	ax, ds:243Eh
or	ax, ax
jz	short locret_CFF5
mov	byte ptr ds:1C30h, 80h ; '�'
mov	si, 2412h
add	ax, 0FFF5h
mov	[si], ax
mov	[si+6],	ax
mov	[si+0Ch], ax
call	sub_E0EB

locret_CFF5:
retn
sub_CF09 endp




sub_CFF6 proc near
push	si
mov	si, ax
call	sub_EE40
mov	di, ds:47BCh
push	di
call	sub_A7C1
pop	di
cmp	byte ptr [si], 20h ; ' '
jz	short loc_D011
call	sub_A814
dec	di
mov	al, 20h	; ' '
stosb

loc_D011:
mov	ds:47BCh, di
pop	si
retn
sub_CFF6 endp




sub_D017 proc near
mov	si, 0A8h ; '�'
mov	dx, 2
mov	cx, 1

loc_D020:
xor	di, di

loc_D022:
add	si, dx
or	dx, 2
mov	bp, cs:[si]
and	bp, 7FFh
jz	short loc_D047
shl	bp, 1
shl	bp, 1
add	bp, 0AA78h
mov	al, [bp+2]
and	al, bl
jz	short loc_D043
cmp	al, bh
jnz	short loc_D022

loc_D043:
mov	di, si
loop	loc_D022

loc_D047:
or	di, di
retn
sub_D017 endp




sub_D04A proc near
mov	al, ds:0C6h
push	ax
or	al, 80h
mov	ds:0C6h, al
call	sub_B585
pop	ax
mov	ds:0C6h, al
retn
sub_D04A endp

call	sub_CC8E
mov	byte ptr ds:2788h, 0
mov	byte ptr ds:0C6h, 0
mov	byte ptr ds:1C30h, 0
call	sub_E8D1
call	sub_290E
call	sub_B7D1
mov	ax, 26h	; '&'
call	sub_E00E
jmp	loc_3747



sub_D07F proc near
push	dx
call	sub_DF5E
call	sub_E007
mov	ax, 0Bh
or	dx, dx
js	short loc_D08E
dec	ax

loc_D08E:
mov	bx, 9Eh	; '�'
mov	dx, 1Bh
push	ax
call	sub_E1CD
mov	ax, 0Ah
call	sub_10257
pop	ax
inc	ax
cmp	ax, 0Bh
jz	short loc_D0A8
sub	ax, 2

loc_D0A8:
call	sub_E0FF
mov	ax, 0Ah
call	sub_10257
mov	si, 1AF4h
mov	cx, 1
call	sub_F0C2
pop	dx
jmp	sub_DF4C
sub_D07F endp

call	dword ptr ds:3959h
call	sub_CD87
mov	byte ptr ds:0DC2Bh, 1
mov	al, 34h	; '4'
mov	bp, 0B236h
call	sub_DFD8
call	sub_DF5E
mov	byte ptr ds:0CE80h, 0
call	sub_FD1E

loc_D0DD:
call	sub_E8B8
jb	short loc_D0E7
call	sub_EB55
jz	short loc_D0DD

loc_D0E7:
call	sub_E8D1
inc	byte ptr ds:0CE80h
call	sub_CAE4
call	sub_DF4C
call	dword ptr ds:3969h
mov	al, 34h	; '4'
mov	bp, 0B23Fh
call	sub_DFD8
call	sub_E2E2
jmp	sub_CA96
call	sub_DF7D
mov	ax, ds:243Eh
jmp	sub_E8EB
call	sub_DF7D
mov	cx, 12h
mov	si, 1AE6h
call	sub_F0C2
call	sub_F267
call	sub_CF09
jmp	sub_B7D1



sub_D124 proc near
push	ax
push	si
push	ds
pop	es
mov	di, 2426h
mov	cx, 0Ch
repne scasw
mov	ax, 0
jnz	short loc_D13A
mov	ax, 24h	; '$'
sub	ax, cx

loc_D13A:
mov	ds:243Eh, ax
pop	si
pop	ax
retn
sub_D124 endp




sub_D140 proc near
mov	si, 242Ah
mov	di, ds:11BDh
push	cs
pop	es
assume es:seg000
mov	cx, 0Ah
rep movsw
mov	ds:11BDh, di
xor	ax, ax
stosw
mov	byte ptr cs:sub_D140, 0C3h ; '�'
retn
sub_D140 endp

mov	bp, 207Ah
call	sub_D17A
mov	cx, 8000h
mov	si, 207Ch
call	sub_D1DF
jmp	sub_F267
mov	cx, 4000h
mov	si, 208Ch
call	sub_D1DF
mov	bp, 208Ah



sub_D17A proc near
call	sub_D189
mov	bx, 0B2B3h
jmp	sub_F1F3
sub_D17A endp




sub_D183 proc near
dec	byte ptr ds:2788h
jns	short locret_D18D
sub_D183 endp




sub_D189 proc near
inc	byte ptr ds:2788h

locret_D18D:
retn
sub_D189 endp




sub_D18E proc near
mov	byte ptr ds:2788h, 0
retn
sub_D18E endp




sub_D194 proc near
cmp	byte ptr ds:38AFh, 32h ; '2'
ja	short locret_D1DE
mov	ax, [si]

loc_D19D:
call	sub_10140
push	es
and	ax, 0FFFh
mov	si, ax
call	sub_EE40
call	sub_EF0C
call	sub_EF0C
mov	ax, ds:0D816h
push	ax
add	ax, 3
shr	ax, 1
shr	ax, 1
shr	ax, 1
shr	ax, 1
inc	ax
call	sub_101B3
lea	di, [si+3]
mov	si, 117h
call	sub_EE40
pop	ax
and	al, 0Fh
mov	ah, 0Ah
mul	ah
add	si, ax
mov	cx, 0Ah
rep movs byte ptr es:[di], byte	ptr es:[si]
pop	es
assume es:nothing
call	sub_10153

locret_D1DE:
retn
sub_D194 endp




sub_D1DF proc near
mov	di, 38A8h
mov	byte ptr [di+7], 31h ; '1'

loc_D1E6:
mov	dx, di
call	sub_111CC
mov	ax, 3D00h
int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
			; DS:DX	-> ASCIZ filename
			; AL = access mode
			; 0 - read
jb	short loc_D20C
mov	bx, ax
mov	dx, 0D816h
push	cx
mov	cx, 2
mov	ah, 3Fh
int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
			; BX = file handle, CX = number	of bytes to read
			; DS:DX	-> buffer
cmp	ax, cx
pop	cx
jb	short loc_D20C
mov	ah, 3Eh
int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
			; BX = file handle
call	sub_D194
clc

loc_D20C:
sbb	ax, ax
cmp	ch, 80h	; '�'
jnz	short loc_D215
not	ax

loc_D215:
and	ax, cx
and	word ptr [si], 3FFFh
or	[si], ax
add	si, 4
inc	byte ptr [di+7]
cmp	word ptr [si], 0A3h ; '�'
jnz	short loc_D1E6
retn
sub_D1DF endp

mov	bx, ds:2
mov	ds:0D816h, bx
call	sub_FA82
call	loc_D19D
push	cx
call	sub_F35A
pop	cx
call	sub_D259
pushf
mov	ax, 113h
adc	al, 0
mov	cx, 4
call	sub_F35A
mov	ax, 12Ch
call	sub_FC80
popf
jb	short locret_D258
jmp	sub_F1B2

locret_D258:
retn



sub_D259 proc near

; FUNCTION CHUNK AT F27C SIZE 0000001F BYTES

add	cl, 31h	; '1'
mov	ds:38AFh, cl
call	sub_D2F7
mov	ax, ds:2
push	ds
push	es
pop	ds
mov	si, di
xor	di, di
stosw
call	sub_D3BA
pop	ds
mov	dx, 38A8h
call	sub_111CC
xor	di, di
add	cx, 2
jmp	loc_1114C
sub_D259 endp


loc_D280:
cmp	byte ptr ds:46D9h, 0
jz	short loc_D28A
jmp	loc_2D19

loc_D28A:
add	cl, 31h	; '1'
mov	ds:38AFh, cl
mov	cx, 578h
call	sub_10FEC
mov	dx, 38A8h
call	sub_11125
mov	al, ds:0FBh
push	ax
push	ds
push	es
pop	ds
mov	si, di
add	si, cx
dec	si
mov	di, 5779h
sub	cx, 2
std
rep movsb
cld
lea	si, [di+1]
xor	di, di
call	sub_D38B
mov	si, di
call	sub_D343
pop	ds
call	sub_59B9
call	sub_F923
mov	word ptr ds:22A6h, 0FFFFh
call	sub_D18E
pop	ax
mov	ds:0FBh, al
or	al, al
jns	short loc_D2EB
cmp	byte ptr ds:0DD02h, 0
jz	short loc_D2E2
call	sub_D7E5

loc_D2E2:
call	sub_D83B
call	sub_D7BA
jmp	sub_D96E

loc_D2EB:
call	sub_F18D
call	sub_38DF
call	sub_CC8E
jmp	sub_4C81



sub_D2F7 proc near
mov	cx, 578h
call	sub_10FEC
mov	di, 100h
push	di
push	es
push	ds
lds	si, ds:0DCFEh
xor	si, si
mov	cx, 0C5FCh
shr	cx, 1
shr	cx, 1

loc_D310:
mov	ah, 3

loc_D312:
lodsb
shl	al, 1
shl	al, 1
shl	ax, 1
shl	ax, 1
jnb	short loc_D312
mov	al, ah
stosb
loop	loc_D310
push	cs
pop	ds
assume ds:seg000
mov	si, 0AAh ; '�'
mov	cx, 0A2h ; '�'
rep movsb
pop	ds
assume ds:nothing
mov	si, 0AA76h
mov	cx, 11F8h
rep movsb
mov	si, 0
mov	cx, 1261h
rep movsb
pop	es
pop	di
mov	cx, 567Ah
retn
sub_D2F7 endp




sub_D343 proc near
mov	es, word ptr ss:0DD00h
xor	di, di
mov	bx, 0C5FCh
shr	bx, 1
shr	bx, 1

loc_D351:
lodsb
mov	cx, 4
mov	ah, al
ror	ah, 1
ror	ah, 1

loc_D35B:
mov	al, es:[di]
xor	al, ah
and	al, 0CFh
xor	al, ah
stosb
rol	ah, 1
rol	ah, 1
loop	loc_D35B
dec	bx
jnz	short loc_D351
push	cs
pop	es
assume es:seg000
mov	di, 0AAh ; '�'
mov	cx, 0A2h ; '�'
rep movsb
push	ss
pop	es
assume es:seg001
mov	di, 0AA76h
mov	cx, 11F8h
rep movsb
mov	di, 0
mov	cx, 1261h
rep movsb
retn
sub_D343 endp




sub_D38B proc near
lodsw
mov	bl, al
lodsw
mov	cx, ax
sub	cx, 4
push	di

loc_D395:
lodsb
cmp	al, bl
jz	short loc_D3A3
stosb
loop	loc_D395

loc_D39D:
pop	cx
sub	di, cx
xchg	cx, di
retn

loc_D3A3:
lodsb
mov	dx, cx
mov	cl, al
xor	ch, ch
lodsb
rep stosb
mov	cx, dx
sub	cx, 2
jcxz	short loc_D39D
jb	short loc_D39D
loop	loc_D395
jmp	short loc_D39D
sub_D38B endp




sub_D3BA proc near
mov	dl, 0F7h ; '�'
push	di
add	di, 4

loc_D3C0:
xor	dh, dh

loc_D3C2:
lodsb
inc	dh
cmp	al, [si]
jnz	short loc_D3D4
cmp	dh, 0FFh
jz	short loc_D3D4
dec	cx
or	cx, cx
jnz	short loc_D3C2
inc	cx

loc_D3D4:
cmp	al, dl
jz	short loc_D3E2
cmp	dh, 1
jz	short loc_D3EC
cmp	dh, 2
jz	short loc_D3FF

loc_D3E2:
mov	ah, al
mov	al, dl
stosb
mov	al, dh
stosb
mov	al, ah

loc_D3EC:
stosb
loop	loc_D3C0
mov	cx, di
xor	ax, ax
stosw
pop	di
sub	cx, di
mov	es:[di], dx
mov	es:[di+2], cx
retn

loc_D3FF:
stosb
jmp	short loc_D3EC
sub_D3BA endp




sub_D402 proc near
push	dx
call	sub_D45B
pop	dx
mov	al, es:[di]
retn
sub_D402 endp




sub_D40B proc near
push	bx
push	cx
push	dx
push	ax
call	sub_D45B
pop	ax
mov	cx, ax
shr	ax, 1
sub	di, ax
sub	dx, ax
jnb	short loc_D421
add	dx, bp
add	di, bp

loc_D421:
mov	al, es:[di]
mov	[si], al
mov	[si+1],	di
add	si, 3
inc	di
inc	dx
cmp	dx, bp
jb	short loc_D436
sub	dx, bp
sub	di, bp

loc_D436:
loop	loc_D421
pop	dx
pop	cx
pop	bx
retn
sub_D40B endp




sub_D43C proc near
push	cx
mov	si, cx
shr	si, 1
sub	bx, si
cmp	bx, 0FF9Eh
jge	short loc_D44B
mov	bx, 0FF9Eh

loc_D44B:
mov	si, 9E68h

loc_D44E:
push	ax
call	sub_D40B
pop	ax
inc	bx
loop	loc_D44E
mov	si, 9E68h
pop	cx
retn
sub_D43C endp




sub_D45B proc near
call	sub_D470
les	di, ds:0DCFEh
assume es:nothing
add	di, ax
mov	ax, bp
mul	dx
shl	ax, 1
adc	dx, 0
add	di, dx
retn
sub_D45B endp




sub_D470 proc near
push	bx
shl	bx, 1
shl	bx, 1
shl	bx, 1
jns	short loc_D489
neg	bx
mov	ax, [bx+4948h]
neg	ax
mov	bp, [bx+494Ah]
shl	bp, 1
pop	bx
retn

loc_D489:
mov	ax, [bx+4948h]
mov	bp, [bx+494Ah]
shl	bp, 1
pop	bx
retn
sub_D470 endp




sub_D495 proc near
call	sub_D45B
xor	ax, ax
div	bp
mov	dx, ax
retn
sub_D495 endp




sub_D49F proc near
or	ah, ah
jz	short loc_D4C5
js	short loc_D4B6
add	bh, ah
jnb	short loc_D4C5
inc	bl
cmp	bl, 62h	; 'b'
jl	short loc_D4C5
dec	bl
sub	bh, ah
jmp	short loc_D4C5

loc_D4B6:
add	bh, ah
jb	short loc_D4C5
dec	bl
cmp	bl, 9Eh	; '�'
jg	short loc_D4C5
inc	bl
sub	bh, ah

loc_D4C5:
cbw
add	dx, ax
retn
sub_D49F endp




sub_D4C9 proc near
sub	dx, ds:0DCF6h
sub	bx, ds:0DCF8h
xor	cx, cx
test	byte ptr ds:46EBh, 80h
jz	short loc_D4DC
mov	cl, 2

loc_D4DC:
sar	bx, cl
add	bx, ds:197Eh
mov	ax, bx
jns	short loc_D4E8
neg	ax

loc_D4E8:
shl	ax, 1
shl	ax, 1
shl	ax, 1
mov	si, 4948h
add	si, ax
jcxz	short loc_D4FC
sar	dx, cl
add	dx, [si+4]
jmp	short loc_D50E

loc_D4FC:
add	dx, [si+6]
mov	cx, [si+2]
shl	cx, 1
cmp	dx, cx
jb	short loc_D510
js	short loc_D50E
sub	dx, cx
jmp	short loc_D510

loc_D50E:
add	dx, cx

loc_D510:
xor	ax, ax
div	cx
mov	dx, ax
retn
sub_D4C9 endp




sub_D517 proc near
xor	cx, cx
test	byte ptr ds:46EBh, 80h
jz	short loc_D522
mov	cl, 2

loc_D522:
mov	bp, bx
sub	bx, ds:197Eh
shl	bx, cl
add	bx, ds:0DCF8h
shl	bp, 1
shl	bp, 1
shl	bp, 1
jns	short loc_D538
neg	bp

loc_D538:
mov	bp, [bp+494Ah]
add	bp, bp
sub	dx, ds:197Ch
mov	ax, dx
imul	bp
jcxz	short loc_D54E

loc_D548:
shl	ax, 1
rcl	dx, 1
loop	loc_D548

loc_D54E:
add	dx, ds:0DCF6h
retn
sub_D517 endp




sub_D553 proc near
js	short loc_D55B
sub	bp, dx
neg	bp
jmp	short loc_D55F

loc_D55B:
xchg	dx, bp
add	dx, bp

loc_D55F:
mov	cx, bp
neg	cx
cmp	cx, dx
jnb	short locret_D569
mov	dx, bp

locret_D569:
retn
sub_D553 endp




sub_D56A proc near
mov	ax, ds:197Ch
xchg	ax, ds:1980h
mov	ds:197Ch, ax
mov	ax, ds:197Eh
xchg	ax, ds:1982h
mov	ds:197Eh, ax
mov	ax, ds:0DCF6h
xchg	ax, ds:0DCFAh
mov	ds:0DCF6h, ax
mov	ax, ds:0DCF8h
xchg	ax, ds:0DCFCh
mov	ds:0DCF8h, ax
retn
sub_D56A endp




sub_D593 proc near
test	byte ptr ds:46EBh, 80h
jz	short loc_D5E4
push	ds
pop	es
mov	word ptr ds:0DCF6h, 0A0h ; '�'
mov	word ptr ds:0DCF8h, 4Ch	; 'L'
mov	cx, 12h
mov	bx, 4Bh	; 'K'
mov	ax, ds:197Eh
or	ax, ax
mov	dx, ax
jns	short loc_D5B9
neg	ax

loc_D5B9:
cmp	ax, bx
jb	short loc_D5C8
mov	ax, bx
or	dx, dx
jns	short loc_D5C5
neg	ax

loc_D5C5:
mov	ds:197Eh, ax

loc_D5C8:
mov	bp, 4948h
mov	dx, ds:197Ch
mov	ax, ds:197Eh
sub	ax, cx
les	di, ds:0DCFEh
mov	si, 4C60h
mov	bx, ds:0DBDAh
call	dword ptr ds:3929h
retn

loc_D5E4:
mov	di, 4C60h
mov	ax, ds:46E7h
sub	ax, ds:46E3h
mov	dx, ax
shr	dx, 1
add	dx, ds:46E3h
mov	ds:0DCF6h, dx
mov	ds:0DCF2h, ax
mov	ax, ds:46E9h
sub	ax, ds:46E5h
dec	ax
mov	bx, ax
shr	bx, 1
add	bx, ds:46E5h
mov	ds:0DCF8h, bx
inc	ax
mov	ds:0DCF4h, ax
dec	ax
shr	ax, 1
mov	cx, ax
mov	bx, 56h	; 'V'
sub	bx, ax
mov	ax, ds:197Eh
or	ax, ax
mov	dx, ax
jns	short loc_D62A
neg	ax

loc_D62A:
cmp	ax, bx
jb	short loc_D639
mov	ax, bx
or	dx, dx
jns	short loc_D636
neg	ax

loc_D636:
mov	ds:197Eh, ax

loc_D639:
mov	bp, 4948h
mov	dx, ds:197Ch
mov	ax, ds:197Eh
sub	ax, cx
push	ax
mov	cx, ds:0DCF4h
shl	ax, 1
shl	ax, 1
shl	ax, 1
jns	short loc_D66C
neg	ax
add	bp, ax

loc_D656:
push	cx
mov	cx, [bp+0]
mov	bx, [bp+2]
neg	cx
jz	short loc_D675
call	sub_D6A2
sub	bp, 8
pop	cx
loop	loc_D656
jmp	short loc_D67E

loc_D66C:
add	bp, ax

loc_D66E:
push	cx
mov	cx, [bp+0]
mov	bx, [bp+2]

loc_D675:
call	sub_D6A2
add	bp, 8
pop	cx
loop	loc_D66E

loc_D67E:
mov	es, word ptr ds:0DBDAh
mov	di, ds:0DCF2h
mov	cx, ds:0DCF4h
mov	dx, ds:46E3h
mov	bx, ds:46E5h
mov	si, 4C60h
pop	ax
test	byte ptr ds:46EBh, 40h
jnz	short locret_D6A1
call	dword ptr ds:390Dh

locret_D6A1:
retn
sub_D593 endp




sub_D6A2 proc near
push	dx
push	di
push	ds
lds	si, ds:0DCFEh
push	ss
pop	es
assume es:seg001
add	si, cx
add	bx, bx
mov	ax, dx
mul	bx
mov	[bp+6],	dx
mov	ax, dx
mov	dx, ss:0DCF2h
cmp	bx, dx
jnb	short loc_D6CB
mov	cx, dx
sub	cx, bx
shr	cx, 1
add	di, cx
mov	dx, bx

loc_D6CB:
mov	cx, dx
shr	cx, 1
sub	ax, cx
jns	short loc_D6D5
add	ax, bx

loc_D6D5:
mov	cx, dx
sub	bx, ax
sub	cx, bx
jns	short loc_D6E3
add	cx, bx
add	si, ax
jmp	short loc_D6ED

loc_D6E3:
xchg	bx, cx
push	si
add	si, ax
rep movsb
pop	si
xchg	bx, cx

loc_D6ED:
rep movsb
pop	ds
pop	di
pop	dx
add	di, 0C8h ; '�'
retn
sub_D6A2 endp

mov	byte ptr ds:0DD02h, 0
call	sub_D71A
mov	word ptr ds:0DD0Fh, 0
call	sub_D74E
call	sub_3667
call	sub_D811
call	sub_F682
mov	si, 1DC6h
call	sub_F5FB
jmp	sub_CC2E



sub_D71A proc near
call	sub_DF4C
mov	es, word ptr ds:0DBDAh
assume es:nothing
mov	si, 1470h
mov	al, 0F0h ; '�'
call	dword ptr ds:38DDh
sub_D71A endp




sub_D72A proc near
mov	ax, 1
call	sub_E00E
mov	dx, 5Bh	; '['
mov	bx, 14h
mov	ax, 2
call	sub_E0FF
mov	si, 2448h
call	sub_F97A
mov	si, 2440h
mov	di, 0D834h
call	sub_7A69
jmp	sub_D847
sub_D72A endp




sub_D74E proc near
call	sub_7A78
mov	ax, 1
call	sub_E00E
mov	dx, ds:0DD0Fh
xor	bx, bx
xor	ax, ax
call	sub_E1D5
sub	dx, 0D6h ; '�'
neg	dx
mov	ax, 1
call	sub_E1DD
mov	si, 2440h
mov	di, 0D834h
jmp	sub_7A69
sub_D74E endp




sub_D777 proc near
push	ds
pop	es
mov	di, 4C60h
mov	si, 92h	; '�'
call	sub_10F89
mov	dx, ds:197Ch
mov	bx, ds:197Eh
call	sub_D945
mov	ax, 1
call	sub_E00E
jmp	sub_DFC4
sub_D777 endp

call	sub_F18D
call	sub_79AF
call	sub_D777
inc	byte ptr ds:0DD03h
xor	al, al
mov	dx, 0FFFFh
mov	bp, 0B827h
call	sub_DFD8
call	sub_CCD4
mov	ax, 2562h
call	sub_F82E
call	sub_36B6



sub_D7BA proc near
mov	si, 0B9AEh
mov	bp, 1
jmp	sub_F8F5
sub_D7BA endp




sub_D7C3 proc near
call	sub_D71A
mov	bp, 0BE1Dh
call	sub_DF67
call	sub_E344

loc_D7CF:
call	sub_E30E
call	sub_D74E
call	sub_E3AD
sub	word ptr ds:0DD0Fh, 10h
cmp	word ptr ds:0DD0Fh, 0FF96h
jg	short loc_D7CF
retn
sub_D7C3 endp




sub_D7E5 proc near
call	loc_D80B
call	sub_DF5E

loc_D7EB:
add	word ptr ds:0DD0Fh, 10h
call	sub_D74E
cmp	word ptr ds:0DD0Fh, 0
jnz	short loc_D7EB
call	sub_DF4C
jmp	sub_D74E
sub_D7E5 endp




sub_D800 proc near
mov	byte ptr ds:0DD03h, 0
mov	si, 0B9AEh
call	sub_F92F

loc_D80B:
mov	si, 0BE57h
jmp	sub_F92F
sub_D800 endp




sub_D811 proc near
mov	bp, 204Ah
mov	ax, 0B1h ; '�'
mov	bx, 0B96Bh
cmp	byte ptr ds:0DD02h, 0
jz	short loc_D825
inc	ax
mov	bx, 0B961h

loc_D825:
mov	[bp+6],	ax
mov	[bp+8],	bx
mov	bx, 0D917h
jmp	sub_F208
sub_D811 endp

call	sub_D7E5
mov	byte ptr ds:0DD02h, 0
jmp	short loc_D842



sub_D83B proc near
call	sub_D7C3
dec	byte ptr ds:0DD02h

loc_D842:
call	sub_D85B
jmp	short sub_D811
sub_D83B endp




sub_D847 proc near
mov	bp, 4948h
mov	es, word ptr ds:0DBD6h
mov	al, ds:0DD02h
lds	si, ds:0DCFEh
call	dword ptr ss:seg_11380+3911h
retn
sub_D847 endp




sub_D85B proc near
call	sub_D847

loc_D85E:
call	sub_D9C2
push	bx
push	dx
mov	si, 0D834h
call	sub_FA44
call	sub_E3BD
pop	dx
pop	bx
or	dx, dx
jz	short loc_D875
call	sub_DADC

loc_D875:
call	sub_FA37
mov	ax, 1
jmp	short sub_D8B0
sub_D85B endp

;align 2
mov	es, word ptr ds:0DBD6h
call	dword ptr ds:3915h
jb	short loc_D85E
retn
shr	ax, 1
mov	ax, 8
jmp	short loc_D895
shr	ax, 1
mov	ax, 0FFF8h

loc_D895:
jnb	short locret_D8AF
call	sub_D8E5
jmp	short sub_D85B
shr	ax, 1
mov	ax, 0FFE0h
jmp	short loc_D8A8
shr	ax, 1
mov	ax, 20h	; ' '

loc_D8A8:
jnb	short locret_D8AF
call	sub_D8B0
jmp	short sub_D85B

locret_D8AF:
retn



sub_D8B0 proc near
mov	si, 494Ch
mov	dx, [si]
mov	cx, 18Eh
add	dx, ax
jns	short loc_D8BE
add	dx, cx

loc_D8BE:
cmp	dx, cx
js	short loc_D8C4
sub	dx, cx

loc_D8C4:
mov	[si], dx
sub_D8B0 endp




sub_D8C6 proc near
mov	ax, 8000h
mov	cx, 18Eh
div	cx
mov	cx, 62h	; 'b'
mov	bx, ax

loc_D8D3:
add	si, 6
lodsw
mul	bx
add	ax, ax
adc	dx, dx
mov	[si], dx
mov	[si+2],	ax
loop	loc_D8D3
retn
sub_D8C6 endp




sub_D8E5 proc near
add	ax, ds:2460h
mov	cx, 62h	; 'b'
cmp	ax, cx
jl	short loc_D8F2
mov	ax, cx

loc_D8F2:
neg	cx
cmp	ax, cx
jg	short loc_D8FA
mov	ax, cx

loc_D8FA:
mov	ds:2460h, ax
sub_D8E5 endp

; START	OF FUNCTION CHUNK FOR sub_D945

loc_D8FD:
push	ds
pop	es
mov	di, 8B77h
mov	bx, 62h	; 'b'
mov	cx, 0C4h ; '�'
mov	ax, ds:2460h
add	ax, bx
cmp	ax, bx
jle	short loc_D925
neg	bx
add	al, bl
add	al, bl

loc_D917:
dec	al
stosw
cmp	al, bl
jle	short loc_D920
loop	loc_D917

loc_D920:
neg	bx
mov	ax, bx
dec	cx

loc_D925:
stosw
dec	al
js	short loc_D92C
loop	loc_D925

loc_D92C:
dec	cx
jle	short locret_D944
neg	ax

loc_D931:
stosw
inc	al
cmp	al, bl
jg	short loc_D93A
loop	loc_D931

loc_D93A:
dec	cx
jle	short locret_D944
neg	al

loc_D93F:
inc	al
stosw
loop	loc_D93F

locret_D944:
retn
; END OF FUNCTION CHUNK	FOR sub_D945



sub_D945 proc near

; FUNCTION CHUNK AT BA2D SIZE 00000048 BYTES

mov	si, 494Ch
mov	ax, 18Eh
mul	dx
mov	[si], dx
mov	word ptr [si+2], 0
mov	ax, bx
cmp	ax, 20h	; ' '
jnb	short loc_D95E
mov	ax, 20h	; ' '

loc_D95E:
cmp	ax, 0FFE0h
jb	short loc_D966
mov	ax, 0FFE0h

loc_D966:
mov	ds:2460h, ax
call	sub_D8C6
jmp	short loc_D8FD
sub_D945 endp




sub_D96E proc near
call	sub_5F4E
mov	ax, 18Eh
mul	dx
mov	bp, ds:494Ah
add	bp, bp
sub	dx, ds:494Ch
call	sub_D553
mov	cx, 1
mov	ax, 20h	; ' '
cmp	dx, ax
jl	short loc_D990
mov	dx, ax
inc	cx

loc_D990:
neg	ax
cmp	dx, ax
jg	short loc_D999
mov	dx, ax
inc	cx

loc_D999:
sub	bx, ds:2460h
mov	ax, 18h
cmp	bx, ax
jl	short loc_D9A7
mov	bx, ax
inc	cx

loc_D9A7:
neg	ax
cmp	bx, ax
jg	short loc_D9B0
mov	bx, ax
inc	cx

loc_D9B0:
mov	ax, dx
push	cx
push	bx
call	sub_D8B0
pop	ax
call	sub_D8E5
call	sub_D85B
pop	cx
loop	sub_D96E
sub_D96E endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_13. PRESS	KEYPAD "+" TO EXPAND]



sub_D9C2 proc near
xor	dx, dx
cmp	byte ptr ds:227Dh, 0
jnz	short nullsub_13
call	sub_5F4E
sub	sp, 0Ah
mov	bp, sp
mov	word ptr [bp+0], 0
shl	bx, 1
shl	bx, 1
shl	bx, 1
jns	short loc_D9E6
mov	byte ptr [bp+1], 0FFh
neg	bx

loc_D9E6:
mov	cx, [bx+494Ah]
mov	ax, cx
add	ax, ax
mul	dx
add	ax, ax
adc	dx, 0
xor	ax, ax
sub	dx, [bx+494Ch]
jns	short loc_DA01
neg	dx
not	ax

loc_DA01:
cmp	dx, cx
jb	short loc_DA0D
sub	dx, cx
sub	dx, cx
neg	dx
not	ax

loc_DA0D:
shr	cx, 1
cmp	dx, cx
jb	short loc_DA1D
mov	byte ptr [bp+0], 80h ; '�'
sub	dx, cx
sub	dx, cx
neg	dx

loc_DA1D:
mov	[bp+4],	al
shr	bx, 1
shr	bx, 1
push	ds
pop	es
mov	di, 593Ah
mov	ax, bx
mov	cx, 64h	; 'd'
xor	bx, bx

loc_DA30:
repne scasb
jnz	short loc_DA4A
inc	cx
cmp	dl, [di+63h]
jbe	short loc_DA4D
mov	[bp+2],	cx
inc	bx
add	di, 0C7h ; '�'
cmp	di, 8B3Bh
jb	short loc_DA30
jmp	short loc_DAB6

loc_DA4A:
mov	cx, [bp+2]

loc_DA4D:
mov	ax, 64h	; 'd'
sub	ax, cx
mov	[bp+2],	bx
mov	cx, [bp+0]
mov	ah, ch
or	cl, cl
jns	short loc_DA60
neg	al

loc_DA60:
mov	di, 8BBBh
mov	cx, 80h	; '�'
repne scasw
jnz	short loc_DAB6
xor	al, al
sub	di, 8C3Dh
jns	short loc_DA76
neg	di
not	al

loc_DA76:
mov	[bp+5],	al
mov	bx, 36h	; '6'
mov	ax, di
shr	ax, 1
mov	si, 4C60h
mov	dx, [bp+2]
mov	cl, al
mov	ch, 0FFh
xor	ax, ax

loc_DA8C:
lodsb
inc	al
jz	short loc_DAB1
neg	al
cmp	al, dl
jbe	short loc_DAB1
mov	di, si
add	si, ax
add	di, dx
mov	al, [di]
sub	al, cl
cmp	al, ch
jnb	short loc_DAAE
mov	ch, al
mov	[bp+6],	bx
or	al, al
jz	short loc_DABC

loc_DAAE:
dec	bx
jnz	short loc_DA8C

loc_DAB1:
cmp	ch, 2
jbe	short loc_DABC

loc_DAB6:
add	sp, 0Ah
xor	dx, dx
retn

loc_DABC:
mov	ax, [bp+4]
mov	bx, [bp+6]
sub	bx, 36h	; '6'
or	ah, ah
jz	short loc_DACB
neg	bx

loc_DACB:
add	bx, 4Fh	; 'O'
or	al, al
jz	short loc_DAD4
neg	dx

loc_DAD4:
add	dx, 0A0h ; '�'
add	sp, 0Ah
retn
sub_D9C2 endp




sub_DADC proc near
call	sub_DF5E
call	sub_E007
mov	ax, 36h	; '6'
call	sub_E0C4
sub	bl, es:[si+2]
jmp	sub_E0FF
sub_DADC endp

call	sub_F2EB
cmp	bp, 204Ah
jz	short loc_DAFC
cmp	bp, 2062h

loc_DAFC:
jnz	short locret_DB1D
call	sub_DB1E
jb	short loc_DB0C
cmp	bp, 204Ah
jz	short locret_DB1D
jmp	sub_D811

loc_DB0C:
cmp	bp, 2062h
jz	short locret_DB1D
mov	bp, 2062h
mov	bx, 0D917h
xor	cx, cx
jmp	loc_F20A

locret_DB1D:
retn



sub_DB1E proc near
sub	dx, 60h	; '`'
cmc
jnb	short locret_DB33
cmp	dx, 80h	; '�'
jnb	short locret_DB33
sub	bx, 19h
cmc
jnb	short locret_DB33
cmp	bx, 6Dh	; 'm'

locret_DB33:
retn
sub_DB1E endp

push	bx
push	dx
call	sub_DB1E
jnb	short loc_DB4E
call	sub_DBF5
jnb	short loc_DB4E
mov	ds:197Ch, ax
mov	ds:197Eh, bx
call	sub_D85B
pop	dx
pop	bx
jmp	short loc_DB5D

loc_DB4E:
pop	dx
pop	bx
retn
call	sub_D96E
call	sub_7A2D
mov	dx, 0A0h ; '�'
mov	bx, 4Fh	; 'O'

loc_DB5D:
call	sub_FA82
call	sub_DB69
call	sub_CC8E
jmp	loc_790D



sub_DB69 proc near
mov	si, 0DD06h
mov	[si], dx
mov	[si+2],	bx
inc	dx
inc	dx
inc	bx
mov	[si+4],	dx
mov	[si+6],	bx
mov	byte ptr [si+8], 7
call	sub_DF5E
mov	cx, 8

loc_DB84:
push	cx
mov	si, 0DD06h
mov	di, 2440h
mov	cx, 2
mov	dx, 0FFFCh

loc_DB91:
mov	ax, [si]
add	ax, dx
cmp	ax, [di]
jnb	short loc_DB9B
mov	ax, [di]

loc_DB9B:
mov	[si], ax
add	di, 2
add	si, 2
sar	dx, 1
loop	loc_DB91
mov	cx, 2
mov	dx, 4

loc_DBAD:
mov	ax, [si]
add	ax, dx
cmp	ax, [di]
jb	short loc_DBB7
mov	ax, [di]

loc_DBB7:
mov	[si], ax
add	di, 2
add	si, 2
sar	dx, 1
loop	loc_DBAD
mov	si, 0DD06h
call	sub_E421
call	sub_DBD0
pop	cx
loop	loc_DB84
retn
sub_DB69 endp




sub_DBD0 proc near
xor	ax, ax
mov	cx, 0Ah
mov	si, 0DD06h
inc	word ptr [si]
inc	word ptr [si+2]
dec	word ptr [si+4]
dec	word ptr [si+6]
call	sub_DFA5
mov	si, 0DD06h
dec	word ptr [si]
dec	word ptr [si+2]
inc	word ptr [si+4]
inc	word ptr [si+6]
retn
sub_DBD0 endp




sub_DBF5 proc near
sub	bx, 36h	; '6'
mov	cx, bx
jns	short loc_DBFE
neg	cx

loc_DBFE:
push	ds
pop	es
mov	si, 4C60h
inc	cx
xor	ax, ax

loc_DC06:
add	si, ax
lodsb
inc	al
neg	al
loopne	loc_DC06
mov	di, si
add	di, ax
sub	dx, 40h	; '@'
mov	ax, dx
jns	short loc_DC1C
neg	dx

loc_DC1C:
add	si, dx
cmp	si, di
jnb	short locret_DC8A
push	ax
lodsb
xor	ah, ah
or	bx, bx
js	short loc_DC2C
neg	ax

loc_DC2C:
mov	si, 8C3Bh
add	si, ax
add	si, ax
lodsw
push	ax
mov	si, 593Ah
cbw
mov	bp, ax
or	ax, ax
jns	short loc_DC41
neg	bp

loc_DC41:
mov	ax, 0C8h ; '�'
mul	dx
add	si, ax
mov	bl, [bp+si]
mov	al, [bp+si+64h]
xor	ah, ah
xor	bh, bh
mov	di, bx
add	di, di
add	di, di
mov	cx, [di+494Ah]
pop	dx
or	dh, dh
jns	short loc_DC62
neg	bx

loc_DC62:
or	dl, dl
jns	short loc_DC6A
neg	ax
add	ax, cx

loc_DC6A:
add	cx, cx
mov	dx, [di+494Ch]
pop	di
or	di, di
jns	short loc_DC77
neg	ax

loc_DC77:
add	dx, ax
jns	short loc_DC7D
add	dx, cx

loc_DC7D:
cmp	dx, cx
jb	short loc_DC83
sub	dx, cx

loc_DC83:
xor	ax, ax
div	cx
sar	bx, 1
stc

locret_DC8A:
retn
sub_DBF5 endp




sub_DC8B proc near
cmp	word ptr ds:0DD0Fh, 0
jz	short locret_DCC9
call	sub_DF5E
call	sub_FA82
call	sub_DCCA
call	sub_DDA7
mov	ax, ds:2
and	ax, 0FFF0h
mov	ds:115Ch, ax
call	sub_EF45
mov	si, 2494h
call	sub_F076
mov	si, 0DD11h
mov	di, 0DD17h
push	ds
pop	es
mov	cx, 6

loc_DCBB:
cmpsb
loopne	loc_DCBB
jnz	short locret_DCC9
dec	byte ptr [di-1]
inc	cx
loop	loc_DCBB
call	sub_FABC

locret_DCC9:
retn
sub_DC8B endp




sub_DCCA proc near
mov	si, 0C2h ; '�'
call	sub_39A1
inc	ax
call	sub_101AB
call	sub_DE77
mov	al, ds:29h
xor	ah, ah
shr	ax, 1
mov	si, 0C3h ; '�'
call	sub_101AB
call	sub_EF38
mov	si, 2482h
jmp	sub_F076
sub_DCCA endp

mov	ax, 1
call	sub_E00E
mov	si, 2506h
call	sub_E0EB
call	sub_DDA7
call	sub_DCCA
mov	si, 0DD17h
xor	ax, ax
mov	[si], ax
mov	[si+2],	ax
mov	[si+4],	ax
mov	ax, ds:2
and	ax, 0FFF0h
mov	ds:115Ch, ax
call	sub_EF45
mov	si, 2494h
call	sub_F076
mov	si, 0BE57h
mov	bp, 0Ch
call	sub_F8F5
call	sub_DF5E
mov	si, 1470h
call	sub_FA44
call	sub_E007
mov	si, 0DD11h
xor	bp, bp

loc_DD38:
mov	cl, [si]
sub	cl, [si+6]
jz	short loc_DD9D
mov	al, 1
jnb	short loc_DD45
neg	al

loc_DD45:
add	[si+6],	al
mov	al, [si+6]
cmp	al, 1Eh
jb	short loc_DD51
mov	al, 1Eh

loc_DD51:
mov	bx, bp
shl	bx, 1
shl	bx, 1
mov	dx, [bx+24EEh]
mov	bx, [bx+24F0h]
xor	ah, ah
sub	bx, ax
push	si
push	bp
mov	ax, 37h	; '7'
shr	bp, 1
adc	ax, 0
call	sub_E1CD
sub	bx, 0Ah
mov	ax, 39h	; '9'
call	sub_E1CD
pop	bp
pop	si
mov	al, [si]
cmp	al, [si+6]
jnz	short loc_DD9D
test	bp, 1
mov	ax, 3Fh	; '?'
jz	short loc_DD8D
mov	al, 25h	; '%'

loc_DD8D:
mov	ds:0DBE4h, ax
add	dx, 4
call	sub_EF1E
mov	al, [bp+116Ah]
call	sub_EFFF

loc_DD9D:
inc	si
inc	bp
cmp	bp, 6
jb	short loc_DD38
jmp	sub_DF4C



sub_DDA7 proc near
mov	ax, ds:2
and	ax, 0FFF0h
mov	ds:115Ch, ax
call	sub_DEFE
call	sub_DDF6
push	ds
pop	es
mov	di, 0DD11h
mov	ax, ds:0A4h
shr	ax, 1
inc	ax
stosb
mov	ax, ds:0A2h
shr	ax, 1
inc	ax
stosb
mov	ax, ds:0A8h
shr	ax, 1
shr	ax, 1
shr	ax, 1
shr	ax, 1
inc	al
stosb
mov	ax, ds:0A6h
shr	ax, 1
shr	ax, 1
shr	ax, 1
shr	ax, 1
inc	al
stosb
mov	ax, ds:0ACh
mov	al, ah
inc	al
stosb
mov	ax, ds:0AAh
mov	al, ah
inc	al
stosb
retn
sub_DDA7 endp




sub_DDF6 proc near
mov	di, 115Eh
mov	bp, 116Ah
mov	si, 0C4h ; '�'
call	sub_EE40
mov	ax, ds:0A4h
call	sub_DE43
mov	ax, ds:0A2h
call	sub_DE43
mov	ax, ds:0A8h
call	sub_DE31
mov	ax, ds:0A6h
call	sub_DE31
mov	ax, ds:0ACh
call	sub_DE31
mov	ax, ds:0AAh
jmp	short sub_DE31
sub_DDF6 endp

push	di
push	ax
call	sub_EF0C
pop	ax
push	ax
call	sub_101EC
jmp	short loc_DE4D



sub_DE31 proc near
push	di
push	ax
call	sub_EF0C
dec	si
mov	byte ptr es:[si], 30h ;	'0'
pop	ax
push	ax
call	sub_101EC
inc	si
jmp	short loc_DE4D
sub_DE31 endp




sub_DE43 proc near
push	di
push	ax
call	sub_EF0C
pop	ax
push	ax
call	sub_101B3

loc_DE4D:
pop	ax
pop	di
mov	dx, ax
xchg	ax, [di]
cmp	dx, ax
mov	al, 3
jnz	short loc_DE69
mov	ax, ds:2
and	ax, 0FFF0h
cmp	ds:115Ch, ax
jz	short loc_DE72
mov	al, 3
jmp	short loc_DE6F

loc_DE69:
mov	al, 2
jb	short loc_DE6F
dec	al

loc_DE6F:
mov	[bp+0],	al

loc_DE72:
add	di, 2
inc	bp
retn
sub_DE43 endp




sub_DE77 proc near
mov	bl, ds:0CEEBh
xor	bh, bh
shl	bx, 1
shl	bx, 1
shl	bx, 1
add	bx, 251Ah
mov	ax, es:[si-2]
xchg	al, ah
and	al, 0Fh
cmp	ah, 31h	; '1'
jz	short loc_DEAD
cmp	al, 4
jnb	short loc_DEAD
cmp	al, 1
jnz	short loc_DEA7
cmp	bx, 2522h
jnz	short loc_DEA7
cmp	ah, 20h	; ' '
jnz	short loc_DEAD

loc_DEA7:
xor	ah, ah
shl	ax, 1
add	bx, ax

loc_DEAD:
mov	ax, [bx]
mov	es:[si], ax
retn
sub_DE77 endp




sub_DEB3 proc near
push	ds
xor	bx, bx
xor	dx, dx
mov	cx, 0C5F9h
xor	si, si
mov	ds, word ptr ds:0DD00h

loc_DEC1:
lodsb
and	al, 30h
jz	short loc_DECC
inc	dx
cmp	al, 30h	; '0'
jz	short loc_DECC
inc	bx

loc_DECC:
loop	loc_DEC1
sub	dx, bx
xor	ax, ax
sub	si, 188h
inc	si
div	si
mov	dx, 64h	; 'd'
mul	dx
add	ax, ax
adc	dx, 0
xchg	dx, bx
xor	ax, ax
div	si
mov	dx, 64h	; 'd'
mul	dx
add	ax, ax
adc	dx, 0
inc	dx
pop	ds
mov	ds:0A2h, dx
mov	ds:0A4h, bx
retn
sub_DEB3 endp




sub_DEFE proc near
call	sub_DEB3
mov	ax, ds:0A0h
add	ax, ds:1172h
sub	ax, ds:1170h
jnb	short loc_DF10
xor	ax, ax

loc_DF10:
cmp	ax, ds:0A6h
jb	short loc_DF19
mov	ds:0A6h, ax

loc_DF19:
xor	ax, ax
mov	ds:0AAh, ax
mov	ds:0ACh, ax
mov	si, 8AAh

loc_DF24:
mov	al, [si+1Ah]
test	byte ptr [si+3], 20h
jnz	short loc_DF43
test	byte ptr [si+10h], 80h
jz	short loc_DF39
add	ds:0ACh, ax
jmp	short loc_DF43

loc_DF39:
test	byte ptr [si+3], 80h
jnz	short loc_DF43
add	ds:0AAh, ax

loc_DF43:
add	si, 1Bh
cmp	byte ptr [si], 0
jnz	short loc_DF24
retn
sub_DEFE endp




sub_DF4C proc near
push	word ptr ds:0DBD6h
pop	word ptr ds:0DBDAh
retn
sub_DF4C endp




sub_DF55 proc near
push	word ptr ds:0DC32h
pop	word ptr ds:0DBDAh
retn
sub_DF55 endp




sub_DF5E proc near
push	word ptr ds:0DBD8h
pop	word ptr ds:0DBDAh
retn
sub_DF5E endp




sub_DF67 proc near
call	sub_DF4C
push	word ptr ds:0DBD8h
push	word ptr ds:0DBD6h
pop	word ptr ds:0DBD8h
call	bp
pop	word ptr ds:0DBD8h
retn
sub_DF67 endp




sub_DF7D proc near
mov	es, word ptr ds:0DBDAh
call	dword ptr ds:38D5h
retn
sub_DF7D endp

call	sub_F2EB
cmp	bp, 2012h
jz	short locret_DFA4
cmp	bp, 201Ah
jz	short locret_DFA4
mov	al, 0Ch
call	sub_DFA5
cmp	cx, 18h
jnz	short locret_DFA4
mov	al, 4
jmp	sub_C9E5

locret_DFA4:
retn



sub_DFA5 proc near
push	ds
mov	es, word ptr ds:0DBD8h
mov	ds, word ptr ds:0DBD6h
mov	bp, 0CE7Ah
call	dword ptr ss:seg_11380+392Dh
pop	ds
retn
sub_DFA5 endp




sub_DFB8 proc near
mov	es, word ptr ds:0DBD8h
mov	bp, 0CE7Ah
call	dword ptr ds:392Dh
retn
sub_DFB8 endp




sub_DFC4 proc near
mov	ax, ds:0DBD6h
cmp	ax, ds:0DBD8h
jz	short locret_DFD1
call	dword ptr ds:3935h

locret_DFD1:
retn
sub_DFC4 endp




sub_DFD2 proc near
call	dword ptr ds:3959h
mov	al, 3Ah	; ':'
sub_DFD2 endp




sub_DFD8 proc near
mov	byte ptr ds:0DCE6h, 80h	; '�'
push	ax
push	dx
call	sub_DF67
pop	dx
pop	ax
push	ds
mov	si, ds:0DBDEh
mov	es, word ptr ds:0DBD8h
mov	ds, word ptr ds:0DBD6h
mov	bp, 0CE7Ah
call	dword ptr ss:seg_11380+3921h
pop	ds
call	sub_E39D
call	dword ptr ds:3935h
mov	byte ptr ds:0DCE6h, 0
retn
sub_DFD8 endp




sub_E007 proc near
xor	ax, ax
jmp	short sub_E00E
sub_E007 endp

byte_E00B db 0B8h
byte_E00C db 25h
;align 2



sub_E00E proc near
or	ax, ax
js	short locret_E079
push	bx
mov	bx, ax
xchg	bx, ds:2784h
cmp	ax, bx
jz	short loc_E078
push	si
push	di
shl	bx, 1
js	short loc_E02B
mov	si, ds:0CE7Bh
mov	[bx-2574h], si

loc_E02B:
mov	si, ax
shl	si, 1
shl	si, 1
add	si, 0D844h
les	di, [si]
mov	bx, es
or	bx, bx
jz	short loc_E047
cmp	di, 2
jbe	short loc_E06E
call	sub_E07A
jmp	short loc_E06E

loc_E047:
push	cx
push	dx
push	bp
push	si
mov	si, ax
call	sub_10F89
cmp	word ptr es:[di], 2
jbe	short loc_E059
call	sub_E07A

loc_E059:
pop	si
mov	di, es:[di]
sub	cx, di
mov	[si], di
mov	word ptr [si+2], es
mov	ax, ds:2784h
call	dword ptr ds:3905h
pop	bp
pop	dx
pop	cx

loc_E06E:
mov	ds:0DBB0h, di
mov	word ptr ds:0DBB2h, es
pop	di
pop	si

loc_E078:
pop	bx

locret_E079:
retn
sub_E00E endp




sub_E07A proc near
mov	ax, ds:2784h
mov	ah, al
xchg	al, ds:0DBB4h
cmp	al, ah
jz	short locret_E079
mov	si, 2
sub_E07A endp




sub_E08A proc near
push	cx
push	dx
push	di

loc_E08D:
lods	word ptr es:[si]
cmp	ax, 100h
jnz	short loc_E099
add	si, 3
jmp	short loc_E08D

loc_E099:
mov	bx, ax
inc	ax
jz	short loc_E0C0
mov	cl, bh
xor	bh, bh
and	cx, 0FFh
jnz	short loc_E0AA
inc	ch

loc_E0AA:
mov	ax, bx
add	bx, bx
add	bx, ax
mov	ax, cx
add	cx, cx
add	cx, ax
mov	dx, si
add	si, cx
call	dword ptr ds:38BDh
jmp	short loc_E08D

loc_E0C0:
pop	di
pop	dx
pop	cx
retn
sub_E08A endp




sub_E0C4 proc near
push	bx
les	si, ds:0DBB0h
mov	bx, ax
shl	bx, 1
add	si, es:[bx+si]
pop	bx
retn
sub_E0C4 endp




sub_E0D2 proc near
push	ax
push	si
call	sub_E0C4
lods	word ptr es:[si]
and	ah, 0Fh
shr	ax, 1
sub	dx, ax
lods	byte ptr es:[si]
shr	al, 1
cbw
sub	bx, ax
pop	si
pop	ax
retn
sub_E0D2 endp

byte_E0EA db 0



sub_E0EB proc near
lodsw
cmp	ax, 0FFFFh
jz	short locret_E13A
mov	bx, ax
lodsw
mov	dx, ax
lodsw
xchg	ax, bx
push	si
call	sub_E0FF
pop	si
jmp	short sub_E0EB
sub_E0EB endp




sub_E0FF proc near
mov	es, word ptr ds:0DBDAh
lds	si, ds:0DBB0h
mov	bp, ax
and	bp, 1FFh
shl	bp, 1
add	si, ds:[bp+si]
mov	cx, ax
push	ax
lodsw
and	ch, 60h
or	ah, ch
mov	di, ax
lodsw
mov	cx, ax
cmp	cs:byte_E0EA, 0
jz	short loc_E12D
mov	ch, cs:byte_E0EA

loc_E12D:
pop	ax
and	ax, 1C00h
jnz	short loc_E13B
call	dword ptr ss:seg_11380+38C9h
push	ss
pop	ds
assume ds:seg001

locret_E13A:
retn

loc_E13B:
xchg	ah, al
mov	bp, ax
shr	bp, 1
mov	bp, [bp+2774h]
mov	ax, di
and	ax, 1FFh
push	dx
xchg	ah, al
xor	dx, dx
div	bp
pop	dx
push	ax
mov	ax, cx
xor	ah, ah
push	dx
xchg	ah, al
xor	dx, dx
div	bp
pop	dx
mov	cl, al
pop	ax
or	di, di
jns	short loc_E169
call	sub_E171

loc_E169:
call	dword ptr ss:seg_11380+3941h
push	ss
pop	ds
retn
sub_E0FF endp




sub_E171 proc near
push	ax
push	bx
push	cx
push	di
push	es
push	bp
push	ss
pop	es
assume es:seg001
mov	bp, di
mov	di, 4C60h
and	bp, 1FFh
add	bp, 3
shr	bp, 1
shr	bp, 1
shl	bp, 1
mov	cx, [si-2]
xor	ch, ch

loc_E190:
push	cx
mov	bx, bp

loc_E193:
lodsb
test	al, 80h
jnz	short loc_E1A6
mov	cl, 1
add	cl, al
xor	ch, ch
sub	bx, cx
rep movsb
jnz	short loc_E193
jmp	short loc_E1B3

loc_E1A6:
mov	cl, 1
sub	cl, al
xor	ch, ch
sub	bx, cx
lodsb
rep stosb
jnz	short loc_E193

loc_E1B3:
pop	cx
loop	loc_E190
mov	si, 4C60h
push	ss
pop	ds
pop	bp
pop	es
assume es:nothing
pop	di
pop	cx
pop	bx
pop	ax
retn
sub_E171 endp




sub_E1C2 proc near
xor	ah, ah
call	sub_E00E
xor	ax, ax
xor	bx, bx
xor	dx, dx
sub_E1C2 endp




sub_E1CD proc near
push	bx
push	dx
call	sub_E0FF
pop	dx
pop	bx
retn
sub_E1CD endp




sub_E1D5 proc near
push	bx
push	dx
call	sub_E1DD
pop	dx
pop	bx
retn
sub_E1D5 endp




sub_E1DD proc near
mov	es, word ptr ds:0DBDAh
lds	si, ds:0DBB0h
assume ds:nothing
mov	bp, ax
shl	bp, 1
add	si, ds:[bp+si]
lodsw
mov	di, ax
lodsw
xor	ah, ah
mov	cx, ax
mov	bp, 0D834h
call	dword ptr ss:seg_11380+38CDh
push	ss
pop	ds
assume ds:seg001

locret_E1FE:
retn
sub_E1DD endp




sub_E1FF proc near
lodsw
cmp	ax, 0FFFFh
jz	short locret_E1FE
mov	bx, ax
lodsw
mov	dx, ax
lodsw
xchg	ax, bx
push	si
call	sub_E1DD
pop	si
jmp	short sub_E1FF
sub_E1FF endp




sub_E213 proc near
mov	es, word ptr ds:0DBDAh
lds	si, ds:0DBB0h
assume ds:nothing
mov	bp, ax
shl	bp, 1
add	si, ds:[bp+si]
lodsw
mov	di, ax
and	ah, 0Fh
shr	ax, 1
sub	dx, ax
lodsw
xor	ah, ah
mov	cx, ax
shr	ax, 1
sub	bx, ax
mov	bp, 0D834h
call	dword ptr ss:seg_11380+38CDh
push	ss
pop	ds
assume ds:seg001
retn
sub_E213 endp




sub_E240 proc near
push	ds
push	ds
push	ax
push	si
call	dword ptr seg_11380+38D9h
pop	si
pop	ax
pop	ds
assume ds:nothing
mov	dx, [si]
push	dx
mov	bx, [si+2]
push	bx
mov	cx, [si+4]
sub	cx, dx
push	cx
mov	cx, [si+6]
sub	cx, bx
push	cx
lds	si, ds:0DBB0h
mov	bp, ax
shl	bp, 1
add	si, ds:[bp+si]
lodsw
mov	di, ax
and	ax, 1FFh
push	ax
lodsw
mov	cx, ax
xor	ah, ah
push	ax
call	dword ptr ss:seg_11380+38C9h
push	es
pop	ds
mov	bp, sp
mov	dx, [bp+0Ah]
mov	bx, [bp+8]
push	bx
push	dx
push	word ptr [bp+0]
push	word ptr [bp+2]
push	bx
push	dx
mov	bp, sp
mov	dx, [bp+12h]
sub	dx, [bp+4]

loc_E297:
mov	ax, [bp+4]
add	[bp+8],	ax
sub	dx, ax
jnb	short loc_E2A4
add	[bp+4],	dx

loc_E2A4:
push	dx
call	dword ptr ss:seg_11380+3931h
pop	dx
cmp	dx, 0
jg	short loc_E297
mov	ax, [bp+12h]
mov	[bp+4],	ax
mov	ax, [bp+0]
mov	[bp+8],	ax
mov	bx, [bp+10h]
sub	bx, [bp+6]
jz	short loc_E2DD

loc_E2C4:
mov	ax, [bp+6]
add	[bp+0Ah], ax
sub	bx, ax
jnb	short loc_E2D1
add	[bp+6],	bx

loc_E2D1:
push	bx
call	dword ptr ss:seg_11380+3931h
pop	bx
cmp	bx, 0
jg	short loc_E2C4

loc_E2DD:
add	sp, 18h
pop	ds
retn
sub_E240 endp




sub_E2E2 proc near
push	ds
mov	es, word ptr ds:0DBDEh
mov	ds, word ptr ds:0DBDAh
call	dword ptr ss:seg_11380+38E1h
pop	ds
retn
sub_E2E2 endp

mov	es, word ptr ds:0DBDAh
push	ds
mov	ds, word ptr ds:0DBDEh
call	dword ptr ss:seg_11380+38E9h
pop	ds
retn



sub_E302 proc near
mov	si, 1470h
mov	es, word ptr ds:0DBDAh
call	dword ptr ds:38D9h
retn
sub_E302 endp




sub_E30E proc near
mov	si, 1470h
jmp	short sub_E316
sub_E30E endp




sub_E313 proc near
mov	si, 0D834h
sub_E313 endp




sub_E316 proc near
mov	ax, ds:0DBDEh

loc_E319:
push	cx
mov	cx, ax
mov	dx, [si]
mov	bx, [si+2]
mov	bp, [si+4]
mov	ax, [si+6]
sub	bp, dx
jbe	short loc_E33D
sub	ax, bx
jbe	short loc_E33D
mov	es, word ptr ds:0DBD6h
push	si
push	ds
mov	si, cx
call	dword ptr ds:38EDh
pop	ds
pop	si

loc_E33D:
pop	cx
retn
sub_E316 endp




sub_E33F proc near
mov	ax, ds:0DC32h
jmp	short loc_E319
sub_E33F endp




sub_E344 proc near
mov	si, 1470h
sub_E344 endp




sub_E347 proc near
mov	dx, [si]
mov	bx, [si+2]
mov	bp, [si+4]
mov	ax, [si+6]
sub	bp, dx
jbe	short locret_E369
sub	ax, bx
jbe	short locret_E369
mov	es, word ptr ds:0DBDEh
push	ds
mov	ds, word ptr ds:0DBD6h
call	dword ptr ss:seg_11380+38E5h
pop	ds

locret_E369:
retn
sub_E347 endp




sub_E36A proc near
push	ds
mov	es, word ptr ds:0DBD6h
mov	ds, word ptr ds:0DBD8h
call	dword ptr ss:seg_11380+38F1h
pop	ds
retn
sub_E36A endp




sub_E37A proc near
mov	dx, [si]
mov	bx, [si+2]
mov	bp, [si+4]
mov	ax, [si+6]
sub	bp, dx
jbe	short locret_E39C
sub	ax, bx
jbe	short locret_E39C
push	ds
mov	es, word ptr ds:0DBD6h
mov	ds, word ptr ds:0DBD8h
call	dword ptr ss:seg_11380+38F5h
pop	ds

locret_E39C:
retn
sub_E37A endp




sub_E39D proc near
push	ds
mov	es, word ptr ds:0DBD8h
mov	ds, word ptr ds:0DBD6h
call	dword ptr ss:seg_11380+38F1h
pop	ds
retn
sub_E39D endp




sub_E3AD proc near
mov	ax, ds:0DC38h
cmp	ax, 98h	; '�'
jnb	short loc_E3B8
call	sub_FA82

loc_E3B8:
mov	si, 1470h
jmp	short sub_E3C0
sub_E3AD endp




sub_E3BD proc near
mov	si, 0D834h
sub_E3BD endp




sub_E3C0 proc near
mov	dx, [si]
mov	bx, [si+2]
mov	bp, [si+4]
mov	ax, [si+6]
sub_E3C0 endp




sub_E3CB proc near
cmp	byte ptr ds:227Dh, 0
jnz	short sub_E3EE
cmp	ax, 89h	; '�'
jl	short sub_E3EE
cmp	bp, 7Eh	; '~'
jl	short sub_E3EE
cmp	dx, 0C2h ; '�'
jge	short sub_E3EE
push	ax
push	bx
push	dx
push	bp
call	sub_3667
pop	bp
pop	dx
pop	bx
pop	ax
sub_E3CB endp




sub_E3EE proc near
sub	bp, dx
jbe	short locret_E40D
sub	ax, bx
jbe	short locret_E40D

loc_E3F6:
cmp	word ptr ds:2570h, 1AD6h
jz	short locret_E40D
push	ds
mov	es, word ptr ds:0DBD8h
mov	ds, word ptr ds:0DBD6h
call	dword ptr ss:seg_11380+38F5h
pop	ds

locret_E40D:
retn
sub_E3EE endp ;	sp =  2




sub_E40E proc near
mov	si, 276Ah
mov	bp, ds:2772h
mov	al, ds:0DBE4h
mov	es, word ptr ds:0DBDAh
call	dword ptr ds:3901h
retn
sub_E40E endp




sub_E421 proc near
lodsw
mov	dx, ax
lodsw
mov	bx, ax
lodsw
mov	di, ax
dec	di
lodsw
mov	cx, ax
dec	cx
lodsb
sub_E421 endp



; Attributes: bp-based frame

sub_E430 proc near

arg_2= word ptr	 4
arg_4= word ptr	 6

mov	ds:0DBE4h, al
push	bx
push	cx
push	dx
push	di
mov	cx, bx
call	sub_E40E
mov	bp, sp
mov	cx, [bp+arg_2]
mov	bx, cx
call	sub_E40E
mov	bp, sp
mov	di, dx
mov	bx, [bp+arg_4]
call	sub_E40E
pop	di
mov	dx, di
call	sub_E40E
pop	dx
pop	cx
pop	bx
retn
sub_E430 endp




sub_E45A proc near
call	near ptr byte_E00B
mov	si, 3CBEh
lodsw
or	ax, ax
jz	short locret_E49E
mov	ah, 11h
mul	ah
add	si, ax
cmp	di, si
jnb	short locret_E49E
or	byte ptr [di+0Ch], 80h
push	si
push	di
mov	si, di
call	sub_E57D
pop	di
pop	cx
push	di
lea	si, [di+11h]
sub	cx, si
jz	short loc_E488
push	ds
pop	es
rep movsb

loc_E488:
dec	word ptr ds:3CBEh
pop	di
mov	si, 4752h
mov	cx, 2

loc_E493:
lodsw
cmp	ax, di
jb	short loc_E49C
sub	word ptr [si-2], 11h

loc_E49C:
loop	loc_E493

locret_E49E:
retn
sub_E45A endp




sub_E49F proc near
xor	ah, ah
mov	al, [bp+0]
cmp	byte ptr [bp+3], 0
jz	short sub_E4DB
push	bp
call	sub_E4DB
pop	bp
mov	[di+0Fh], bp
push	si
mov	si, bp
mov	bx, 0FFFFh

loc_E4B8:
inc	bx
js	short loc_E4D9
add	si, 3
cmp	byte ptr [si], 0
jnz	short loc_E4B8
or	bx, bx
jz	short loc_E4D9
call	sub_102AF
mov	bx, ax
shl	ax, 1
add	ax, bx
add	bp, ax
mov	[di+0Dh], bp
or	byte ptr [di+0Ch], 1

loc_E4D9:
pop	si
retn
sub_E49F endp




sub_E4DB proc near
push	ax
call	near ptr byte_E00B
pop	ax
call	sub_E0D2

loc_E4E3:
push	si
mov	di, 3CBEh
mov	bp, ax
mov	ax, [di]
inc	word ptr [di]
mov	ah, 11h
mul	ah
xchg	ax, bp
lea	di, [bp+di+2]
mov	[di], dx
mov	[di+2],	bx
mov	[di+8],	ax
mov	[di+0Ah], si
mov	byte ptr [di+0Ch], 0
call	sub_E0C4
lods	word ptr es:[si]
and	ah, 0Fh
add	dx, ax
add	bl, es:[si]
adc	bh, 0
mov	[di+4],	dx
mov	[di+6],	bx
pop	si
retn
sub_E4DB endp

call	loc_E4E3
mov	si, di
jmp	short sub_E57D
; START	OF FUNCTION CHUNK FOR sub_A1D8

loc_E523:
call	near ptr byte_E00B
mov	ax, [di+8]
call	sub_E0D2
sub	dx, [di]
sub	bx, [di+2]
; END OF FUNCTION CHUNK	FOR sub_A1D8



sub_E531 proc near
call	near ptr byte_E00B
mov	si, di
sub	sp, 8
mov	di, sp
push	ds
pop	es
movsw
movsw
movsw
movsw
sub	si, 8
sub	di, 8
add	[si], dx
add	[si+2],	bx
add	[si+4],	dx
add	[si+6],	bx
or	dx, dx
js	short loc_E55E
mov	ax, [si+4]
mov	[di+4],	ax
jmp	short loc_E562

loc_E55E:
mov	ax, [si]
mov	[di], ax

loc_E562:
or	bx, bx
js	short loc_E56E
mov	ax, [si+6]
mov	[di+6],	ax
jmp	short loc_E574

loc_E56E:
mov	ax, [si+2]
mov	[di+2],	ax

loc_E574:
mov	si, di
call	sub_E57D
add	sp, 8

locret_E57C:
retn
sub_E531 endp




sub_E57D proc near
call	near ptr byte_E00B
cmp	byte ptr ds:0DC46h, 0
js	short loc_E5B4
mov	ax, ds:0DC44h
cmp	ax, [si+6]
jge	short loc_E5B4
add	ax, 10h
cmp	ax, [si+2]
jle	short loc_E5B4
mov	ax, ds:0DC42h
cmp	ax, [si+4]
jge	short loc_E5B4
add	ax, 10h
mov	bx, [si]
and	bh, 0Fh
cmp	ax, bx
jle	short loc_E5B4
mov	ax, 0DBECh
push	ax
push	si
call	sub_FA82
pop	si

loc_E5B4:
mov	ax, ds
mov	es, ax
mov	di, 0D834h
mov	bx, 8
lodsw
cmp	ax, [bx+di]
jge	short loc_E5C5
mov	ax, [bx+di]

loc_E5C5:
stosw
lodsw
cmp	ax, [bx+di]
jge	short loc_E5CD
mov	ax, [bx+di]

loc_E5CD:
stosw
lodsw
cmp	ax, [bx+di]
jle	short loc_E5D5
mov	ax, [bx+di]

loc_E5D5:
cmp	ax, [di-4]
jle	short locret_E57C
stosw
lodsw
cmp	ax, [bx+di]
jle	short loc_E5E2
mov	ax, [bx+di]

loc_E5E2:
cmp	ax, [di-4]
jle	short locret_E57C
stosw
call	sub_E313
sub	sp, 200h
mov	di, sp
mov	cx, ds:3CBEh
jcxz	short loc_E650
mov	si, 0D834h
lodsw
mov	dx, ax
lodsw
mov	bx, ax
lodsw
mov	bp, ax
mov	ax, [si]
mov	si, 3CC0h

loc_E608:
cmp	byte ptr [si+0Ch], 0
js	short loc_E626
cmp	[si], bp
jge	short loc_E626
cmp	[si+2],	ax
jge	short loc_E626
cmp	[si+4],	dx
jle	short loc_E626
cmp	[si+6],	bx
jle	short loc_E626
mov	[di], si
add	di, 2

loc_E626:
add	si, 11h
loop	loc_E608
mov	cx, di
sub	cx, sp
shr	cx, 1
jz	short loc_E650

loc_E633:
mov	si, sp
push	cx
call	word ptr ds:2786h
js	short loc_E64F
xor	si, si
xchg	si, [bx-2]
mov	ax, [si+8]
mov	dx, [si]
mov	bx, [si+2]
call	sub_E1DD
pop	cx
jmp	short loc_E633

loc_E64F:
pop	cx

loc_E650:
cmp	byte ptr ds:227Dh, 0
jnz	short loc_E672
cmp	word ptr ds:0D83Ah, 89h	; '�'
jl	short loc_E672
cmp	word ptr ds:0D838h, 7Eh	; '~'
jl	short loc_E672
cmp	word ptr ds:0D834h, 0C2h ; '�'
jge	short loc_E672
call	sub_3667

loc_E672:
mov	si, ds:0DBE0h
or	si, si
jz	short loc_E68E
mov	di, 0D834h
call	sub_E6A4
mov	si, ds:0DBE2h
or	si, si
jz	short loc_E68E
mov	di, 0D834h
call	sub_E6A4

loc_E68E:
mov	si, 0D834h
mov	dx, [si]
mov	bx, [si+2]
mov	bp, [si+4]
mov	ax, [si+6]
call	sub_E3EE
add	sp, 200h
retn
sub_E57D endp ;	sp = -2




sub_E6A4 proc near
lodsw
cmp	ax, [di+4]
jge	short locret_E6F6
mov	dx, ax
lodsw
cmp	ax, [di+6]
jge	short locret_E6F6
mov	bx, ax
lodsw
cmp	ax, [di]
jle	short locret_E6F6
mov	bp, ax
lodsw
cmp	ax, [di+2]
jle	short locret_E6F6
cmp	dx, [di]
jnb	short loc_E6C7
mov	dx, [di]

loc_E6C7:
cmp	bp, [di+4]
jb	short loc_E6CF
mov	bp, [di+4]

loc_E6CF:
cmp	bx, [di+2]
jnb	short loc_E6D7
mov	bx, [di+2]

loc_E6D7:
cmp	ax, [di+6]
jb	short loc_E6DF
mov	ax, [di+6]

loc_E6DF:
sub	bp, dx
jbe	short locret_E6F6
sub	ax, bx
jbe	short locret_E6F6
mov	es, word ptr ds:0DBD6h
mov	ds, word ptr ds:0DBD8h
call	dword ptr ss:seg_11380+38F5h
push	ss
pop	ds
assume ds:seg001

locret_E6F6:
retn
sub_E6A4 endp


loc_E6F7:
lodsw
or	ax, ax
loope	loc_E6F7
jz	short loc_E703
mov	bx, si
mov	ax, 1

loc_E703:
dec	ax
retn
mov	dx, 0FFFFh

loc_E708:
lodsw
or	ax, ax
jz	short loc_E726
mov	di, ax
mov	ax, [di+4]
add	ax, [di+6]
test	byte ptr [di+0Ch], 40h
jz	short loc_E71E
mov	ax, 7FFFh

loc_E71E:
cmp	ax, dx
ja	short loc_E726
mov	dx, ax
mov	bx, si

loc_E726:
loop	loc_E708
or	dx, dx
retn



sub_E72B proc near
mov	ax, ds:0CE7Ah
mov	ds:476Eh, ax
mov	word ptr ds:4772h, 1770h
retn
sub_E72B endp




sub_E738 proc near
call	sub_CA9C
jnz	short locret_E790
mov	si, word ptr seg_11380+22A6h
cmp	si, 11h
jnb	short locret_E790
shl	si, 1
shl	si, 1
mov	dx, [si+27B6h]
mov	bx, [si+27B8h]
mov	ax, bx
or	ax, dx
jz	short locret_E790
mov	si, 2792h
cmp	seg_11380+227Dh, 0
jnz	short loc_E773
push	bx
mov	bx, 1
call	sub_10287
pop	bx
mov	si, 2789h
jz	short loc_E773
mov	si, 278Eh

loc_E773:
lodsb
or	al, al
jz	short loc_E78D
jns	short loc_E782
mov	ax, 12Ch
call	sub_10257
jmp	short loc_E773

loc_E782:
push	si
xor	ah, ah
mov	bp, ax
call	sub_E791
pop	si
jmp	short loc_E773

loc_E78D:
call	sub_E3AD

locret_E790:
retn
sub_E738 endp




sub_E791 proc near
push	bx
push	dx
push	word ptr ds:0CE7Ah
mov	si, bp
shl	si, 1
shl	si, 1
sub	dx, [si+2796h]
jnb	short loc_E7A5
xor	dx, dx

loc_E7A5:
sub	bx, [si+2798h]
jnb	short loc_E7AD
xor	bx, bx

loc_E7AD:
push	ds
mov	es, word ptr ds:0DBD8h
mov	ds, word ptr ds:0DBD6h
assume ds:nothing
call	dword ptr ss:seg_11380+3949h
pop	ds
pop	bx

loc_E7BD:
mov	ax, ds:0CE7Ah
sub	ax, bx
cmp	al, ds:0DBE6h
jb	short loc_E7BD
pop	dx
pop	bx
retn
sub_E791 endp




sub_E7CB proc near
call	sub_DF4C
push	bp
call	sub_E8EB
call	sub_E3AD
call	sub_DFC4
pop	bp
call	bp

loc_E7DB:
call	sub_E8C4
jz	short loc_E7DB
call	sub_E3AD
call	sub_CBB6
call	sub_EB55
jz	short loc_E7DB
call	sub_E2E2
jmp	sub_E8D1
sub_E7CB endp




sub_E7F1 proc near
mov	bx, 33A3h
add	bx, ax
add	bx, ax
mov	bx, [bx]
retn
sub_E7F1 endp




sub_E7FB proc near
mov	ds:0DC00h, ax
call	sub_E8D1
call	sub_ECEA
mov	byte ptr ds:0DBE7h, 0
call	sub_ECD1
sub_E7FB endp




sub_E80C proc near
mov	ax, ds:0DC00h
mov	ds:0DC02h, ax
call	sub_E7F1
mov	ax, [bx]
mov	ds:0DBFEh, ax
lea	dx, [bx+2]
call	sub_110F9
mov	ds:35A6h, bx
mov	ds:0DC04h, ax
mov	ds:0DC06h, dx
mov	ds:0DC08h, cx
mov	ds:0DC0Ah, bp
push	word ptr ds:0DC1Ah
push	word ptr ds:0DC0Ch
call	sub_EC5F
jb	short loc_E858
add	si, ax
jb	short loc_E84A
cmp	si, ds:0CE74h
jbe	short loc_E850

loc_E84A:
mov	word ptr ds:0DC0Ch, 0

loc_E850:
sub	ax, 2
mov	cx, ax
call	sub_EC8F

loc_E858:
pop	word ptr ds:0DC0Ch
pop	word ptr ds:0DC1Ah
jb	short locret_E8B7
les	si, ds:0DC0Ch
lods	word ptr es:[si]
add	ax, si
jb	short loc_E872
cmp	ax, ds:0CE74h
jbe	short loc_E874

loc_E872:
xor	si, si

loc_E874:
mov	byte ptr ds:0DBB4h, 0FFh
call	sub_E08A
dec	si

loc_E87D:
inc	si
cmp	byte ptr es:[si], 0FFh
jz	short loc_E87D
xor	bx, bx
test	byte ptr ds:0DBFEh, 4
jz	short loc_E88F
mov	bl, 10h

loc_E88F:
mov	cx, es:[bx+si]
mov	bx, es:[bx+si+2]
mov	ax, ds:0DC04h
add	ax, cx
mov	ds:0DBF6h, ax
mov	ax, ds:0DC06h
adc	ax, bx
mov	ds:0DBF8h, ax
mov	ax, ds:0DC08h
sub	ax, cx
mov	ds:0DBFAh, ax
mov	ax, ds:0DC0Ah
sbb	ax, bx
mov	ds:0DBFCh, ax
clc

locret_E8B7:
retn
sub_E80C endp




sub_E8B8 proc near
call	sub_E930
call	sub_FC33
jb	short loc_E8C1
retn

loc_E8C1:
jmp	sub_FD1E
sub_E8B8 endp




sub_E8C4 proc near
push	word ptr ds:0DBE8h
call	sub_E930
pop	ax
cmp	ax, ds:0DBE8h
retn
sub_E8C4 endp




sub_E8D1 proc near
xor	bx, bx
xchg	bx, ds:35A6h
or	bx, bx
jz	short loc_E8E8
call	sub_ECD1
cmp	bx, ds:0DBBAh
jz	short loc_E8E8
mov	ah, 3Eh
int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
			; BX = file handle

loc_E8E8:
xor	cx, cx
retn
sub_E8D1 endp




sub_E8EB proc near
call	sub_E7FB
jb	short sub_E8D1
call	sub_EC70
jb	short sub_E8D1
mov	byte ptr ds:0DCE6h, 0
les	si, ds:0DC10h
lods	word ptr es:[si]
mov	bp, ds:0DBDEh
call	loc_EBC4
call	sub_C8DF
call	sub_EB66
call	sub_ECEA
inc	word ptr ds:0DBE8h
inc	word ptr ds:0DBEAh
test	byte ptr ds:0DBFEh, 40h
jnz	short sub_E929
mov	cx, 32h	; '2'

loc_E922:
push	cx
call	sub_E9EA
pop	cx
loop	loc_E922
sub_E8EB endp




sub_E929 proc near
mov	ax, ds:0CE7Ah
mov	ds:0DC22h, ax
retn
sub_E929 endp




sub_E930 proc near
cmp	word ptr ds:35A6h, 0
jz	short sub_E96A
cmp	byte ptr ds:0DBFEh, 0
jns	short loc_E941
call	sub_E95F

loc_E941:
call	sub_E970
jnb	short loc_E94B
call	sub_E9EA
jmp	short sub_E930

loc_E94B:
call	sub_E9A4
jb	short sub_E95F
mov	ax, ds:0DC1Eh
inc	ax
jz	short loc_E959
call	sub_ED0B

loc_E959:
call	sub_EB66
call	sub_EB1E
sub_E930 endp




sub_E95F proc near
mov	al, ds:0DBFEh
and	al, 80h
mov	ds:0DBB5h, al
call	sub_E9EA
sub_E95F endp




sub_E96A proc near
mov	byte ptr ds:0DBB5h, 0
retn
sub_E96A endp




sub_E970 proc near
cmp	word ptr ds:0DC16h, 0
ja	short locret_E9A3
mov	cx, ds:0DC1Ah
stc
jcxz	short locret_E9A3
les	si, ds:0DC10h
lods	word ptr es:[si]
cmp	word ptr es:[si], 6D6Dh
jz	short loc_E98F
cmp	cx, ax
jb	short locret_E9A3

loc_E98F:
mov	bp, ds:0DBD6h
test	byte ptr ds:0DBFEh, 40h
jz	short loc_E99E
mov	bp, ds:0DC32h

loc_E99E:
call	loc_EBC4
xor	ax, ax

locret_E9A3:
retn
sub_E970 endp




sub_E9A4 proc near
mov	ax, ds:0DC1Ch
inc	ax
jnz	short loc_E9C0
mov	ax, ds:0CE7Ah
sub	ax, ds:0DC22h
or	ah, ah
jnz	short loc_E9BB
cmp	al, ds:0DBFFh
jb	short locret_E9BF

loc_E9BB:
call	sub_E929
clc

locret_E9BF:
retn

loc_E9C0:
mov	si, ds:3824h
cmp	byte ptr [si+6], 1
cmc
jb	short locret_E9BF
call	sub_C8C4
clc
retn
sub_E9A4 endp

; START	OF FUNCTION CHUNK FOR sub_E9EA

loc_E9D0:
mov	ax, ds:0DBEAh
cmp	ax, ds:0DBEEh
jz	short loc_EA31
mov	ax, ds:0DC08h
or	ax, ds:0DC0Ah
jz	short loc_EA31
call	sub_EC5F
jb	short locret_EA14
call	sub_EADC
; END OF FUNCTION CHUNK	FOR sub_E9EA



sub_E9EA proc near

; FUNCTION CHUNK AT CB00 SIZE 0000001A BYTES
; FUNCTION CHUNK AT CB45 SIZE 000000C7 BYTES

mov	cx, ds:0DC20h
jcxz	short loc_E9D0
cmp	byte ptr ds:0DBFEh, 0
js	short loc_EA08
mov	ax, ds:0DC04h
neg	ax
and	ax, 7FFh
add	ah, 8
cmp	ax, cx
jnb	short loc_EA08
mov	cx, ax

loc_EA08:
call	sub_EAFB
jb	short locret_EA14
sub	ds:0DC20h, cx
jmp	sub_EC8F

locret_EA14:
retn
sub_E9EA endp

; START	OF FUNCTION CHUNK FOR sub_E9EA

loc_EA15:
mov	ds:0DC00h, ax
call	sub_E80C
retn

loc_EA1C:
or	byte ptr ds:0DBE7h, 1
cmp	word ptr ds:0DC1Ah, 0
jnz	short locret_EA30
or	byte ptr ds:0DBE7h, 2
call	sub_E8D1

locret_EA30:
retn

loc_EA31:
test	byte ptr ds:0DBFEh, 1
jz	short loc_EA1C
mov	cx, 1000h
call	sub_EAFB
jb	short locret_EA14
mov	ax, ds:0DBEAh
call	sub_ECD7
mov	ds:0DBECh, ax
call	sub_E96A
mov	ax, ds:0DC02h
cmp	ax, ds:0DC00h
jz	short loc_EA70
call	sub_E7F1
test	byte ptr [bx], 8
jz	short loc_EA15
cmp	word ptr [bx-6], 0
jz	short loc_EA15
mov	ds:0DC00h, ax
lea	si, [bx-8]
mov	di, 0DBF6h
call	sub_7A69
movsb

loc_EA70:
mov	ax, ds:0DBFAh
mov	ds:0DC08h, ax
mov	ax, ds:0DBFCh
mov	ds:0DC0Ah, ax
mov	ax, ds:0DBF6h
mov	ds:0DC04h, ax
mov	ax, ds:0DBF8h
mov	ds:0DC06h, ax
test	byte ptr ds:0DBFEh, 4
jz	short loc_EAD9
mov	ax, ds:0DC00h
add	ax, 61h	; 'a'
call	sub_E00E
mov	bp, ds:0DBB0h
mov	cx, 4

loc_EA9F:
les	di, ds:0DC0Ch
mov	ax, 2
call	sub_ECC7
mov	ax, 0Ah
stosw
mov	si, di
call	sub_EADC
mov	es, word ptr ds:0DBB2h
push	word ptr es:[bp+0]
push	es
les	di, ds:0DC0Ch
mov	ax, 6D6Dh
stosw
mov	ax, bp
stosw
pop	ax
stosw
pop	ax
stosw
add	bp, ax
mov	ax, 8
call	sub_ECC7
loop	loc_EA9F
mov	byte ptr ds:0DBB5h, 80h	; '�'

loc_EAD9:
jmp	loc_E9D0
; END OF FUNCTION CHUNK	FOR sub_E9EA



sub_EADC proc near
add	si, ax
jb	short loc_EAE6
cmp	si, ds:0CE74h
jbe	short loc_EAF0

loc_EAE6:
xor	cx, cx
xchg	cx, ds:0DC0Ch
mov	ds:0DC18h, cx

loc_EAF0:
sub	ax, 2
mov	ds:0DC20h, ax
inc	word ptr ds:0DBEAh
retn
sub_EADC endp




sub_EAFB proc near
mov	ax, ds:0DC0Ch
mov	bx, ds:0DC10h
cmp	ax, bx
jnb	short loc_EB0F
add	ax, cx
add	ax, 12h
cmp	bx, ax
jb	short locret_EB1D

loc_EB0F:
mov	ax, ds:0DC1Ah
add	ax, 0Ah
add	ax, cx
jb	short locret_EB1D
cmp	ds:0DC18h, ax

locret_EB1D:
retn
sub_EAFB endp




sub_EB1E proc near
les	si, ds:0DC10h
lods	word ptr es:[si]
sub	ds:0DC1Ah, ax
add	si, ax
jb	short loc_EB32
cmp	si, ds:0CE74h
jbe	short loc_EB3A

loc_EB32:
sub	ax, 2
mov	ds:0DC10h, ax
xor	ax, ax

loc_EB3A:
add	ds:0DC10h, ax
mov	ax, ds:0DBE8h
inc	ax
cmp	ax, ds:0DBECh
jbe	short loc_EB51
mov	ax, 1
mov	word ptr ds:0DBECh, 0FFFFh

loc_EB51:
mov	ds:0DBE8h, ax
retn
sub_EB1E endp




sub_EB55 proc near
cmp	byte ptr ds:0DBE7h, 0
jz	short locret_EB61
cmp	byte ptr ds:0DBE7h, 1

locret_EB61:
retn
sub_EB55 endp

word_EB62 dw 133h
word_EB64 dw 0



sub_EB66 proc near

; FUNCTION CHUNK AT 4AFD SIZE 00000019 BYTES
; FUNCTION CHUNK AT DBE3 SIZE 00000009 BYTES

mov	ax, ds:38FBh
mov	cs:word_EB64, ax
xor	bp, bp
xchg	bp, ds:0DC16h
or	bp, bp
jz	short locret_EB1D
mov	si, ds:0DC14h
mov	al, ds:0DBFEh
test	al, 30h
jnz	short loc_EBBA
push	ds
test	word ptr ds:0DC24h, 400h
jnz	short loc_EBB1
mov	es, word ptr ds:0DBDAh
mov	bx, ds:0DC00h
mov	ds, bp
lodsw
and	ah, 0F9h
mov	di, ax
lodsw
mov	cx, ax
or	cl, cl
jz	short loc_EBB1
lodsw
mov	dx, ax
lodsw
xchg	ax, bx
cmp	ax, 19h
jnb	short loc_EBB3
call	dword ptr ss:seg_11380+38C9h

loc_EBB1:
pop	ds
retn

loc_EBB3:
call	dword ptr cs:word_EB62
pop	ds
retn

loc_EBBA:
test	al, 20h
jnz	short loc_EBC1
jmp	loc_69CD

loc_EBC1:
jmp	sub_69BB
sub_EB66 endp


loc_EBC4:
mov	word ptr ds:0DC1Ch, 0FFFFh
mov	word ptr ds:0DC1Eh, 0FFFFh
add	ax, si
jb	short loc_EBDA
cmp	ax, ds:0CE74h
jbe	short loc_EBDC

loc_EBDA:
xor	si, si

loc_EBDC:
lods	word ptr es:[si]
cmp	ax, 6473h
jnz	short loc_EBF5
call	sub_CCFF
jz	short loc_EBEC
mov	ds:0DC1Ch, si

loc_EBEC:
lods	word ptr es:[si]
sub	ax, 4
add	si, ax
lods	word ptr es:[si]

loc_EBF5:
cmp	ax, 6C70h
jnz	short loc_EC07
lods	word ptr es:[si]
mov	ds:0DC1Eh, si
sub	ax, 4
add	si, ax
jmp	short loc_EBDC

loc_EC07:
cmp	ax, 6D6Dh
jnz	short loc_EC1E
mov	bx, es:[si+4]
les	si, es:[si]
lods	word ptr es:[si]
cmp	ax, bx
lods	word ptr es:[si]
jz	short loc_EC1E
jmp	sub_EB1E

loc_EC1E:
push	ds
push	es
mov	es, bp
xor	di, di
test	ah, 4
jz	short loc_EC2D
mov	es, word ptr ds:0DBDAh

loc_EC2D:
mov	word ptr ds:0DC16h, es
mov	ds:0DC14h, di
mov	ds:0DC24h, ax
pop	ds
mov	cx, ax
lodsw
xchg	ax, cx
test	ah, 4
jnz	short loc_EC4C
stosw
xchg	ax, cx
stosw
jcxz	short loc_EC4F
test	ch, 2
jz	short loc_EC51

loc_EC4C:
call	sub_112D3

loc_EC4F:
pop	ds
byte_EC50 db 0C3h

loc_EC51:
sub	si, 4
mov	ax, ds
pop	ds
mov	ds:0DC14h, si
mov	ds:0DC16h, ax
retn



sub_EC5F proc near
mov	cx, 2
call	sub_EC8F
jb	short locret_EC6F
les	si, ds:0DC0Ch
mov	ax, es:[si-2]

locret_EC6F:
retn
sub_EC5F endp




sub_EC70 proc near
call	sub_ECEA
call	sub_EC5F
jb	short locret_ECD0
mov	di, ds:0CE74h
sub	di, ax
sub	di, 2
mov	ds:0DC10h, di
stosw
mov	ds:0DC0Ch, di
mov	cx, ax
sub	cx, 2
sub_EC70 endp




sub_EC8F proc near
mov	bx, ds:35A6h
cmp	bx, 1
jb	short locret_ECD0

loc_EC98:
push	cx
mov	cx, ds:0DC06h
mov	dx, ds:0DC04h
mov	ax, 4200h
int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
			; AL = method: offset from beginning of	file
pop	cx
push	ds
lds	dx, ds:0DC0Ch
mov	ah, 3Fh
int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
			; BX = file handle, CX = number	of bytes to read
			; DS:DX	-> buffer
pop	ds
cmp	ax, cx
jb	short loc_EC98
sub	ds:0DC08h, ax
sbb	word ptr ds:0DC0Ah, 0
add	ds:0DC04h, ax
adc	word ptr ds:0DC06h, 0
sub_EC8F endp




sub_ECC7 proc near
add	ds:0DC0Ch, ax
add	ds:0DC1Ah, ax
clc

locret_ECD0:
retn
sub_ECC7 endp




sub_ECD1 proc near
mov	word ptr ds:0DBE8h, 0
sub_ECD1 endp




sub_ECD7 proc near
mov	word ptr ds:0DBEAh, 0
mov	word ptr ds:0DBECh, 0FFFFh
mov	word ptr ds:0DBEEh, 0FFFFh
retn
sub_ECD7 endp




sub_ECEA proc near
mov	ax, ds:0DBDEh
mov	ds:0DC0Eh, ax
mov	ds:0DC12h, ax
xor	ax, ax
mov	ds:0DC0Ch, ax
mov	ds:0DC10h, ax
mov	ds:0DC1Ah, ax
mov	ds:0DC20h, ax
mov	ds:0DC16h, ax
mov	ax, ds:0CE74h
mov	ds:0DC18h, ax
retn
sub_ECEA endp




sub_ED0B proc near
les	si, ds:0DC0Ch
mov	si, ds:0DC1Eh
call	sub_E08A
call	dword ptr ds:3935h
retn
sub_ED0B endp




sub_ED1B proc near
mov	ds:0DC02h, bx
mov	ds:0DBEEh, ax
retn
sub_ED1B endp




sub_ED23 proc near
test	byte ptr ds:3403h, 4
jz	short locret_ED3B
mov	ax, 2

loc_ED2D:
push	ax
add	ax, 61h	; 'a'
call	sub_E00E
pop	ax
inc	ax
cmp	ax, 8
jb	short loc_ED2D

locret_ED3B:
retn
sub_ED23 endp




sub_ED3C proc near
test	byte ptr ds:2943h, 2
jnz	short loc_ED4B
cmp	word ptr ds:39A9h, 15Eh
jnb	short loc_ED5A

loc_ED4B:
mov	ax, 2

loc_ED4E:
call	sub_E7F1
and	byte ptr [bx], 0FBh
inc	ax
cmp	ax, 9
jb	short loc_ED4E

loc_ED5A:
test	byte ptr ds:2943h, 3
jz	short loc_ED6F
xor	ax, ax

loc_ED63:
call	sub_E7F1
and	byte ptr [bx], 7Fh
inc	ax
cmp	ax, 25h	; '%'
jb	short loc_ED63

loc_ED6F:
mov	ax, 2

loc_ED72:
push	ax
call	sub_ED80
pop	ax
inc	ax
cmp	ax, 8
jb	short loc_ED72
jmp	sub_E8D1
sub_ED3C endp




sub_ED80 proc near
call	sub_E7F1
push	bx
call	sub_E7FB
pop	di
jb	short locret_ED98
test	byte ptr [di], 8
jz	short locret_ED98
sub	di, 8
mov	si, 0DBF6h
call	sub_7A69

locret_ED98:
retn
sub_ED80 endp




sub_ED99 proc near
pushf
push	bx
push	cx
push	dx
push	si
push	di
push	bp
push	es
xor	ax, ax
xchg	al, ds:0DBB5h
sti
push	ax
call	sub_E970
jbe	short loc_EDBF
mov	ax, ds:0DC1Eh
inc	ax
jnz	short loc_EDBF
call	sub_E9A4
jb	short loc_EDBF
call	sub_EB66
call	sub_EB1E

loc_EDBF:
pop	ax
mov	ds:0DBB5h, al
pop	es
pop	bp
pop	di
pop	si
pop	dx
pop	cx
pop	bx
popf
retn
sub_ED99 endp

mov	ax, 69h	; 'i'
add	al, ds:0CEEBh
call	sub_E00E
mov	word ptr ds:3622h, 35A8h
xor	ax, ax
call	dword ptr ds:3939h
call	sub_DF7D
mov	ax, 19h
jmp	sub_E8EB
push	word ptr ds:0DBDAh
call	sub_DF5E

loc_EDF2:
mov	si, ds:3622h
lodsw
cmp	ax, ds:0DBE8h
ja	short loc_EE00
call	sub_EE1B

loc_EE00:
call	sub_E8B8
jb	short loc_EE0B
call	sub_EB55
jz	short loc_EDF2
clc

loc_EE0B:
pushf
call	sub_E8D1
call	sub_CAE4
call	sub_CC27
popf
pop	word ptr ds:0DBDAh
retn



sub_EE1B proc near
mov	ax, si
mov	ds:3622h, ax
sub	ax, 35A8h
shr	ax, 1
shr	ax, 1
jnb	short loc_EE31
mov	bx, 0BEh ; '�'
xor	dx, dx
jmp	sub_E0FF

loc_EE31:
mov	di, 0ED80h
mov	es, word ptr ds:0DBD8h
xor	ax, ax
mov	cx, 0B40h
rep stosw
retn
sub_EE1B endp




sub_EE40 proc near
push	bx
dec	si
test	si, 800h
jz	short loc_EE65
call	sub_EEDF
les	bx, ds:47B0h
and	si, 7FFh
shl	si, 1
mov	si, es:[bx+si]
mov	bx, es:[bx]
mov	bx, es:[bx-2]
mov	ds:47B4h, bx
pop	bx
retn

loc_EE65:
shl	si, 1
les	bx, ds:47ACh
mov	si, es:[bx+si]
pop	bx
retn
sub_EE40 endp




sub_EE70 proc near
call	sub_CCFF
jz	short locret_EE88
mov	al, ds:0CEEBh
or	al, al
jz	short loc_EE80
cmp	al, 3
jnz	short locret_EE88

loc_EE80:
mov	al, 2
mov	ds:28E7h, al
mov	ds:28E8h, al

locret_EE88:
retn
sub_EE70 endp




sub_EE89 proc near
xor	bx, bx
mov	di, 0D7F4h
push	ds
pop	es

loc_EE90:
mov	si, [bx-558Ah]
cmp	word ptr [si], 0FFFFh
jnz	short loc_EE9E
add	bx, 2
jmp	short loc_EE90

loc_EE9E:
mov	ax, [si+2]
xchg	al, ah
and	ax, 3FFh
dec	ax
stosw
and	bx, 0FFF0h
add	bx, 10h
cmp	bx, 110h
jb	short loc_EE90

loc_EEB4:
mov	al, ds:0CEEBh
mov	si, 0BBh ; '�'
cmp	al, 6
jnz	short loc_EEC1
mov	si, 0C7h ; '�'

loc_EEC1:
mov	di, 0CEECh
push	ds
pop	es
call	sub_10F89
mov	al, 0C0h ; '�'
add	al, ds:0CEEBh
xor	ah, ah
mov	si, ax
les	di, ds:47ACh
call	sub_10F89
call	sub_1F68
jmp	short loc_EEEA
sub_EE89 endp




sub_EEDF proc near
mov	ax, ds:477Ch
cmp	ax, ds:0AAD6h
mov	al, 93h	; '�'
jb	short loc_EEEC

loc_EEEA:
mov	al, 9Ah	; '�'

loc_EEEC:
add	al, ds:0CEEBh
cmp	al, ds:477Eh
jz	short locret_EF0B
push	si
mov	ds:477Eh, al
xor	ah, ah
mov	si, ax
les	di, ds:47B0h
call	sub_10F89
push	cx
call	sub_1F68
pop	cx
pop	si

locret_EF0B:
retn
sub_EEDF endp




sub_EF0C proc near
lods	byte ptr es:[si]
sub	al, 30h	; '0'
cmp	al, 9
ja	short sub_EF0C

loc_EF14:
lods	byte ptr es:[si]
sub	al, 30h	; '0'
cmp	al, 9
jbe	short loc_EF14
dec	si
retn
sub_EF0C endp




sub_EF1E proc near
mov	ds:0D82Ch, dx
mov	ds:0D82Eh, bx
mov	ds:0D830h, dx
mov	ds:0D832h, bx
retn
sub_EF1E endp




sub_EF2F proc near
mov	dx, ds:0D82Ch
mov	bx, ds:0D82Eh
retn
sub_EF2F endp




sub_EF38 proc near
mov	word ptr ds:2518h, 0D096h
mov	word ptr ds:47A0h, 0CEECh
retn
sub_EF38 endp




sub_EF45 proc near
mov	word ptr ds:2518h, 0D12Fh
mov	word ptr ds:47A0h, 0CF6Ch
retn
sub_EF45 endp




sub_EF52 proc near
mov	word ptr ds:2518h, 0D0FFh
mov	word ptr ds:47A0h, 0CEECh
retn
sub_EF52 endp




sub_EF5F proc near
mov	word ptr ds:2518h, 0D16Ah
retn
sub_EF5F endp


loc_EF66:
push	ax
push	bx
push	cx
push	dx
push	si
push	di
push	bp
push	es
xor	ah, ah
mov	si, ax
shl	si, 1
shl	si, 1
shl	si, 1
add	si, ax
add	si, ds:2514h
mov	bx, 0CEECh
xlat
call	sub_EF2F
add	ds:0D82Ch, ax
mov	cl, al
mov	ch, 9
mov	ax, ds:0DBE4h
mov	es, word ptr ds:0DBDAh
call	dword ptr ds:38D1h
pop	es
pop	bp
pop	di
pop	si
pop	dx
pop	cx
pop	bx
pop	ax
retn
inc	cx
inc	sp
inc	bp
dec	sp
dec	di
push	ax
push	bx
push	sp
push	bp
and	ds:211Ch, bx
sbb	[bx+si], bx
sbb	[bx], dl
pop	ds



sub_EFB3 proc near
push	cx
push	di
push	es
push	cs
pop	es
assume es:seg000
mov	di, 0D0D1h
mov	cx, 9
repne scasb
pop	es
assume es:nothing
stc
jnz	short loc_EFCC
mov	al, cs:[di+8]
mov	ah, 0Dh
sub	ah, cl

loc_EFCC:
pop	di
pop	cx
retn
sub_EFB3 endp

call	sub_EF38
call	sub_EFB3
jb	short loc_EF66
call	sub_10140
push	es
push	ax
mov	ax, 32h	; '2'
call	sub_E00E
call	sub_EF2F
pop	ax
mov	cl, ah
xor	ah, ah
add	ds:0D82Ch, ax
mov	al, cl
sub	bx, 13h
jnb	short loc_EFF7
xor	bx, bx

loc_EFF7:
call	sub_E0FF
pop	es
call	sub_10153
retn



sub_EFFF proc near
push	ax
push	bx
push	cx
push	dx
push	si
push	di
push	bp
push	es
xor	ah, ah
mov	si, ax
shl	si, 1
shl	si, 1
shl	si, 1
sub	si, ax
add	si, ds:2516h
mov	bx, 0CF6Ch
xlat
call	sub_EF2F
add	ds:0D82Ch, ax
mov	cl, al
mov	ch, 7
mov	ax, ds:0DBE4h
mov	es, word ptr ds:0DBDAh
call	dword ptr ds:38D1h
pop	es
pop	bp
pop	di
pop	si
pop	dx
pop	cx
pop	bx
pop	ax
retn
sub_EFFF endp

call	sub_10140
push	es
xor	ah, ah
sub	al, 20h	; ' '
push	ax
mov	ax, 13h
call	sub_E00E
pop	ax
push	ax
call	sub_E0C4
lods	word ptr es:[si]
xor	ah, ah
add	al, 2
call	sub_EF2F
add	ds:0D82Ch, ax
pop	ax
call	sub_E0FF
pop	es
call	sub_10153
retn



sub_F064 proc near
mov	ds:0DBE4h, cx
call	sub_EF1E
sub_F064 endp




sub_F06B proc near
push	si
mov	si, ax
call	sub_EE40
call	sub_F08B
pop	si

locret_F075:
retn
sub_F06B endp




sub_F076 proc near
lodsw
mov	cx, ax
inc	ax
jz	short locret_F075
lodsw
mov	dx, ax
lodsw
mov	bx, ax
lodsw
xchg	ax, cx
push	si
call	sub_F064
pop	si
jmp	short sub_F076
sub_F076 endp




sub_F08B proc near
lods	byte ptr es:[si]
cmp	al, 0FFh
jz	short locret_F075
cmp	al, 0Dh
jz	short loc_F0A1
or	al, al
jns	short loc_F09B
mov	al, 40h	; '@'

loc_F09B:
call	word ptr ds:2518h
jmp	short sub_F08B

loc_F0A1:
mov	ax, ds:0D830h
mov	ds:0D82Ch, ax
mov	ax, 0Ah
cmp	word ptr ds:2518h, 0D12Fh
jnz	short loc_F0B5
mov	ax, 7

loc_F0B5:
add	ds:0D832h, ax
add	ds:0D82Eh, ax
jmp	short sub_F08B
sub_F08B endp

lodsw
mov	cx, ax



sub_F0C2 proc near
call	sub_E007

loc_F0C5:
push	cx
call	sub_F0D0
pop	cx
add	si, 0Eh
loop	loc_F0C5
retn
sub_F0C2 endp




sub_F0D0 proc near
push	word ptr ds:0DBDAh
call	sub_DF5E
push	si
test	byte ptr [si+8], 40h
jz	short loc_F0E8
mov	es, word ptr ds:0DBDAh
push	si
call	dword ptr ds:38D9h
pop	si

loc_F0E8:
test	byte ptr [si+8], 20h
jnz	short loc_F103
lodsw
mov	dx, ax
lodsw
mov	bx, ax
lodsw
mov	di, ax
lodsw
mov	cx, ax
lodsw
lodsw
inc	ax
jz	short loc_F103
dec	ax
call	sub_E0FF

loc_F103:
pop	si
pop	word ptr ds:0DBDAh
retn
sub_F0D0 endp




sub_F109 proc near
mov	ch, 2
jmp	short loc_F10F
sub_F109 endp




sub_F10D proc near
xor	cx, cx

loc_F10F:
mov	si, 1AF4h
mov	ax, [si+0Ah]
sub	ax, 0
mov	cl, 3
div	cl
cmp	ch, ah
jz	short locret_F14F
mov	ax, 1
jnb	short loc_F127
neg	ax

loc_F127:
push	ax
push	si
add	[si+0Ah], ax
add	[si+18h], ax
mov	cx, 2
call	sub_F0C2
call	sub_3904
mov	ax, 0Ah
call	sub_10257
pop	si
pop	ax
add	[si+0Ah], ax
add	[si+18h], ax
mov	cx, 2
call	sub_F0C2
call	sub_3904

locret_F14F:
retn
sub_F10D endp




sub_F150 proc near
cmp	byte ptr ds:0DCE6h, 0
jle	short locret_F18C
call	sub_10140
mov	byte ptr ds:0DCE6h, 0
call	sub_F109
mov	cx, 11h

loc_F165:
push	cx
push	word ptr ds:0CE7Ah
mov	si, ds:0DBDEh
mov	al, 18h
call	sub_DFA5
pop	bx

loc_F174:
push	bx
call	sub_C692
pop	bx
mov	ax, ds:0CE7Ah
sub	ax, bx
cmp	ax, 6
jb	short loc_F174
pop	cx
loop	loc_F165
call	sub_F10D
call	sub_10153

locret_F18C:
retn
sub_F150 endp




sub_F18D proc near
mov	al, ds:0DCE6h
push	ax

loc_F191:
mov	byte ptr ds:0DCE6h, 80h	; '�'
mov	si, ds:21DAh
mov	si, [si]
lodsb
cmp	al, 0FFh
jz	short loc_F1AA
and	al, 0Fh
jz	short loc_F1AA
call	sub_F1BA
jmp	short loc_F191

loc_F1AA:
pop	ax
mov	ds:0DCE6h, al
retn
sub_F18D endp

call	loc_F1CD



sub_F1B2 proc near
call	sub_F1E6
call	sub_F1BA
jmp	short sub_F150
sub_F1B2 endp




sub_F1BA proc near
mov	si, ds:21DAh
mov	di, [si]
mov	al, [di]
and	al, 0Fh
cmp	al, 0Fh
jz	short locret_F1E5
mov	ax, [si+2]
call	ax

loc_F1CD:
mov	si, ds:21DAh
cmp	si, 21BEh
jz	short locret_F1E5
sub	si, 4
mov	ds:21DAh, si
mov	bp, [si]
mov	cl, 0FFh
call	sub_F23D

locret_F1E5:
retn
sub_F1BA endp




sub_F1E6 proc near
cmp	word ptr ds:35A6h, 0
jnz	short locret_F1F2
or	byte ptr ds:0DCE6h, 1

locret_F1F2:
retn
sub_F1E6 endp




sub_F1F3 proc near
call	sub_F1E6
call	sub_F208
call	sub_F150
jmp	loc_F2E0
sub_F1F3 endp


loc_F1FF:
call	sub_F1E6
call	loc_F20A
jmp	sub_F150



sub_F208 proc near
mov	cl, 0FFh

loc_F20A:
mov	si, ds:21DAh
mov	di, [si]
mov	al, [bp+0]
cmp	al, [di]
jz	short loc_F238
jb	short loc_F22B
push	bp
push	bx
push	cx
mov	ax, [si+2]
call	ax
sub	word ptr ds:21DAh, 4
pop	cx
pop	bx
pop	bp
jmp	short loc_F20A

loc_F22B:
cmp	si, 21D6h
jz	short loc_F238
add	si, 4
mov	ds:21DAh, si

loc_F238:
mov	[si], bp
mov	[si+2],	bx
sub_F208 endp




sub_F23D proc near
mov	si, ds:21DAh
mov	[si], bp
mov	si, bp
add	bp, 2

loc_F248:
cmp	word ptr [bp+0], 0
jz	short loc_F258
and	word ptr [bp+0], 7FFFh
add	bp, 4
jmp	short loc_F248

loc_F258:
cmp	cx, 5
jnb	short sub_F267
shl	cx, 1
shl	cx, 1
mov	bx, cx
or	byte ptr [bx+si+3], 80h
sub_F23D endp




sub_F267 proc near
mov	byte ptr ds:0DCE7h, 0FFh
mov	si, ds:21DAh
mov	si, [si]
inc	si
lodsb
mov	ds:0DCE4h, al
cbw
add	si, ax
xor	cx, cx
mov	ds:0DCE8h, cl
mov	byte ptr ds:0DCE5h, 0FFh

loc_F285:
mov	ax, [si]
or	ax, ax
jz	short loc_F2BF
cmp	cl, 4
jb	short loc_F2A9
cmp	byte ptr ds:0DCE4h, 0
jnz	short loc_F29D
cmp	word ptr [si+4], 0
jz	short loc_F2A9

loc_F29D:
or	byte ptr ds:0DCE4h, 80h
mov	ax, 0A0h ; '�'
mov	ds:0DCE5h, cl

loc_F2A9:
add	si, 4
push	cx
push	si
inc	byte ptr ds:0DCE8h
call	sub_F35A
pop	si
pop	cx
inc	cx
cmp	cl, 5
jb	short loc_F285
jmp	short loc_F2E0

loc_F2BF:
cmp	byte ptr ds:0DCE4h, 0
jz	short loc_F2D3
mov	ax, 0A0h ; '�'
mov	ds:0DCE5h, cl
inc	byte ptr ds:0DCE8h
jmp	short loc_F2D5

loc_F2D3:
xor	ax, ax

loc_F2D5:
push	cx
call	sub_F35A
pop	cx
inc	cx
cmp	cl, 5
jb	short loc_F2D3

loc_F2E0:
mov	dx, ds:0DC36h
mov	bx, ds:0DC38h
jmp	sub_F3DF
sub_F267 endp




sub_F2EB proc near
mov	bp, ds:21DAh
mov	bp, [bp+0]
retn
sub_F2EB endp

add	byte ptr [si], 10h
jmp	sub_F267
mov	byte ptr [si], 0
jmp	sub_F267
mov	cx, 4
jmp	short loc_F315
mov	cx, 3
jmp	short loc_F315
mov	cx, 2
jmp	short loc_F315
mov	cx, 1
jmp	short loc_F315
xor	cx, cx

loc_F315:
call	sub_F324
or	bx, bx
jz	short locret_F323
test	ah, 40h
jnz	short locret_F323
jmp	bx

locret_F323:
retn



sub_F324 proc near
mov	si, ds:21DAh
mov	si, [si]
inc	si
xor	ch, ch
cmp	cl, ds:0DCE5h
jz	short loc_F345
lodsb
cbw
add	si, ax
mov	ax, cx
shl	ax, 1
shl	ax, 1
add	si, ax
mov	ax, [si]
mov	bx, [si+2]
retn

loc_F345:
mov	ax, 0A0h ; '�'
mov	bx, 0D423h
cmp	byte ptr ds:0DCE4h, 0
js	short locret_F359
mov	bx, 0D429h
jg	short locret_F359
xor	bx, bx

locret_F359:
retn
sub_F324 endp




sub_F35A proc near
push	word ptr ds:0DBDAh
call	sub_DF5E
cmp	byte ptr ds:0DCE6h, 0
jle	short loc_F36B
call	sub_DF4C

loc_F36B:
call	sub_EF45
mov	si, ax
mov	al, 0Eh
mul	cl
mov	di, ax
add	di, 1B48h
mov	bx, [di+2]
inc	bx
mov	dx, 5Dh	; ']'
call	sub_EF1E
mov	byte ptr ds:0DBE5h, 0F3h ; '�'
and	byte ptr [di+8], 7Fh
mov	ax, si
and	si, 3FFFh
jz	short loc_F3B9
mov	al, 0F5h ; '�'
test	ah, 40h
jnz	short loc_F3AA
or	byte ptr [di+8], 80h
mov	al, 0FAh ; '�'
or	ah, ah
jns	short loc_F3AA
xchg	al, ds:0DBE5h

loc_F3AA:
mov	ds:0DBE4h, al
call	sub_EE40
mov	al, 20h	; ' '
call	word ptr ds:2518h
call	sub_F08B

loc_F3B9:
call	sub_EF2F
mov	si, 0DCE9h
mov	[si], dx
mov	[si+2],	bx
mov	word ptr [si+4], 0E3h ;	'�'
add	bx, 7
mov	[si+6],	bx
mov	al, ds:0DBE5h
mov	es, word ptr ds:0DBDAh
call	dword ptr ds:38DDh
pop	word ptr ds:0DBDAh
retn
sub_F35A endp




sub_F3DF proc near
push	bx
push	cx
push	dx
push	si
push	di
push	bp
cmp	byte ptr ds:4774h, 0
jz	short loc_F3F3
mov	cl, ds:4775h
jmp	loc_F4AD

loc_F3F3:
call	sub_F2EB
cmp	bp, 1F0Eh
jnz	short loc_F445
cmp	byte ptr ds:11C9h, 0
jnz	short loc_F445
mov	di, 1BF0h
cmp	byte ptr [di+8], 0
jns	short loc_F415
call	sub_F5CE
mov	cx, ds:47C4h
jb	short loc_F42D

loc_F415:
push	bp
call	sub_B155
pop	bp
jnb	short loc_F445
mov	al, cl
sub	al, 0Fh
jb	short loc_F42D
inc	al
cmp	al, ds:476Bh
jnz	short loc_F42D
mov	cx, 17h

loc_F42D:
mov	bp, cx
add	bp, 78h	; 'x'
xor	cx, cx

loc_F435:
call	sub_F324
cmp	ax, bp
jz	short loc_F4AD
inc	cx
cmp	cl, ds:0DCE8h
jb	short loc_F435
jmp	short loc_F4AB

loc_F445:
cmp	bp, 1F7Eh
jnz	short loc_F481
mov	di, 1BE2h
cmp	byte ptr [di+8], 0
jns	short loc_F463
xor	cx, cx
call	sub_F5CE
jb	short loc_F4AD
mov	di, 1BF0h
call	sub_F5CE
jb	short loc_F4AD

loc_F463:
cmp	byte ptr ds:1BF8h, 0
jns	short loc_F481
mov	di, 1BFEh
call	sub_F5CE
mov	cl, 3
jb	short loc_F4AD
call	sub_B199
jnb	short loc_F481
cmp	cx, ds:47C4h
mov	cl, 2
jz	short loc_F4AD

loc_F481:
cmp	bx, 98h	; '�'
jb	short loc_F4AB
mov	cl, 0FFh
mov	di, 1B48h
cmp	dx, [di]
jb	short loc_F4AD
cmp	dx, [di+4]
jnb	short loc_F4AD
xor	cx, cx

loc_F497:
cmp	bx, [di+2]
jbe	short loc_F4AB
cmp	bx, [di+6]
jbe	short loc_F4AD
add	di, 0Eh
inc	cx
cmp	cl, ds:0DCE8h
jb	short loc_F497

loc_F4AB:
mov	cl, 0FFh

loc_F4AD:
mov	al, cl
xchg	cl, ds:0DCE7h
cmp	al, cl
jz	short loc_F4E0
call	sub_FA82
or	cl, cl
js	short loc_F4CC
cmp	cl, ds:0DCE8h
jnb	short loc_F4CC
push	ax
call	sub_F324
call	sub_F35A
pop	ax

loc_F4CC:
cmp	al, ds:0DCE8h
jnb	short loc_F4DD
mov	cx, ax
call	sub_F324
or	ah, 80h
call	sub_F35A

loc_F4DD:
call	sub_FABC

loc_F4E0:
pop	bp
pop	di
pop	si
pop	dx
pop	cx
pop	bx
retn
sub_F3DF endp




sub_F4E7 proc near
push	ax
mov	ax, 90h	; '�'
jmp	short loc_F4F1
sub_F4E7 endp




sub_F4ED proc near
push	ax
mov	ax, 9Fh	; '�'

loc_F4F1:
call	sub_10140
call	sub_F2EB
mov	si, 1F7Eh
cmp	[si+2],	ax
mov	[si+2],	ax
jz	short loc_F519
cmp	bp, si
jnz	short loc_F519
call	sub_FA82
xor	cx, cx
call	sub_F324
call	sub_F35A
mov	byte ptr ds:0DCE7h, 0FFh
call	sub_FABC

loc_F519:
call	sub_10153
pop	ax
retn
sub_F4ED endp




sub_F51E proc near
push	bx
push	dx
xor	bx, bx
xor	dx, dx
call	sub_F3DF
pop	dx
pop	bx
retn
sub_F51E endp




sub_F52A proc near
test	byte ptr [di+9], 20h
jz	short locret_F546
mov	ds:0DC60h, di
inc	word ptr [di+0Ah]
push	si
push	di
mov	si, di
mov	cx, 1
call	sub_F0C2
pop	di
pop	si
dec	word ptr [di+0Ah]

locret_F546:
retn
sub_F52A endp

call	sub_10140
xor	si, si
xchg	si, ds:0DC60h
or	si, si
jz	short loc_F560
call	sub_FA82
mov	cx, 1
call	sub_F0C2
call	sub_FABC

loc_F560:
call	sub_10153
retn



sub_F564 proc near
mov	ax, ds:2582h
mov	di, 1B9Ch
cmp	ax, 260Ch
jz	short loc_F585
add	di, 0Eh
cmp	ax, 2650h
jz	short loc_F585
add	di, 0Eh
cmp	ax, 2694h
jz	short loc_F585
add	di, 0Eh
cmp	ax, 26D8h

loc_F585:
stc
retn
sub_F564 endp




sub_F587 proc near
call	sub_F564
jz	short locret_F5CD
mov	di, 1AE4h
mov	cx, [di]
add	di, 2
cmp	word ptr ds:2570h, 1AD6h
jnz	short loc_F59F
sub	cx, 5

loc_F59F:
cmp	byte ptr ds:46D9h, 0
jz	short loc_F5AC
mov	cx, 5
mov	di, 1B48h

loc_F5AC:
cmp	byte ptr [di+8], 0
jns	short loc_F5C7
cmp	dx, [di]
jbe	short loc_F5C7
cmp	dx, [di+4]
jnb	short loc_F5C7
cmp	bx, [di+2]
jbe	short loc_F5C7
dec	bx
cmp	bx, [di+6]
inc	bx
jb	short locret_F5CD

loc_F5C7:
add	di, 0Eh
loop	loc_F5AC
clc

locret_F5CD:
retn
sub_F587 endp




sub_F5CE proc near
cmp	dx, [di]
jbe	short loc_F5E0
cmp	dx, [di+4]
jnb	short loc_F5E0
cmp	bx, [di+2]
jbe	short loc_F5E0
cmp	bx, [di+6]
retn

loc_F5E0:
clc
retn
sub_F5CE endp

; START	OF FUNCTION CHUNK FOR sub_F5E7

loc_F5E2:
mov	si, 1CCAh
jmp	short sub_F5FB
; END OF FUNCTION CHUNK	FOR sub_F5E7



sub_F5E7 proc near

; FUNCTION CHUNK AT D712 SIZE 00000005 BYTES

cmp	byte ptr ds:46EBh, 0
jnz	short loc_F5E2
mov	si, 1C76h
test	byte ptr ds:11C9h, 3
jz	short sub_F5FB
mov	si, 1D72h
sub_F5E7 endp




sub_F5FB proc near
push	ds
pop	es
mov	di, 1B8Eh
mov	cx, 2Ah	; '*'
rep movsw

loc_F605:
call	sub_F611
mov	si, 1B8Eh
mov	cx, 6
jmp	sub_F0C2
sub_F5FB endp




sub_F611 proc near
mov	ax, ds:1B0Ch
sub	ax, 3
cmp	ax, 3
jnb	short locret_F629
mov	si, 2458h
mov	es, word ptr ds:0DBD8h
mov	al, 0F0h ; '�'
call	dword ptr ds:38DDh

locret_F629:
retn
sub_F611 endp

mov	si, 1C36h
call	loc_F665
call	sub_3904



sub_F633 proc near
mov	si, 1C0Ch
mov	ax, 40h	; '@'
mov	[si+0Ah], ax
mov	[si+18h], ax
mov	cx, 2
call	sub_F0C2
mov	si, 1C0Ch
mov	al, ds:1152h
cbw
add	ax, 41h	; 'A'
mov	[si+0Ah], ax
mov	al, ds:1153h
cbw
add	ax, 41h	; 'A'
mov	[si+18h], ax
mov	cx, 2
jmp	sub_F0C2
sub_F633 endp




sub_F662 proc near
mov	si, 1C66h

loc_F665:
push	ds
pop	es
mov	di, 1AEEh
mov	cx, 4

loc_F66D:
movsw
movsw
add	di, 0Ah
loop	loc_F66D
mov	si, 1AE6h
mov	cx, 3
jmp	sub_F0C2
sub_F662 endp




sub_F67D proc near
mov	si, 1C56h
jmp	short loc_F665
sub_F67D endp




sub_F682 proc near
mov	si, 1C46h
jmp	short loc_F665
sub_F682 endp




sub_F687 proc near
mov	ax, ds:0CE7Ah
shl	ax, 1
shl	ax, 1
cmp	ah, ds:0DCF1h
jz	short locret_F6E4
mov	ds:0DCF1h, ah
mov	ax, ds:2222h
or	ax, ax
jz	short locret_F6E4
mov	bx, ds:1152h
push	bx
or	al, al
jz	short loc_F6B0
dec	al
test	al, 1
jz	short loc_F6B0
mov	bl, 0FFh

loc_F6B0:
or	ah, ah
jz	short loc_F6BD
dec	ah
test	ah, 1
jz	short loc_F6BD
mov	bh, 0FFh

loc_F6BD:
mov	ds:2222h, ax
mov	ds:1152h, bx
cmp	word ptr ds:1AFEh, 0
jnz	short loc_F6E0
push	word ptr ds:2784h
call	sub_E007
call	sub_FA82
call	sub_F633
call	sub_FABC
pop	ax
call	sub_E00E

loc_F6E0:
pop	word ptr ds:1152h

locret_F6E4:
retn
sub_F687 endp




sub_F6E5 proc near
mov	ax, ds:0CE7Ah
mov	ds:0DC68h, ax
mov	byte ptr ds:0DC4Bh, 0

loc_F6F0:
cmp	byte ptr ds:0CEE8h, 2Fh	; '/'
jnz	short loc_F701
cmp	byte ptr ds:0CE9Eh, 0FFh
jnz	short loc_F701
call	sub_D140

loc_F701:
cmp	byte ptr ds:46D9h, 0
jnz	short loc_F70E
call	sub_F687
call	sub_39DD

loc_F70E:
call	sub_F8A2
cmp	byte ptr ds:46D9h, 0
jz	short loc_F71B
call	sub_2C5E

loc_F71B:
call	sub_1029C
mov	ds:0, ax
call	sub_6DDC
cmp	byte ptr ds:0DC4Bh, 0
jz	short loc_F730
call	sub_F832
jmp	short loc_F736

loc_F730:
call	sub_FDEE
call	sub_FA1C

loc_F736:
call	sub_FAF0
mov	di, dx
xchg	di, ds:0DC62h
mov	cx, bx
xchg	cx, ds:0DC64h
sub	di, dx
sub	cx, bx
neg	di
neg	cx
mov	si, ds:2570h
and	ax, 0Fh
jnz	short loc_F763
call	sub_F3DF
mov	ax, cx
or	ax, di
jz	short $+2
call	word ptr [si]
jmp	short loc_F6F0

loc_F763:
mov	bp, ds:0CE7Ah
mov	ds:0DC5Ah, bp
cmp	byte ptr ds:4774h, 0
jz	short loc_F781
and	al, 5
cmp	al, 5
jnz	short loc_F7A7
call	sub_FA82
call	sub_35D7
jmp	loc_F6F0

loc_F781:
test	al, 5
jnz	short loc_F78A
add	si, 2
shr	ax, 1

loc_F78A:
and	al, 5
dec	al
jnz	short loc_F7C4
mov	bp, ds:0DC5Ch
or	bp, bp
jnz	short loc_F7AA
mov	ax, cx
or	ax, di
jz	short loc_F7A7
call	sub_FA82
mov	al, ds:0DC35h
call	word ptr [si+0Ah]

loc_F7A7:
jmp	loc_F6F0

loc_F7AA:
mov	ax, ds:0CE7Ah
sub	ax, ds:0DC5Eh
cmp	ax, 32h	; '2'
jb	short loc_F7A7
call	sub_F587
jnb	short loc_F7A7
cmp	di, bp
jnz	short loc_F7A7
call	sub_FA82
jmp	short loc_F7FB

loc_F7C4:
call	sub_FA82
call	nullsub_4
sub	al, 3
jz	short loc_F814
cmp	si, ds:2570h
jnz	short loc_F7DE
call	sub_F587
jb	short loc_F7E8
push	si
call	sub_B0E5
pop	si

loc_F7DE:
mov	al, ds:0DC35h
call	word ptr [si+2]
jmp	loc_F6F0
retn

loc_F7E8:
mov	ds:0DC60h, di
call	sub_F52A
test	byte ptr [di+9], 40h
jz	short loc_F7FB
mov	ds:0DC5Ch, di
jmp	short loc_F805

loc_F7FB:
mov	byte ptr ds:0CE9Dh, 0
mov	byte ptr ds:0CEBAh, 0

loc_F805:
mov	ax, ds:0CE7Ah
mov	ds:0DC5Eh, ax
mov	al, ds:0DC35h
call	word ptr [di+0Ch]
jmp	loc_F6F0

loc_F814:
mov	di, ds:0DC5Ch
mov	word ptr ds:0DC5Ch, 0
or	di, di
jnz	short loc_F7FB
mov	al, ds:0DC35h
call	word ptr [si+6]
jmp	loc_F6F0
sub_F6E5 endp




sub_F82B proc near
mov	ax, 2572h
sub_F82B endp




sub_F82E proc near
mov	ds:2570h, ax
retn
sub_F82E endp




sub_F832 proc near
mov	ax, ds:0CE7Ah
sub	al, ds:0DC4Ah
cmp	al, 6
jb	short loc_F89F
mov	cx, 2
cmp	al, 0Ch
jb	short loc_F84A
dec	cx
cmp	al, 18h
jb	short loc_F84A
dec	cx

loc_F84A:
mov	ax, ds:0CE7Ah
mov	ds:0DC4Ah, al
dec	byte ptr ds:0DC4Bh
mov	dx, ds:0DC4Ch
mov	bx, ds:0DC4Eh
sub	dx, ds:0DC36h
jz	short loc_F873
jcxz	short loc_F86B
sar	dx, cl
or	dl, 1
jmp	short loc_F873

loc_F86B:
mov	ax, dx
sar	ax, 1
sar	ax, 1
sub	dx, ax

loc_F873:
sub	bx, ds:0DC38h
jz	short loc_F88A
jcxz	short loc_F882
sar	bx, cl
or	bl, 1
jmp	short loc_F88A

loc_F882:
mov	ax, bx
sar	ax, 1
sar	ax, 1
sub	bx, ax

loc_F88A:
mov	ax, bx
or	ax, dx
jnz	short loc_F897
mov	byte ptr ds:0DC4Bh, 0
jmp	short loc_F89F

loc_F897:
call	sub_F97F
mov	byte ptr ds:0DC34h, 0

loc_F89F:
jmp	sub_FA1C
sub_F832 endp




sub_F8A2 proc near
call	sub_CBB6
mov	ax, ds:0CE7Ah
mov	cx, ax
mov	bx, ax
mov	si, 0DC68h
xchg	cx, [si]
sub	bx, cx
mov	cx, [si+2]
jcxz	short locret_F8D3
add	si, 4

loc_F8BB:
lodsw
mov	bp, ax
mov	ax, bx
add	ax, [si]
cmp	ax, bp
jnb	short loc_F8D4
mov	[si], ax
add	si, 4
loop	loc_F8BB

loc_F8CD:
mov	word ptr ds:0DC66h, 0

locret_F8D3:
retn

loc_F8D4:
or	bp, bp
jz	short loc_F8DE
xor	dx, dx
div	bp
mov	[si], dx

loc_F8DE:
sub	si, 2
push	bx
push	cx
push	si
mov	ds:0DC66h, sp
call	word ptr [si+4]
pop	si
pop	cx
pop	bx
add	si, 6
loop	loc_F8BB
jmp	short loc_F8CD
sub_F8A2 endp




sub_F8F5 proc near
push	ds
pop	es
mov	di, 0DC6Ah
mov	ax, [di]
inc	ax
cmp	ax, 14h
ja	short locret_F922
stosw
dec	ax
add	ax, ax
mov	bx, ax
add	ax, ax
add	ax, bx
add	di, ax
mov	ax, bp
stosw
xor	ax, ax
stosw
mov	ax, si
stosw
mov	bp, ds:0DC66h
or	bp, bp
jz	short locret_F922
inc	word ptr [bp+2]

locret_F922:
retn
sub_F8F5 endp




sub_F923 proc near
mov	word ptr ds:0DC6Ah, 0
mov	byte ptr ds:46D7h, 0
retn
sub_F923 endp




sub_F92F proc near
mov	di, 0DC6Ah
mov	cx, [di]
jcxz	short locret_F942
add	di, 6

loc_F939:
cmp	[di], si
jz	short loc_F943
add	di, 6
loop	loc_F939

locret_F942:
retn

loc_F943:
sub	di, 4
dec	word ptr ds:0DC6Ah
mov	bp, ds:0DC66h
or	bp, bp
jz	short loc_F960
cmp	di, [bp+0]
ja	short loc_F95D
sub	word ptr [bp+0], 6
jmp	short loc_F960

loc_F95D:
dec	word ptr [bp+2]

loc_F960:
dec	cx
jz	short locret_F942
mov	ax, cx
add	cx, cx
add	cx, ax
mov	si, di
add	si, 6
push	ds
pop	es
rep movsw
retn
sub_F92F endp




sub_F973 proc near
mov	word ptr ds:0DC58h, 0
retn
sub_F973 endp




sub_F97A proc near
mov	ds:0DC58h, si
retn
sub_F97A endp




sub_F97F proc near
mov	si, 0DC3Ah
mov	ax, ds:0DC36h
add	ax, dx
cmp	ax, [si]
jge	short loc_F98D
mov	ax, [si]

loc_F98D:
add	si, 2
cmp	ax, [si]
jle	short loc_F996
mov	ax, [si]

loc_F996:
mov	ds:0DC36h, ax
add	si, 2
mov	ax, ds:0DC38h
add	ax, bx
cmp	ax, [si]
jge	short loc_F9A7
mov	ax, [si]

loc_F9A7:
add	si, 2
cmp	ax, [si]
jle	short loc_F9B0
mov	ax, [si]

loc_F9B0:
mov	ds:0DC38h, ax
sub_F97F endp




sub_F9B3 proc near
test	byte ptr ds:2942h, 40h
jnz	short locret_F9D2
mov	ax, ds:0DC36h
mov	dx, ds:0DC38h
mov	cx, ds:2580h
shl	ax, cl
mov	cl, ch
shl	dx, cl
mov	cx, ax
mov	ax, 4
int	33h		; - MS MOUSE - POSITION	MOUSE CURSOR
			; CX = column, DX = row

locret_F9D2:
retn
sub_F9B3 endp




sub_F9D3 proc near
call	sub_FA82
mov	ds:0DC36h, dx
mov	ds:0DC38h, bx
call	sub_F9B3
jmp	sub_FABC
sub_F9D3 endp




sub_F9E4 proc near
mov	di, 0DC3Ah
mov	[di], cx
mov	[di+2],	dx
mov	[di+4],	ax
mov	[di+6],	bx
test	byte ptr ds:2942h, 40h
jnz	short locret_FA13
push	ax
push	bx
mov	al, ds:2580h
call	sub_FA14
mov	ax, 7
int	33h		; - MS MOUSE - DEFINE HORIZONTAL CURSOR	RANGE
			; CX = minimum column, DX = maximum column
pop	dx
pop	cx
mov	al, ds:2581h
call	sub_FA14
mov	ax, 8
int	33h		; - MS MOUSE - DEFINE VERTICAL CURSOR RANGE
			; CX = minimum row, DX = maximum row

locret_FA13:
retn
sub_F9E4 endp




sub_FA14 proc near
xchg	ax, cx
shl	ax, cl
shl	dx, cl
mov	cx, ax
retn
sub_FA14 endp




sub_FA1C proc near
mov	ax, ds:0DC34h
and	al, 3
mov	ds:0DC35h, al
xor	ah, al
add	ah, ah
add	ah, ah
or	al, ah
xor	ah, ah
mov	dx, ds:0DC36h
mov	bx, ds:0DC38h
retn
sub_FA1C endp




sub_FA37 proc near
cmp	byte ptr ds:0DC47h, 0
jns	short locret_FA7B
inc	byte ptr ds:0DC47h
jmp	short sub_FABC
sub_FA37 endp




sub_FA44 proc near
cmp	byte ptr ds:0DC46h, 0
js	short locret_FA7B
push	bx
push	dx
mov	bx, ds:2582h
mov	dx, ds:0DC42h
sub	dx, [bx]
mov	bx, [bx+2]
neg	bx
add	bx, ds:0DC44h
cmp	dx, [si+4]
jge	short loc_FA79
cmp	bx, [si+6]
jge	short loc_FA79
add	dx, 10h
cmp	dx, [si]
jle	short loc_FA79
add	bx, 10h
cmp	bx, [si+2]
jg	short loc_FA7C

loc_FA79:
pop	dx
pop	bx

locret_FA7B:
retn

loc_FA7C:
pop	dx
pop	bx
dec	byte ptr ds:0DC47h
sub_FA44 endp




sub_FA82 proc near
push	ax
mov	al, ds:0DC46h
dec	byte ptr ds:0DC46h
js	short loc_FA90
inc	byte ptr ds:0DC46h

loc_FA90:
or	al, al
js	short loc_FA98
call	dword ptr ds:38C5h

loc_FA98:
pop	ax
retn
sub_FA82 endp

; START	OF FUNCTION CHUNK FOR sub_69FB

loc_FA9A:
mov	ax, ds:0DC44h
cmp	ax, 98h	; '�'
jnb	short locret_FAB2
cmp	ax, 88h	; '�'
jnb	short sub_FA82
dec	byte ptr ds:0DC46h
js	short locret_FAB2
mov	byte ptr ds:0DC46h, 80h	; '�'

locret_FAB2:
retn
; END OF FUNCTION CHUNK	FOR sub_69FB
; START	OF FUNCTION CHUNK FOR sub_EB66

loc_FAB3:
mov	ax, ds:0DC44h
cmp	ax, 98h	; '�'
jb	short sub_FABC
retn
; END OF FUNCTION CHUNK	FOR sub_EB66



sub_FABC proc near
inc	byte ptr ds:0DC46h
js	short locret_FAEA
jnz	short loc_FAEB
push	ax
push	bx
push	cx
push	dx
push	si
push	di
push	bp
mov	dx, ds:0DC36h
mov	bx, ds:0DC38h
mov	ds:0DC42h, dx
mov	ds:0DC44h, bx
mov	si, ds:2582h
call	dword ptr ds:38C1h
pop	bp
pop	di
pop	si
pop	dx
pop	cx
pop	bx
pop	ax

locret_FAEA:
retn

loc_FAEB:
dec	byte ptr ds:0DC46h
retn
sub_FABC endp




sub_FAF0 proc near
push	ax
push	bx
push	cx
push	dx
push	si
push	di
push	bp
mov	dx, ds:0DC36h
mov	bx, ds:0DC38h
call	sub_FB3A
mov	si, bp
xchg	bp, ds:2582h
xor	al, al
xchg	al, ds:0DC46h
or	al, al
js	short loc_FB26
cmp	dx, ds:0DC42h
jnz	short loc_FB22
cmp	bx, ds:0DC44h
jnz	short loc_FB22
cmp	si, bp
jz	short loc_FB32

loc_FB22:
call	dword ptr ds:38C5h

loc_FB26:
mov	ds:0DC42h, dx
mov	ds:0DC44h, bx
call	dword ptr ds:38C1h

loc_FB32:
pop	bp
pop	di
pop	si
pop	dx
pop	cx
pop	bx
pop	ax
retn
sub_FAF0 endp




sub_FB3A proc near
cmp	byte ptr ds:28BEh, 0
mov	bp, 25C8h
jnz	short locret_FBAF
mov	bp, 2584h
cmp	byte ptr ds:4723h, 0
jnz	short locret_FBAF
mov	di, ds:0DC58h
or	di, di
jz	short locret_FBAF
cmp	bx, 9Bh	; '�'
jge	short locret_FBAF
call	sub_F5CE
mov	bp, 25C8h
jb	short locret_FBAF
cmp	bx, [di+2]
jl	short loc_FB89
cmp	bx, [di+6]
jge	short loc_FB89
mov	bp, 26D8h
mov	ax, [di]
sub	ax, dx
cmp	ax, 32h	; '2'
jb	short locret_FBAF
mov	bp, 2650h
mov	ax, dx
sub	ax, [di+4]
cmp	ax, 32h	; '2'
jb	short locret_FBAF
jmp	short loc_FBAC

loc_FB89:
cmp	dx, [di]
jl	short loc_FBAC
cmp	dx, [di+4]
jge	short loc_FBAC
mov	bp, 260Ch
mov	ax, [di+2]
sub	ax, bx
cmp	ax, 19h
jb	short locret_FBAF
mov	bp, 2694h
mov	ax, bx
sub	ax, [di+6]
cmp	ax, 19h
jb	short locret_FBAF

loc_FBAC:
mov	bp, 2584h

locret_FBAF:
retn
sub_FB3A endp




sub_FBB0 proc near
mov	dx, 201h
pushf
cli
out	dx, al		; Game I/O port
			; bits 0-3: Coordinates	(resistive, time-dependent inputs)
			; bits 4-7: Buttons/Triggers (digital inputs)
xor	bx, bx
mov	cx, bx
mov	di, 800h

loc_FBBD:		; Game I/O port
in	al, dx		; bits 0-3: Coordinates	(resistive, time-dependent inputs)
			; bits 4-7: Buttons/Triggers (digital inputs)
mov	ah, al
shr	ah, 1
and	ax, 101h
jz	short loc_FBD9
add	cl, al
adc	ch, 0
add	bl, ah
adc	bh, 0
dec	di
jnz	short loc_FBBD
and	byte ptr ds:2942h, 7Fh

loc_FBD9:		; Game I/O port
in	al, dx		; bits 0-3: Coordinates	(resistive, time-dependent inputs)
			; bits 4-7: Buttons/Triggers (digital inputs)
popf
mov	dx, cx
not	al
retn
sub_FBB0 endp




sub_FBE0 proc near
call	sub_FBB0
mov	ah, al
xor	al, al
test	ah, 30h
jz	short loc_FBEE
not	al

loc_FBEE:
mov	ds:0CEE6h, al
mov	ax, 0FFh
cmp	dx, ds:39ABh
ja	short loc_FBFE
xchg	ah, al
jmp	short loc_FC06

loc_FBFE:
cmp	dx, ds:39ADh
jnb	short loc_FC06
xor	ax, ax

loc_FC06:
mov	ds:0CEE1h, al
mov	ds:0CEDFh, ah
mov	ax, 0FFh
cmp	bx, ds:39AFh
ja	short loc_FC1A
xchg	al, ah
jmp	short loc_FC22

loc_FC1A:
cmp	bx, ds:39B1h
jnb	short loc_FC22
xor	ax, ax

loc_FC22:
mov	ds:0CEE4h, al
mov	ds:0CEDCh, ah
retn
sub_FBE0 endp




sub_FC2A proc near
xor	al, al
xchg	al, ds:0CEE8h
or	al, al
retn
sub_FC2A endp




sub_FC33 proc near
call	sub_FD4B
call	sub_FD24
jz	short loc_FC7E
cmp	byte ptr ds:0CEE8h, 0
jnz	short loc_FC7E
test	byte ptr ds:2942h, 40h
jnz	short loc_FC59
mov	ax, 3
int	33h		; - MS MOUSE - RETURN POSITION AND BUTTON STATUS
			; Return: BX = button status, CX = column, DX =	row
xchg	bx, si
xor	bx, si
and	bx, si
and	bl, 7
jnz	short loc_FC7E

loc_FC59:
test	byte ptr ds:2942h, 80h
jz	short loc_FC6E
push	di
call	sub_FBB0
pop	di
xchg	ax, di
xor	ax, di
and	ax, di
and	al, 30h
jnz	short loc_FC7E

loc_FC6E:
push	si
push	di
call	sub_1029C
mov	ds:0, ax
call	sub_F8A2
pop	di
pop	si
or	al, 1
retn

loc_FC7E:
stc
retn
sub_FC33 endp




sub_FC80 proc near
call	sub_10140
push	ax
mov	byte ptr ds:0CEE8h, 0
cmp	byte ptr ds:227Dh, 0
jnz	short loc_FC93
call	sub_F51E

loc_FC93:
mov	si, 0FFFFh
mov	di, si
pop	cx
sti

loc_FC9A:
push	word ptr ds:0CE7Ah
push	cx
call	sub_FC33
pop	cx
pop	ax
jb	short loc_FCB7
mov	bx, ax

loc_FCA8:
mov	ax, bx
sub	ax, ss:0CE7Ah
jz	short loc_FCA8
add	cx, ax
jb	short loc_FC9A
or	al, 1

loc_FCB7:
pushf
call	sub_FD1E
popf
call	sub_10153
retn
sub_FC80 endp




sub_FCC0 proc near
cmp	byte ptr ds:0DBCDh, 0
js	short loc_FCD7
call	sub_CA73
jz	short sub_FC80

loc_FCCC:
call	sub_CA73
jz	short loc_FCD7
call	sub_FC33
jnb	short loc_FCCC
retn

loc_FCD7:
push	ax
or	al, 1
pop	ax
retn
sub_FCC0 endp




sub_FCDC proc near
cmp	byte ptr ds:0DBCDh, 0
jns	short loc_FCD7
call	sub_10140
mov	byte ptr ds:0CEE8h, 0
mov	si, 0FFFFh
mov	di, si

loc_FCF0:
mov	ax, 60h	; '`'
sub	ax, ds:0DBD0h
xor	ah, ah
mov	dl, 6
div	dl
and	al, 0Fh
mov	dx, ds:0DBCEh
shl	dx, 1
shl	dx, 1
shl	dx, 1
shl	dx, 1
or	dl, al
cmp	bx, dx
jbe	short loc_FD1A
push	bx
call	sub_FC33
pop	bx
jb	short loc_FCB7
jmp	short loc_FCF0

loc_FD1A:
or	al, 1
jmp	short loc_FCB7
sub_FCDC endp




sub_FD1E proc near
mov	byte ptr ds:0CEE8h, 0
retn
sub_FD1E endp




sub_FD24 proc near
mov	byte ptr ds:0CEE9h, 0
cmp	byte ptr ds:0CEE8h, 1
jnz	short locret_FD37
mov	byte ptr ds:0CEE9h, 1
jmp	short sub_FD1E

locret_FD37:
retn
sub_FD24 endp




sub_FD38 proc near
call	sub_FC2A
jnz	short sub_FD38
jmp	sub_10F5E
sub_FD38 endp

db 32h,	0E4h, 0CDh, 16h, 0B4h, 1, 0CDh,	16h
db 75h,	0F6h
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_11. PRESS	KEYPAD "+" TO EXPAND]



sub_FD4B proc near
cmp	byte ptr ds:0CE9Ah, 0
jz	short nullsub_11
cmp	byte ptr ds:0CE80h, 0
jz	short nullsub_11
call	sub_10140
mov	al, 1
xchg	al, ds:2788h
push	ax
push	word ptr ds:0CE7Ah
call	sub_FA82
push	word ptr ds:0DBDAh
call	sub_DF5E
push	word ptr ds:0DBD6h
call	dword ptr ds:38B9h
mov	ds:0DBD6h, ax
mov	si, 2945h
call	sub_99EB
mov	cx, 0F1FEh
mov	dx, 82h	; '�'
mov	bx, 0A9h ; '�'
mov	ax, 115h
call	sub_EF38
call	sub_F064
call	sub_EF45
mov	dx, 60h	; '`'
mov	bx, 0B8h ; '�'
mov	ax, 116h
mov	cx, 0F1F7h
call	sub_F064

loc_FDA6:
cmp	byte ptr ds:0CE9Ah, 0
jnz	short loc_FDA6
call	sub_FD38

loc_FDB0:
call	sub_FC2A
jz	short loc_FDB0
push	ax
call	sub_FD38
call	sub_FDD7
pop	ax
dec	al
jz	short loc_FDB0
pop	word ptr ds:0DBD6h
pop	word ptr ds:0DBDAh
pop	word ptr ds:0CE7Ah
pop	ax
mov	ds:2788h, al
call	sub_10153
xor	ax, ax
retn
sub_FD4B endp




sub_FDD7 proc near
push	word ptr ds:2784h
mov	si, 1B48h
mov	cx, 5
call	sub_F0C2
pop	ax
call	sub_E00E
call	sub_F267
jmp	sub_FABC
sub_FDD7 endp




sub_FDEE proc near

; FUNCTION CHUNK AT E1D1 SIZE 00000072 BYTES

call	sub_FD4B
xor	al, al
test	byte ptr ds:2942h, 40h
jnz	short loc_FE19
mov	ax, 3
int	33h		; - MS MOUSE - RETURN POSITION AND BUTTON STATUS
			; Return: BX = button status, CX = column, DX =	row
mov	ax, cx
mov	cx, ds:2580h
shr	ax, cl
mov	cl, ch
shr	dx, cl
mov	cx, ax
mov	al, bl
and	al, 3
mov	ds:0DC36h, cx
mov	ds:0DC38h, dx

loc_FE19:
mov	ds:0DC34h, al
test	byte ptr ds:2942h, 80h
jz	short loc_FE26
call	sub_FBE0

loc_FE26:
mov	si, 0CEC8h
mov	di, ds:0DC48h
xor	dx, dx
mov	bx, dx
mov	ax, dx
mov	cx, 0Dh

loc_FE36:
lodsb
or	al, [si+12h]
jz	short loc_FE44
or	ah, [di]
add	dx, [di+2]
add	bx, [di+4]

loc_FE44:
add	di, 6
loop	loc_FE36
mov	al, ds:0CEBAh
or	al, ds:0CE9Dh
or	al, ds:0CEE6h
and	al, 1
mov	ah, al
xchg	al, ds:0DC57h
not	al
and	al, ds:0DC34h
or	al, ah
mov	ds:0DC34h, al
mov	ax, dx
or	ax, bx
jnz	short loc_FE87
mov	ds:0DC51h, ax
mov	ds:0DC53h, ax
mov	ds:0DC55h, ax

locret_FE76:
retn
db 0A2h, 0E1h, 6Fh, 0E1h, 0CBh,	0E1h, 0B9h
db 0E1h, 8Ch, 0E1h, 0C3h, 0E1h,	92h, 0E1h
db 9Bh,	0E1h

loc_FE87:
cmp	byte ptr ds:0CE9Eh, 0FFh
jnz	short loc_FE91
jmp	loc_100A1

loc_FE91:
mov	di, 0DFA9h
or	dl, dl
jz	short loc_FEAB
jns	short loc_FE9D
add	di, 6

loc_FE9D:
or	bl, bl
jz	short loc_FEB7
lea	di, [di-2]
js	short loc_FEB7
add	di, 4
jmp	short loc_FEB7

loc_FEAB:
mov	di, 0DFB3h
or	bl, bl
jz	short locret_FE76
js	short loc_FEB7
add	di, 2

loc_FEB7:
mov	bx, cs:[di]
sub	sp, 0Ah
mov	bp, sp
mov	[bp+0],	bx
call	sub_FD1E
mov	dx, ds:0DC36h
mov	bx, ds:0DC38h
mov	di, 1AE4h
mov	cx, [di]
mov	word ptr [bp+2], 8000h
add	di, 2

loc_FEDA:
test	byte ptr [di+8], 80h
jz	short loc_FEFC
call	sub_F5CE
jb	short loc_FEFC
call	sub_10029
call	word ptr [bp+0]
cmp	ax, [bp+2]
jnb	short loc_FEFC
mov	[bp+2],	ax
call	sub_10029
mov	[bp+4],	ax
mov	[bp+6],	si

loc_FEFC:
add	di, 0Eh
loop	loc_FEDA
call	sub_FF38
call	sub_FF72
call	sub_FFAB
call	sub_FFEC
cmp	word ptr [bp+2], 0
js	short loc_FF34
mov	byte ptr ds:0CEBAh, 0
or	byte ptr ds:0CE9Dh, 0
mov	ax, [bp+4]
mov	ds:0DC4Ch, ax
mov	ax, [bp+6]
mov	ds:0DC4Eh, ax
mov	byte ptr ds:0DC4Bh, 64h	; 'd'
mov	ax, ds:0CE7Ah
mov	ds:0DC4Ah, al

loc_FF34:
add	sp, 0Ah
retn
sub_FDEE endp




sub_FF38 proc near
push	bp
call	sub_F2EB
cmp	bp, 201Ah
pop	bp
jnz	short locret_FF71
mov	di, 28E9h

loc_FF46:
mov	si, [di+2]
mov	ax, [di]
cmp	ax, dx
jnz	short loc_FF53
cmp	si, bx
jz	short loc_FF69

loc_FF53:
call	word ptr [bp+0]
cmp	ax, [bp+2]
jnb	short loc_FF69
mov	[bp+2],	ax
mov	ax, [di]
mov	[bp+4],	ax
mov	si, [di+2]
mov	[bp+6],	si

loc_FF69:
add	di, 4
cmp	word ptr [di], 0FFFFh
jnz	short loc_FF46

locret_FF71:
retn
sub_FF38 endp




sub_FF72 proc near
cmp	byte ptr ds:46EBh, 0
jns	short locret_FFAA
mov	di, 3CBEh
mov	cx, [di]
jcxz	short locret_FFAA
add	di, 2

loc_FF83:
test	byte ptr [di+0Ch], 0C0h
jnz	short loc_FFA5
call	sub_F5CE
jb	short loc_FFA5
call	sub_10029
call	word ptr [bp+0]
cmp	ax, [bp+2]
jnb	short loc_FFA5
mov	[bp+2],	ax
call	sub_10029
mov	[bp+4],	ax
mov	[bp+6],	si

loc_FFA5:
add	di, 11h
loop	loc_FF83

locret_FFAA:
retn
sub_FF72 endp




sub_FFAB proc near
cmp	byte ptr ds:46EBh, 0
jz	short locret_FFAA
mov	di, 0A5C0h

loc_FFB5:
cmp	word ptr [di], 0
jz	short locret_FFAA
mov	si, [di+4]
and	si, 0FFh
mov	ax, [di+2]
cmp	ax, dx
jnz	short loc_FFCC
cmp	si, bx
jz	short loc_FFE7

loc_FFCC:
call	word ptr [bp+0]
cmp	ax, [bp+2]
jnb	short loc_FFE7
mov	[bp+2],	ax
mov	ax, [di+2]
mov	[bp+4],	ax
mov	si, [di+4]
and	si, 0FFh
mov	[bp+6],	si

loc_FFE7:
add	di, 6
jmp	short loc_FFB5
sub_FFAB endp




sub_FFEC proc near
test	byte ptr ds:46EBh, 1
jz	short locret_FFAA
cmp	word ptr ds:4749h, 0
jz	short locret_FFAA
mov	di, 2462h
mov	cx, 8

loc_10000:
mov	ax, [di]
mov	si, [di+2]
cmp	ax, dx
jnz	short loc_1000D
cmp	si, bx
jz	short loc_10023

loc_1000D:
call	word ptr [bp+0]
cmp	ax, [bp+2]
jnb	short loc_10023
mov	[bp+2],	ax
mov	ax, [di]
mov	si, [di+2]
mov	[bp+4],	ax
mov	[bp+6],	si

loc_10023:
add	di, 4
loop	loc_10000
retn
sub_FFEC endp




sub_10029 proc near
mov	si, [di+6]
mov	ax, si
sub	ax, [di+2]
shr	ax, 1
shr	ax, 1
sub	si, ax
mov	ax, [di]
add	ax, [di+4]
shr	ax, 1
retn
sub_10029 endp

sub	ax, dx

loc_10041:
sub	si, bx

loc_10043:
jns	short loc_10047
neg	si

loc_10047:
cmp	ax, 6
jl	short loc_10056
cmp	si, 32h	; '2'
jnb	short loc_10056
add	ax, si
add	ax, si
retn

loc_10056:
mov	ax, 0FFFFh
mov	si, ax
retn
sub	ax, dx
neg	ax
jmp	short loc_10041
xchg	ax, si
sub	ax, bx
neg	ax
sub	si, dx
jmp	short loc_10043
xchg	ax, si
sub	ax, bx
sub	si, dx
jmp	short loc_10043
sub	ax, dx
sub	si, bx
neg	si

loc_10078:
cmp	ax, 6
jl	short loc_10056
cmp	si, 6
jl	short loc_10056
sub	ax, si
jns	short locret_10088
neg	ax

locret_10088:
retn
sub	ax, dx
neg	ax
sub	si, bx
neg	si
jmp	short loc_10078
sub	ax, dx
neg	ax
sub	si, bx
jmp	short loc_10078
sub	ax, dx
sub	si, bx
jmp	short loc_10078
; START	OF FUNCTION CHUNK FOR sub_FDEE

loc_100A1:
or	dl, dl
jz	short loc_100C3
mov	ax, ds:0DC51h
or	ax, ax
jns	short loc_100AE
neg	ax

loc_100AE:
cmp	ax, 4
jb	short loc_100C3
add	dl, dl
cmp	ax, 0Ch
jb	short loc_100C3
add	dl, dl
cmp	ax, 24h	; '$'
jb	short loc_100C3
add	dl, dl

loc_100C3:
or	bl, bl
jz	short loc_100E3
mov	ax, ds:0DC53h
jns	short loc_100CE
neg	ax

loc_100CE:
cmp	ax, 3
jb	short loc_100E3
add	bl, bl
cmp	ax, 0Ah
jb	short loc_100E3
add	bl, bl
cmp	ax, 1Ch
jb	short loc_100E3
add	bl, bl

loc_100E3:
mov	al, ds:0CE7Ah
mov	ah, al
xchg	ah, ds:0DC50h
sub	al, ah
cmp	al, 8
jb	short loc_100F4
mov	al, 8

loc_100F4:
mov	cl, al
mov	si, 0DC55h
mov	al, dl
call	sub_10113
mov	dx, ax
add	ds:0DC51h, ax
inc	si
mov	al, bl
call	sub_10113
mov	bx, ax
add	ds:0DC53h, ax
jmp	sub_F97F
; END OF FUNCTION CHUNK	FOR sub_FDEE



sub_10113 proc near
imul	cl
or	ax, ax
js	short loc_1012A
add	al, [si]
mov	ch, al
and	ch, 7
mov	[si], ch
cbw
shr	ax, 1
shr	ax, 1
shr	ax, 1
retn

loc_1012A:
neg	ax
add	al, [si]
mov	ch, al
and	ch, 7
mov	[si], ch
cbw
shr	ax, 1
shr	ax, 1
shr	ax, 1
neg	ax
retn
sub_10113 endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_4. PRESS KEYPAD "+" TO EXPAND]


; Attributes: bp-based frame

sub_10140 proc near
push	bx
push	cx
push	dx
push	si
push	di
push	bp
mov	bp, sp
xchg	ax, [bp+0Ch]
push	ax
mov	ax, [bp+0Ch]
mov	bp, [bp+0]
retn
sub_10140 endp ; sp = -0Eh



; Attributes: bp-based frame

sub_10153 proc near

arg_A= word ptr	 0Ch

pop	ax
mov	bp, sp
xchg	ax, [bp+arg_A]
pop	bp
pop	di
pop	si
pop	dx
pop	cx
pop	bx
retn
sub_10153 endp ; sp =  0Eh




sub_10160 proc near
call	sub_EF1E
jmp	short loc_10167
sub_10160 endp




sub_10165 proc near
xor	ah, ah

loc_10167:
push	cx
mov	cx, 64h	; 'd'
div	cl
add	al, 30h	; '0'
cmp	al, 30h	; '0'
jnz	short loc_10177
mov	al, 20h	; ' '
dec	ch

loc_10177:
call	word ptr ds:2518h
mov	al, ah
aam
xchg	al, ah
add	ax, 3030h
or	ch, ch
jz	short loc_1018E
cmp	al, 30h	; '0'
jnz	short loc_1018E
mov	al, 20h	; ' '

loc_1018E:
call	word ptr ds:2518h
mov	al, ah
call	word ptr ds:2518h
pop	cx
retn
sub_10165 endp

aam
xchg	al, ah
add	ax, 3030h
call	word ptr ds:2518h
mov	al, ah
jmp	word ptr ds:2518h



sub_101AB proc near
push	ax
call	sub_EE40
call	sub_EF0C
pop	ax
sub_101AB endp




sub_101B3 proc near
push	bx
push	cx
mov	cx, 64h	; 'd'
mov	bx, cx
cmp	ax, 3E8h
jb	short loc_101C2
mov	ax, 3E7h

loc_101C2:
div	cl
add	al, 30h	; '0'

loc_101C6:
cmp	al, 30h	; '0'
jnz	short loc_101CE
mov	al, 20h	; ' '
xor	bx, bx

loc_101CE:
mov	es:[si-3], al
mov	al, ah
aam
xchg	al, ah
add	ax, 3030h
or	bx, bx
jnz	short loc_101E5
cmp	al, 30h	; '0'
jnz	short loc_101E5
mov	al, 20h	; ' '

loc_101E5:
mov	es:[si-2], ax
pop	cx
pop	bx
retn
sub_101B3 endp ; sp =  2




sub_101EC proc near
push	bx
push	cx
mov	cx, 3E8h
mov	bx, cx
xor	dx, dx
div	cx
aam
xchg	al, ah
add	ax, 3030h
cmp	al, 30h	; '0'
jnz	short loc_1020D
mov	al, 20h	; ' '
cmp	ah, 30h	; '0'
jnz	short loc_1020D
mov	ah, al
xor	bx, bx

loc_1020D:
mov	es:[si-5], ax
mov	ax, dx
xor	dx, dx
mov	cx, 64h	; 'd'
div	cl
add	al, 30h	; '0'
or	bx, bx
jnz	short loc_101CE
inc	bx
jmp	short loc_101C6
sub_101EC endp




sub_10223 proc near
push	ax
push	word ptr ds:0CE7Ah
call	bp
pop	bx
pop	bp

loc_1022C:
cmp	byte ptr ds:227Dh, 0
jz	short loc_10248
push	bx
push	cx
push	dx
push	si
push	di
push	bp
push	es
call	sub_FC33
pop	es
pop	bp
pop	di
pop	si
pop	dx
pop	cx
pop	bx
jb	short locret_10256
jmp	short loc_1024B

loc_10248:
call	sub_FD4B

loc_1024B:
mov	ax, ds:0CE7Ah
sub	ax, bx
cmp	ax, bp
jb	short loc_1022C
or	al, 1

locret_10256:
retn
sub_10223 endp




sub_10257 proc near
push	ax
push	cx
mov	cx, ax
jcxz	short loc_1026D
pushf
sti

loc_1025F:
mov	ax, ss:0CE7Ah

loc_10263:
cmp	ax, ss:0CE7Ah
jz	short loc_10263
loop	loc_1025F
popf

loc_1026D:
pop	cx
pop	ax
retn
sub_10257 endp




sub_10270 proc near
mov	cx, ax

loc_10272:
mov	ax, ds:0CE7Ah

loc_10275:
cmp	ax, ds:0CE7Ah
jz	short loc_10275
call	sub_10140
call	sub_F8A2
call	sub_10153
loop	loc_10272
retn
sub_10270 endp




sub_10287 proc near
push	dx
mov	ax, ds:0D824h
mov	dx, 0E56Dh
mul	dx
inc	ax
mov	ds:0D824h, ax
mov	al, ah
mov	ah, dl
and	ax, bx
pop	dx
retn
sub_10287 endp




sub_1029C proc near
push	dx
mov	ax, ds:0D826h
mov	dx, 0CBD1h
mul	dx
inc	ax
mov	ds:0D826h, ax
mov	al, ah
mov	ah, dl
pop	dx
retn
sub_1029C endp




sub_102AF proc near
push	cx
push	dx
mov	ax, bx
or	ax, ax
jz	short loc_102D8
mov	cx, 0FFFFh

loc_102BA:
shl	cx, 1
shr	ax, 1
jnz	short loc_102BA
not	cx

loc_102C2:
mov	ax, ds:0D828h
mov	dx, 0CBD1h
mul	dx
inc	ax
mov	ds:0D828h, ax
mov	al, ah
mov	ah, dl
and	ax, cx
cmp	ax, bx
ja	short loc_102C2

loc_102D8:
pop	dx
pop	cx
retn
sub_102AF endp

;align 2
db 33h,	38h, 36h, 0, 1,	2 dup(0), 4Dh, 4Fh
db 4Eh,	0, 2, 2	dup(0),	46h, 52h, 41h, 0
db 4, 2	dup(0),	47h, 45h, 52h, 0, 8, 2 dup(0)
db 45h,	4Eh, 47h, 0, 0Ch, 2 dup(0), 49h
db 54h,	41h, 0,	10h, 2 dup(0), 53h, 50h
db 41h,	0, 14h,	2 dup(0), 44h, 55h, 54h
db 0, 18h, 2 dup(0), 4Eh, 4Fh, 4Dh, 0, 40h
db 2 dup(0), 4Ah, 4Fh, 59h, 0, 80h, 0ABh
db 39h,	53h, 41h, 46h, 2 dup(1), 2 dup(0)
db 56h,	53h, 46h, 1, 2,	2 dup(0), 58h, 4Dh
db 53h,	1, 20h,	0A9h, 39h, 45h,	4Dh, 53h
db 1, 40h, 2 dup(0), 45h, 4Dh, 34h, 1, 8
db 2 dup(0), 48h, 49h, 4Dh, 1, 80h, 2 dup(0)
db 41h,	44h, 4Ch, 2, 1,	2 dup(0), 41h, 44h
db 50h,	2 dup(2), 0B3h,	39h, 41h, 44h, 47h
db 2, 3, 0B3h, 39h, 4Dh, 49h, 44h, 2, 4
db 0B3h, 39h, 53h, 44h,	42h, 2,	10h, 0B5h
db 39h,	53h, 42h, 50h, 2, 20h, 0B5h, 39h
db 57h,	52h, 49h, 2 dup(0), 26h, 38h



sub_1037D proc near
mov	si, 80h	; '�'
lodsb
xor	ah, ah
mov	bp, ax
add	bp, si

loc_10387:
push	cs
pop	es
assume es:seg000

loc_10389:
call	sub_1043B
jb	short locret_103B5
jz	short loc_10389
mov	dl, al
call	sub_1043B
jbe	short loc_10412
mov	ah, al
call	sub_1043B
jbe	short loc_10412
xchg	al, dl
mov	di, 0E40Ch
mov	cx, 17h

loc_103A6:
scasw
jnz	short loc_103AE
cmp	dl, es:[di]
jz	short loc_103B6

loc_103AE:
add	di, 5
loop	loc_103A6
jmp	short loc_10412

locret_103B5:
retn

loc_103B6:
mov	ax, seg	seg001
mov	es, ax
assume es:seg001
mov	bl, cs:[di+1]
xor	bh, bh
add	bx, 2942h
mov	al, cs:[di+2]
or	es:[bx], al
mov	bx, cs:[di+3]
or	bx, bx
jz	short loc_10412
call	sub_1043B
jb	short locret_103B5
jz	short loc_10412
dec	si
cmp	bx, 3826h
jz	short loc_1041D

loc_103E2:
xor	dx, dx

loc_103E4:
call	sub_1043B
mov	ah, al
jbe	short loc_10407
sub	al, 30h	; '0'
jb	short loc_10407
cmp	al, 9
jbe	short loc_103FB
sub	al, 7
jb	short loc_10407
cmp	al, 0Fh
ja	short loc_10407

loc_103FB:
shl	dx, 1
shl	dx, 1
shl	dx, 1
shl	dx, 1
or	dl, al
jmp	short loc_103E4

loc_10407:
mov	es:[bx], dx
add	bx, 2
cmp	ah, 20h	; ' '
ja	short loc_103E2

loc_10412:
dec	si

loc_10413:
call	sub_1043B
jb	short locret_103B5
jnz	short loc_10413
jmp	loc_10387

loc_1041D:
mov	di, bx

loc_1041F:
call	sub_1043B
jbe	short loc_1042B
stosb
cmp	di, 3898h
jb	short loc_1041F

loc_1042B:
mov	al, 5Ch	; '\'
cmp	es:[di-1], al
jz	short loc_10434
stosb

loc_10434:
mov	word ptr es:seg_11380+38A6h, di
jmp	short loc_10412
sub_1037D endp




sub_1043B proc near
mov	al, 0Dh
cmp	si, bp
jnb	short loc_10448
lodsb
cmp	al, 61h	; 'a'
jb	short loc_10448
and	al, 0DFh

loc_10448:
cmp	al, 20h	; ' '
retn
sub_1043B endp




sub_1044B proc near
push	cx
push	si
add	ax, 0C8h ; '�'
mov	si, ax
call	sub_10F89
pop	si
pop	cx
mov	ax, es
sub	ax, 10h

loc_1045C:
mov	[si], ax
add	si, 4
loop	loc_1045C
retn
sub_1044B endp




sub_10464 proc near
mov	ax, seg	seg001
mov	es, ax
mov	cx, 0DD1Dh
mov	di, 3CBCh
sub	cx, di
cld
xor	ax, ax
rep stosb
mov	ax, ds:2
push	es
pop	ds
assume ds:seg001
mov	ds:0CE68h, ax
mov	cx, 0DD1Dh
call	sub_10FCF
mov	ax, 4C6Fh
mov	cl, 4
shr	ax, cl
mov	cx, ds
add	ax, cx
mov	ds:0DC32h, ax
mov	ah, 19h
int	21h		; DOS -	GET DEFAULT DISK NUMBER
mov	ds:0CE76h, al
mov	ds:0CE77h, al
mov	ax, 3301h
int	21h		; DOS -	EXTENDED CONTROL-BREAK CHECKING
			; AL = 00h get state / 01h set state / 02h set AND get
			; DL = 00h for OFF or 01h for ON
mov	seg_11380+2941h, dl
mov	ax, 3301h
xor	dx, dx
int	21h		; DOS -	EXTENDED CONTROL-BREAK CHECKING
			; AL = 00h get state / 01h set state / 02h set AND get
			; DL = 00h for OFF or 01h for ON
call	sub_10545
mov	al, seg_11380+2942h
and	ax, 1
mov	si, 38B7h
mov	cx, 2Eh	; '.'
call	sub_1044B
call	dword ptr seg_11380+38B9h
mov	ds:0DBD8h, ax
call	sub_DF5E
mov	ds:0CE74h, cx
mov	di, 0DBDCh
call	sub_10FC6
mov	ds:0DBD6h, bp
or	bp, bp
jnz	short loc_104E0
mov	di, 0DBD4h
call	sub_10FC6

loc_104E0:
call	dword ptr seg_11380+38B5h
mov	al, seg_11380+2942h
push	ax
shr	al, 1
shr	al, 1
and	al, 7
mov	ds:0CEEBh, al
pop	ax
or	al, al
jns	short loc_104FB
push	ax
call	sub_10902
pop	ax

loc_104FB:
test	al, 40h
jnz	short loc_10502
call	sub_1084A

loc_10502:
call	sub_1072C
call	sub_1094B
mov	al, seg_11380+2942h
and	al, 2
mov	bp, 0CE7Ah
call	dword ptr seg_11380+3925h
mov	word ptr ds:0DC48h, 271Ch
mov	byte ptr ds:0DC46h, 0FFh
xor	ax, ax
mov	bx, 0C7h ; '�'
xor	cx, cx
mov	dx, 13Fh
call	sub_F9E4
mov	bx, 0ABh ; '�'
mov	dx, 0EDh ; '�'
call	sub_F9D3
call	sub_1063A
call	sub_ED3C
call	sub_DF4C
call	sub_DF7D
jmp	sub_E2E2
sub_10464 endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_12. PRESS	KEYPAD "+" TO EXPAND]



sub_10545 proc near
mov	dx, 37F2h
call	sub_110CB
jb	short loc_10562
les	di, dword ptr seg_11380+39B7h
assume es:nothing
call	sub_11130
cmp	word ptr es:[di], 0C089h
jnz	short loc_10562
mov	dx, 31FFh
call	dword ptr seg_11380+39B7h

loc_10562:
mov	si, 37F7h
inc	byte ptr [si]
cmp	byte ptr [si], 39h ; '9'
jbe	short sub_10545
mov	dx, 37E9h
mov	ax, 3D00h
int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
			; DS:DX	-> ASCIZ filename
			; AL = access mode
			; 0 - read
jb	short nullsub_12
mov	ds:0DBBAh, ax
call	sub_10611
mov	si, di
mov	bp, es
les	di, dword ptr seg_11380+39B7h
mov	ds:0DBBCh, di
mov	word ptr ds:0DBBEh, es
mov	ax, 145h
stosw
mov	cx, 14Dh
mov	al, 0FFh
rep stosb
mov	ds:0D820h, di
push	ds
mov	ds, bp
assume ds:nothing
lodsw

loc_1059F:
push	si
call	sub_111E4
pop	si
jb	short loc_105D2
call	sub_11277
jz	short loc_105C9
push	ax
push	dx
push	si
push	di
mov	cx, ss:0D820h
mov	si, cx
sub	cx, di
sub	si, 2
lea	di, [si+0Ah]
shr	cx, 1
std
rep movs word ptr es:[di], word	ptr es:[si]
cld
pop	di
pop	si
pop	dx
pop	ax

loc_105C9:
call	sub_1062B
add	word ptr ss:0D820h, 0Ah

loc_105D2:
add	si, 19h
cmp	byte ptr [si], 0
jnz	short loc_1059F
pop	ds
mov	si, 145h
mov	ax, ds:0D820h
sub	ax, si
xor	dx, dx
mov	cx, 280h
div	cx
mov	dx, 0Ah
mul	dx
mov	dx, ax
les	di, ss:0DBBCh
add	di, 2

loc_105F9:
add	si, dx
push	si
movs	word ptr es:[di], word ptr es:[si]
movs	byte ptr es:[di], byte ptr es:[si]
pop	si
mov	ax, si
stosw
cmp	di, 140h
jb	short loc_105F9
mov	cx, ds:0D820h
jmp	sub_10FCF
sub_10545 endp




sub_10611 proc near
xor	ax, ax
xor	dx, dx
call	sub_111A6
mov	ax, ds:39B9h
add	ax, 800h
mov	es, ax
xor	di, di
mov	cx, 0FFFFh
call	sub_111BA
jb	short sub_10611
retn
sub_10611 endp




sub_1062B proc near
push	si
stosw
mov	al, dl
stosb
add	si, 10h
movsw
movsb
inc	si
movsw
movsw
pop	si
retn
sub_1062B endp




sub_1063A proc near

; FUNCTION CHUNK AT F131 SIZE 0000000E BYTES

mov	al, ds:2944h
mov	cl, 4
shr	al, cl
add	al, 7
xor	ah, ah
mov	si, 398Bh
mov	cx, 8
call	sub_1044B
mov	ax, ds:39B5h
call	dword ptr ds:3989h
mov	ds:0DBC8h, bx
call	sub_C507
call	sub_CD24
call	sub_10721
jb	short loc_1068C
test	byte ptr ds:2944h, 0F0h
jz	short loc_10689
and	byte ptr ds:2944h, 0Fh
xor	ax, ax
mov	ds:3813h, ax
mov	ds:0DBC8h, al
mov	ax, ds:398Bh
add	ax, 10h
mov	ds:39B9h, ax
mov	word ptr ds:3CBCh, 3624h
jmp	short sub_1063A

loc_10689:
jmp	loc_11001

loc_1068C:
mov	ax, ds:3813h
mov	ds:381Bh, ax
call	sub_C74E

loc_10695:
mov	al, ds:2944h
and	ax, 0Fh
add	ax, 2
mov	si, 396Fh
mov	cx, 7
call	sub_1044B
mov	bp, 3349h
mov	cx, 0Ah
mov	ax, ds:39B3h
call	dword ptr ds:396Dh
or	ds:0DBC8h, bx
call	sub_C520
call	sub_CD0F
call	sub_10721
jb	short loc_106E8
test	byte ptr ds:2944h, 0Fh
jz	short loc_10689
and	byte ptr ds:2944h, 0F0h
xor	ax, ax
mov	ds:0DBB8h, ax
mov	ds:0DBC9h, al
mov	ax, ds:396Fh
add	ax, 10h
mov	ds:39B9h, ax
mov	word ptr ds:3CBCh, 364Bh
jmp	short loc_10695

loc_106E8:
call	sub_CCF8
jz	short locret_106F5
call	sub_106F6
and	byte ptr ds:2943h, 0EFh

locret_106F5:
retn
sub_1063A endp




sub_106F6 proc near
cmp	word ptr ds:0DBBAh, 0
jz	short locret_10720
call	sub_10611
push	ds
mov	si, di
push	es
pop	ds
lodsw
mov	cx, 0FAh ; '�'

loc_10709:
push	cx
push	si
call	sub_111E4
pop	si
jb	short loc_10719
call	sub_11277
jnz	short loc_10719
call	sub_1062B

loc_10719:
add	si, 19h
pop	cx
loop	loc_10709
pop	ds

locret_10720:
retn
sub_106F6 endp




sub_10721 proc near
mov	ax, ds:39B9h
add	ax, 2F13h
cmp	ax, ds:0CE68h
retn
sub_10721 endp




sub_1072C proc near
cli
call	sub_107E3
xor	ax, ax
mov	es, ax
assume es:nothing
mov	di, 20h	; ' '
mov	word ptr es:[di], 0E8B8h
pushf
sti

loc_1073E:
cmp	cs:byte_107A4, 0
jz	short loc_1073E
popf
mov	word ptr es:[di], 0EF6Ah
mov	ax, cs:word_107A2
or	ah, ah
jz	short loc_10775
or	al, al
jz	short loc_10775
xor	dx, dx
mov	cx, 1745h
div	cx
shl	dx, 1
cmp	dx, cx
jb	short loc_10766
inc	ax

loc_10766:
dec	ax
jns	short loc_1076A
inc	ax

loc_1076A:
cmp	ax, 0Ah
jb	short loc_10771
mov	al, 0Ah

loc_10771:
mov	cs:byte_10EA9, al

loc_10775:
mov	ax, 1745h
sub_1072C endp




sub_10778 proc near
pushf
push	ax
cli
mov	al, 36h	; '6'
out	43h, al		; Timer	8253-5 (AT: 8254.2).
pop	ax
out	40h, al		; Timer	8253-5 (AT: 8254.2).
mov	al, ah
out	40h, al		; Timer	8253-5 (AT: 8254.2).
popf
retn
sub_10778 endp

push	ax
mov	al, 36h	; '6'
out	43h, al		; Timer	8253-5 (AT: 8254.2).
in	al, 40h		; Timer	8253-5 (AT: 8254.2).
mov	ah, al
in	al, 40h		; Timer	8253-5 (AT: 8254.2).
xchg	ah, al
mov	cs:word_107A2, ax
inc	cs:byte_107A4
pop	ax
jmp	loc_10E3A
word_107A2 dw 0
byte_107A4 db 0



sub_107A5 proc near
cmp	cs:word_10D5A, 0
jz	short loc_107B2
mov	ah, 0Ah
call	sub_10DFB

loc_107B2:
cmp	cs:word_10C0A, 0
jz	short loc_107BF
mov	ah, 45h	; 'E'
call	sub_10C10

loc_107BF:
mov	dx, cs:word_10C0E
or	dx, dx
jz	short loc_107CD
mov	ah, 45h	; 'E'
call	sub_10C15

loc_107CD:
xor	ax, ax
call	sub_10778
mov	dl, ds:2941h
mov	ax, 3301h
int	21h		; DOS -	EXTENDED CONTROL-BREAK CHECKING
			; AL = 00h get state / 01h set state / 02h set AND get
			; DL = 00h for OFF or 01h for ON
cmp	byte ptr ds:0CE73h, 0
jnz	short sub_107E3
retn
sub_107A5 endp




sub_107E3 proc near
xor	byte ptr ds:0CE73h, 0FFh
mov	si, 2913h
pushf
cli
lodsw

loc_107EE:
mov	di, ax
lodsw
xchg	ax, di
push	si
mov	si, ax
shl	si, 1
shl	si, 1
xor	ax, ax
mov	es, ax
mov	ax, cs:[di]
xchg	ax, es:[si]
mov	cs:[di], ax
mov	ax, cs:[di+2]
xchg	ax, es:[si+2]
mov	cs:[di+2], ax
pop	si
lodsw
or	ax, ax
jns	short loc_107EE
popf
retn
sub_107E3 endp


loc_1081A:
push	bp
mov	bp, sp
add	word ptr [bp+2], 2
pop	bp
iret
byte_10823 db 33h, 0C0h, 0CFh, 4Ah, 0E9h
dw seg seg000
dd loc_1081A
dd loc_1081A
dd loc_1081A
dd loc_1081A
dd byte_10823+2
dd byte_10823+2
dd byte_10823+2
dd byte_10823



sub_1084A proc near
mov	ax, 3533h
int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
			; AL = interrupt number
			; Return: ES:BX	= value	of interrupt vector
mov	ax, es
or	ax, bx
jz	short locret_108C3
mov	ax, 0
int	33h		; - MS MOUSE - RESET DRIVER AND	READ STATUS
			; Return: AX = status
			; BX = number of buttons
inc	ax
jnz	short locret_108C3
xor	cx, cx
xor	dx, dx
mov	ax, 4
int	33h		; - MS MOUSE - POSITION	MOUSE CURSOR
			; CX = column, DX = row

loc_10866:
inc	byte ptr ds:2580h
js	short loc_10883
mov	cl, ds:2580h
mov	ax, 1
shl	ax, cl
mov	cx, ax
mov	ax, 4
int	33h		; - MS MOUSE - POSITION	MOUSE CURSOR
			; CX = column, DX = row
mov	ax, 3
int	33h		; - MS MOUSE - RETURN POSITION AND BUTTON STATUS
			; Return: BX = button status, CX = column, DX =	row
jcxz	short loc_10866

loc_10883:
inc	byte ptr ds:2581h
js	short loc_108A0
mov	cl, ds:2581h
mov	dx, 1
shl	dx, cl
mov	ax, 4
int	33h		; - MS MOUSE - POSITION	MOUSE CURSOR
			; CX = column, DX = row
mov	ax, 3
int	33h		; - MS MOUSE - RETURN POSITION AND BUTTON STATUS
			; Return: BX = button status, CX = column, DX =	row
or	dx, dx
jz	short loc_10883

loc_108A0:
mov	ax, 10h
mov	dx, ax
and	word ptr ds:2580h, 7F7Fh
mov	cx, ds:2580h
shr	ax, cl
mov	cl, ch
shr	dx, cl
mov	cx, ax
mov	ax, 0Fh
push	dx
int	33h		; - MS MOUSE - DEFINE MICKEY/PIXEL RATIO
			; CX = number of mickeys per 8 pixels horizontally (default 8)
			; DX = number of mickeys per 8 pixels vertically (default 16)
pop	dx
mov	ax, 13h
int	33h		; - MS MOUSE - DEFINE DOUBLE-SPEED THRESHOLD
			; DX = threshold speed in mickeys/second, 0000h	= default of 64/second

locret_108C3:
retn
sub_1084A endp

push	ax
push	ds
mov	ds, cs:seg_10900
assume ds:seg001
mov	ds:0DC36h, cx
mov	ds:0DC38h, dx
shr	al, 1
jz	short loc_108FD
push	cx
mov	cl, ds:0DC34h
shr	al, 1
jnb	short loc_108E3
or	cl, 1

loc_108E3:
shr	al, 1
jnb	short loc_108EA
and	cl, 0FEh

loc_108EA:
shr	al, 1
jnb	short loc_108F1
or	cl, 2

loc_108F1:
shr	al, 1
jnb	short loc_108F8
and	cl, 0FDh

loc_108F8:
mov	ds:0DC34h, cl
pop	cx

loc_108FD:
pop	ds
assume ds:nothing
pop	ax
retf
seg_10900 dw seg seg001



sub_10902 proc near
mov	si, 39ABh
xor	bx, bx
mov	cx, 4

loc_1090A:
lodsw
or	bx, ax
loop	loc_1090A
or	bx, bx
jnz	short locret_10944
call	sub_FBB0
mov	ax, dx
sub	ax, 4
cmp	ah, 4
jnb	short locret_108C3
mov	ax, bx
sub	ax, 4
cmp	ah, 4
jnb	short locret_108C3
mov	ax, dx
shr	ax, 1
add	dx, ax
mov	si, 39ABh
mov	[si], ax
mov	[si+2],	dx
mov	ax, bx
shr	ax, 1
add	bx, ax
mov	[si+4],	ax
mov	[si+6],	bx

locret_10944:
retn
sub_10902 endp

word_10945 dw 0
off_10947 dw offset sub_10B6C
off_10949 dw offset sub_10BBC



sub_1094B proc near
test	byte ptr ds:2943h, 80h
jz	short loc_10955
call	sub_10D70

loc_10955:
test	byte ptr ds:2943h, 48h
jz	short loc_1095F
call	sub_10C1C

loc_1095F:
test	byte ptr ds:2943h, 0E8h
jz	short locret_10986
mov	di, 0CE6Ah
mov	cx, ds:39A9h
mov	ax, 0B9h ; '�'
mov	ds:0CE70h, al
add	cx, ax
add	cx, ax
push	cx
shl	cx, 1
call	sub_10FC6
les	di, ds:0CE6Ah
assume es:nothing
pop	cx
xor	ax, ax
rep stosw

locret_10986:
retn
sub_1094B endp




sub_10987 proc near
call	sub_10140
push	ds
push	es
sub	sp, 6
mov	bp, sp
mov	ds:0CE6Eh, ax
push	di
push	es
les	di, ds:0CE6Ah
mov	si, ax
mov	ax, ds:39A9h
shl	ax, 1
mov	[bp+0],	ax
shl	si, 1
add	si, ax
mov	dx, si
mov	ax, cs:word_10945
inc	ax
mov	es:[si+172h], ax
mov	cs:word_10945, ax
mov	[bp+2],	cx
pop	ds
pop	si

loc_109BD:
cmp	di, [bp+0]
jb	short loc_109C4

loc_109C2:
xor	di, di

loc_109C4:
mov	cx, [bp+0]
sub	cx, di
shr	cx, 1
xor	ax, ax
repne scasw
jz	short loc_109D8
call	sub_10A44
jb	short loc_109C2
jmp	short loc_10A30

loc_109D8:
sub	di, 2
xor	cx, cx
mov	bx, di
shr	bx, 1
inc	bx
mov	[bp+4],	bx
jmp	short loc_109F8

loc_109E7:
mov	di, dx
add	di, 2
cmp	di, [bp+0]
jnb	short loc_10A0F
cmp	word ptr es:[di], 0
jnz	short loc_10A0F
inc	bx

loc_109F8:
xchg	di, dx
mov	es:[di], bx
mov	ax, 400h
add	cx, ax
sub	[bp+2],	ax
ja	short loc_109E7
mov	di, dx
mov	ax, [bp+2]
stosw
add	cx, ax

loc_10A0F:
mov	bx, [bp+4]
push	dx
call	sub_10B29
pop	dx
mov	di, dx
or	word ptr es:[di], 8000h
mov	ax, [bp+2]
dec	ax
cmp	ax, 0FC00h
jbe	short loc_109BD

loc_10A27:
add	sp, 6
pop	es
pop	ds
call	sub_10153
retn

loc_10A30:
mov	si, [bp+0]
mov	ax, 0FFFFh
xchg	ax, ss:0CE6Eh
add	si, ax
add	si, ax
call	sub_10A7A
jmp	short loc_10A27
sub_10987 endp




sub_10A44 proc near
push	dx
push	si
mov	si, [bp+0]
mov	cx, 0B9h ; '�'
mov	dx, cs:word_10945
xor	bx, bx

loc_10A53:
mov	ax, es:[si]
or	ax, ax
jz	short loc_10A69
mov	ax, dx
sub	ax, es:[si+172h]
cmp	ax, bx
jb	short loc_10A69
mov	di, si
mov	bx, ax

loc_10A69:
add	si, 2
loop	loc_10A53
or	bx, bx
jz	short loc_10A77
mov	si, di
call	sub_10A7A

loc_10A77:
pop	si
pop	dx
retn
sub_10A44 endp




sub_10A7A proc near
xor	bx, bx
xchg	bx, es:[si]
shl	bx, 1
mov	si, bx
dec	si
dec	si
jnb	short sub_10A7A
retn
sub_10A7A endp

push	ds
xor	cx, cx
mov	si, ds:39A9h
mov	ds, word ptr ds:0CE6Ch
add	si, ax
shl	si, 1
mov	si, [si]
or	si, si
jz	short loc_10AB1
mov	cx, 0FC00h

loc_10AA0:
add	cx, 400h
shl	si, 1
jb	short loc_10AAD
mov	si, [si-2]
jmp	short loc_10AA0

loc_10AAD:
sar	si, 1
add	cx, si

loc_10AB1:
pop	ds
retn



sub_10AB3 proc near
push	dx
push	ds
mov	si, ds:39A9h
mov	ds, word ptr ds:0CE6Ch
add	si, ax
shl	si, 1
mov	ax, [si]
or	ax, ax
jz	short loc_10B13
mov	bx, ax
mov	ax, cs:word_10945
inc	ax
mov	[si+172h], ax
mov	cs:word_10945, ax
mov	ax, bx
push	di
push	es

loc_10ADA:
mov	bx, ax
mov	dx, ax
xor	cx, cx

loc_10AE0:
add	cx, 400h
shl	ax, 1
jb	short loc_10B03
mov	si, ax
sub	si, 2
inc	dx
mov	ax, [si]
cmp	ax, dx
jz	short loc_10AE0
shl	ax, 1
jb	short loc_10B03
shr	ax, 1
push	ax
call	sub_10B16
pop	ax
jb	short loc_10B0A
jmp	short loc_10ADA

loc_10B03:
sar	ax, 1
add	cx, ax
call	sub_10B16

loc_10B0A:
mov	cx, di
pop	es
pop	di
pushf
sub	cx, di
popf
cmc

loc_10B13:
pop	ds
pop	dx
retn
sub_10AB3 endp




sub_10B16 proc near
push	cx
push	di
push	ds
push	es
dec	bx
call	cs:off_10949
pop	es
pop	ds
pop	di
pop	cx
pushf
add	di, cx
popf
retn
sub_10B16 endp




sub_10B29 proc near
push	si
push	ds
push	es
push	cx
dec	bx
call	cs:off_10947
pop	ax
pop	es
pop	ds
pop	si
pushf
add	si, ax
popf
retn
sub_10B29 endp

db 10h dup(0), 2 dup(0FFh), 3 dup(0), 92h
db 2 dup(0), 2 dup(0FFh), 3 dup(0), 92h
db 12h dup(0)



sub_10B6C proc near
mov	di, 0EC6Ch
inc	cx
shr	cx, 1
push	cx
shl	cx, 1
mov	cs:[di+10h], cx
mov	cs:[di+18h], cx
mov	ax, ds
xor	dx, dx
mov	cx, 4

loc_10B84:
shl	ax, 1
rcl	dx, 1
loop	loc_10B84
add	ax, si
adc	dx, 0
mov	cs:[di+12h], ax
mov	dh, 92h	; '�'
mov	cs:[di+14h], dx
xor	dl, dl
xchg	bl, bh
xchg	bl, dl
shl	bx, 1
rcl	dl, 1
shl	bx, 1
rcl	dl, 1
add	dl, 10h
mov	cs:[di+1Ah], bx
mov	cs:[di+1Ch], dx
mov	si, di
push	cs
pop	es
assume es:seg000
pop	cx
mov	ah, 87h	; '�'
int	15h		; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
			; CX = number of words to move,	ES:SI -> global	descriptor table
			; Return: CF set on error, AH =	status
retn
sub_10B6C endp




sub_10BBC proc near
mov	si, 0EC6Ch
inc	cx
shr	cx, 1
push	cx
shl	cx, 1
mov	cs:[si+10h], cx
mov	cs:[si+18h], cx
mov	ax, es
xor	dx, dx
mov	cx, 4

loc_10BD4:
shl	ax, 1
rcl	dx, 1
loop	loc_10BD4
add	ax, di
adc	dx, 0
mov	cs:[si+1Ah], ax
mov	dh, 92h	; '�'
mov	cs:[si+1Ch], dx
xor	dl, dl
xchg	bl, bh
xchg	bl, dl
shl	bx, 1
rcl	dl, 1
shl	bx, 1
rcl	dl, 1
add	dl, 10h
mov	cs:[si+12h], bx
mov	cs:[si+14h], dx
push	cs
pop	es
pop	cx
mov	ah, 87h	; '�'
int	15h		; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
			; CX = number of words to move,	ES:SI -> global	descriptor table
			; Return: CF set on error, AH =	status
retn
sub_10BBC endp

word_10C0A dw 0
word_10C0C dw 0
word_10C0E dw 0



sub_10C10 proc near
mov	dx, cs:word_10C0A
sub_10C10 endp




sub_10C15 proc near
int	67h		;  - LIM EMS
cmp	ah, 80h	; '�'
cmc
retn
sub_10C15 endp




sub_10C1C proc near
mov	ah, 41h	; 'A'
call	sub_10C15
jb	short loc_10C83
mov	cs:word_10C0C, bx
mov	ah, 42h	; 'B'
xor	bx, bx
call	sub_10C15
jb	short loc_10C83
cmp	bx, 3
jb	short loc_10C83
call	sub_10C89
test	byte ptr ds:2943h, 8
jnz	short loc_10C83
mov	ah, 42h	; 'B'
xor	bx, bx
call	sub_10C15
jb	short loc_10C83
cmp	bx, 4
jb	short loc_10C83
cmp	bx, 80h	; '�'
jb	short loc_10C57
mov	bx, 80h	; '�'

loc_10C57:
mov	ax, bx
shl	ax, 1
jz	short loc_10C83
shl	ax, 1
shl	ax, 1
shl	ax, 1
mov	ds:39A9h, ax
mov	ah, 43h	; 'C'
call	sub_10C15
jb	short loc_10C83
mov	cs:word_10C0A, dx
mov	si, 0EE46h
mov	di, 0EE02h
mov	cs:off_10947, di
mov	cs:off_10949, si
retn

loc_10C83:
and	byte ptr ds:2943h, 0B7h
retn
sub_10C1C endp




sub_10C89 proc near
test	byte ptr ds:2944h, 0Fh
jz	short locret_10CCC
mov	bx, 3
mov	ah, 43h	; 'C'
call	sub_10C15
jb	short locret_10CCC
mov	cs:word_10C0E, dx
mov	ax, 4401h
xor	bx, bx
call	sub_10C15
jb	short loc_10CCD
mov	ax, 4402h
mov	bx, 1
call	sub_10C15
jb	short loc_10CCD
mov	ax, 4403h
mov	bx, 2
call	sub_10C15
jb	short loc_10CCD
mov	ax, cs:word_10C0C
mov	ds:0DBB8h, ax
mov	word ptr ds:0DBB6h, 4000h

locret_10CCC:
retn

loc_10CCD:
mov	ah, 45h	; 'E'
jmp	sub_10C15
sub_10C89 endp

mov	ax, bx
shl	ax, 1
shl	ax, 1
xchg	al, ah
and	ax, 3C00h
mov	di, ax
shr	bx, 1
shr	bx, 1
shr	bx, 1
shr	bx, 1

loc_10CE7:
mov	ax, 4400h
call	sub_10C10
jb	short locret_10D15
mov	es, cs:word_10C0C
assume es:nothing
mov	dx, cx
mov	cx, 4000h
sub	cx, di
cmp	cx, dx
jb	short loc_10D01
mov	cx, dx

loc_10D01:
sub	dx, cx
shr	cx, 1
rep movsw
adc	cl, cl
rep movsb
mov	cx, dx
jcxz	short loc_10D14
inc	bx
xor	di, di
jmp	short loc_10CE7

loc_10D14:
clc

locret_10D15:
retn
mov	ax, bx
shl	ax, 1
shl	ax, 1
xchg	al, ah
and	ax, 3C00h
mov	si, ax
shr	bx, 1
shr	bx, 1
shr	bx, 1
shr	bx, 1

loc_10D2B:
mov	ax, 4400h
call	sub_10C10
jb	short locret_10D15
mov	ds, cs:word_10C0C
mov	dx, cx
mov	cx, 4000h
sub	cx, si
cmp	cx, dx
jb	short loc_10D45
mov	cx, dx

loc_10D45:
sub	dx, cx
shr	cx, 1
rep movsw
adc	cl, cl
rep movsb
mov	cx, dx
jcxz	short loc_10D58
inc	bx
xor	si, si
jmp	short loc_10D2B

loc_10D58:
clc
retn
word_10D5A dw 0
dword_10D5C dd 0
db 10h dup(0)



sub_10D70 proc near
mov	ax, 4310h
int	2Fh		; - Multiplex -	XMS - GET DRIVER ADDRESS
			; Return: ES:BX	-> driver entry	point
mov	word ptr cs:dword_10D5C, bx
mov	word ptr cs:dword_10D5C+2, es
mov	ah, 8
call	sub_10DF2
cmp	ax, 3Fh	; '?'
jb	short loc_10DB3
cmp	ax, 800h
jb	short loc_10D91
mov	ax, 800h

loc_10D91:
mov	ds:39A9h, ax
mov	dx, ax
mov	ah, 9
call	sub_10DF2
jb	short loc_10DB3
mov	cs:word_10D5A, dx
mov	si, 0EF32h
mov	di, 0EEE9h
mov	cs:off_10947, di
mov	cs:off_10949, si
retn

loc_10DB3:
and	byte ptr ds:2943h, 7Fh
retn
sub_10D70 endp

mov	di, 0EE90h
mov	word ptr cs:[di+8], ds
push	cs
pop	ds
assume ds:seg000
mov	[di+6],	si
inc	cx
and	cl, 0FEh
mov	[di], cx
xor	ax, ax
mov	[di+2],	ax
mov	[di+4],	ax
mov	ax, cs:word_10D5A
mov	[di+0Ah], ax
xor	dx, dx
xchg	bl, bh
xchg	bl, dl
shl	bx, 1
rcl	dl, 1
shl	bx, 1
rcl	dl, 1
mov	[di+0Ch], bx
mov	[di+0Eh], dx
mov	si, di
mov	ah, 0Bh



sub_10DF2 proc near
call	cs:dword_10D5C
cmp	ax, 1
retn
sub_10DF2 endp




sub_10DFB proc near
mov	dx, cs:word_10D5A
jmp	short sub_10DF2
sub_10DFB endp

push	cs
pop	ds
mov	si, 0EE90h
inc	cx
and	cl, 0FEh
mov	[si], cx
xor	ax, ax
mov	[si+2],	ax
mov	[si+0Ah], ax
mov	[si+0Ch], di
mov	word ptr [si+0Eh], es
mov	ax, cs:word_10D5A
mov	[si+4],	ax
xor	dx, dx
xchg	bl, bh
xchg	bl, dl
shl	bx, 1
rcl	dl, 1
shl	bx, 1
rcl	dl, 1
mov	[si+6],	bx
mov	[si+8],	dx
mov	ah, 0Bh
jmp	short sub_10DF2

loc_10E3A:
push	ax
push	ds
push	es
mov	ax, seg	seg001
mov	ds, ax
assume ds:seg001
cld
cmp	byte ptr ds:0CEEAh, 0
jg	short loc_10E72
inc	word ptr ds:0CE7Ah
jnz	short loc_10E54
inc	word ptr ds:0CE7Ch

loc_10E54:
cmp	seg_11380+2788h, 0
jnz	short loc_10E6F
dec	word ptr ds:46DBh
jns	short loc_10E6F
mov	ax, word ptr seg_11380+146Eh
mov	ds:46DBh, ax
inc	word ptr seg_11380+2
inc	byte ptr ds:46DDh

loc_10E6F:
call	sub_10E8A

loc_10E72:
pop	es
dec	byte ptr ds:0CE72h
js	short near ptr byte_10EA5
mov	al, 20h	; ' '
out	20h, al		; Interrupt controller,	8259A.
cmp	byte ptr ds:0DBB5h, 0
jz	short loc_10E87
call	sub_ED99

loc_10E87:
pop	ds
assume ds:nothing
pop	ax
iret



sub_10E8A proc near
push	bx
test	byte ptr ds:2943h, 10h
jnz	short loc_10EA3
push	cx
call	dword ptr ds:3981h
mov	ds:0DBCDh, al
mov	ds:0DBCEh, bx
mov	ds:0DBD0h, cx
pop	cx

loc_10EA3:
pop	bx
retn
sub_10E8A endp

byte_10EA5 db 0C6h, 6, 72h, 0CEh
byte_10EA9 db 0Ah
pop	ds
pop	ax
jmp	far ptr	loc_10E3A

loc_10EB1:
call	sub_10F5E
jmp	short loc_10F01
db 90h

loc_10EB7:
push	ax
push	cx
push	di
push	ds
mov	ax, seg	seg001
mov	ds, ax
assume ds:seg001
cld
in	al, 60h		; AT Keyboard controller 8042.
cmp	al, 0FFh
jz	short loc_10EB1
mov	di, ax
and	di, 7Fh
cmp	di, 5Ah	; 'Z'
jnb	short loc_10F01
add	di, 0CE81h
cbw
not	ah
xchg	al, ah
mov	[di], al
or	al, al
jz	short loc_10F01
mov	al, ah
mov	ds:0CEE8h, al
cmp	al, 53h	; 'S'
jnz	short loc_10EF6
mov	al, ds:0CEB9h
add	al, ds:0CE9Eh
cmp	al, 0FEh ; '�'
jz	short loc_10F22
mov	al, 53h	; 'S'

loc_10EF6:
cmp	al, 2Eh	; '.'
jnz	short loc_10F01
cmp	byte ptr ds:0CE9Eh, 0FFh
jz	short loc_10F27

loc_10F01:
cmp	al, 70h	; 'p'
jnb	short loc_10F19
in	al, 61h		; PC/XT	PPI port B bits:
			; 0: Tmr 2 gate	��� OR	03H=spkr ON
			; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF
			; 3: 1=read high switches
			; 4: 0=enable RAM parity checking
			; 5: 0=enable I/O channel check
			; 6: 0=hold keyboard clock low
			; 7: 0=enable kbrd
or	al, 80h
out	61h, al		; PC/XT	PPI port B bits:
			; 0: Tmr 2 gate	��� OR	03H=spkr ON
			; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF
			; 3: 1=read high switches
			; 4: 0=enable RAM parity checking
			; 5: 0=enable I/O channel check
			; 6: 0=hold keyboard clock low
			; 7: 0=enable kbrd
and	al, 7Fh
out	61h, al		; PC/XT	PPI port B bits:
			; 0: Tmr 2 gate	��� OR	03H=spkr ON
			; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF
			; 3: 1=read high switches
			; 4: 0=enable RAM parity checking
			; 5: 0=enable I/O channel check
			; 6: 0=hold keyboard clock low
			; 7: 0=enable kbrd
mov	al, 20h	; ' '
cli
out	20h, al		; Interrupt controller,	8259A.
pop	ds
assume ds:nothing
pop	di
pop	cx
pop	ax
iret

loc_10F19:
pop	ds
pop	di
pop	cx
pop	ax
jmp	far ptr	loc_10EB7

loc_10F22:
jmp	far ptr	0F000h:0FFF0h

loc_10F27:
call	sub_10F2C
jmp	short loc_10F01



sub_10F2C proc near
cmp	byte ptr ds:0CEEAh, 0
jnz	short locret_10F5D
push	bx
push	es
mov	ah, 34h
int	21h		; DOS -	2+ internal - RETURN CritSectFlag (InDOS) POINTER
mov	al, es:[bx]
pop	es
pop	bx
or	al, al
jnz	short locret_10F5D
inc	byte ptr ds:0CEEAh
in	al, 61h		; PC/XT	PPI port B bits:
			; 0: Tmr 2 gate	��� OR	03H=spkr ON
			; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF
			; 3: 1=read high switches
			; 4: 0=enable RAM parity checking
			; 5: 0=enable I/O channel check
			; 6: 0=hold keyboard clock low
			; 7: 0=enable kbrd
or	al, 80h
out	61h, al		; PC/XT	PPI port B bits:
			; 0: Tmr 2 gate	��� OR	03H=spkr ON
			; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF
			; 3: 1=read high switches
			; 4: 0=enable RAM parity checking
			; 5: 0=enable I/O channel check
			; 6: 0=hold keyboard clock low
			; 7: 0=enable kbrd
and	al, 7Ch
out	61h, al		; PC/XT	PPI port B bits:
			; 0: Tmr 2 gate	��� OR	03H=spkr ON
			; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF
			; 3: 1=read high switches
			; 4: 0=enable RAM parity checking
			; 5: 0=enable I/O channel check
			; 6: 0=hold keyboard clock low
			; 7: 0=enable kbrd
mov	al, 20h	; ' '
cli
out	20h, al		; Interrupt controller,	8259A.
push	ds
pop	ss
assume ss:nothing
mov	sp, 3CBCh
jmp	loc_1F0A

locret_10F5D:
retn
sub_10F2C endp




sub_10F5E proc near
push	es
push	ds
pop	es
xor	ax, ax
mov	ds:0CEE8h, al
mov	di, 0CE81h
mov	cx, 67h	; 'g'
rep stosb
pop	es
retn
sub_10F5E endp




sub_10F70 proc near
push	di
push	es
inc	byte ptr ds:0CE71h
push	ds
pop	es
mov	di, 4C60h
call	sub_10F89
dec	byte ptr ds:0CE71h
mov	si, di
pop	es
pop	di
jmp	sub_112D3
sub_10F70 endp




sub_10F89 proc near
mov	ds:0CE78h, si
shl	si, 1
mov	si, [si+31FFh]
lodsw
mov	dx, si
or	ax, ax
jz	short sub_10FA6
mov	cx, ax
push	dx
call	sub_10FEC
pop	dx
call	sub_10FA6
jmp	short sub_10FCF
sub_10F89 endp




sub_10FA6 proc near

; FUNCTION CHUNK AT F3D3 SIZE 00000030 BYTES

mov	ax, ds:0CE78h
cmp	al, ds:0CE70h
jnb	short loc_10FB4
call	sub_10AB3
jb	short loc_10FC3

loc_10FB4:
call	sub_11114
mov	ax, ds:0CE78h
cmp	al, ds:0CE70h
jnb	short loc_10FC3
call	sub_10987

loc_10FC3:
jmp	loc_112A3
sub_10FA6 endp




sub_10FC6 proc near
les	si, ds:39B7h
mov	[di], si
mov	word ptr [di+2], es
sub_10FC6 endp




sub_10FCF proc near
mov	ax, cx
add	ax, 0Fh
rcr	ax, 1
shr	ax, 1
shr	ax, 1
shr	ax, 1
add	ds:39B9h, ax
push	ax
mov	ax, ds:39B9h
cmp	ax, ds:0CE68h
pop	ax
ja	short loc_11001
retn
sub_10FCF endp




sub_10FEC proc near
les	di, ds:39B7h
mov	ax, es
add	ax, cx
cmp	ax, ds:0CE68h
jnb	short loc_10FFB
retn

loc_10FFB:
call	sub_1100F
jmp	short sub_10FEC
sub_10FEC endp

; START	OF FUNCTION CHUNK FOR sub_1100F

loc_11000:
pop	cx
; END OF FUNCTION CHUNK	FOR sub_1100F
; START	OF FUNCTION CHUNK FOR sub_1063A

loc_11001:
mov	ax, seg	seg001
mov	ds, ax
assume ds:seg001
mov	word ptr ds:3CBCh, 368Dh
jmp	loc_1F0A
; END OF FUNCTION CHUNK	FOR sub_1063A



sub_1100F proc near

; FUNCTION CHUNK AT F130 SIZE 00000001 BYTES

push	cx
mov	bp, word ptr seg_11380+2
mov	si, 0D844h
mov	di, 0DA8Ch
mov	cx, 91h	; '�'
xor	dx, dx
mov	bx, dx

loc_11021:
add	di, 2
add	si, 4
mov	ax, [si+2]
or	ax, ax
jz	short loc_1103A
mov	ax, bp
sub	ax, [di]
cmp	ax, dx
jb	short loc_1103A
mov	dx, ax
mov	bx, si

loc_1103A:
loop	loc_11021
or	bx, bx
jz	short loc_11000
mov	ax, bx
sub	ax, 0D844h
shr	ax, 1
shr	ax, 1
cmp	ax, word ptr seg_11380+2784h
jnz	short loc_11055
mov	word ptr seg_11380+2784h, 0FFFFh

loc_11055:
xor	dx, dx
xchg	dx, [bx+2]
mov	si, 0D84Ah
mov	cx, 91h	; '�'
mov	bx, 8000h

loc_11063:
lodsw
add	si, 2
sub	ax, dx
jb	short loc_11071
cmp	ax, bx
jnb	short loc_11071
mov	bx, ax

loc_11071:
loop	loc_11063
or	bx, bx
js	short loc_110C5
mov	si, 0D846h
mov	cx, 91h	; '�'

loc_1107D:
add	si, 4
cmp	[si], dx
jb	short loc_11086
sub	[si], bx

loc_11086:
loop	loc_1107D
mov	si, 0DBB2h
cmp	[si], dx
jb	short loc_11091
sub	[si], bx

loc_11091:
mov	es, dx
add	dx, bx
mov	ds, dx
assume ds:nothing
xor	si, si
mov	di, si
mov	ax, ss:39B9h
sub	ax, dx
cmp	ax, 1000h
jbe	short loc_110B3
mov	cx, 8000h
rep movsw
mov	dx, es
add	dx, 1000h
jmp	short loc_11091

loc_110B3:
mov	cx, ax
shl	cx, 1
shl	cx, 1
shl	cx, 1
rep movsw
push	ss
pop	ds
sub	ds:39B9h, bx
pop	cx
retn

loc_110C5:
mov	ds:39B9h, dx
pop	cx
retn
sub_1100F endp




sub_110CB proc near
push	dx
call	sub_11177
pop	si
jnb	short locret_110F8
mov	dx, si

loc_110D4:
push	dx
call	sub_111CC
mov	ax, 3D00h
int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
			; DS:DX	-> ASCIZ filename
			; AL = access mode
			; 0 - read
pop	dx
jb	short locret_110F8
mov	bx, ax
xor	cx, cx
mov	dx, cx
mov	ax, 4202h
int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
			; AL = method: offset from end of file
push	ax
push	dx
xor	cx, cx
mov	dx, cx
mov	ax, 4200h
int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
			; AL = method: offset from beginning of	file
pop	bp
pop	cx

locret_110F8:
retn
sub_110CB endp




sub_110F9 proc near
call	sub_110CB
jb	short loc_110FF
retn

loc_110FF:
mov	si, dx
mov	di, 36C4h
mov	cx, 0Ch
push	ds
pop	es
rep movsb
mov	word ptr ds:3CBCh, 36B4h
jmp	loc_1F0A
sub_110F9 endp




sub_11114 proc near
push	dx
call	sub_110F9
pop	dx
cmp	bx, ds:0DBBAh
jnz	short sub_11130
call	sub_111BA
jb	short sub_11114
retn
sub_11114 endp




sub_11125 proc near
push	dx
push	di
push	es
call	loc_110D4
jb	short loc_110FF
pop	es
pop	di
pop	dx
sub_11125 endp




sub_11130 proc near
push	dx
push	di
push	es
push	ds
push	es
pop	ds
mov	cx, 0FFFFh
mov	dx, di
mov	ah, 3Fh
int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
			; BX = file handle, CX = number	of bytes to read
			; DS:DX	-> buffer
pop	ds
mov	cx, ax
pushf
mov	ah, 3Eh
int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
			; BX = file handle
popf
pop	es
pop	di
pop	dx
retn
sub_11130 endp ; sp =  2

; START	OF FUNCTION CHUNK FOR sub_D259

loc_1114C:
push	cx
mov	ah, 3Ch	; '<'
xor	cx, cx
int	21h		; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
			; CX = attributes for file
			; DS:DX	-> ASCIZ filename (may include drive and path)
pop	cx
jb	short locret_1116A
mov	bx, ax
push	ds
push	es
pop	ds
mov	dx, di
mov	ah, 40h
int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
			; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
pop	ds
sub	ax, cx
pushf
mov	ah, 3Eh
int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
			; BX = file handle
popf

locret_1116A:
retn
; END OF FUNCTION CHUNK	FOR sub_D259
db 52h,	0A2h, 77h, 0CEh, 8Ah, 0D0h, 0B4h
db 0Eh,	0CDh, 21h, 5Ah,	0C3h



sub_11177 proc near
push	di
push	es
cmp	word ptr ds:0DBBAh, 1
jb	short loc_111A3
mov	si, dx
call	sub_111E4
jb	short loc_111A3
call	sub_11277
jb	short loc_111A3
xor	cx, cx
mov	cl, es:[di+5]
mov	bp, cx
mov	cx, es:[di+3]
mov	ax, es:[di+6]
mov	dx, es:[di+8]
call	sub_111A6

loc_111A3:
pop	es
pop	di
retn
sub_11177 endp




sub_111A6 proc near
push	cx
mov	bx, ss:0DBBAh
mov	cx, dx
mov	dx, ax
mov	ax, 4200h
int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
			; AL = method: offset from beginning of	file
pop	cx
retn
sub_111A6 endp

call	sub_111A6



sub_111BA proc near
push	ds
push	es
pop	ds
mov	bx, ss:0DBBAh
mov	dx, di
mov	ah, 3Fh
int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
			; BX = file handle, CX = number	of bytes to read
			; DS:DX	-> buffer
cmp	ax, cx
pop	ds
retn
sub_111BA endp




sub_111CC proc near
push	si
push	di
mov	si, dx
mov	di, ds:38A6h

loc_111D4:
mov	al, [si]
inc	si
mov	[di], al
inc	di
or	al, al
jnz	short loc_111D4
pop	di
pop	si
mov	dx, 3826h
retn
sub_111CC endp




sub_111E4 proc near
push	ss
pop	es
cmp	word ptr [si+2], 505Ch
jz	short loc_1123C
push	si
mov	cx, 10h
mov	dx, cx

loc_111F3:
lodsb
or	al, al
loopne	loc_111F3
jnz	short loc_111FB
inc	cx

loc_111FB:
sub	cx, 10h
neg	cx
pop	si
xor	dx, dx
mov	ax, ds:0CE78h
mov	di, ax
shl	di, 1
mov	di, [di+31FFh]
add	di, 2
push	cx
push	si
repe cmpsb
pop	si
pop	cx
jz	short loc_11275
mov	bx, 31FFh
mov	bp, 0F7h ; '�'

loc_1121F:
mov	di, es:[bx]
mov	ax, bx
sub	ax, 31FFh
shr	ax, 1
add	bx, 2
add	di, 2
push	cx
push	si
repe cmpsb
pop	si
pop	cx
jz	short loc_11275
dec	bp
jnz	short loc_1121F
stc
retn

loc_1123C:
add	si, 4
lodsb
sub	al, 40h	; '@'
mov	dl, al
xor	bx, bx
mov	cx, 3

loc_11249:
lodsb
cmp	al, 41h	; 'A'
jb	short loc_11250
sub	al, 7

loc_11250:
and	al, 0Fh
shl	bx, 1
shl	bx, 1
shl	bx, 1
shl	bx, 1
or	bl, al
loop	loc_11249
lodsb
cmp	al, 4Fh	; 'O'
cmc
rcl	dl, 1
lodsb
sub	al, 41h	; 'A'
jb	short loc_11273
shl	al, 1
shl	al, 1
shl	al, 1
shl	al, 1
or	bh, al

loc_11273:
mov	ax, bx

loc_11275:
clc
retn
sub_111E4 endp




sub_11277 proc near
les	di, ss:0DBBCh
sub	di, 5

loc_1127F:
add	di, 5
cmp	dl, es:[di+4]
jnz	short loc_1128C
cmp	ax, es:[di+2]

loc_1128C:
ja	short loc_1127F
mov	di, es:[di]
sub	di, 0Ah

loc_11294:
add	di, 0Ah
cmp	dl, es:[di+2]
jnz	short loc_112A0
cmp	ax, es:[di]

loc_112A0:
ja	short loc_11294
retn
sub_11277 endp

; START	OF FUNCTION CHUNK FOR sub_10FA6

loc_112A3:
cmp	byte ptr ds:0CE71h, 0
jnz	short locret_112D2
push	cx
push	di
push	ds
push	es
pop	ds
mov	dx, di
add	dx, cx
mov	cx, 6
mov	si, di
xor	ax, ax

loc_112BA:
lodsb
add	ah, al
loop	loc_112BA
cmp	ah, 0ABh ; '�'
jnz	short loc_112CE
mov	si, di
lodsw
mov	di, ax
lodsb
or	al, al
jz	short loc_112DD

loc_112CE:
stc
pop	ds
pop	di
pop	cx

locret_112D2:
retn
; END OF FUNCTION CHUNK	FOR sub_10FA6



sub_112D3 proc near
push	cx
push	di
push	ds
add	si, 6
xor	bp, bp
jmp	short loc_11305

loc_112DD:
lodsw
mov	cx, ax
sub	si, 5
mov	bp, si
add	di, si
add	di, 40h	; '@'
add	si, cx
dec	si
dec	di
sub	cx, 6
std
shr	cx, 1
jnb	short loc_112F7
movsb

loc_112F7:
dec	si
dec	di
rep movsw
cld
mov	si, di
add	si, 2
mov	di, bp
xor	bp, bp

loc_11305:
shr	bp, 1
jz	short loc_1130E
jnb	short loc_11316

loc_1130B:
movsb
jmp	short loc_11305

loc_1130E:
lodsw
mov	bp, ax
stc
rcr	bp, 1
jb	short loc_1130B

loc_11316:
xor	cx, cx
shr	bp, 1
jnz	short loc_11322
lodsw
mov	bp, ax
stc
rcr	bp, 1

loc_11322:
jb	short loc_11352
shr	bp, 1
jnz	short loc_1132E
lodsw
mov	bp, ax
stc
rcr	bp, 1

loc_1132E:
rcl	cx, 1
shr	bp, 1
jnz	short loc_1133A
lodsw
mov	bp, ax
stc
rcr	bp, 1

loc_1133A:
rcl	cx, 1
lodsb
mov	ah, 0FFh

loc_1133F:
add	ax, di
xchg	ax, si
mov	bx, ds
mov	dx, es
mov	ds, dx
inc	cx
inc	cx
rep movsb
mov	ds, bx
mov	si, ax
jmp	short loc_11305

loc_11352:
lodsw
mov	cl, al
shr	ax, 1
shr	ax, 1
shr	ax, 1
or	ah, 0E0h
and	cl, 7
jnz	short loc_1133F
mov	bx, ax
lodsb
mov	cl, al
mov	ax, bx
or	cl, cl
jnz	short loc_1133F
stc
mov	cx, di
pop	ds
pop	di
add	sp, 2
sub	cx, di
retn
sub_112D3 endp

;align 8
seg000 ends


; Segment type:	Uninitialized
seg001 segment byte stack 'STACK'
assume cs:seg001
assume es:nothing, ss:nothing, ds:nothing
seg_11380 db 2 dup(0), 2, 0, 0Ah, 20h, 80h, 1, 20h
db 2 dup(0), 0Ah, 1Bh dup(0), 3, 80h dup(0)
db 86h,	1, 2 dup(0), 58h, 1Bh, 10h dup(0)
db 80h,	0Bh dup(0), 2 dup(0FFh), 4 dup(0)
db 2 dup(0FFh),	4 dup(0), 2 dup(0FFh), 4 dup(0)
db 2 dup(0FFh),	4 dup(0), 2 dup(0FFh), 17h dup(0)
db 0FFh, 1, 3 dup(0), 2, 1, 15h, 19h, 0FCh
db 0FFh, 2 dup(0), 20h,	0, 10h,	0FFh, 10h dup(0)
db 1, 2, 98h, 3Ah, 0C2h, 0FFh, 2 dup(0)
db 30h,	43h, 0,	0FFh, 0Ah dup(0), 3 dup(1)
db 3 dup(0), 1,	3, 0FEh, 2Ah, 0CAh, 0FFh
db 2 dup(0), 28h, 29h, 80h, 0FFh, 6 dup(0)
db 78h,	0, 2 dup(2), 4 dup(3), 2 dup(0)
db 1, 4, 1Dh, 3Eh, 0D0h, 0FFh, 2 dup(0)
db 2Bh,	1Eh, 80h, 0FFh,	6 dup(0), 64h, 0
db 2, 5	dup(3),	2 dup(0), 1, 5,	0AEh, 27h
db 0BDh, 0FFh, 2 dup(0), 29h, 35h, 80h,	0FFh
db 6 dup(0), 7Dh, 0, 1,	2, 0, 3	dup(1),	2 dup(0)
db 1, 6, 37h, 1Bh, 0E0h, 0FFh, 2 dup(0)
db 2Dh,	24h, 80h, 0FFh,	6 dup(0), 0C8h,	0
db 2 dup(2), 0,	3, 2 dup(1), 2 dup(0), 1
db 7, 0D0h, 26h, 0D5h, 0FFh, 2 dup(0), 2Ch
db 21h,	80h, 0FFh, 6 dup(0), 0B4h, 0, 2
db 3 dup(3), 2,	3 dup(0), 1, 8,	0Ch, 33h
db 0D9h, 0FFh, 2 dup(0), 2Eh, 1Bh, 80h,	0FFh
db 6 dup(0), 2Dh, 0, 2 dup(2), 3 dup(3)
db 3 dup(0), 1,	9, 89h,	16h, 0CFh, 0FFh
db 2 dup(0), 2Ah, 27h, 80h, 0FFh, 6 dup(0)
db 8Ch,	0, 2 dup(2), 0,	2 dup(2), 3 dup(0)
db 1, 0Ah, 19h,	3Ch, 0D8h, 0FFh, 2 dup(0)
db 21h,	0, 80h,	50h, 10h dup(0), 2, 3, 48h
db 31h,	0EBh, 0FFh, 2 dup(0), 2, 8, 80h
db 4, 6	dup(0),	78h, 9 dup(0), 2, 4, 4Eh
db 25h,	0FCh, 0FFh, 2 dup(0), 1, 3, 40h
db 7 dup(0), 3Ch, 9 dup(0), 2, 5, 48h, 26h
db 0Ah,	4 dup(0), 1, 40h, 7 dup(0), 54h
db 9 dup(0), 2,	6, 1Eh,	21h, 0EDh, 0FFh
db 2 dup(0), 3,	2, 40h,	7 dup(0), 2Dh, 9 dup(0)
db 2, 7, 30h, 11h, 6, 5	dup(0),	80h, 3Ch
db 6 dup(0), 8Ch, 0, 2 dup(1), 5 dup(0)
db 0Ah,	2 dup(3), 0C8h,	32h, 8,	3 dup(0)
db 8, 5, 0E0h, 2, 6 dup(0), 63h, 0, 1, 6 dup(0)
db 14h,	3, 4, 9Ah, 3Dh,	16h, 3 dup(0), 7
db 0, 80h, 11h,	6 dup(0), 0A0h,	0, 1, 7	dup(0)
db 3, 5, 2Fh, 4Dh, 0FCh, 0FFh, 2 dup(0)
db 4, 9, 80h, 4, 6 dup(0), 0B4h, 9 dup(0)
db 3, 6, 54h, 3Dh, 0EFh, 0FFh, 2 dup(0)
db 3, 0, 80h, 0Ch, 6 dup(0), 0A0h, 0, 2
db 7 dup(0), 3,	7, 78h,	46h, 8,	3 dup(0)
db 6, 0, 80h, 10h, 6 dup(0), 0D2h, 0, 1
db 2, 3, 5 dup(0), 3, 0Ah, 78h,	50h, 0Fh
db 3 dup(0), 21h, 0, 80h, 38h, 10h dup(0)
db 4, 3, 0C7h, 31h, 30h, 3 dup(0), 5, 7
db 80h,	14h, 6 dup(0), 0C8h, 0,	1, 7 dup(0)
db 2 dup(4), 8Dh, 2Ch, 18h, 3 dup(0), 2	dup(4)
db 80h,	14h, 6 dup(0), 0AAh, 9 dup(0), 4
db 5, 0B1h, 31h, 23h, 3	dup(0),	7, 6, 80h
db 14h,	6 dup(0), 0F0h,	9 dup(0), 4, 7,	0A8h
db 16h,	1Bh, 3 dup(0), 3, 0, 80h, 16h, 6 dup(0)
db 0C8h, 0, 1, 3, 0, 1,	4 dup(0), 4, 6,	0D1h
db 0Fh,	46h, 3 dup(0), 9, 0Ah, 0A0h, 48h
db 6 dup(0), 0F0h, 0, 1, 6 dup(0), 0C8h
db 5, 3, 0F7h, 0DEh, 17h, 3 dup(0), 5, 0
db 80h,	44h, 6 dup(0), 0B4h, 0,	2, 2 dup(1)
db 5 dup(0), 5,	4, 52h,	0F7h, 1Eh, 3 dup(0)
db 2, 0Bh, 80h,	48h, 6 dup(0), 0A0h, 0,	1
db 7 dup(0), 2 dup(5), 0CAh, 0E6h, 0Ah,	3 dup(0)
db 5, 0Ch, 80h,	48h, 6 dup(0), 64h, 2 dup(0)
db 2 dup(1), 5 dup(0), 5, 6, 9Eh, 2, 0Dh
db 3 dup(0), 7,	0, 80h,	28h, 6 dup(0), 0FAh
db 0, 2	dup(1),	5, 5 dup(0), 5,	0Ah, 75h
db 10h,	12h, 3 dup(0), 21h, 0, 80h, 38h
db 10h dup(0), 6, 3, 0F3h, 7, 0D8h, 0FFh
db 2 dup(0), 28h, 2Ch, 80h, 0FFh, 6 dup(0)
db 96h,	0, 2, 3, 0, 3, 4 dup(0), 6, 4, 2 dup(0F0h)
db 0DDh, 0FFh, 2 dup(0), 29h, 2Fh, 80h,	0FFh
db 6 dup(0), 20h, 0, 1,	0, 2 dup(3), 4 dup(0)
db 6, 5, 0FBh, 6, 0EBh,	0FFh, 2	dup(0),	1
db 0, 80h, 50h,	6 dup(0), 82h, 0, 1, 0,	1
db 5 dup(0), 2 dup(6), 27h, 0E2h, 0F0h,	0FFh
db 3 dup(0), 0Dh, 80h, 50h, 6 dup(0), 78h
db 3 dup(0), 1,	5 dup(0), 6, 7,	29h, 0F9h
db 0CAh, 0FFh, 2 dup(0), 2Ah, 32h, 80h,	0FFh
db 6 dup(0), 0B4h, 0, 5	dup(2),	3 dup(0)
db 6, 8, 7Ch, 0F6h, 0EBh, 0FFh,	2 dup(0)
db 6, 0, 80h, 3Ch, 6 dup(0), 0B4h, 0, 2	dup(1)
db 0, 2, 1, 3 dup(0), 6, 9, 46h, 18h, 0C4h
db 0FFh, 2 dup(0), 2Bh,	34h, 80h, 0FFh,	6 dup(0)
db 0D2h, 0, 2 dup(2), 3	dup(1),	3 dup(0)
db 6, 0Ah, 2Fh,	0F1h, 0F5h, 0FFh, 2 dup(0)
db 21h,	0, 80h,	47h, 10h dup(0), 6, 0Bh
db 0CCh, 0Ch, 0B7h, 0FFh, 2 dup(0), 2Ch
db 36h,	80h, 0FFh, 6 dup(0), 78h, 3 dup(0)
db 3 dup(1), 3 dup(0), 7, 3, 0,	0E0h, 0C1h
db 0FFh, 2 dup(0), 2Dh,	37h, 80h, 0FFh,	6 dup(0)
db 0FAh, 3 dup(0), 2 dup(2), 4 dup(0), 7
db 4, 0E3h, 0D8h, 0D0h,	0FFh, 2	dup(0),	2Eh
db 39h,	80h, 0FFh, 6 dup(0), 0B4h, 3 dup(0)
db 2 dup(1), 4 dup(0), 7, 5, 4Fh, 0ADh,	0C3h
db 0FFh, 2 dup(0), 2Fh,	3Bh, 80h, 0FFh,	6 dup(0)
db 78h,	3 dup(0), 2 dup(1), 4 dup(0), 7
db 6, 6Ch, 2 dup(0C5h),	0FFh, 2	dup(0),	28h
db 3Ah,	80h, 0FFh, 6 dup(0), 0C8h, 3 dup(0)
db 2 dup(1), 4 dup(0), 8, 3, 61h, 0B8h,	0DCh
db 0FFh, 2 dup(0), 7, 11h, 0A0h, 2Ch, 6	dup(0)
db 96h,	0, 2 dup(1), 5 dup(0), 50h, 8, 4
db 7Fh,	0C4h, 0E8h, 0FFh, 2 dup(0), 4, 0Fh
db 80h,	28h, 6 dup(0), 6Eh, 3 dup(0), 1
db 5 dup(0), 8,	5, 74h,	96h, 0DEh, 0FFh
db 2 dup(0), 5,	10h, 80h, 2Ch, 6 dup(0)
db 3Ch,	9 dup(0), 8, 6,	0C6h, 0A7h, 0E2h
db 0FFh, 2 dup(0), 6, 12h, 80h,	2Ch, 6 dup(0)
db 0B4h, 0, 1, 0, 1, 5 dup(0), 8, 7, 70h
db 0B1h, 0EBh, 0FFh, 2 dup(0), 1, 0Eh, 80h
db 2Ch,	6 dup(0), 96h, 3 dup(0), 1, 5 dup(0)
db 2 dup(8), 0F1h, 0AAh, 0D5h, 0FFh, 4 dup(0)
db 80h,	2Ch, 6 dup(0), 0A0h, 3 dup(0), 1
db 5 dup(0), 9,	3, 0E2h, 6Ah, 0F1h, 0FFh
db 2 dup(0), 0Bh, 13h, 0A0h, 5Ah, 6 dup(0)
db 0AAh, 3 dup(0), 1, 4	dup(0),	28h, 9,	4
db 32h,	85h, 0F6h, 0FFh, 2 dup(0), 0Ah,	14h
db 0A0h, 5Ah, 6	dup(0),	0D2h, 8	dup(0),	0Ah
db 9, 5, 0, 70h, 0E1h, 0FFh, 2 dup(0), 29h
db 42h,	80h, 0FFh, 6 dup(0), 0C3h, 0, 2	dup(1)
db 0, 2	dup(1),	3 dup(0), 9, 6,	18h, 5Ch
db 0DAh, 0FFh, 2 dup(0), 2Ah, 3Fh, 80h,	0FFh
db 6 dup(0), 0F0h, 0, 5	dup(2),	3 dup(0)
db 9, 7, 0E3h, 68h, 0D0h, 0FFh,	2 dup(0)
db 2Bh,	3Eh, 80h, 0FFh,	6 dup(0), 0C8h,	0
db 2 dup(1), 0,	3 dup(1), 2 dup(0), 9, 8
db 14h,	67h, 0C3h, 0FFh, 2 dup(0), 2Ch,	3Dh
db 80h,	0FFh, 6	dup(0),	0D2h, 0, 2, 5 dup(1)
db 2 dup(0), 2 dup(9), 0BEh, 7Ch, 0C5h,	0FFh
db 2 dup(0), 2Dh, 3Ch, 80h, 0FFh, 6 dup(0)
db 32h,	0, 1, 2	dup(0),	1, 4 dup(0), 9,	0Ah
db 0F1h, 82h, 0DDh, 0FFh, 2 dup(0), 21h
db 0, 80h, 5Ah,	10h dup(0), 0Ah, 3, 0B5h
db 75h,	5, 3 dup(0), 3,	0, 80h,	5Ah, 6 dup(0)
db 0E6h, 9 dup(0), 0Ah,	4, 95h,	94h, 2,	3 dup(0)
db 0Dh,	0, 0A0h, 5Ah, 6	dup(0),	0C8h, 8	dup(0)
db 0A0h, 0Bh, 3, 4Ch, 91h, 18h,	3 dup(0)
db 8, 17h, 0A0h, 58h, 6	dup(0),	0AAh, 3	dup(0)
db 1, 4	dup(0),	64h, 0Bh, 4, 0F3h, 0BCh
db 2Fh,	3 dup(0), 0Ah, 19h, 0A0h, 58h, 6 dup(0)
db 0C8h, 8 dup(0), 0C8h, 0Bh, 5, 0DFh, 0C7h
db 16h,	3 dup(0), 10h, 0, 0A0h,	55h, 6 dup(0)
db 8Ch,	8 dup(0), 6Eh, 0Bh, 6, 0B0h, 0BBh
db 1Fh,	3 dup(0), 0Bh, 18h, 0A0h, 58h, 6 dup(0)
db 0AAh, 8 dup(0), 69h,	0Bh, 7,	0DEh, 0CEh
db 0F9h, 0FFh, 2 dup(0), 3, 0, 0A0h, 28h
db 6 dup(0), 8Ch, 8 dup(0), 78h, 0Bh, 0Ah
db 0AEh, 0B2h, 0F5h, 0FFh, 2 dup(0), 21h
db 0, 80h, 58h,	10h dup(0), 0Ch, 3, 0B6h
db 5Dh,	24h, 3 dup(0), 0Eh, 15h, 0A0h, 5Ah
db 6 dup(0), 0AAh, 3 dup(0), 1,	4 dup(0)
db 64h,	0Ch, 4,	93h, 71h, 31h, 3 dup(0)
db 0Fh,	16h, 0A0h, 58h,	6 dup(0), 0F0h,	8 dup(0)
db 0C8h, 0Ch, 5, 0F5h, 41h, 27h, 3 dup(0)
db 3, 0, 80h, 0FFh, 6 dup(0), 8Ch, 0, 2	dup(1)
db 3, 5	dup(0),	0Ch, 6,	0, 0C0h, 47h, 3	dup(0)
db 0Ch,	1Ah, 0A0h, 0FFh, 6 dup(0), 0F0h
db 3 dup(0), 2,	1, 3 dup(0), 96h, 2 dup(0FFh)
db 1, 0, 1, 80h, 0Eh dup(0), 40h, 2 dup(0)
db 1Ch,	2 dup(0Ah), 2 dup(0), 0BEh, 2, 0
db 1, 80h, 11h dup(0), 1Ah, 14h, 3Ch, 2	dup(0)
db 0D0h, 3, 0, 1, 80h, 11h dup(0), 10h,	0Eh
db 3 dup(0), 28h, 4, 0,	1, 80h,	11h dup(0)
db 28h,	0Ch, 0Ah, 16h, 0, 0F3h,	5, 0, 1
db 80h,	11h dup(0), 1Eh, 0Eh, 0Ah, 1Ah,	0
db 0AEh, 6, 0, 1, 80h, 11h dup(0), 1Ah,	14h
db 0Ah,	1Eh, 0,	96h, 7,	0, 1, 80h, 11h dup(0)
db 16h,	0, 0Ah,	14h, 0,	0C9h, 8, 0, 1, 80h
db 11h dup(0), 1Fh, 0Bh, 16h, 18h, 0, 88h
db 9, 0, 1, 80h, 11h dup(0), 19h, 4, 0Bh
db 1Ah,	0, 0EBh, 0Ah, 0, 1, 80h, 11h dup(0)
db 17h,	0Ch, 2 dup(11h), 0, 0FCh, 0Bh, 0
db 1, 80h, 11h dup(0), 13h, 0Ch, 1Fh, 8
db 0, 0F1h, 0Ch, 0, 1, 80h, 11h	dup(0),	0Ch
db 5, 1, 1Dh, 0, 86h, 0Dh, 0, 1, 80h, 0Eh dup(0)
db 40h,	2 dup(0), 17h, 16h, 0Bh, 16h, 0
db 0D5h, 0Eh, 0, 1, 80h, 0Eh dup(0), 40h
db 2 dup(0), 15h, 0Ch, 1Dh, 16h, 0, 60h
db 0Fh,	0, 1, 80h, 0Eh dup(0), 40h, 2 dup(0)
db 14h,	1Ch, 0Bh, 3, 0,	0EBh, 10h, 0, 1
db 80h,	11h dup(0), 1Fh, 0Bh, 1Ch, 6, 0
db 7Bh,	11h, 0,	1, 80h,	11h dup(0), 27h
db 9, 1Fh, 2 dup(0), 6Bh, 12h, 0, 1, 80h
db 11h dup(0), 11h, 13h, 0Ah, 12h, 0, 0D6h
db 13h,	0, 1, 80h, 0Eh dup(0), 40h, 2 dup(0)
db 17h,	0Ch, 1Dh, 3, 0,	0EDh, 14h, 0, 1
db 80h,	0Eh dup(0), 40h, 2 dup(0), 16h,	0Dh
db 1, 16h, 0, 42h, 15h,	0, 1, 80h, 11h dup(0)
db 6, 0Ah, 0Bh,	19h, 0,	0ACh, 16h, 0, 1
db 80h,	11h dup(0), 0Fh, 1, 16h, 6, 0, 0ECh
db 17h,	0, 1, 80h, 11h dup(0), 15h, 1, 13h
db 1Eh,	0, 4Ch,	18h, 0,	1, 80h,	11h dup(0)
db 2 dup(8), 0Ah, 13h, 0, 9Bh, 19h, 0, 1
db 80h,	11h dup(0), 10h, 15h, 6, 1Fh, 0
db 0DEh, 1Ah, 0, 1, 80h, 11h dup(0), 1Fh
db 0Dh,	4, 0Dh,	0, 94h,	1Bh, 1Ch, 9, 8Ch
db 0Ch dup(0), 90h, 4 dup(0), 50h, 1Eh,	50h
db 6, 38h, 0B4h, 1Ch, 1Dh, 0Ah,	8Ch, 0Ch dup(0)
db 90h,	4 dup(0), 50h, 1Eh, 50h, 17h, 38h
db 0B4h, 1Dh, 0, 0Bh, 8Ch, 0Ch dup(0), 90h
db 4 dup(0), 50h, 1Eh, 50h, 0Bh, 38h, 0B4h
db 1Eh,	1Fh, 9,	8Ch, 0Ch dup(0), 90h, 4	dup(0)
db 46h,	1Eh, 50h, 5, 3Ch, 0B4h,	1Fh, 20h
db 0Ah,	8Ch, 0Ch dup(0), 90h, 4	dup(0),	46h
db 1Eh,	50h, 2,	38h, 0B4h, 20h,	0, 0Bh,	8Ch
db 0Ch dup(0), 90h, 4 dup(0), 46h, 1Eh,	50h
db 1Eh,	3Ch, 0B4h, 21h,	22h, 9,	8Ch, 0Ch dup(0)
db 90h,	4 dup(0), 50h, 1Eh, 50h, 18h, 38h
db 0B4h, 22h, 23h, 0Ah,	8Ch, 0Ch dup(0)
db 90h,	4 dup(0), 3Ch, 1Eh, 50h, 1Ch, 38h
db 0B4h, 23h, 0, 0Bh, 8Ch, 0Ch dup(0), 90h
db 4 dup(0), 50h, 1Eh, 50h, 0Fh, 30h, 0B4h
db 24h,	25h, 9,	8Ch, 0Ch dup(0), 90h, 4	dup(0)
db 28h,	1Eh, 50h, 0, 18h, 0B6h,	25h, 26h
db 0Ah,	8Ch, 0Ch dup(0), 90h, 4	dup(0),	28h
db 1Eh,	50h, 2,	10h, 0B6h, 26h,	0, 0Bh,	8Ch
db 0Ch dup(0), 90h, 4 dup(0), 28h, 1Eh,	50h
db 0Fh,	10h, 0B6h, 27h,	28h, 9,	8Ch, 0Ch dup(0)
db 90h,	4 dup(0), 3Ch, 1Eh, 50h, 1Eh, 18h
db 0B9h, 28h, 0, 0Ah, 8Ch, 0Ch dup(0), 90h
db 4 dup(0), 32h, 1Eh, 50h, 1Dh, 18h, 0BEh
db 29h,	2Ah, 9,	8Ch, 0Ch dup(0), 90h, 4	dup(0)
db 46h,	1Eh, 50h, 0Ah, 3Ch, 0BEh, 2Ah, 2Bh
db 0Ah,	8Ch, 0Ch dup(0), 90h, 4	dup(0),	46h
db 1Eh,	50h, 3,	38h, 0BEh, 2Bh,	0, 0Bh,	8Ch
db 0Ch dup(0), 90h, 4 dup(0), 46h, 1Eh,	50h
db 1Bh,	3Ch, 0BEh, 2Ch,	2Dh, 9,	8Ch, 0Ch dup(0)
db 90h,	4 dup(0), 50h, 1Eh, 50h, 1Bh, 10h
db 0B9h, 2Dh, 2Eh, 0Ah,	8Ch, 0Ch dup(0)
db 90h,	4 dup(0), 50h, 1Eh, 50h, 13h, 10h
db 0B9h, 2Eh, 0, 0Bh, 8Ch, 0Ch dup(0), 90h
db 4 dup(0), 50h, 1Eh, 50h, 18h, 10h, 0B9h
db 2Fh,	30h, 9,	8Ch, 0Ch dup(0), 90h, 4	dup(0)
db 0Ah,	1Eh, 46h, 12h, 30h, 0BCh, 30h, 31h
db 0Ah,	8Ch, 0Ch dup(0), 90h, 4	dup(0),	11h
db 1Eh,	45h, 0Fh, 10h, 0BCh, 31h, 0, 0Bh
db 8Ch,	0Ch dup(0), 90h, 4 dup(0), 14h,	1Eh
db 41h,	1Fh, 10h, 0BCh,	32h, 33h, 9, 8Ch
db 0Ch dup(0), 90h, 4 dup(0), 19h, 1Eh,	30h
db 7, 18h, 0BCh, 33h, 0, 0Ah, 8Ch, 0Ch dup(0)
db 90h,	4 dup(0), 19h, 1Eh, 3Ah, 16h, 18h
db 0BCh, 34h, 0, 9, 8Ch, 0Ch dup(0), 90h
db 4 dup(0), 46h, 1Eh, 50h, 4, 38h, 0B9h
db 35h,	0, 9, 8Ch, 0Ch dup(0), 90h, 4 dup(0)
db 5Ah,	1Eh, 5Ah, 9, 1Ch, 0B4h,	36h, 0,	9
db 8Ch,	0Ch dup(0), 90h, 4 dup(0), 28h,	1Eh
db 50h,	0Dh, 18h, 0B4h,	37h, 38h, 9, 8Ch
db 0Ch dup(0), 90h, 4 dup(0), 0Ch, 1Eh,	22h
db 2, 30h, 0B4h, 38h, 0, 0Ah, 8Ch, 0Ch dup(0)
db 90h,	4 dup(0), 0Ch, 1Eh, 22h, 17h, 30h
db 0B4h, 39h, 0, 9, 8Ch, 0Ch dup(0), 90h
db 4 dup(0), 0Ah, 1Eh, 22h, 0, 30h, 0B4h
db 3Ah,	0, 9, 8Ch, 0Ch dup(0), 90h, 4 dup(0)
db 0Ah,	1Eh, 10h, 1Fh, 30h, 0B4h, 3Bh, 0
db 9, 8Ch, 0Ch dup(0), 90h, 4 dup(0), 0Ah
db 1Eh,	0Ah, 10h, 30h, 0B4h, 3Ch, 0, 9,	8Ch
db 0Ch dup(0), 90h, 4 dup(0), 50h, 1Eh,	50h
db 0Fh,	10h, 0B4h, 3Dh,	0, 9, 8Ch, 0Ch dup(0)
db 90h,	4 dup(0), 63h, 1Eh, 50h, 15h, 3Ch
db 0B4h, 3Eh, 0, 9, 8Ch, 0Ch dup(0), 90h
db 4 dup(0), 3Ch, 1Eh, 50h, 16h, 18h, 0B4h
db 3Fh,	40h, 9,	8Ch, 0Ch dup(0), 90h, 4	dup(0)
db 46h,	1Eh, 50h, 10h, 38h, 0B4h, 40h, 41h
db 0Ah,	8Ch, 0Ch dup(0), 90h, 4	dup(0),	46h
db 1Eh,	50h, 1Eh, 8, 0B4h, 41h,	0, 0Bh,	8Ch
db 0Ch dup(0), 90h, 4 dup(0), 46h, 1Eh,	50h
db 16h,	30h, 0B4h, 42h,	0, 9, 8Ch, 0Ch dup(0)
db 90h,	4 dup(0), 32h, 1Eh, 50h, 14h, 18h
db 0B4h, 43h, 0, 9, 8Ch, 0Ch dup(0), 90h
db 4 dup(0), 8,	1Eh, 5Fh, 14h, 38h, 0Ah
db 1Dh dup(0), 0Ah, 20h, 80h, 1, 0F2h, 92h
db 9 dup(0), 2,	4, 20h,	80h, 1,	0F7h, 92h
db 8 dup(0), 1,	2, 8, 20h, 80h,	0FFh, 0FCh
db 92h,	8 dup(0), 2 dup(2), 4, 20h, 80h
db 0FFh, 1, 93h, 8 dup(0), 3, 2	dup(2),	0
db 80h,	0Dh, 6,	93h, 8 dup(0), 4, 0, 2,	4
db 80h,	2Eh, 0Bh, 93h, 8 dup(0), 5, 0, 2
db 10h,	80h, 3Fh, 10h, 93h, 8 dup(0), 6
db 0, 3, 5, 80h, 1Bh, 15h, 93h,	8 dup(0)
db 7, 2, 3, 7, 80h, 11h, 1Ah, 93h, 8 dup(0)
db 8, 0, 2, 30h, 80h, 2, 1Fh, 93h, 8 dup(0)
db 9, 80h, 2, 30h, 80h,	2, 24h,	93h, 8 dup(0)
db 0Ah,	80h, 2,	30h, 80h, 2, 29h, 93h, 8 dup(0)
db 0Bh,	80h, 2,	30h, 80h, 0, 2Eh, 93h, 8 dup(0)
db 0Ch,	0, 2, 30h, 80h,	0, 6Fh,	93h, 8 dup(0)
db 0Dh,	0, 2, 30h, 80h,	0, 73h,	93h, 8 dup(0)
db 0Eh,	0, 2 dup(2), 80h, 0, 7Eh, 93h, 8 dup(0)
db 0Fh,	80h, 1,	3 dup(0), 1, 2,	0, 2 dup(2)
db 9Eh,	0CBh, 0Ah, 0A8h, 0FDh, 3 dup(0)
db 3, 1, 2 dup(0), 1, 2, 0, 2, 1, 9Eh, 0CBh
db 0Ah,	0A8h, 0E4h, 3 dup(0), 5, 3, 2 dup(0)
db 2 dup(1), 2 dup(0), 1, 0B2h,	0E3h, 0Ah
db 28h,	0E4h, 3	dup(0),	6, 2, 3	dup(0),	2
db 3, 2	dup(2),	28h, 0D0h, 8Fh,	0B2h, 0FDh
db 3 dup(0), 9,	3, 2 dup(0), 2,	1, 2 dup(0)
db 1, 0B2h, 0D0h, 0Ah, 28h, 0EEh, 3 dup(0)
db 0Bh,	6, 2 dup(0), 2 dup(1), 2, 1, 0,	0BCh
db 0DAh, 8Ah, 0A8h, 64h, 3 dup(0), 0FFh
db 0D8h, 10h, 3, 0Dh, 0Fh, 32h,	64h, 80h
db 28h,	14h, 28h, 23h, 32h, 46h, 80h, 2	dup(0FFh)
db 0, 1, 6 dup(0FFh), 4	dup(0),	2 dup(0FFh)
db 14h,	0, 1, 0Ah dup(0), 3, 0,	3, 0, 3
db 4 dup(0), 2,	0, 1, 0, 0FFh, 40h dup(0)
db 7, 12h, 2 dup(0), 0AAh, 0, 0AAh, 0, 4Bh
db 0, 0Fh, 0Bh dup(0), 1, 58h, 3Ch, 1Eh
db 0Ah dup(0), 31h, 3 dup(0), 4Ch, 0, 1
db 3 dup(0), 86h, 0, 2 dup(0FFh), 1, 0,	1
db 0, 2, 0, 3, 0, 4, 0,	5, 0, 6, 0, 7, 0
db 8, 0, 9, 0, 0Ah, 0, 8, 1, 0Ch, 0, 0Dh
db 0, 0Eh, 0, 0Fh, 3 dup(0), 0B6h, 0, 0Ch
db 0, 3, 0, 0Ah, 1, 41h, 0, 4, 0, 0EEh,	0
db 41h,	0, 5, 0, 0C1h, 0, 41h, 0, 2 dup(0FFh)
db 4Ch,	2, 0, 0FDh, 0, 3Ah, 7, 0, 1, 8Ch
db 0CFh, 3 dup(0), 0Bh,	62h, 0Ah, 0, 7,	0
db 4Bh,	3 dup(0), 0Ah, 15h, 0Bh, 3 dup(0)
db 5Dh,	4, 8Bh,	2, 88h,	26h, 0,	87h, 0Ch
db 0, 63h, 2 dup(0), 0Ah, 0, 61h, 9, 5,	4
db 0, 64h, 0, 83h, 6, 7, 5Eh, 8, 2, 2 dup(0)
db 1, 2, 0FEh, 0FDh, 0FCh, 72h,	2 dup(0)
db 1, 0, 1, 2, 0FEh, 0FDh, 0FCh, 73h, 2	dup(0)
db 1, 0, 1, 2, 0FEh, 0FDh, 0FCh, 74h, 2	dup(0)
db 1, 0, 1, 2, 0FEh, 0FDh, 0FCh, 75h, 2	dup(0)
db 1, 0, 1, 2, 0FEh, 0FDh, 0FCh, 76h, 2	dup(0)
db 1, 0, 1, 2, 0FEh, 0FDh, 0FCh, 77h, 3
db 0, 1, 0, 72h, 2 dup(0), 2, 0, 1, 3, 0FEh
db 0FDh, 0FCh, 78h, 2 dup(0), 3, 0, 7Bh
db 2, 0, 1, 0, 1, 2, 0FEh, 0FDh, 0FCh, 7Ah
db 3, 0, 1, 0, 72h, 2 dup(0), 2, 0, 1, 3
db 0FEh, 0FDh, 0FCh, 79h, 4, 0,	3, 0, 7Bh
db 2, 0, 1, 0, 7Dh, 2 dup(0), 2, 0, 1, 3
db 0FEh, 0FDh, 0FCh, 7Ch, 4, 0,	3, 0, 7Bh
db 2, 0, 1, 0, 7Dh, 2 dup(0), 2, 0, 1, 3
db 0FEh, 0FDh, 0FCh, 74h, 4, 0,	3, 0, 7Bh
db 2, 0, 1, 0, 7Dh, 2 dup(0), 2, 0, 1, 2
db 0FEh, 0FDh, 0FCh, 75h, 4, 3,	1, 0, 72h
db 3 dup(0), 2,	7Dh, 2 dup(0), 2, 0, 1,	2
db 0FEh, 0FDh, 0FCh, 76h, 3, 0,	1, 0, 73h
db 4, 0, 2, 0, 7Dh, 2 dup(0), 3, 0, 1, 2
db 0FEh, 0FDh, 0FCh, 77h, 3, 4,	1, 0, 72h
db 2 dup(0), 2,	0, 7Dh,	3 dup(0), 2, 1,	3
db 0FEh, 0FDh, 0FCh, 78h, 4, 0,	3, 0, 7Bh
db 2, 0, 1, 0, 7Dh, 2 dup(0), 2, 0, 1, 2
db 0FEh, 0FDh, 0FCh, 7Ah, 3, 4,	1, 0, 72h
db 2 dup(0), 2,	0, 7Dh,	3 dup(0), 2, 1,	3
db 0FEh, 0FDh, 0FCh, 7Ch, 5, 0,	3, 0, 7Bh
db 2, 0, 1, 0, 7Dh, 0, 5, 2 dup(0), 0DEh
db 2 dup(0), 2,	4, 1, 0FFh, 0FEh, 0FDh,	0FCh
db 1, 2, 0FEh, 0FDh, 0FCh, 0A7h, 0, 3, 1
db 0, 0A6h, 3 dup(0), 3	dup(2),	0FEh, 0FDh
db 0FCh, 0A7h, 2 dup(0), 1, 3, 0A6h, 0,	2
db 2 dup(0), 3,	2, 0FEh, 0FDh, 0FCh, 0A7h
db 0, 3, 1, 0, 0A6h, 3 dup(0), 2, 4, 2,	0FEh
db 0FDh, 0FCh, 0A7h, 2 dup(0), 1, 3, 0A6h
db 0, 2, 2 dup(0), 5, 2, 0FEh, 0FDh, 0FCh
db 0A8h, 2 dup(0), 1, 0, 61h, 12h, 6Bh,	12h
db 75h,	12h, 7Fh, 12h, 89h, 12h, 93h, 12h
db 0A2h, 12h, 0B1h, 12h, 0C0h, 12h, 0D4h
db 12h,	0E8h, 12h, 0FCh, 12h, 10h, 13h,	24h
db 13h,	38h, 13h, 4Ch, 13h, 60h, 13h, 6Bh
db 12h,	75h, 12h, 7Fh, 12h, 89h, 12h, 93h
db 12h,	0A2h, 12h, 0B1h, 12h, 0C0h, 12h
db 0D4h, 12h, 0E8h, 12h, 0FCh, 12h, 10h
db 13h,	24h, 13h, 38h, 13h, 4Ch, 13h, 25h
db 12h,	79h, 13h, 79h, 13h, 79h, 13h, 79h
db 13h,	79h, 13h, 79h, 13h, 79h, 13h, 7Eh
db 13h,	8Dh, 13h, 9Ch, 13h, 0ABh, 13h, 7Eh
db 13h,	8Dh, 13h, 9Ch, 13h, 0ABh, 13h, 0BAh
db 13h,	1Dh, 41h, 55h, 31h, 1Dh, 21h, 39h
db 11h,	39h, 41h, 1Dh, 31h, 1, 31h, 1Dh
db 1, 1Dh, 11h,	39h, 31h, 1, 41h, 0A0h,	3 dup(0)
db 40h,	1, 74h,	0, 0A4h, 0, 4, 0, 3Ch, 1
db 70h,	0, 0FFh, 0Ah, 9, 8, 4, 6, 2 dup(5)
db 9, 2, 0, 0FFh, 1, 2 dup(0), 1, 0FFh,	3 dup(0)
db 0F4h, 0FFh, 2, 10h, 4 dup(0), 0Ch, 0
db 0FEh, 0EFh, 2 dup(0), 0E0h, 2Eh, 4 dup(0)
db 40h,	1, 98h,	0, 8, 3	dup(0),	38h, 1,	94h
db 3 dup(0), 4,	0, 4, 0, 3Ch, 1, 94h, 0
db 0CCh, 0, 4, 0, 3Ch, 1, 3Ch, 0, 0C8h,	3 dup(0)
db 40h,	1, 40h,	0, 0Ch,	0E4h, 51h, 0, 2Dh
db 0, 0F1h, 0, 86h, 0, 4Dh, 0, 21h, 0, 0F5h
db 0, 29h, 0, 4Dh, 0, 21h, 0, 0F5h, 0, 8Ah
db 5 dup(0), 13h, 0, 1,	0, 0Ah,	0, 2Bh,	0
db 2, 0, 4Fh, 0, 2Dh, 0, 2 dup(0FFh), 12h
db 0, 9Ch, 0, 64h, 0, 13h, 0, 54h, 0, 5Ch
db 0, 13h, 40h,	0DDh, 0, 5Ch, 0, 2 dup(0FFh)
db 2, 5	dup(0),	3, 3 dup(0), 5Fh, 0, 4,	3 dup(0)
db 7Bh,	0, 2 dup(0FFh),	6 dup(0), 2 dup(0FFh)
db 1, 5	dup(0),	2 dup(0FFh), 2,	5 dup(0)
db 3, 3	dup(0),	19h, 0,	4, 3 dup(0), 32h
db 0, 5, 3 dup(0), 4Ah,	0, 6, 0, 86h, 0
db 5Ch,	5 dup(0), 66h, 0, 2 dup(0FFh), 6 dup(0)
db 1, 0, 34h, 0, 19h, 0, 2, 0, 6Ch, 0, 33h
db 0, 2	dup(0FFh), 4, 40h, 4 dup(0), 4,	0
db 0ECh, 3 dup(0), 3, 0, 53h, 3	dup(0),	2 dup(0FFh)
db 4, 40h, 4 dup(0), 4,	0, 0ECh, 3 dup(0)
db 2 dup(0FFh),	5, 0, 0C6h, 0FFh, 0Ch, 0
db 6, 0, 0C6h, 0FFh, 0Ch, 0, 5,	0, 0FBh
db 0FFh, 11h, 0, 6, 0, 0FBh, 0FFh, 11h,	0
db 7, 0, 0CCh, 0, 0Eh, 0, 8, 0,	0CCh, 0
db 0Eh,	0, 2 dup(0FFh),	4 dup(0), 40h, 1
db 51h,	3 dup(0), 51h, 0, 40h, 1, 86h, 0
db 7Dh,	0, 65h,	0, 64h,	0, 65h,	0, 0EFh
db 0, 7Ah, 0, 0Fh, 1, 7Dh, 0, 4, 0FAh, 6
db 0FCh, 0FAh, 2 dup(0FCh), 0FAh, 7Eh, 0
db 4Ch,	0, 40h,	1, 98h,	0, 2Eh,	0, 81h,	0
db 4Dh,	0, 2Fh,	0, 81h,	0, 4Dh,	0, 2Eh,	0
db 80h,	0, 4Dh,	0, 2Fh,	0, 80h,	0, 4Dh,	0
db 2Eh,	0, 7Fh,	0, 4Dh,	0, 2Fh,	0, 7Fh,	0
db 4Dh,	0, 2Eh,	0, 7Eh,	0, 4Dh,	0, 2Fh,	0
db 7Eh,	0, 4Dh,	0, 2Eh,	0, 7Eh,	0, 4Dh,	0
db 2Fh,	0, 7Fh,	0, 4Dh,	0, 2Eh,	0, 7Fh,	0
db 4Dh,	0, 2Fh,	0, 80h,	0, 4Dh,	0, 2Eh,	0
db 80h,	0, 4Dh,	0, 30h,	0, 80h,	0, 4Dh,	0
db 30h,	0, 81h,	0, 4Dh,	0, 31h,	0, 81h,	0
db 4Dh,	0, 30h,	0, 82h,	0, 4Eh,	0, 30h,	0
db 83h,	0, 4Eh,	0, 32h,	0, 84h,	0, 4Dh,	0
db 32h,	0, 85h,	0, 4Dh,	0, 33h,	0, 87h,	0
db 4Dh,	0, 34h,	0, 8Ah,	0, 4Eh,	0, 35h,	0
db 8Ch,	0, 4Eh,	0, 36h,	0, 8Fh,	0, 4Eh,	0
db 37h,	0, 96h,	0, 50h,	0, 38h,	0, 9Ah,	0
db 51h,	0, 39h,	0, 0ACh, 0, 54h, 0, 3Ah
db 0, 0C5h, 0, 5Bh, 0, 3Bh, 0, 0FCh, 0,	6Ah
db 0, 3Ch, 0, 33h, 1, 7Dh, 0, 2	dup(0FFh)
db 8 dup(0), 0F8h, 10h,	0, 0Dh,	16h, 0Dh
db 0EAh, 0Dh, 16h, 0, 0EAh, 0, 16h, 0F2h
db 0EAh, 0F2h, 0, 0F2h,	0FAh, 0F8h, 0, 0F8h
db 0F4h, 0F8h, 6, 0F8h,	0EEh, 0F8h, 0F7h
db 0F6h, 3, 0F6h, 0F1h,	0F6h, 2	dup(2),	2 dup(0)
db 2 dup(2), 1,	0, 2, 1, 0Ah dup(0), 1Ah
db 3 dup(0), 1,	3 dup(0), 2, 3 dup(0), 4Fh
db 3 dup(0), 0A2h, 16h,	0A6h, 16h, 0A2h
db 16h,	0A2h, 16h, 0AAh, 16h, 0AAh, 16h
db 0AAh, 16h, 0AAh, 16h, 0AEh, 16h, 0AEh
db 16h,	0AEh, 16h, 0AEh, 16h, 0B2h, 16h
db 0B2h, 16h, 0B2h, 16h, 0B2h, 16h, 13h
db 2 dup(0), 14h, 2 dup(0), 15h, 2 dup(0)
db 16h,	3 dup(0), 17h, 2 dup(0), 18h, 2	dup(0)
db 19h,	2 dup(0), 1Ah, 7 dup(0), 2Bh, 2	dup(0)
db 2Ch,	2 dup(0), 2Dh, 2 dup(0), 2Eh, 2	dup(0)
db 2Fh,	2 dup(0), 30h, 2 dup(0), 31h, 2	dup(0)
db 32h,	2 dup(0), 33h, 2 dup(0), 34h, 2	dup(0)
db 35h,	2 dup(0), 36h, 3 dup(0), 31h, 2	dup(0)
db 31h,	2 dup(0), 30h, 2 dup(0), 31h, 2	dup(0)
db 31h,	2 dup(0), 31h, 2 dup(0), 30h, 2	dup(0)
db 30h,	3 dup(0), 1Bh, 2 dup(0), 1Bh, 0
db 0FFh, 1Bh, 0, 1, 0, 27h, 2 dup(0), 27h
db 2 dup(0FFh),	27h, 2 dup(1), 0, 1Fh, 2 dup(0)
db 1Fh,	2 dup(0FFh), 1Fh, 2 dup(1), 0, 23h
db 2 dup(0), 23h, 0, 0FFh, 23h,	0, 1, 0
db 47h,	2 dup(0), 48h, 2 dup(0), 49h, 2	dup(0)
db 4Ah,	3 dup(0), 4Bh, 2 dup(0), 4Ch, 2	dup(0)
db 4Dh,	2 dup(0), 4Eh, 3 dup(0), 50h, 2	dup(0)
db 50h,	0, 0FFh, 50h, 0, 1, 0, 5Ch, 2 dup(0)
db 5Ch,	2 dup(0FFh), 5Ch, 2 dup(1), 0, 54h
db 2 dup(0), 54h, 2 dup(0FFh), 54h, 2 dup(1)
db 0, 58h, 2 dup(0), 58h, 0, 0FFh, 58h,	0
db 1, 0, 0D6h, 16h, 0E3h, 16h, 0F0h, 16h
db 0D6h, 16h, 0F4h, 16h, 19h, 17h, 32h,	17h
db 19h,	17h, 5Ah, 17h, 67h, 17h, 67h, 17h
db 67h,	17h, 0B2h, 16h,	74h, 17h, 0B2h,	16h
db 0B2h, 16h, 64h, 2 dup(0), 65h, 2 dup(0)
db 66h,	2 dup(0), 67h, 3 dup(0), 69h, 2	dup(0)
db 68h,	2 dup(0), 69h, 2 dup(0), 6Ah, 2	dup(0)
db 69h,	2 dup(0), 68h, 2 dup(0), 69h, 2	dup(0)
db 6Ah,	2 dup(0), 69h, 0, 1, 68h, 0, 1,	69h
db 2 dup(0), 6Ah, 2 dup(0), 69h, 2 dup(0)
db 68h,	2 dup(0FFh), 69h, 2 dup(0), 6Ah
db 2 dup(0), 69h, 2 dup(0), 68h, 1, 0, 69h
db 2 dup(0), 6Ah, 0, 0FFh, 0, 6Ch, 2 dup(0)
db 6Dh,	2 dup(0), 6Eh, 2 dup(0), 6Fh, 3	dup(0)
db 63h,	3 dup(0), 68h, 3 dup(0), 6Bh, 3	dup(0)
db 60h,	3 dup(0), 3, 2 dup(0), 4, 2 dup(0)
db 5, 2	dup(0),	6, 3 dup(0), 1Bh, 2 dup(0)
db 1Ch,	2 dup(0), 1Dh, 2 dup(0), 1Eh, 3	dup(0)
db 37h,	2 dup(0), 38h, 2 dup(0), 39h, 2	dup(0)
db 3Ah,	3 dup(0), 7, 2 dup(0), 8, 2 dup(0)
db 9, 2	dup(0),	0Ah, 3 dup(0), 1Fh, 2 dup(0)
db 20h,	2 dup(0), 21h, 2 dup(0), 22h, 3	dup(0)
db 3Bh,	2 dup(0), 3Ch, 2 dup(0), 3Dh, 2	dup(0)
db 3Eh,	3 dup(0), 0Bh, 2 dup(0), 0Ch, 2	dup(0)
db 0Dh,	2 dup(0), 0Eh, 3 dup(0), 23h, 2	dup(0)
db 24h,	2 dup(0), 25h, 2 dup(0), 26h, 3	dup(0)
db 3Fh,	2 dup(0), 40h, 2 dup(0), 41h, 2	dup(0)
db 42h,	3 dup(0), 0Fh, 2 dup(0), 10h, 2	dup(0)
db 11h,	2 dup(0), 12h, 3 dup(0), 27h, 2	dup(0)
db 28h,	2 dup(0), 29h, 2 dup(0), 2Ah, 3	dup(0)
db 43h,	2 dup(0), 44h, 2 dup(0), 45h, 2	dup(0)
db 46h,	3 dup(0), 23h, 18h, 4Ah, 18h, 71h
db 18h,	98h, 18h, 30h, 18h, 57h, 18h, 7Eh
db 18h,	0A5h, 18h, 3Dh,	18h, 64h, 18h, 8Bh
db 18h,	0B2h, 18h, 30h,	18h, 57h, 18h, 7Eh
db 18h,	0A5h, 18h, 8 dup(0), 0FBh, 0F0h
db 5, 0, 5, 0, 0E8h, 0,	48h, 0,	0F5h, 0FBh
db 8 dup(0), 0F5h, 0E4h, 85h, 2	dup(0),	86h
db 2 dup(0), 87h, 2 dup(0), 88h, 2 dup(0)
db 89h,	2 dup(0), 8Ah, 2 dup(0), 8Bh, 2	dup(0)
db 8Ch,	3 dup(0), 85h, 2 dup(0), 85h, 2	dup(0)
db 86h,	2 dup(0), 86h, 2 dup(0), 87h, 2	dup(0)
db 87h,	2 dup(0), 88h, 2 dup(0), 88h, 3	dup(0)
db 63h,	68h, 71h, 72h, 73h, 74h, 77h, 28h
db 0, 1Eh, 0, 0Bh, 1, 47h, 0, 0F5h, 0FBh
db 28h,	0, 1Eh,	0, 0Bh,	1, 47h,	0, 19h,	1Eh
db 0Ah,	0, 0Ah,	0, 0BEh, 0, 40h, 0, 0F5h
db 0FBh, 2 dup(0), 50h,	0, 3Ch,	0, 0F0h
db 0, 4Ah, 0, 0F5h, 0FBh, 2 dup(0), 19h
db 3 dup(0), 18h, 6 dup(0), 11h, 10h, 12h
db 2 dup(13h), 3Ch, 72h, 7Fh, 76h, 84h,	5
db 4, 5, 2 dup(4), 64h,	19h, 0FCh, 0FFh
db 64h,	19h, 0FCh, 0FFh, 9Fh, 8, 37h, 0
db 0Dh,	0, 5Bh,	0, 38h,	33h, 0A0h, 8, 37h
db 0, 0Dh, 0, 5Bh, 0, 38h, 33h,	0A1h, 8
db 37h,	0, 0Dh,	0, 5Bh,	0, 38h,	33h, 0A2h
db 8, 37h, 0, 0Dh, 0, 5Bh, 0, 38h, 33h,	0A3h
db 8, 37h, 0, 0Dh, 0, 5Bh, 0, 38h, 33h,	0C6h
db 8, 39h, 0, 56h, 0, 71h, 0, 28h, 2Dh,	0C7h
db 8, 39h, 0, 56h, 0, 71h, 0, 28h, 2Dh,	0C8h
db 8, 39h, 0, 56h, 0, 71h, 0, 28h, 2Dh,	0C9h
db 8, 39h, 0, 56h, 0, 71h, 0, 28h, 2Dh,	0CAh
db 8, 39h, 0, 56h, 0, 71h, 0, 28h, 2Dh,	0CBh
db 8, 39h, 0, 56h, 0, 71h, 0, 28h, 2Dh,	0E8h
db 8, 30h, 0, 71h, 0, 59h, 0, 2Ch, 46h,	0EAh
db 8, 31h, 0, 71h, 0, 56h, 0, 2Ch, 46h,	0EBh
db 8, 32h, 0, 71h, 0, 56h, 0, 2Ch, 46h,	0F0h
db 8, 37h, 0, 71h, 0, 59h, 0, 2Ch, 46h,	0F1h
db 8, 33h, 0, 71h, 0, 59h, 0, 2Ch, 46h,	0F2h
db 8, 34h, 0, 71h, 0, 59h, 0, 2Ch, 46h,	0F3h
db 8, 35h, 0, 71h, 0, 59h, 0, 2Ch, 46h,	0F4h
db 8, 36h, 0, 71h, 0, 59h, 0, 2Ch, 46h,	0F5h
db 8, 33h, 0, 71h, 0, 59h, 0, 2Ch, 46h,	0F6h
db 8, 34h, 0, 71h, 0, 59h, 0, 2Ch, 46h,	0F7h
db 8, 34h, 0, 71h, 0, 59h, 0, 2Ch, 46h,	0F8h
db 8, 35h, 0, 71h, 0, 59h, 0, 2Ch, 46h,	0F9h
db 8, 36h, 0, 71h, 0, 59h, 0, 2Ch, 46h,	0FAh
db 8, 36h, 0, 71h, 0, 59h, 0, 2Ch, 46h,	0FBh
db 8, 35h, 0, 71h, 0, 59h, 0, 2Ch, 46h,	0FCh
db 8, 36h, 0, 71h, 0, 59h, 0, 2Ch, 46h,	2 dup(9)
db 38h,	0, 97h,	0, 77h,	0, 37h,	0, 2 dup(0FFh)
db 3, 5Ch, 76h,	5Ch, 0E4h, 5Ch,	9Fh, 59h
db 66h,	0Fh, 0C1h, 59h,	66h, 0Fh, 3, 5Ch
db 0ECh, 81h, 66h, 0Fh,	66h, 0Fh, 66h, 0Fh
db 66h,	0Fh, 66h, 0Fh, 66h, 0Fh, 0E2h, 0D2h
db 66h,	0Fh, 66h, 0Fh, 66h, 0Fh, 66h, 0Fh
db 66h,	0Fh, 86h, 45h, 0Eh, 45h, 66h, 0Fh
db 66h,	0Fh, 66h, 0Fh, 86h, 45h, 86h, 45h
db 66h,	0Fh, 76h, 0A5h,	66h, 0Fh, 0AAh,	0A5h
db 66h,	0Fh, 0DFh, 0A5h, 66h, 0Fh, 18h,	0
db 16h,	0, 0A1h, 0, 44h, 0, 0C4h, 3 dup(0)
db 2 dup(0FFh),	0C6h, 0B8h, 2 dup(0), 98h
db 3 dup(0), 98h, 5 dup(0), 66h, 0Fh, 0E4h
db 0, 98h, 0, 2Ch, 1, 0C6h, 3 dup(0), 3
db 0, 66h, 0Fh,	18h, 0,	9Bh, 0,	45h, 0,	0B0h
db 0, 80h, 0, 2	dup(0FFh), 0D6h, 0AEh, 5Ch
db 0, 98h, 0, 0E5h, 0, 9Fh, 3 dup(0), 0Eh
db 0, 66h, 0Fh,	2, 0, 9Ah, 0, 2, 0, 9Ah
db 3 dup(0), 0Ch, 0, 66h, 0Fh, 3Dh, 1, 9Ah
db 0, 3Dh, 1, 9Ah, 3 dup(0), 0Ch, 0, 66h
db 0Fh,	5Ch, 0,	9Fh, 0,	0E4h, 0, 0A7h, 0
db 80h,	0, 1Bh,	0, 43h,	0D4h, 5Ch, 0, 0A7h
db 0, 0E4h, 0, 0AFh, 0,	80h, 0,	1Bh, 0,	3Eh
db 0D4h, 5Ch, 0, 0AFh, 0, 0E4h,	0, 0B7h
db 0, 80h, 0, 1Bh, 0, 39h, 0D4h, 5Ch, 0
db 0B7h, 0, 0E4h, 0, 0BFh, 0, 80h, 0, 1Bh
db 0, 34h, 0D4h, 5Ch, 0, 0BFh, 0, 0E4h,	0
db 0C7h, 0, 80h, 0, 1Bh, 0, 2Fh, 0D4h, 0FFh
db 0, 0A2h, 0, 27h, 1, 0C0h, 3 dup(0), 2 dup(0FFh)
db 66h,	0Fh, 0Dh, 1, 0A2h, 0, 17h, 1, 0ACh
db 3 dup(0), 2 dup(0FFh), 66h, 0Fh, 1Ch
db 1, 0ACh, 0, 26h, 1, 0B6h, 3 dup(0), 2 dup(0FFh)
db 66h,	0Fh, 0Dh, 1, 0B5h, 0, 17h, 1, 0BFh
db 3 dup(0), 2 dup(0FFh), 66h, 0Fh, 0FFh
db 0, 0ACh, 0, 9, 1, 0B6h, 3 dup(0), 2 dup(0FFh)
db 66h,	0Fh, 0Ah dup(0), 2 dup(0FFh), 66h
db 0Fh,	0Ah dup(0), 2 dup(0FFh), 66h, 0Fh
db 0Ah dup(0), 2 dup(0FFh), 5Bh, 94h, 4	dup(0)
db 40h,	1, 98h,	3 dup(0), 2 dup(0FFh), 1Dh
db 94h,	23h, 0,	0B6h, 0, 38h, 0, 0C4h, 0
db 80h,	0, 40h,	0, 15h,	92h, 3Ah, 0, 0B6h
db 0, 4Fh, 0, 0C4h, 0, 80h, 0, 40h, 0, 15h
db 92h,	2 dup(0), 4, 0,	28h, 0,	2Eh, 3 dup(0)
db 2 dup(0FFh),	0EEh, 0B1h, 2 dup(0), 2	dup(0FFh)
db 6 dup(0), 3,	0, 80h,	0, 2 dup(0FFh),	40h
db 0, 0Dh, 3 dup(0), 6,	3 dup(0), 3, 3 dup(0)
db 2 dup(0FFh),	2 dup(0), 2 dup(0FFh), 2 dup(0)
db 9, 3	dup(0),	3, 3 dup(0), 2 dup(0FFh)
db 0C0h, 0, 0Dh, 3 dup(0), 6, 3	dup(0),	3
db 3 dup(0), 3 dup(0FFh), 0, 0A2h, 0, 27h
db 1, 0C0h, 3 dup(0), 21h, 0, 66h, 0Fh,	0Dh
db 1, 0A2h, 0, 17h, 1, 0ACh, 0,	80h, 0,	1Dh
db 0, 15h, 3Fh,	1Ch, 1,	0ACh, 0, 26h, 1
db 0B6h, 0, 80h, 0, 1Eh, 0, 1Ah, 3Fh, 0Dh
db 1, 0B5h, 0, 17h, 1, 0BFh, 0,	80h, 0,	1Fh
db 0, 1Fh, 3Fh,	0FFh, 0, 0ACh, 0, 9, 1,	0B6h
db 0, 80h, 0, 20h, 0, 24h, 3Fh,	0Dh, 1,	0ADh
db 0, 18h, 1, 0B5h, 0, 80h, 0, 24h, 0, 0EEh
db 18h,	0Ah, 1,	0ABh, 0, 1Dh, 1, 0B8h, 0
db 80h,	0, 29h,	0, 5, 5Bh, 0Bh,	1, 0A2h
db 0, 1Ch, 1, 0ABh, 0, 80h, 40h, 25h, 0
db 29h,	88h, 1Dh, 1, 0ABh, 0, 29h, 1, 0B8h
db 0, 80h, 40h,	26h, 0,	24h, 88h, 0Bh, 1
db 0B8h, 0, 1Ch, 1, 0C1h, 0, 80h, 40h, 27h
db 0, 2Eh, 88h,	0FEh, 0, 0ABh, 0, 0Ah, 1
db 0B8h, 0, 80h, 40h, 28h, 0, 1Fh, 88h,	0Ah
db 1, 0ABh, 0, 1Ch, 1, 0B7h, 3 dup(0), 35h
db 0, 66h, 0Fh,	6, 1, 0A8h, 0, 7, 1, 0A9h
db 2 dup(0), 2,	2 dup(0FFh), 66h, 0Fh, 2
db 1, 0ACh, 0, 0Ah, 1, 0B6h, 3 dup(0), 2 dup(0FFh)
db 66h,	0Fh, 0Eh, 1, 0AAh, 0, 17h, 1, 0B6h
db 3 dup(0), 2 dup(0FFh), 66h, 0Fh, 1Bh
db 1, 0ACh, 0, 23h, 1, 0B6h, 3 dup(0), 2 dup(0FFh)
db 66h,	0Fh, 0Ah, 1, 0BAh, 0, 23h, 1, 0BFh
db 3 dup(0), 2 dup(0FFh), 66h, 0Fh, 0Ah	dup(0)
db 2 dup(0FFh),	66h, 0Fh, 6, 1,	0A8h, 0
db 7, 1, 0A9h, 2 dup(0), 2, 2 dup(0FFh)
db 66h,	0Fh, 2,	1, 0ACh, 0, 0Ah, 1, 0B6h
db 0, 80h, 40h,	2Ah, 0,	0D0h, 4Ah, 0Eh,	1
db 0AAh, 0, 17h, 1, 0B6h, 0, 80h, 0, 2Bh
db 0, 9, 4Fh, 1Bh, 1, 0ACh, 0, 23h, 1, 0B6h
db 0, 80h, 40h,	2Ch, 0,	0D7h, 4Ah, 0Ah dup(0)
db 2 dup(0FFh),	66h, 0Fh, 0Ah dup(0), 2	dup(0FFh)
db 66h,	0Fh, 0Ah, 1, 0ABh, 0, 1Dh, 1, 0B8h
db 0, 80h, 0, 29h, 0, 81h, 0BCh, 26h, 0
db 9Fh,	0, 36h,	0, 0ACh, 0, 80h, 40h, 31h
db 0, 2	dup(0B9h), 36h,	0, 0A8h, 0, 48h
db 0, 0B9h, 0, 80h, 40h, 32h, 0, 0CCh, 0B9h
db 26h,	0, 0B7h, 0, 36h, 0, 0C7h, 0, 80h
db 40h,	33h, 0,	0C0h, 0B9h, 14h, 0, 0A8h
db 0, 25h, 0, 0B9h, 0, 80h, 40h, 34h, 0
db 0D3h, 0B9h, 24h, 0, 0ACh, 0,	39h, 0,	0B6h
db 0, 80h, 0, 35h, 0, 9Eh, 0BAh, 0Ah dup(0)
db 2 dup(0FFh),	66h, 0Fh, 15h, 0, 0A1h,	0
db 2Ah,	0, 0BAh, 0, 80h, 0, 2 dup(0FFh)
db 0C7h, 0AFh, 2Bh, 0, 0A1h, 0,	3Fh, 0,	0BAh
db 0, 80h, 0, 2	dup(0FFh), 0B5h, 0AFh, 2 dup(0)
db 9Ah,	0, 5Ch,	0, 0C8h, 0, 80h, 0, 2 dup(0FFh)
db 8Bh,	0B1h, 0E4h, 0, 9Ah, 0, 40h, 1, 0C8h
db 3 dup(0), 2 dup(0FFh), 66h, 0Fh, 0FFh
db 0, 0A2h, 0, 27h, 1, 0C0h, 0,	80h, 0,	21h
db 0, 8Bh, 0B1h, 96h, 0, 89h, 0, 0AAh, 0
db 0A0h, 0, 96h, 0, 89h, 0, 0AAh, 0, 93h
db 0, 6, 0, 0BBh, 0, 19h, 0, 0BAh, 0, 6
db 0, 0BAh, 0, 1Ah, 0, 0BCh, 0,	6, 0, 0B9h
db 5 dup(0), 7,	0, 0B7h, 5 dup(0), 9, 0
db 0B6h, 5 dup(0), 0Ah,	0, 0B5h, 5 dup(0)
db 0Dh,	0, 0B5h, 5 dup(0), 10h,	0, 0B5h
db 5 dup(0), 12h, 0, 0B6h, 5 dup(0), 14h
db 0, 0B7h, 5 dup(0), 14h, 0, 0B9h, 5 dup(0)
db 14h,	0, 0BAh, 0, 8, 0, 0BCh,	0, 14h,	0
db 0BBh, 0, 9, 0, 0BAh,	5 dup(0), 0Ch, 0
db 0B7h, 5 dup(0), 11h,	0, 0B6h, 5 dup(0)
db 17h,	0, 0B7h, 0, 6, 0, 0B5h,	0, 1Eh,	0
db 0BEh, 0, 6, 0, 0B5h,	0, 1Eh,	0, 0C6h
db 0, 0FFh, 6Bh	dup(0),	0FFh, 3	dup(0),	0FCh
db 0, 90h, 0, 72h, 94h,	91h, 0,	0E2h, 2	dup(95h)
db 0, 0D5h, 9Eh, 94h, 0, 0E2h, 0D2h, 2 dup(0)
db 0FCh, 0, 0ADh, 0, 0E2h, 0D2h, 95h, 0
db 0D5h, 9Eh, 2	dup(0),	0F8h, 0, 58h, 0
db 7Ah,	49h, 0AEh, 0, 0E2h, 0D2h, 95h, 0
db 0D5h, 9Eh, 2	dup(0),	0FCh, 0, 0A2h, 0
db 7, 17h, 95h,	0, 0D5h, 9Eh, 2	dup(0),	0FCh
db 0, 0A2h, 0, 7, 17h, 2 dup(0), 0FCh, 2Fh dup(0)
db 0FBh, 0, 0D9h, 0, 93h, 29h, 95h, 0, 0D5h
db 9Eh,	2 dup(0), 0FBh,	0, 0F1h, 0, 53h
db 24h,	0EFh, 0, 1Ah, 24h, 0F0h, 0, 32h
db 24h,	95h, 0,	0D5h, 9Eh, 2 dup(0), 0F8h
db 0, 0A1h, 0, 0E2h, 0D2h, 2 dup(0), 0F8h
db 0, 0Eh, 1, 0AFh, 0AEh, 0Bh, 1, 6Eh, 0ACh
db 0Ah,	1, 7Eh,	0ACh, 0BBh, 0, 3Eh, 0Eh
db 0A1h, 0, 0E2h, 0D2h,	2 dup(0), 0FFh,	0
db 0E3h, 0, 58h, 0AFh, 0E5h, 0,	60h, 0AFh
db 0E6h, 0, 68h, 0AFh, 0E7h, 0,	70h, 0AFh
db 0E4h, 0, 8Bh, 0B1h, 2 dup(0), 0FFh, 0
db 0B7h, 0, 81h, 0BCh, 0B1h, 0,	6Bh, 0B9h
db 0B4h, 0, 9Eh, 0B2h, 0B3h, 0,	8Ch, 0B2h
db 0BBh, 0, 3Eh, 0Eh, 2	dup(0),	0FFh, 0
db 0B6h, 80h, 66h, 0Fh,	2 dup(0), 0F6h,	0
db 0Dh,	1, 97h,	0ACh, 0Ch, 1, 90h, 0ACh
db 0A3h, 0, 0DFh, 0D2h,	2 dup(0), 0FEh,	0
db 0Fh,	1, 5Ah,	0B3h, 10h, 1, 5Ah, 0B3h
db 0A3h, 0, 0E2h, 0D2h,	2 dup(0), 0FEh,	0
db 0Fh,	1, 0B0h, 0B3h, 10h, 1, 0B0h, 0B3h
db 11h,	1, 0B0h, 0B3h, 12h, 1, 0B0h, 0B3h
db 0A3h, 0, 0E2h, 0D2h,	2 dup(0), 0FFh,	0
db 0BAh, 0, 47h, 0Eh, 0B4h, 0, 9Eh, 0B2h
db 0BBh, 0, 3Eh, 0Eh, 95h, 0, 0D5h, 9Eh
db 2 dup(0), 0F6h, 0, 0B8h, 0, 3Ah, 0, 0B9h
db 0, 0E2h, 0D2h, 2 dup(0), 0FFh, 0, 0BAh
db 0, 47h, 0Eh,	0B4h, 0, 9Eh, 0B2h, 0B3h
db 0, 8Ch, 0B2h, 0BBh, 0, 3Eh, 0Eh, 9Dh
db 0, 0B9h, 0Eh, 2 dup(0), 0FCh, 0, 59h
db 0, 0DBh, 50h, 0A3h, 0, 0E2h,	0D2h, 2	dup(0)
db 0FCh, 0, 5Ah, 0, 0EAh, 50h, 0A3h, 0,	0E2h
db 0D2h, 2 dup(0), 0FFh, 0, 63h, 0, 6Bh
db 18h,	62h, 0,	0CCh, 86h, 64h,	0, 0F1h
db 53h,	0A7h, 0, 0D9h, 42h, 67h, 0, 1Eh
db 5Bh,	2 dup(0), 0FCh,	0, 4Dh,	0, 0EDh
db 7Bh,	4Fh, 0,	0B3h, 69h, 4Eh,	0, 0BBh
db 7Ch,	50h, 0,	64h, 80h, 52h, 0, 63h, 87h
db 2 dup(0), 0FCh, 0, 51h, 0, 0FAh, 86h
db 52h,	0, 70h,	87h, 2 dup(0), 0F8h, 0,	0A3h
db 0, 0E2h, 0D2h, 2 dup(0), 0F8h, 0, 5Bh
db 0, 0C7h, 80h, 5Ch, 0, 0D9h, 80h, 0A1h
db 0, 14h, 82h,	0A3h, 0, 0E2h, 0D2h, 2 dup(0)
db 0FCh, 0, 58h, 0, 64h, 80h, 51h, 0, 0FAh
db 86h,	0A3h, 0, 0E2h, 0D2h, 2 dup(0), 0F8h
db 0, 75h, 0, 71h, 6Ah,	76h, 0,	83h, 6Ah
db 77h,	40h, 87h, 6Ah, 0A3h, 0,	0E2h, 0D2h
db 2 dup(0), 0F8h, 0, 5Dh, 0, 6Dh, 77h,	76h
db 0, 83h, 6Ah,	77h, 0,	87h, 6Ah, 0A3h,	0
db 0E2h, 0D2h, 2 dup(0), 0F8h, 0, 5Dh, 0
db 34h,	77h, 5Fh, 40h, 45h, 6Ah, 75h, 0
db 71h,	6Ah, 77h, 0, 87h, 6Ah, 0A3h, 0,	0E2h
db 0D2h, 2 dup(0), 0F8h, 0, 60h, 0, 2Fh
db 6Ah,	0A3h, 0, 0E2h, 0D2h, 2 dup(0), 0F8h
db 0, 5Dh, 0, 5Ch, 77h,	61h, 0,	2Bh, 6Ah
db 75h,	0, 71h,	6Ah, 76h, 0, 83h, 6Ah, 0A3h
db 0, 0E2h, 0D2h, 2 dup(0), 0Eh, 1Fh, 66h
db 0Fh,	18h dup(0), 0BEh, 21h, 0A7h, 0,	0E9h
db 42h,	0A5h, 0, 48h, 0Fh, 0A6h, 0, 67h
db 0Fh,	0D7h, 0, 3Ah, 28h, 0D8h, 0, 3Eh
db 28h,	99h, 0,	0A6h, 0Eh, 9Eh,	0, 0F0h
db 0A3h, 58h, 0, 7Ah, 49h, 0A9h, 0, 0FBh
db 4Fh,	0ACh, 0, 0A5h, 50h, 0AAh, 0, 0C4h
db 50h,	0ABh, 0, 9, 4Fh, 98h, 0, 6Bh, 18h
db 95h,	0, 0EEh, 18h, 0A8h, 0, 0D1h, 42h
db 9Ah,	0, 17h,	73h, 9Bh, 0, 0C5h, 0Fh,	0AEh
db 1Fh,	2 dup(0), 50h, 0, 0Eh, 0, 0C0h,	0
db 48h,	0, 50h,	0, 10h,	0, 0C8h, 0, 56h
db 0, 50h, 0, 8, 0, 0D0h, 0, 61h, 5 dup(0)
db 40h,	1, 47h,	5 dup(0), 99h, 0, 3Fh, 0
db 10h,	3 dup(0), 20h, 1, 42h, 0, 14h, 0
db 3, 0, 51h, 0, 40h, 0, 0FDh, 0F2h, 0FFh
db 0Ch,	5, 0Ah,	0FFh, 9, 0Bh, 4	dup(0),	40h
db 1, 98h, 0, 0Ah, 0, 8Bh, 12h,	9Ch, 10h
db 9Dh,	0Ch, 2 dup(0), 99h, 0, 40h, 1, 2Fh
db 0, 1, 66h, 0Fh, 2 dup(8), 9 dup(9), 2 dup(0Ah)
db 3 dup(0Bh), 2 dup(0), 4Eh, 0, 21h, 0
db 2 dup(0FFh),	1, 0, 1Ah, 0, 4, 0, 2 dup(0FFh)
db 63h,	79h, 72h, 6Fh, 46h, 42h, 2 dup(0FFh)
db 60h,	5Ah, 74h, 60h, 64h, 68h, 7Eh, 68h
db 6Ah,	70h, 7Ch, 60h, 2 dup(50h), 72h,	74h
db 5Ah,	48h, 0,	3Dh, 0,	54h, 0,	1Dh, 0,	38h
db 0, 1Ah, 0, 2Fh, 0, 8, 0, 9Ah, 1, 0C8h
db 7, 69h, 6Dh,	65h, 72h, 74h, 6Fh, 6Ch
db 75h,	62h, 72h, 65h, 68h, 60h, 4Ch, 80h
db 0, 10h, 0, 2, 4, 2 dup(55h),	1, 7, 0
db 0A8h, 0, 17h, 0, 2 dup(0FFh), 0A8h, 0
db 17h,	0, 2Ah,	1, 61h,	0, 0B0h, 0, 20h
db 0, 20h, 1, 58h, 0, 60h, 4Ch,	49h, 4Dh
db 31h,	2Eh, 48h, 53h, 51h, 107h dup(0)
db 40h,	1, 98h,	0, 2 dup(53h), 0Eh, 0, 6
db 0, 5, 0, 0Eh, 0, 6, 0, 11h, 0, 0Eh, 0
db 6, 0, 1Dh, 0, 2 dup(0FFh), 56h, 84h,	57h
db 84h,	59h, 2 dup(84h), 8, 39h, 19h, 5Ch
db 84h,	99h, 21h, 3Ah, 2Ah, 5Dh, 84h, 79h
db 3Ah,	61h, 84h, 0AEh,	8, 2 dup(0), 60h
db 0, 0Fh, 0, 0EAh, 0, 86h, 0, 60h, 0, 19h
db 0, 0E0h, 0, 86h, 3 dup(0), 99h, 0, 40h
db 1, 0C8h, 0, 0FEh, 0,	0A2h, 0, 28h, 1
db 0C1h, 0, 0D8h, 0FFh,	7Fh, 0,	39h, 0,	0A0h
db 0, 31h, 0, 0C1h, 0, 39h, 0, 78h, 0, 59h
db 0, 0C8h, 0, 59h, 0, 7Fh, 0, 79h, 0, 0A0h
db 0, 81h, 0, 0C1h, 0, 79h, 0, 0C2h, 0,	10h
db 0, 6, 0, 0FDh, 0F0h,	0C3h, 0, 0D8h, 0
db 6, 0, 0FDh, 0F0h, 2 dup(0FFh), 0C4h,	0
db 14h,	0, 45h,	0, 3Fh,	0F0h, 0C5h, 0, 30h
db 0, 45h, 0, 25h, 0F0h, 0C6h, 0, 8, 0,	50h
db 0, 0FBh, 0F0h, 0C7h,	0, 0F0h, 0, 3Ch
db 0, 3Fh, 0F0h, 0C8h, 0, 10h, 1, 3Ch, 0
db 25h,	0F0h, 0C9h, 0, 0ECh, 0,	47h, 0,	0FBh
db 0F0h, 0CAh, 0, 0F0h,	0, 83h,	0, 3Fh,	0F0h
db 0CBh, 0, 10h, 1, 83h, 0, 25h, 0F0h, 0CCh
db 0, 0ECh, 0, 8Eh, 0, 0FBh, 0F0h, 0AFh
db 0, 23h, 0, 7Dh, 0, 25h, 0F0h, 0B0h, 0
db 23h,	0, 8Bh,	0, 3Fh,	0F0h, 2	dup(0FFh)
db 1Ah,	0, 3Eh,	0, 36h,	0, 3Eh,	0, 0FCh
db 0, 36h, 0, 18h, 1, 36h, 0, 0FCh, 0, 7Dh
db 0, 18h, 1, 7Dh, 0, 3, 0, 0Bh, 0, 7Ch
db 0, 4, 0, 0Bh, 0, 88h, 0, 2 dup(0FFh)
db 0ECh, 0CFh, 6Ch, 0D4h, 96h, 0D0h, 74h
db 68h,	73h, 74h, 6Eh, 64h, 72h, 64h, 7Dh
db 20h,	65h, 72h, 7Dh, 20h, 7Dh, 20h, 2Eh
db 20h,	2Eh, 20h, 2Eh, 20h, 2Eh, 20h, 74h
db 68h,	73h, 74h, 6Eh, 64h, 72h, 64h, 14h
db 20h,	14h, 20h, 14h, 20h, 14h, 20h, 14h
db 20h,	14h, 20h, 14h, 20h, 14h, 20h, 14h
db 20h,	14h, 20h, 14h, 20h, 14h, 20h, 14h
db 20h,	14h, 20h, 14h, 20h, 14h, 20h, 14h
db 20h,	14h, 20h, 14h, 20h, 14h, 20h, 1Fh
db 0BCh, 64h, 0BCh, 17h, 0D9h, 17h, 0D9h
db 17h,	0D9h, 17h, 0D9h, 17h, 0D9h, 72h
db 25h,	0E7h, 1Ah, 17h,	0D9h, 17h, 0D9h
db 17h,	0D9h, 17h, 0D9h, 17h, 0D9h, 17h
db 0D9h, 2 dup(0FFh), 84h, 25h,	4 dup(0)
db 0FFh, 3Fh, 0FFh, 1Fh, 0FFh, 0Fh, 0FFh
db 7, 0FFh, 3, 0FFh, 1,	0FFh, 0, 7Fh, 0
db 3Fh,	0, 3Fh,	0, 0FFh, 1, 0FFh, 10h, 0FFh
db 30h,	7Fh, 0F8h, 7Fh,	0F8h, 7Fh, 0FCh
db 3 dup(0), 40h, 0, 60h, 0, 70h, 0, 78h
db 0, 7Ch, 0, 7Eh, 0, 7Fh, 80h,	7Fh, 0,	7Ch
db 0, 6Ch, 0, 46h, 0, 6, 0, 3, 0, 3, 2 dup(0)
db 1, 3	dup(0),	0FFh, 0CFh, 0FFh, 83h, 0FFh
db 81h,	7Fh, 0E0h, 3Fh,	0F0h, 7, 0C0h, 3
db 0C0h, 3, 80h, 1, 0, 1, 2 dup(0), 80h
db 0, 0C0h, 0, 0E0h, 0,	0F0h, 0, 0FCh, 0
db 0FFh, 3 dup(0), 30h,	0, 1Ch,	0, 6, 80h
db 3, 0, 0Dh, 0F8h, 16h, 0D8h, 19h, 3Ch
db 6Ch,	0ACh, 30h, 0BCh, 3, 0DEh, 1Fh, 0FEh
db 0Fh,	0BEh, 3, 7Eh, 0, 7Eh, 0, 4, 3 dup(0)
db 0FFh, 0FBh, 0FFh, 0F1h, 0FFh, 0E0h, 7Fh
db 0C0h, 3Fh, 80h, 1Fh,	0, 1Fh,	0, 0FFh
db 0E0h, 0FFh, 0E0h, 0Eh dup(0FFh), 3 dup(0)
db 4, 0, 0Eh, 0, 1Fh, 80h, 3Fh,	0C0h, 7Fh
db 0, 0Eh, 0, 0Eh, 10h dup(0), 4, 0, 2,	0
db 0FFh, 0CFh, 0FFh, 0C7h, 0FFh, 0C3h, 0FFh
db 1, 0FFh, 0, 7Fh, 0, 0FFh, 0,	0FFh, 1
db 0FFh, 0C3h, 0FFh, 0C7h, 0FFh, 0CFh, 0Ah dup(0FFh)
db 3 dup(0), 10h, 0, 18h, 0, 1Ch, 0, 7Eh
db 0, 7Fh, 0, 7Eh, 0, 1Ch, 0, 18h, 0, 10h
db 0Ch dup(0), 4, 3 dup(0), 0FFh, 0E0h,	0FFh
db 0E0h, 1Fh, 0, 1Fh, 0, 3Fh, 80h, 7Fh,	0C0h
db 0FFh, 0E0h, 0FFh, 0F1h, 0FFh, 0FBh, 0Eh dup(0FFh)
db 3 dup(0), 0Eh, 0, 0Eh, 0C0h,	7Fh, 80h
db 3Fh,	0, 1Fh,	0, 0Eh,	0, 4, 10h dup(0)
db 5, 0, 2, 0, 0FFh, 0F9h, 0FFh, 0F1h, 0FFh
db 0E1h, 7Fh, 0C0h, 7Fh, 80h, 7Fh, 0, 7Fh
db 80h,	7Fh, 0C0h, 0FFh, 0E1h, 0FFh, 0F1h
db 0FFh, 0F9h, 0Ah dup(0FFh), 3	dup(0),	4
db 0, 0Ch, 0, 1Ch, 0, 3Fh, 0, 7Fh, 0, 3Fh
db 0, 1Ch, 0, 0Ch, 0, 4, 0Eh dup(0), 4 dup(0FFh)
db 4 dup(0), 2 dup(0FFh), 2 dup(0), 1, 0
db 2 dup(0FFh),	8 dup(0), 2 dup(0FFh), 0Ah dup(0)
db 1, 0Bh dup(0), 2 dup(0FFh), 1, 5 dup(0)
db 1, 3	dup(0),	1, 0, 1, 0, 1, 5 dup(0)
db 2, 9	dup(0),	40h, 1,	0C8h, 0, 2 dup(0FFh)
db 0, 1, 20h, 1, 40h, 1, 60h, 1, 80h, 1
db 0C0h, 1, 0, 2, 80h, 2, 2 dup(0FFh), 27h
db 0C8h, 1, 5, 0FFh, 4,	3, 0, 4, 0FFh, 3
db 0, 6, 0FFh, 5, 4, 3,	2, 1, 0, 8Ch, 0
db 42h,	0, 78h,	0, 39h,	0, 6Ah,	0, 32h,	0
db 50h,	0, 26h,	0, 35h,	0, 19h,	0, 28h,	0
db 13h,	0, 14h,	0, 9, 0, 4Ch, 0, 2Fh, 0
db 4Bh,	0, 49h,	5 dup(0), 53h, 0, 25h, 0
db 4Ch,	0, 3Eh,	0, 53h,	0, 3Eh,	0, 4Dh,	0
db 4Eh,	0, 58h,	0, 3Fh,	0, 47h,	0, 41h,	0
db 56h,	0, 1Bh,	0, 69h,	0, 5Bh,	5 dup(0)
db 4Ah,	0, 29h,	5 dup(0), 5Eh, 0, 57h, 9 dup(0)
db 42h,	0, 37h,	0, 63h,	0, 56h,	0, 2Fh,	0
db 54h,	0, 69h,	0, 72h,	0, 3Fh,	0, 59h,	0
db 8Ch,	0, 88h,	0, 44h,	0, 0Dh,	0, 65h,	0
db 45h,	0, 28h,	0, 50h,	0, 68h,	0, 70h,	0
db 38h,	0, 47h,	0, 72h,	0, 76h,	0, 26h,	0
db 52h,	0, 6Dh,	0, 98h,	0, 48h,	0, 4Bh,	0
db 72h,	0, 65h,	0, 30h,	0, 48h,	0, 65h,	0
db 6Ah,	0, 44h,	0, 9, 0, 71h, 0, 24h, 0
db 52h,	0, 5Bh,	0, 7Eh,	0, 86h,	0, 42h,	0
db 3Dh,	0, 78h,	0, 66h,	0, 38h,	0, 0Dh,	0
db 54h,	0, 2Bh,	0, 2Ch,	0, 33h,	0, 56h,	0
db 53h,	0, 44h,	0, 61h,	0, 77h,	0, 8Fh,	0
db 5Bh,	0, 3Bh,	0, 89h,	0, 60h,	0, 48h,	0
db 36h,	0, 64h,	0, 59h,	0, 7, 0, 2 dup(0FFh)
db 28h,	0, 1, 0, 0FAh, 0, 90h, 0, 0FFh,	0
db 0Ch,	0, 22h,	0, 37h,	0A6h, 0E6h, 0, 32h
db 0, 22h, 0, 50h, 0A6h, 0B4h, 0, 58h, 0
db 22h,	0, 17h,	0D9h, 64h, 0, 11h, 0, 67h
db 0, 37h, 0A6h, 78h, 0, 37h, 0, 67h, 0
db 50h,	0A6h, 8Ch, 0, 5Dh, 0, 67h, 0, 17h
db 0D9h, 0, 1Fh, 0, 7Ah, 0, 5Ah, 0, 84h
db 0, 86h, 0, 27h, 0, 0C8h, 0, 82h, 2 dup(0)
db 3, 1, 2, 4, 5, 6, 3 dup(7), 8, 9, 0Ah
db 0, 2, 3, 1, 4, 5, 6,	7, 0Ah,	0Bh, 0Ch
db 2 dup(0), 0BEh, 0, 2Ch, 0, 0BEh, 0, 33h
db 0, 0BEh, 0, 3Ah, 0, 0BEh, 0,	41h, 0,	0BEh
db 0, 48h, 0, 0BEh, 0, 4Fh, 0, 0BEh, 0,	56h
db 0, 0BEh, 0, 72h, 0, 0BEh, 0,	79h, 0,	0BEh
db 0, 80h, 0, 2	dup(0FFh), 2 dup(0), 56h
db 0E9h, 1, 0, 5Ah, 0E9h, 2, 0,	5Eh, 0E9h
db 3, 0, 62h, 0E9h, 4, 0, 66h, 0E9h, 5,	0
db 6Ah,	0E9h, 8, 0, 0DDh, 0EFh,	9, 0, 4Eh
db 0F0h, 1Bh, 0, 6Eh, 0E9h, 23h, 0, 72h
db 0E9h, 24h, 0, 76h, 0E9h, 2 dup(0FFh)
db 1, 0, 10h, 0, 5Ch, 0, 9Fh, 0, 0E4h, 0
db 0C8h, 0, 0FEh, 0F1h,	2 dup(0), 54h, 41h
db 42h,	4Ch, 41h, 54h, 2Eh, 42h, 49h, 4Eh
db 3 dup(0), 44h, 4Eh, 43h, 48h, 41h, 52h
db 2Eh,	42h, 49h, 4Eh, 3 dup(0), 44h, 4Eh
db 43h,	48h, 41h, 52h, 32h, 2Eh, 42h, 49h
db 4Eh,	3 dup(0), 44h, 49h, 41h, 4Ch, 4Fh
db 47h,	55h, 45h, 2Eh, 48h, 53h, 51h, 3	dup(0)
db 56h,	45h, 52h, 2Eh, 42h, 49h, 4Eh, 3	dup(0)
db 53h,	49h, 45h, 54h, 2Eh, 53h, 41h, 4Ch
db 3 dup(0), 50h, 41h, 4Ch, 41h, 43h, 45h
db 2Eh,	53h, 41h, 4Ch, 3 dup(0), 56h, 49h
db 4Ch,	47h, 2Eh, 53h, 41h, 4Ch, 3 dup(0)
db 48h,	41h, 52h, 4Bh, 2Eh, 53h, 41h, 4Ch
db 3 dup(0), 47h, 4Ch, 4Fh, 42h, 44h, 41h
db 54h,	41h, 2Eh, 48h, 53h, 51h, 3 dup(0)
db 50h,	48h, 52h, 41h, 53h, 45h, 2 dup(31h)
db 2Eh,	48h, 53h, 51h, 3 dup(0), 50h, 48h
db 52h,	41h, 53h, 45h, 32h, 31h, 2Eh, 48h
db 53h,	51h, 3 dup(0), 50h, 48h, 52h, 41h
db 53h,	45h, 33h, 31h, 2Eh, 48h, 53h, 51h
db 3 dup(0), 50h, 48h, 52h, 41h, 53h, 45h
db 34h,	31h, 2Eh, 48h, 53h, 51h, 3 dup(0)
db 50h,	48h, 52h, 41h, 53h, 45h, 35h, 31h
db 2Eh,	48h, 53h, 51h, 3 dup(0), 50h, 48h
db 52h,	41h, 53h, 45h, 36h, 31h, 2Eh, 48h
db 53h,	51h, 3 dup(0), 50h, 48h, 52h, 41h
db 53h,	45h, 37h, 31h, 2Eh, 48h, 53h, 51h
db 3 dup(0), 50h, 48h, 52h, 41h, 53h, 45h
db 31h,	32h, 2Eh, 48h, 53h, 51h, 3 dup(0)
db 50h,	48h, 52h, 41h, 53h, 45h, 2 dup(32h)
db 2Eh,	48h, 53h, 51h, 3 dup(0), 50h, 48h
db 52h,	41h, 53h, 45h, 33h, 32h, 2Eh, 48h
db 53h,	51h, 3 dup(0), 50h, 48h, 52h, 41h
db 53h,	45h, 34h, 32h, 2Eh, 48h, 53h, 51h
db 3 dup(0), 50h, 48h, 52h, 41h, 53h, 45h
db 35h,	32h, 2Eh, 48h, 53h, 51h, 3 dup(0)
db 50h,	48h, 52h, 41h, 53h, 45h, 36h, 32h
db 2Eh,	48h, 53h, 51h, 3 dup(0), 50h, 48h
db 52h,	41h, 53h, 45h, 37h, 32h, 2Eh, 48h
db 53h,	51h, 3 dup(0), 43h, 4Fh, 2 dup(4Dh)
db 41h,	4Eh, 44h, 31h, 2Eh, 48h, 53h, 51h
db 3 dup(0), 43h, 4Fh, 2 dup(4Dh), 41h,	4Eh
db 44h,	32h, 2Eh, 48h, 53h, 51h, 3 dup(0)
db 43h,	4Fh, 2 dup(4Dh), 41h, 4Eh, 44h,	33h
db 2Eh,	48h, 53h, 51h, 3 dup(0), 43h, 4Fh
db 2 dup(4Dh), 41h, 4Eh, 44h, 34h, 2Eh,	48h
db 53h,	51h, 3 dup(0), 43h, 4Fh, 2 dup(4Dh)
db 41h,	4Eh, 44h, 35h, 2Eh, 48h, 53h, 51h
db 3 dup(0), 43h, 4Fh, 2 dup(4Dh), 41h,	4Eh
db 44h,	36h, 2Eh, 48h, 53h, 51h, 3 dup(0)
db 43h,	4Fh, 2 dup(4Dh), 41h, 4Eh, 44h,	37h
db 2Eh,	48h, 53h, 51h, 0, 1, 0,	44h, 4Eh
db 56h,	47h, 41h, 2Eh, 48h, 53h, 51h, 0
db 1, 0, 44h, 4Eh, 33h,	38h, 36h, 2Eh, 48h
db 53h,	51h, 0,	1, 0, 44h, 4Eh,	50h, 43h
db 53h,	2Eh, 48h, 53h, 51h, 0, 1, 0, 44h
db 4Eh,	41h, 44h, 4Ch, 2Eh, 48h, 53h, 51h
db 0, 1, 0, 44h, 4Eh, 41h, 44h,	50h, 2Eh
db 48h,	53h, 51h, 0, 1,	0, 44h,	4Eh, 41h
db 44h,	47h, 2Eh, 48h, 53h, 51h, 0, 1, 0
db 44h,	4Eh, 4Dh, 49h, 44h, 2Eh, 48h, 53h
db 51h,	0, 1, 0, 44h, 4Eh, 50h,	43h, 53h
db 32h,	2Eh, 48h, 53h, 51h, 0, 1, 0, 44h
db 4Eh,	53h, 44h, 42h, 2Eh, 48h, 53h, 51h
db 0, 1, 0, 44h, 4Eh, 53h, 42h,	50h, 2Eh
db 48h,	53h, 51h, 0, 1,	0, 43h,	4Fh, 4Eh
db 44h,	49h, 54h, 2Eh, 48h, 53h, 51h, 0
db 1, 0, 4Dh, 41h, 50h,	2Eh, 48h, 53h, 51h
db 0, 0Dh, 5, 49h, 43h,	4Fh, 4Eh, 45h, 53h
db 2Eh,	48h, 53h, 51h, 0, 3Dh, 4, 46h, 52h
db 45h,	53h, 4Bh, 2Eh, 48h, 53h, 51h, 0
db 9Dh,	4, 4Ch,	45h, 54h, 4Fh, 2Eh, 48h
db 53h,	51h, 0,	99h, 6,	4Ah, 45h, 2 dup(53h)
db 2Eh,	48h, 53h, 51h, 0, 96h, 5, 48h, 41h
db 57h,	41h, 2Eh, 48h, 53h, 51h, 0, 5Dh
db 7, 49h, 44h,	41h, 48h, 2Eh, 48h, 53h
db 51h,	0, 0C3h, 6, 47h, 55h, 52h, 4Eh,	2Eh
db 48h,	53h, 51h, 0, 0C6h, 6, 53h, 54h,	49h
db 4Ch,	2Eh, 48h, 53h, 51h, 0, 69h, 9, 4Bh
db 59h,	4Eh, 45h, 2Eh, 48h, 53h, 51h, 0
db 71h,	5, 43h,	48h, 41h, 4Eh, 2Eh, 48h
db 53h,	51h, 0,	51h, 7,	48h, 41h, 52h, 41h
db 2Eh,	48h, 53h, 51h, 0, 0A8h,	5, 42h,	41h
db 52h,	4Fh, 2Eh, 48h, 53h, 51h, 0, 0DBh
db 8, 46h, 45h,	59h, 44h, 2Eh, 48h, 53h
db 51h,	0, 9Ch,	9, 45h,	4Dh, 50h, 52h, 2Eh
db 48h,	53h, 51h, 0, 82h, 6, 48h, 41h, 52h
db 4Bh,	2Eh, 48h, 53h, 51h, 0, 0C9h, 5,	53h
db 4Dh,	55h, 47h, 2Eh, 48h, 53h, 51h, 0
db 0F1h, 0Dh, 46h, 52h,	4Dh, 31h, 2Eh, 48h
db 53h,	51h, 0,	0B0h, 0Ch, 46h,	52h, 4Dh
db 32h,	2Eh, 48h, 53h, 51h, 0, 3, 0Ah, 46h
db 52h,	4Dh, 33h, 2Eh, 48h, 53h, 51h, 0
db 0D4h, 1, 47h, 45h, 4Eh, 45h,	52h, 49h
db 43h,	2Eh, 48h, 53h, 51h, 0, 9Dh, 3, 50h
db 52h,	4Fh, 55h, 47h, 45h, 2Eh, 48h, 53h
db 51h,	0, 35h,	4, 43h,	4Fh, 2 dup(4Dh)
db 2Eh,	48h, 53h, 51h, 0, 86h, 2, 45h, 51h
db 55h,	49h, 2Eh, 48h, 53h, 51h, 0, 70h
db 4, 42h, 41h,	4Ch, 43h, 4Fh, 4Eh, 2Eh
db 48h,	53h, 51h, 0, 1Eh, 4, 43h, 4Fh, 2 dup(52h)
db 2Eh,	48h, 53h, 51h, 0, 66h, 7, 50h, 4Fh
db 52h,	2Eh, 48h, 53h, 51h, 0, 7, 0Ah, 53h
db 49h,	45h, 54h, 31h, 2Eh, 48h, 53h, 51h
db 0, 0Fh, 7, 58h, 50h,	4Ch, 41h, 49h, 4Eh
db 39h,	2Eh, 48h, 53h, 51h, 0, 4, 0Ah, 6Ch
db 69h,	62h, 72h, 65h, 0, 0A7h,	5, 42h,	55h
db 4Eh,	4Bh, 2Eh, 48h, 53h, 51h, 0, 0D2h
db 5, 46h, 49h,	4Eh, 41h, 4Ch, 2Eh, 48h
db 53h,	51h, 0,	74h, 6,	53h, 45h, 2 dup(52h)
db 45h,	2Eh, 48h, 53h, 51h, 0, 0D6h, 5,	42h
db 4Fh,	54h, 41h, 2Eh, 48h, 53h, 51h, 0
db 0E3h, 0, 50h, 41h, 4Ch, 50h,	4Ch, 41h
db 4Eh,	2Eh, 48h, 53h, 51h, 0, 51h, 2, 53h
db 55h,	4Eh, 2Eh, 48h, 53h, 51h, 0, 75h
db 9, 56h, 49h,	53h, 2Eh, 48h, 53h, 51h
db 0, 0C8h, 1, 4Fh, 52h, 4Eh, 59h, 50h,	41h
db 4Eh,	2Eh, 48h, 53h, 51h, 0, 0AAh, 5,	4Fh
db 4Eh,	4Dh, 41h, 50h, 2Eh, 48h, 53h, 51h
db 0, 0C2h, 5, 50h, 45h, 52h, 53h, 2Eh,	48h
db 53h,	51h, 0,	24h, 1,	43h, 48h, 41h, 4Eh
db 4Bh,	49h, 2 dup(53h), 2Eh, 48h, 53h,	51h
db 0, 9, 3, 53h, 4Bh, 59h, 2Eh,	48h, 53h
db 51h,	0, 22h,	4, 53h,	4Bh, 59h, 44h, 4Eh
db 2Eh,	48h, 53h, 51h, 0, 64h, 4, 4Fh, 52h
db 4Eh,	59h, 54h, 4Bh, 2Eh, 48h, 53h, 51h
db 0, 7Bh, 2, 41h, 2 dup(54h), 41h, 43h
db 4Bh,	2Eh, 48h, 53h, 51h, 0, 14h, 0Eh
db 53h,	54h, 41h, 52h, 53h, 2Eh, 48h, 53h
db 51h,	0, 0B7h, 2, 49h, 4Eh, 54h, 44h,	53h
db 2Eh,	48h, 53h, 51h, 0, 55h, 7, 53h, 55h
db 4Eh,	52h, 53h, 2Eh, 48h, 53h, 51h, 0
db 0A2h, 4, 50h, 41h, 55h, 4Ch,	2Eh, 48h
db 53h,	51h, 0,	0BDh, 0Bh, 42h,	41h, 43h
db 4Bh,	2Eh, 48h, 53h, 51h, 0, 0AFh, 2,	4Dh
db 4Fh,	49h, 53h, 2Eh, 48h, 53h, 51h, 0
db 19h,	0Ah, 42h, 2 dup(4Fh), 4Bh, 2Eh,	48h
db 53h,	51h, 0,	0F5h, 0, 4Fh, 52h, 4Eh,	59h
db 2Eh,	48h, 53h, 51h, 0, 3Ch, 1, 4Fh, 52h
db 4Eh,	59h, 43h, 41h, 42h, 2Eh, 48h, 53h
db 51h,	0, 0D4h, 1, 6Ch, 69h, 62h, 72h,	65h
db 2Eh,	48h, 53h, 51h, 0, 2Ah, 3, 6Ch, 69h
db 62h,	72h, 65h, 2Eh, 48h, 53h, 51h, 2	dup(0)
db 6, 6Ch, 69h,	62h, 72h, 65h, 2Eh, 48h
db 53h,	51h, 0,	0DDh, 6, 6Ch, 69h, 62h,	72h
db 65h,	0, 5Bh,	1, 56h,	45h, 52h, 2Eh, 48h
db 53h,	51h, 0,	64h, 0Ch, 4Dh, 41h, 50h
db 32h,	2Eh, 48h, 53h, 51h, 0, 0Eh, 5, 4Dh
db 49h,	2 dup(52h), 4Fh, 52h, 2Eh, 48h,	53h
db 51h,	0, 1Ch,	6, 44h,	53h, 30h, 2Eh, 48h
db 53h,	51h, 0,	38h, 5,	44h, 53h, 31h, 2Eh
db 48h,	53h, 51h, 0, 74h, 5, 44h, 53h, 32h
db 2Eh,	48h, 53h, 51h, 0, 3Ah, 6, 44h, 53h
db 33h,	2Eh, 48h, 53h, 51h, 0, 34h, 6, 44h
db 53h,	34h, 2Eh, 48h, 53h, 51h, 0, 2Ah
db 3, 6Ch, 69h,	62h, 72h, 65h, 0, 55h, 5
db 44h,	4Eh, 32h, 30h, 2Eh, 48h, 53h, 51h
db 0, 0CDh, 6, 44h, 4Eh, 32h, 31h, 2Eh,	48h
db 53h,	51h, 0,	0E4h, 7, 44h, 4Eh, 2 dup(32h)
db 2Eh,	48h, 53h, 51h, 0, 0EAh,	7, 44h,	4Eh
db 32h,	33h, 2Eh, 48h, 53h, 51h, 0, 0B8h
db 8, 44h, 4Eh,	32h, 34h, 2Eh, 48h, 53h
db 51h,	0, 8Eh,	6, 44h,	4Eh, 32h, 35h, 2Eh
db 48h,	53h, 51h, 0, 9,	5, 44h,	4Eh, 32h
db 36h,	2Eh, 48h, 53h, 51h, 0, 31h, 6, 44h
db 4Eh,	32h, 37h, 2Eh, 48h, 53h, 51h, 0
db 0DDh, 8, 44h, 4Eh, 32h, 38h,	2Eh, 48h
db 53h,	51h, 0,	46h, 6,	44h, 4Eh, 32h, 39h
db 2Eh,	48h, 53h, 51h, 0, 0FFh,	6, 44h,	4Eh
db 33h,	30h, 2Eh, 48h, 53h, 51h, 0, 2Ah
db 7, 44h, 4Eh,	33h, 31h, 2Eh, 48h, 53h
db 51h,	0, 91h,	6, 44h,	4Eh, 33h, 32h, 2Eh
db 48h,	53h, 51h, 0, 97h, 6, 44h, 4Eh, 2 dup(33h)
db 2Eh,	48h, 53h, 51h, 0, 0B7h,	6, 44h,	4Eh
db 33h,	34h, 2Eh, 48h, 53h, 51h, 0, 0CDh
db 4, 44h, 4Eh,	33h, 35h, 2Eh, 48h, 53h
db 51h,	0, 0EFh, 5, 44h, 4Eh, 33h, 36h,	2Eh
db 48h,	53h, 51h, 0, 6,	5, 44h,	4Eh, 33h
db 37h,	2Eh, 48h, 53h, 51h, 0, 51h, 6, 44h
db 4Eh,	33h, 38h, 2Eh, 48h, 53h, 51h, 0
db 3Eh,	4, 4Dh,	49h, 58h, 52h, 2Eh, 48h
db 53h,	51h, 0,	8Eh, 6,	49h, 4Eh, 54h, 30h
db 32h,	2Eh, 48h, 53h, 51h, 0, 7Ch, 6, 49h
db 4Eh,	54h, 30h, 34h, 2Eh, 48h, 53h, 51h
db 0, 38h, 7, 49h, 4Eh,	54h, 30h, 35h, 2Eh
db 48h,	53h, 51h, 0, 0E1h, 6, 49h, 4Eh,	54h
db 30h,	36h, 2Eh, 48h, 53h, 51h, 0, 3Ah
db 7, 49h, 4Eh,	54h, 30h, 37h, 2Eh, 48h
db 53h,	51h, 0,	0DEh, 6, 49h, 4Eh, 54h,	30h
db 38h,	2Eh, 48h, 53h, 51h, 0, 6Ah, 6, 49h
db 4Eh,	54h, 30h, 39h, 2Eh, 48h, 53h, 51h
db 0, 0B8h, 8, 49h, 4Eh, 54h, 31h, 30h,	2Eh
db 48h,	53h, 51h, 0, 7Ch, 8, 49h, 4Eh, 54h
db 2 dup(31h), 2Eh, 48h, 53h, 51h, 0, 0CAh
db 5, 49h, 4Eh,	54h, 31h, 33h, 2Eh, 48h
db 53h,	51h, 0,	0CCh, 2, 49h, 4Eh, 54h,	31h
db 34h,	2Eh, 48h, 53h, 51h, 0, 38h, 4, 49h
db 4Eh,	54h, 31h, 35h, 2Eh, 48h, 53h, 51h
db 0, 42h, 6, 50h, 41h,	4Ch, 41h, 49h, 53h
db 2Eh,	48h, 53h, 51h, 0, 5Fh, 9, 4Dh, 4Eh
db 54h,	31h, 2Eh, 4Ch, 4Fh, 50h, 0, 60h
db 9, 4Dh, 4Eh,	54h, 32h, 2Eh, 4Ch, 4Fh
db 50h,	0, 48h,	0Eh, 4Dh, 4Eh, 54h, 33h
db 2Eh,	4Ch, 4Fh, 50h, 0, 39h, 0Eh, 4Dh
db 4Eh,	54h, 34h, 2Eh, 4Ch, 4Fh, 50h, 0
db 0B6h, 8, 53h, 49h, 45h, 54h,	2Eh, 4Ch
db 4Fh,	50h, 0,	8Eh, 8,	50h, 41h, 4Ch, 41h
db 43h,	45h, 2Eh, 4Ch, 4Fh, 50h, 0, 0D2h
db 4, 49h, 52h,	55h, 4Ch, 31h, 2Eh, 48h
db 53h,	51h, 0,	35h, 5,	49h, 52h, 55h, 4Ch
db 32h,	2Eh, 48h, 53h, 51h, 0, 0A8h, 5,	49h
db 52h,	55h, 4Ch, 33h, 2Eh, 48h, 53h, 51h
db 0, 0D2h, 4, 49h, 52h, 55h, 4Ch, 34h,	2Eh
db 48h,	53h, 51h, 0, 4Dh, 5, 49h, 52h, 55h
db 4Ch,	35h, 2Eh, 48h, 53h, 51h, 0, 62h
db 5, 49h, 52h,	55h, 4Ch, 36h, 2Eh, 48h
db 53h,	51h, 0,	0D0h, 4, 49h, 52h, 55h,	4Ch
db 37h,	2Eh, 48h, 53h, 51h, 0, 0D0h, 4,	49h
db 52h,	55h, 4Ch, 38h, 2Eh, 48h, 53h, 51h
db 0, 0D0h, 4, 49h, 52h, 55h, 4Ch, 39h,	2Eh
db 48h,	53h, 51h, 0, 0F3h, 6, 44h, 50h,	31h
db 2Eh,	48h, 53h, 51h, 0, 9Ch, 7, 44h, 50h
db 30h,	2Eh, 48h, 53h, 51h, 0, 5Ch, 6, 44h
db 50h,	32h, 2Eh, 48h, 53h, 51h, 0, 0E7h
db 3, 44h, 50h,	33h, 2Eh, 48h, 53h, 51h
db 0, 3Fh, 7, 44h, 46h,	31h, 2Eh, 48h, 53h
db 51h,	0, 47h,	7, 44h,	46h, 32h, 2Eh, 48h
db 53h,	51h, 0,	8Dh, 7,	44h, 46h, 33h, 2Eh
db 48h,	53h, 51h, 0, 0D9h, 5, 44h, 46h,	34h
db 2Eh,	48h, 53h, 51h, 0, 1Dh, 7, 56h, 49h
db 4Ch,	31h, 2Eh, 48h, 53h, 51h, 0, 0C0h
db 6, 56h, 49h,	4Ch, 32h, 2Eh, 48h, 53h
db 51h,	0, 4Fh,	5, 56h,	49h, 4Ch, 33h, 2Eh
db 48h,	53h, 51h, 0, 12h, 6, 56h, 49h, 4Ch
db 34h,	2Eh, 48h, 53h, 51h, 0, 0F2h, 6,	56h
db 49h,	4Ch, 35h, 2Eh, 48h, 53h, 51h, 0
db 8Ah,	5, 56h,	49h, 4Ch, 36h, 2Eh, 48h
db 53h,	51h, 0,	7, 8, 44h, 56h,	31h, 2Eh
db 48h,	53h, 51h, 0, 94h, 7, 44h, 56h, 32h
db 2Eh,	48h, 53h, 51h, 0, 2 dup(6), 44h
db 56h,	33h, 2Eh, 48h, 53h, 51h, 0, 0C2h
db 8, 44h, 56h,	34h, 2Eh, 48h, 53h, 51h
db 0, 0A0h, 7, 44h, 48h, 30h, 2Eh, 48h,	53h
db 51h,	0, 7Ch,	6, 44h,	48h, 31h, 2Eh, 48h
db 53h,	51h, 0,	1Eh, 8,	44h, 48h, 32h, 2Eh
db 48h,	53h, 51h, 0, 0E8h, 8, 44h, 48h,	33h
db 2Eh,	48h, 53h, 51h, 0, 0E5h,	8, 56h,	47h
db 30h,	31h, 2Eh, 48h, 53h, 51h, 0, 31h
db 8, 56h, 47h,	30h, 32h, 2Eh, 48h, 53h
db 51h,	0, 78h,	8, 56h,	47h, 30h, 33h, 2Eh
db 48h,	53h, 51h, 0, 6Fh, 9, 56h, 47h, 30h
db 34h,	2Eh, 48h, 53h, 51h, 0, 86h, 9, 56h
db 47h,	30h, 35h, 2Eh, 48h, 53h, 51h, 0
db 0AEh, 7, 56h, 47h, 30h, 36h,	2Eh, 48h
db 53h,	51h, 0,	0Fh, 8,	56h, 47h, 30h, 37h
db 2Eh,	48h, 53h, 51h, 0, 0F7h,	8, 56h,	47h
db 30h,	38h, 2Eh, 48h, 53h, 51h, 0, 10h
db 8, 56h, 47h,	30h, 39h, 2Eh, 48h, 53h
db 51h,	0, 4Eh,	8, 56h,	47h, 31h, 30h, 2Eh
db 48h,	53h, 51h, 0, 98h, 2Bh, 0A5h, 2Bh
db 0B1h, 2Bh, 0BCh, 2Bh, 0C7h, 2Bh, 0D2h
db 2Bh,	0DDh, 2Bh, 0E8h, 2Bh, 0F3h, 2Bh
db 0FEh, 2Bh, 9, 2Ch, 14h, 2Ch,	1Fh, 2Ch
db 2Ah,	2Ch, 35h, 2Ch, 40h, 2Ch, 4Bh, 2Ch
db 56h,	2Ch, 61h, 2Ch, 6Ch, 2Ch, 7Ah, 2Ch
db 87h,	2Ch, 92h, 2Ch, 9Dh, 2Ch, 0AAh, 2Ch
db 0B5h, 2Ch, 0BFh, 2Ch, 0CBh, 2Ch, 0D9h
db 2Ch,	0E1h, 2Ch, 0ECh, 2Ch, 0F8h, 2Ch
db 4, 2Dh, 0Fh,	2Dh, 1Dh, 2Dh, 27h, 2Dh
db 31h,	2Dh, 3Fh, 2Dh, 4Bh, 2Dh, 56h, 2Dh
db 65h,	2Dh, 6Fh, 2Dh, 7Bh, 2Dh, 88h, 2Dh
db 95h,	2Dh, 0A1h, 2Dh,	0ADh, 2Dh, 0B9h
db 2Dh,	0C4h, 2Dh, 0CFh, 2Dh, 0DAh, 2Dh
db 0E5h, 2Dh, 0F0h, 2Dh, 0FEh, 2Dh, 0Ah
db 2Eh,	16h, 2Eh, 22h, 2Eh, 2Ah, 2Eh, 34h
db 2Eh,	3Fh, 2Eh, 4Ch, 2Eh, 56h, 2Eh, 60h
db 2Eh,	6Ah, 2Eh, 74h, 2Eh, 7Eh, 2Eh, 86h
db 2Eh,	91h, 2Eh, 9Ch, 2Eh, 0A7h, 2Eh, 0B2h
db 2Eh,	0BDh, 2Eh, 0C8h, 2Eh, 0D3h, 2Eh
db 0DEh, 2Eh, 0E9h, 2Eh, 0F4h, 2Eh, 0FFh
db 2Eh,	0Ah, 2Fh, 15h, 2Fh, 20h, 2Fh, 2Bh
db 2Fh,	36h, 2Fh, 41h, 2Fh, 4Ch, 2Fh, 57h
db 2Fh,	62h, 2Fh, 6Eh, 2Fh, 7Ah, 2Fh, 86h
db 2Fh,	92h, 2Fh, 9Eh, 2Fh, 0AAh, 2Fh, 0B6h
db 2Fh,	0C2h, 2Fh, 0CEh, 2Fh, 0DAh, 2Fh
db 0E6h, 2Fh, 0F2h, 2Fh, 0FFh, 2Fh, 0Ah
db 30h,	15h, 30h, 20h, 30h, 2Bh, 30h, 36h
db 30h,	43h, 30h, 4Fh, 30h, 5Bh, 30h, 67h
db 30h,	73h, 30h, 7Fh, 30h, 8Bh, 30h, 97h
db 30h,	0A3h, 30h, 0AFh, 30h, 0B9h, 30h
db 0C3h, 30h, 0CDh, 30h, 0D7h, 30h, 0E1h
db 30h,	0EBh, 30h, 0F5h, 30h, 0FFh, 30h
db 0Ah,	31h, 15h, 31h, 20h, 31h, 2Bh, 31h
db 36h,	31h, 41h, 31h, 4Bh, 31h, 55h, 31h
db 5Fh,	31h, 69h, 31h, 73h, 31h, 7Dh, 31h
db 87h,	31h, 91h, 31h, 9Ch, 31h, 0A7h, 31h
db 0B2h, 31h, 0BDh, 31h, 0C8h, 31h, 0D3h
db 31h,	0DEh, 31h, 0E9h, 31h, 0F4h, 31h
db 0BEh, 29h, 0CDh, 29h, 0DCh, 29h, 0EBh
db 29h,	0FAh, 29h, 9, 2Ah, 18h,	2Ah, 27h
db 2Ah,	36h, 2Ah, 45h, 2Ah, 54h, 2Ah, 63h
db 2Ah,	72h, 2Ah, 81h, 2Ah, 90h, 2Ah, 90h
db 29h,	9Bh, 29h, 0A8h,	29h, 0B3h, 29h,	0D1h
db 36h,	0DFh, 36h, 0EBh, 36h, 0FAh, 36h
db 9, 37h, 17h,	37h, 25h, 37h, 33h, 37h
db 40h,	37h, 4Eh, 37h, 6Bh, 37h, 75h, 37h
db 7Fh,	37h, 89h, 37h, 93h, 37h, 9Dh, 37h
db 0A7h, 37h, 0B1h, 37h, 0BBh, 37h, 0C5h
db 37h,	0CFh, 37h, 4Fh,	29h, 5Ch, 29h, 81h
db 2Bh,	77h, 29h, 86h, 29h, 8Eh, 2Bh, 9Fh
db 2Ah,	0AEh, 2Ah, 0BDh, 2Ah, 0CCh, 2Ah
db 0DBh, 2Ah, 0EAh, 2Ah, 0F9h, 2Ah, 69h
db 29h,	8, 2Bh,	14h, 2Bh, 20h, 2Bh, 2Ch
db 2Bh,	38h, 2Bh, 44h, 2Bh, 50h, 2Bh, 5Ch
db 2Bh,	69h, 2Bh, 75h, 2Bh, 0EDh, 33h, 0F0h
db 33h,	3, 34h,	16h, 34h, 29h, 34h, 3Ch
db 34h,	4Fh, 34h, 62h, 34h, 62h, 34h, 6Fh
db 34h,	6Fh, 34h, 84h, 35h, 6Dh, 35h, 78h
db 35h,	90h, 35h, 9Ah, 35h, 7Ah, 34h, 85h
db 34h,	90h, 34h, 9Bh, 34h, 0A7h, 34h, 0B5h
db 34h,	0C2h, 34h, 0CDh, 34h, 0D9h, 34h
db 0E7h, 34h, 0F4h, 34h, 0FFh, 34h, 0Ah
db 35h,	15h, 35h, 20h, 35h, 2Bh, 35h, 36h
db 35h,	41h, 35h, 4Ch, 35h, 57h, 35h, 62h
db 35h,	3 dup(0), 21h, 12h, 44h, 46h, 4Ch
db 32h,	2Eh, 48h, 4Eh, 4Dh, 9 dup(0), 9Dh
db 10h,	4Dh, 4Eh, 54h, 31h, 2Eh, 48h, 4Eh
db 4Dh,	9 dup(0), 9Dh, 10h, 4Dh, 4Eh, 54h
db 32h,	2Eh, 48h, 4Eh, 4Dh, 9 dup(0), 9Dh
db 10h,	4Dh, 4Eh, 54h, 33h, 2Eh, 48h, 4Eh
db 4Dh,	9 dup(0), 9Dh, 10h, 4Dh, 4Eh, 54h
db 34h,	2Eh, 48h, 4Eh, 4Dh, 9 dup(0), 9Ch
db 10h,	53h, 49h, 45h, 54h, 2Eh, 48h, 4Eh
db 4Dh,	9 dup(0), 9Ch, 10h, 50h, 41h, 4Ch
db 41h,	43h, 45h, 2Eh, 48h, 4Eh, 4Dh, 2	dup(0)
db 10h,	46h, 4Fh, 52h, 54h, 2Eh, 48h, 4Eh
db 4Dh,	0, 90h,	10h, 4Dh, 54h, 47h, 31h
db 2Eh,	48h, 4Eh, 4Dh, 0, 90h, 10h, 4Dh
db 54h,	47h, 32h, 2Eh, 48h, 4Eh, 4Dh, 0
db 90h,	10h, 4Dh, 54h, 47h, 33h, 2Eh, 48h
db 4Eh,	4Dh, 0,	10h, 19h, 50h, 4Ch, 41h
db 4Eh,	54h, 2Eh, 48h, 4Eh, 4Dh, 0, 40h
db 7, 43h, 52h,	45h, 44h, 49h, 54h, 53h
db 2Eh,	48h, 4Eh, 4Dh, 2 dup(0), 10h, 56h
db 49h,	52h, 47h, 49h, 4Eh, 2Eh, 48h, 4Eh
db 4Dh,	2 dup(0), 11h, 43h, 52h, 59h, 4Fh
db 2Eh,	48h, 4Eh, 4Dh, 2 dup(0), 4, 43h
db 52h,	59h, 4Fh, 32h, 2Eh, 48h, 4Eh, 4Dh
db 2 dup(0), 16h, 50h, 52h, 45h, 53h, 45h
db 4Eh,	54h, 2Eh, 48h, 4Eh, 4Dh, 0, 80h
db 10h,	49h, 52h, 55h, 4Ch, 41h, 4Eh, 2Eh
db 48h,	4Eh, 4Dh, 0, 80h, 10h, 53h, 45h
db 51h,	41h, 2Eh, 48h, 4Eh, 4Dh, 0, 80h
db 10h,	53h, 45h, 51h, 4Ch, 2Eh, 48h, 4Eh
db 4Dh,	0, 80h,	10h, 53h, 45h, 51h, 4Dh
db 2Eh,	48h, 4Eh, 4Dh, 0, 80h, 10h, 53h
db 45h,	51h, 50h, 2Eh, 48h, 4Eh, 4Dh, 0
db 80h,	10h, 53h, 45h, 51h, 47h, 2Eh, 48h
db 4Eh,	4Dh, 0,	80h, 10h, 53h, 45h, 51h
db 4Ah,	2Eh, 48h, 4Eh, 4Dh, 0, 80h, 10h
db 53h,	45h, 51h, 4Bh, 2Eh, 48h, 4Eh, 4Dh
db 0, 80h, 10h,	53h, 45h, 51h, 49h, 2Eh
db 48h,	4Eh, 4Dh, 0, 80h, 10h, 53h, 45h
db 51h,	44h, 2Eh, 48h, 4Eh, 4Dh, 0, 80h
db 10h,	53h, 45h, 51h, 4Eh, 2Eh, 48h, 4Eh
db 4Dh,	0, 80h,	10h, 53h, 45h, 51h, 52h
db 2Eh,	48h, 4Eh, 4Dh, 2 dup(0), 42h, 44h
db 45h,	41h, 44h, 2Eh, 48h, 4Eh, 4Dh, 2	dup(0)
db 0Ah,	44h, 45h, 41h, 44h, 32h, 2Eh, 48h
db 4Eh,	4Dh, 2 dup(0), 0Ah, 44h, 45h, 41h
db 44h,	33h, 2Eh, 48h, 4Eh, 4Dh, 2 dup(0)
db 19h,	56h, 45h, 52h, 2Eh, 48h, 4Eh, 4Dh
db 2 dup(0), 0Ah, 54h, 49h, 54h, 4Ch, 45h
db 2Eh,	48h, 4Eh, 4Dh, 3 dup(0), 77h, 0
db 89h,	0, 8Ah,	0, 0ADh, 0, 0BAh, 0, 0EEh
db 0, 0F8h, 0, 0Dh, 1, 0Eh, 1, 31h, 1, 3Ah
db 1, 52h, 1, 5Ch, 1, 66h, 1, 68h, 1, 84h
db 1, 85h, 1, 9Fh, 1, 0A9h, 1, 0CCh, 1,	0D6h
db 1, 6, 2, 10h, 2, 3Bh, 2, 40h, 2, 5Ch
db 2, 5Dh, 2, 93h, 2, 94h, 2, 0ADh, 2, 0B5h
db 2, 0E8h, 2, 0EAh, 2,	0F5h, 2, 0F9h, 2
db 32h,	3, 3Bh,	3, 62h,	3, 6Bh,	3, 0B1h
db 3, 0B6h, 3, 0E8h, 3,	0F4h, 3, 12h, 4
db 14h,	4, 33h,	4, 3Dh,	4, 5Fh,	4, 60h,	4
db 76h,	4, 7Bh,	4, 91h,	4, 94h,	4, 0BEh
db 4, 0CAh, 4, 0EBh, 4,	0F2h, 4, 2 dup(5)
db 0Eh,	5, 23h,	5, 2 dup(0FFh),	0FCh, 0CEh
db 4Eh,	6Fh, 74h, 20h, 65h, 6Eh, 6Fh, 75h
db 67h,	68h, 20h, 73h, 74h, 61h, 6Eh, 64h
db 61h,	72h, 64h, 20h, 6Dh, 65h, 6Dh, 6Fh
db 72h,	79h, 20h, 66h, 6Fh, 72h, 20h, 73h
db 6Fh,	75h, 6Eh, 64h, 73h, 2 dup(0), 4Eh
db 6Fh,	74h, 20h, 65h, 6Eh, 6Fh, 75h, 67h
db 68h,	20h, 73h, 74h, 61h, 6Eh, 64h, 61h
db 72h,	64h, 20h, 6Dh, 65h, 6Dh, 6Fh, 72h
db 79h,	20h, 66h, 6Fh, 72h, 20h, 6Dh, 75h
db 73h,	69h, 63h, 2Eh, 20h, 54h, 72h, 79h
db 20h,	77h, 69h, 74h, 68h, 20h, 45h, 4Dh
db 53h,	20h, 65h, 78h, 74h, 72h, 61h, 20h
db 6Dh,	65h, 6Dh, 6Fh, 72h, 79h, 2Eh, 2	dup(0)
db 4Eh,	6Fh, 74h, 20h, 65h, 6Eh, 6Fh, 75h
db 67h,	68h, 20h, 73h, 74h, 61h, 6Eh, 64h
db 61h,	72h, 64h, 20h, 6Dh, 65h, 6Dh, 6Fh
db 72h,	79h, 20h, 74h, 6Fh, 20h, 72h, 75h
db 6Eh,	20h, 44h, 75h, 6Eh, 65h, 0, 46h
db 69h,	6Ch, 65h, 20h, 6Eh, 6Fh, 74h, 20h
db 66h,	6Fh, 75h, 6Eh, 64h, 3Ah, 0Dh dup(20h)
db 3 dup(0), 53h, 45h, 4Bh, 45h, 4Eh, 43h
db 45h,	2Eh, 48h, 53h, 51h, 3 dup(0), 57h
db 41h,	54h, 45h, 52h, 2Eh, 48h, 53h, 51h
db 3 dup(0), 57h, 4Fh, 52h, 4Dh, 53h, 55h
db 49h,	54h, 2Eh, 48h, 53h, 51h, 3 dup(0)
db 57h,	4Fh, 52h, 4Dh, 49h, 4Eh, 54h, 52h
db 2Eh,	48h, 53h, 51h, 3 dup(0), 57h, 41h
db 52h,	53h, 4Fh, 4Eh, 47h, 2Eh, 48h, 53h
db 51h,	3 dup(0), 4Dh, 4Fh, 52h, 4Eh, 49h
db 4Eh,	47h, 2Eh, 48h, 53h, 51h, 3 dup(0)
db 53h,	49h, 45h, 54h, 43h, 48h, 4Dh, 2Eh
db 48h,	53h, 51h, 3 dup(0), 42h, 41h, 47h
db 44h,	41h, 44h, 2Eh, 48h, 53h, 51h, 3	dup(0)
db 41h,	2 dup(52h), 41h, 4Bh, 49h, 53h,	2Eh
db 48h,	53h, 51h, 3 dup(0), 43h, 52h, 59h
db 4Fh,	4Dh, 55h, 53h, 2Eh, 48h, 53h, 51h
db 0, 2	dup(82h), 1, 82h, 84h, 4, 2 dup(85h)
db 87h,	88h, 86h, 89h, 2 dup(83h), 0FFh
db 2 dup(0), 53h, 4Eh, 31h, 2Eh, 48h, 53h
db 51h,	3 dup(0), 53h, 4Eh, 32h, 2Eh, 48h
db 53h,	51h, 3 dup(0), 53h, 4Eh, 33h, 2Eh
db 48h,	53h, 51h, 3 dup(0), 53h, 4Eh, 34h
db 2Eh,	48h, 53h, 51h, 3 dup(0), 53h, 4Eh
db 35h,	2Eh, 56h, 4Fh, 43h, 3 dup(0), 53h
db 4Eh,	36h, 2Eh, 48h, 53h, 51h, 3 dup(0)
db 53h,	4Eh, 37h, 2Eh, 56h, 4Fh, 43h, 3	dup(0)
db 53h,	4Eh, 38h, 2Eh, 56h, 4Fh, 43h, 3	dup(0)
db 53h,	4Eh, 39h, 2Eh, 56h, 4Fh, 43h, 3	dup(0)
db 53h,	4Eh, 41h, 2Eh, 48h, 53h, 51h, 3	dup(0)
db 46h,	52h, 45h, 51h, 2Eh, 48h, 53h, 51h
db 0, 50h, 46h,	5Ch, 50h, 46h, 2 dup(30h)
db 31h,	49h, 20h, 2Eh, 56h, 4Fh, 43h, 0
db 64h,	75h, 6Eh, 65h, 2Eh, 64h, 61h, 74h
db 0, 64h, 6Eh,	6Dh, 61h, 6Ah, 31h, 2 dup(0)
db 9, 6, 8, 1, 4, 3, 7,	5, 2, 0FFh, 9, 6
db 8, 1, 4, 3, 7, 5, 2,	0FFh, 0FAh, 37h
db 1, 9	dup(0),	28h, 9 dup(0), 11h, 38h
db 80h dup(0), 26h, 38h, 64h, 75h, 6Eh,	65h
db 33h,	37h, 73h, 30h, 2Eh, 73h, 61h, 76h
db 2 dup(0), 1,	2 dup(0), 3, 1,	2 dup(0)
db 6, 1, 2 dup(0), 9, 1, 2 dup(0), 0Ch,	1
db 2 dup(0), 0Fh, 1, 2 dup(0), 12h, 1, 2 dup(0)
db 15h,	1, 2 dup(0), 18h, 1, 2 dup(0), 1Bh
db 1, 2	dup(0),	1Eh, 1,	2 dup(0), 21h, 1
db 2 dup(0), 24h, 1, 2 dup(0), 27h, 1, 2 dup(0)
db 2Ah,	1, 2 dup(0), 2Dh, 1, 2 dup(0), 30h
db 1, 2	dup(0),	33h, 1,	2 dup(0), 36h, 1
db 2 dup(0), 39h, 1, 2 dup(0), 3Ch, 1, 2 dup(0)
db 3Fh,	1, 2 dup(0), 42h, 1, 2 dup(0), 45h
db 1, 2	dup(0),	48h, 1,	2 dup(0), 4Bh, 1
db 2 dup(0), 4Eh, 1, 2 dup(0), 51h, 1, 2 dup(0)
db 54h,	1, 2 dup(0), 57h, 1, 2 dup(0), 5Ah
db 1, 2	dup(0),	5Dh, 1,	2 dup(0), 60h, 1
db 2 dup(0), 63h, 1, 2 dup(0), 66h, 1, 2 dup(0)
db 69h,	1, 2 dup(0), 6Ch, 1, 2 dup(0), 6Fh
db 1, 2	dup(0),	72h, 1,	2 dup(0), 75h, 1
db 2 dup(0), 78h, 1, 2 dup(0), 7Bh, 1, 2 dup(0)
db 7Eh,	1, 2 dup(0), 81h, 1, 2 dup(0), 84h
db 1, 2	dup(0),	87h, 1,	3 dup(0), 1, 2 dup(0)
db 3, 1, 2 dup(0), 6, 1, 2 dup(0), 9, 1
db 2 dup(0), 0Ch, 1, 2 dup(0), 0Fh, 1, 2 dup(0)
db 12h,	1, 3 dup(0), 1,	2 dup(0), 3, 1,	2 dup(0)
db 6, 1, 2 dup(0), 9, 1, 2 dup(0), 0Ch,	1
db 2 dup(0), 0Fh, 1, 2 dup(0), 12h, 1, 2 dup(0)
db 15h,	1, 12h dup(0), 38h, 11h, 301h dup(0)
seg001 ends


end start
